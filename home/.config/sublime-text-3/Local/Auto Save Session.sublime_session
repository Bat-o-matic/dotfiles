{
	"folder_history":
	[
		"/home/sam/repos/bat-o-matic/kazoo_ui",
		"/home/sam/conversant/repos/customer_migration",
		"/home/sam/code",
		"/home/sam/conversant/repos/console",
		"/home/sam/conversant/repos/kazoo/core",
		"/home/sam/conversant/repos/kazoo",
		"/home/sam/conversant/repos/kazooui",
		"/etc",
		"/home/sam/repos/conversant/kazoo_ui",
		"/home/sam/repos/conversant/kazooui",
		"/home/sam/repos/conversant/console",
		"/home/sam/repos/conversant/kazoo",
		"/home/sam/erlang",
		"/home/sam/repos/conversant/console/sites/all/modules/custom",
		"/home/sam/repos/conversant/console/tests",
		"/home/sam/repos/conversant/kazooui/whapps",
		"/home/sam/misc"
	],
	"last_version": 3059,
	"last_window_id": 101,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"first",
						"first_name"
					],
					[
						"contac",
						"contact_parameters"
					],
					[
						"WATCH",
						"WATCHDOG_INFO"
					],
					[
						"acc",
						"account"
					],
					[
						"kaz",
						"kazoo_id"
					],
					[
						"Kaz",
						"kazoo_user_sync"
					],
					[
						"db",
						"db_query	db_query"
					],
					[
						"pass",
						"password"
					],
					[
						"account_manager_is",
						"account_manager_is_account_admin"
					],
					[
						"other",
						"other_bpid"
					],
					[
						"white",
						"whitelabel_masquerade_get_masquerading_user"
					],
					[
						"conta",
						"contact_parameters"
					],
					[
						"business",
						"business_partner"
					],
					[
						"whi",
						"whitelabel_masquerade_clear_cache"
					],
					[
						"p",
						"php"
					],
					[
						"account_manager_adempiere_read",
						"account_manager_adempiere_read_business_partner"
					],
					[
						"account_manager_ad",
						"account_manager_adempiere_read_contact"
					],
					[
						"business_part",
						"business_partner_id"
					],
					[
						"account_manager_read",
						"account_manager_read_business_partner"
					],
					[
						"drupal_get_f",
						"drupal_get_form"
					],
					[
						"customer",
						"customer_number"
					],
					[
						"user_sygse",
						"kazoo_user_sync_get_business_partner_search_key"
					],
					[
						"user_sync_get",
						"user_sync_get_adempiere_business_partner_id"
					],
					[
						"glo",
						"global"
					],
					[
						"custo",
						"customer_number"
					],
					[
						"cust",
						"customer_number"
					],
					[
						"sea",
						"search"
					],
					[
						"whitelabel_domain_config_mail",
						"whitelabel_domain_config_mail_on_user_reactivate"
					],
					[
						"upd",
						"update_user"
					],
					[
						"f",
						"f	Anonymous Function"
					],
					[
						"if",
						"if	if"
					],
					[
						"conf",
						"config"
					],
					[
						"user",
						"userportal"
					],
					[
						"wink",
						"winkstart"
					],
					[
						"disc",
						"disconnect_numbers"
					],
					[
						"request",
						"requested_port_time"
					],
					[
						"port",
						"port_form_data"
					],
					[
						"req",
						"requested_port_time"
					],
					[
						"requ",
						"requested_port_time"
					],
					[
						"chec",
						"checked"
					],
					[
						"requested",
						"requested_port_time"
					],
					[
						"val",
						"val	.val()"
					],
					[
						"validation",
						"validation_errors"
					],
					[
						"field_",
						"field_ids"
					],
					[
						"fax",
						"fax_numbers"
					],
					[
						"vali",
						"validation_errors"
					],
					[
						"in",
						"inarray	$.inArray()"
					],
					[
						"valid",
						"valid_numbers"
					],
					[
						"vald",
						"validation_errors"
					],
					[
						"margin-",
						"margin-top"
					],
					[
						"numb",
						"Number"
					],
					[
						"numbers",
						"numbers_text"
					],
					[
						"field",
						"field_id"
					],
					[
						"fiel",
						"field_id"
					],
					[
						"tab",
						"tab_data"
					],
					[
						"desc",
						"descendants"
					],
					[
						"accoutn",
						"account_name"
					],
					[
						"account",
						"account_name"
					],
					[
						"each",
						"each	$.each()"
					],
					[
						"font",
						"font-size"
					],
					[
						"list",
						"list_ports"
					],
					[
						"render",
						"render_ports_manager"
					],
					[
						"fu",
						"fun	Function"
					],
					[
						"fun",
						"function"
					],
					[
						"em",
						"email"
					],
					[
						"da",
						"date"
					],
					[
						"type",
						"typeof"
					],
					[
						"port_date",
						"port_date_asap"
					],
					[
						"spl",
						"split_date"
					],
					[
						"spi",
						"split_date"
					],
					[
						"sp",
						"split_date"
					],
					[
						"date",
						"date_array"
					],
					[
						"va",
						"val	.val()"
					],
					[
						"h",
						"hide	hide"
					],
					[
						"popu",
						"popup_html"
					],
					[
						"d",
						"div	Tag"
					],
					[
						"att",
						"attachments"
					],
					[
						"subm",
						"submit_btn"
					],
					[
						"port_re",
						"port_request_failure"
					],
					[
						"al",
						"alert"
					],
					[
						"ba",
						"background-color"
					],
					[
						"email",
						"notify_email"
					],
					[
						"valida",
						"validation_errors"
					],
					[
						"port_ty",
						"port_type_dropdown"
					],
					[
						"remo",
						"removeClass	.removeClass"
					],
					[
						"ea",
						"each	$.each()"
					],
					[
						"sub",
						"submit	submit"
					],
					[
						"min",
						"min_date"
					],
					[
						"el",
						"else"
					],
					[
						"number",
						"number_data"
					],
					[
						"dele",
						"delete_port"
					],
					[
						"por",
						"port_ready"
					],
					[
						"main",
						"main_number"
					],
					[
						"pop",
						"populate_port_dialog"
					],
					[
						"get_",
						"get_port"
					],
					[
						"ports",
						"ports_manager"
					],
					[
						"create",
						"create_attachment"
					],
					[
						"crea",
						"create_number_doc"
					],
					[
						"port_t",
						"port_type_dropdown"
					],
					[
						"nu",
						"number_regex"
					],
					[
						"countr",
						"country_prefix"
					],
					[
						"count",
						"country_prefix"
					],
					[
						"current",
						"current_type"
					],
					[
						"error",
						"errors"
					],
					[
						"port_",
						"port_types"
					],
					[
						"re",
						"request"
					],
					[
						"winksta",
						"winkstart"
					],
					[
						"log",
						"logo_desc"
					],
					[
						"upload",
						"upload_icon"
					],
					[
						"form",
						"form_data"
					],
					[
						"upl",
						"upload_logo"
					],
					[
						"uplo",
						"upload_icon"
					],
					[
						"loc",
						"lock"
					],
					[
						"lock",
						"Lock"
					],
					[
						"messa",
						"Messages"
					],
					[
						"t",
						"to"
					],
					[
						"masquerade",
						"masquerade_users"
					],
					[
						"masquer",
						"masquerade_users"
					],
					[
						"arra",
						"array"
					],
					[
						"accoun",
						"account_manager_user_is_wlr_admin"
					],
					[
						"wh",
						"whitelabel_masquerade_is_wlr_admin"
					],
					[
						"res",
						"reseller"
					],
					[
						"resel",
						"resellers"
					],
					[
						"user_",
						"user_cancel	user_cancel"
					],
					[
						"whit",
						"whitelabel_masquerade_access"
					],
					[
						"whitela",
						"whitelabel_masquerade_menu"
					],
					[
						"user_ac",
						"user_access	user_access"
					],
					[
						"_mas",
						"_masquerade_can_access_user"
					]
				]
			},
			"build_system": "Packages/Makefile/Make.sublime-build",
			"command_palette":
			{
				"height": 180.0,
				"selected_items":
				[
					[
						"php",
						"Set Syntax: PHP"
					],
					[
						"pack",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						":",
						":w - Save"
					],
					[
						"pac",
						"Package Control: Install Package"
					],
					[
						"for",
						"Gherkin/Cucumber: Format"
					],
					[
						"form",
						"Gherkin/Cucumber: Format"
					],
					[
						"hook_bloc",
						"Snippet: hook_block_view_MODULE_DELTA_alter"
					],
					[
						"h_us_p",
						"Snippet: hook_user_presave"
					],
					[
						"user_pre",
						"Snippet: block_user_presave"
					],
					[
						"hook_user",
						"Snippet: hook_user_cancel"
					],
					[
						"hook_menu",
						"Snippet: hook_menu"
					],
					[
						"menu_alt",
						"Snippet: hook_menu_alter"
					],
					[
						"mail_alter",
						"Snippet: hook_mail_alter"
					],
					[
						"pc",
						"Package Control: Install Package"
					],
					[
						"set h",
						"Set Syntax: HTML"
					],
					[
						"js",
						"JSHint"
					],
					[
						"g c",
						"Git: Commit"
					],
					[
						"g ad",
						"Git: Add Current File"
					],
					[
						"git h",
						"Git: Commit history"
					],
					[
						"git",
						"Git: Toggle Annotations"
					],
					[
						"g ",
						"Git: Commit"
					],
					[
						"packa",
						"Package Control: Install Package"
					],
					[
						"git d",
						"Git: Diff All"
					],
					[
						"g",
						"Git: Commit"
					],
					[
						"gi",
						"Git: Commit"
					],
					[
						"git ",
						"Git: Commit"
					],
					[
						"g co",
						"Git: Commit"
					],
					[
						"g di c",
						"Git: Diff Current File"
					],
					[
						"g d",
						"Git: Diff All"
					],
					[
						"g di",
						"Git: Diff Staged"
					],
					[
						"gher",
						"Set Syntax: Gherkin"
					],
					[
						"fo",
						"Gherkin/Cucumber: Format"
					],
					[
						"format",
						"Gherkin/Cucumber: Format"
					],
					[
						"forma",
						"Gherkin/Cucumber: Format"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						":W",
						":w - Save"
					],
					[
						"sett",
						"Preferences: Settings - User"
					],
					[
						":p",
						"Set Syntax: Plain Text"
					],
					[
						":q",
						"Set Syntax: SQL"
					],
					[
						":ph",
						"Set Syntax: PHP"
					],
					[
						"pa",
						"Package Control: Discover Packages"
					],
					[
						"set p",
						"Set Syntax: PHP"
					],
					[
						"",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"pc ",
						"Package Control: Install Package"
					],
					[
						"sy c",
						"Set Syntax: C"
					]
				],
				"width": 458.0
			},
			"console":
			{
				"height": 139.0,
				"history":
				[
					"n",
					"jsHint",
					"jshint",
					"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) ",
					"syntax "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/wsdl/accounting.wsdl",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.webservices.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.contact.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager_configuration.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.pagination.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.bp-invoices.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.bp-subscriptions.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.callrecord.search.js",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.info",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.module",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.features.inc",
				"/home/sam/conversant/repos/console/tests/vendor/composer/autoload_classmap.php",
				"/home/sam/conversant/repos/console/authorize.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.test",
				"/home/sam/conversant/repos/console/modules/user/user-profile-item.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.services.inc",
				"/home/sam/conversant/repos/console/sites/default/settings.php",
				"/home/sam/conversant/repos/console/sites/default/settings.local.php",
				"/home/sam/conversant/repos/console/includes/session.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/includes/rest_api_query.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/includes/RestApiAbstractTestCase.class.inc",
				"/home/sam/conversant/repos/console/README.txt",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/src/Behat/MinkExtension/Context/Initializer/MinkAwareInitializer.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/src/Behat/MinkExtension/Context/MinkAwareInterface.php",
				"/home/sam/conversant/repos/console/tests/vendor/composer/composer/src/Composer/Package/CompletePackageInterface.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/gherkin/src/Behat/Gherkin/Keywords/ArrayKeywords.php",
				"/home/sam/conversant/repos/console/MAINTAINERS.txt",
				"/home/sam/conversant/repos/console/includes/pager.inc",
				"/home/sam/conversant/repos/console/modules/forum/forum-rtl.css",
				"/home/sam/conversant/repos/console/modules/filter/tests/filter.url-output.txt",
				"/home/sam/conversant/repos/console/includes/file.inc",
				"/home/sam/.ssh/git_ssh.pub",
				"/home/sam/.ssh/pooter_ubuntu.pub",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.webservices.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.module",
				"/home/sam/conversant/repos/console/tests/console_test.sh",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.info",
				"/home/sam/conversant/repos/console/modules/user/tests/user_form_test.info",
				"/home/sam/conversant/repos/console/modules/user/user.module",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/i18n/ja.xliff",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/tests/v1.js",
				"/home/sam/conversant/repos/console/sites/default/files/js/js_KCd8rbJYUruV1tRJnh4um34UYvyhlrSVCPR1jNko2h8.js.gz",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/tests/v1.html",
				"/home/sam/conversant/repos/console/sites/default/files/simpletest/verbose/AdminViewsDefaultViewsTestCase-1.html",
				"/home/sam/conversant/repos/console/misc/vertical-tabs.css",
				"/home/sam/conversant/repos/console/includes/database/database.inc",
				"/home/sam/conversant/repos/console/includes/date.inc",
				"/home/sam/conversant/repos/console/tests/vendor/symfony/finder/Symfony/Component/Finder/Iterator/DateRangeFilterIterator.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/domain/domain_alias/domain_alias.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/services/resources/user_resource.inc",
				"/home/sam/conversant/repos/console/scripts/password-hash.sh",
				"/home/sam/conversant/repos/console/scripts/cron-lynx.sh",
				"/home/sam/conversant/repos/console/scripts/cron-curl.sh",
				"/home/sam/conversant/repos/console/scripts/drupal.sh",
				"/home/sam/conversant/repos/console/INSTALL.sqlite.txt",
				"/home/sam/conversant/repos/console/.gitignore",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.query.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/tcpdf/config/lang/kat.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.tokens.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.features.inc",
				"/home/sam/conversant/repos/console/COPYRIGHT.txt",
				"/home/sam/conversant/repos/console/CHANGELOG.txt",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/themekey/themekey_features.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/theme/features-admin-components.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.features.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.info",
				"/home/sam/conversant/repos/console/tests/vendor/drupal/drupal-extension/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/behat/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.user.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.taxonomy.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.node.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.menu.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.locale.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.image.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.filter.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.field.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.features.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.ctools.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.context.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.block.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features.test",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.export.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.drush.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.api.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.js",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.css",
				"/home/sam/conversant/repos/console/tests/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/behat/src/Behat/Behat/Event/FeatureEvent.php",
				"/home/sam/conversant/repos/console/FirePHPCore/demo/oo.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/gherkin/src/Behat/Gherkin/Node/OutlineNode.php",
				"/home/sam/conversant/repos/console/misc/jquery.js",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/views/plugins/views_wizard/users.inc",
				"/home/sam/conversant/repos/console/modules/simpletest/tests/update_script_test.module",
				"/home/sam/conversant/repos/console/modules/node/node.css",
				"/home/sam/conversant/repos/console/tests/vendor/symfony/console/Symfony/Component/Console/Output/NullOutput.php",
				"/home/sam/.bashrc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.admin.inc",
				"/home/sam/conversant/repos/console/tests/vendor/instaclick/php-webdriver/lib/WebDriver/Exception/JavaScriptError.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/whitelabel_domain_config/whitelabel_domain_config.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.info",
				"/home/sam/conversant/repos/console/web.config",
				"/home/sam/conversant/repos/console/modules/search/tests/search_embedded_form.info",
				"/home/sam/conversant/repos/console/tests/vendor/composer/composer/tests/Composer/Test/DependencyResolver/RuleSetTest.php"
			],
			"find":
			{
				"height": 35.0
			},
			"find_in_files":
			{
				"height": 93.0,
				"where_history":
				[
					"",
					"*.css",
					"",
					"sites/all/modules/contrib/domain",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"4. Contacts.feature",
					"",
					"-indsex.html",
					"",
					"config/config.js",
					"/home/sam/repos/conversant/console/sites/all/modules/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console/tests/vendor",
					"",
					"user_sync.webservices.inc",
					""
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"success",
					"$query->error",
					"if ($query->error",
					"radius_accounts",
					"display_radius_accounts failed",
					"query",
					"account_manager_search_call_records_form",
					"execut",
					"result",
					"values",
					"names",
					"account_manager_contact_edit",
					"autocomplete",
					"masquerade_switch_user",
					"masquerade_switch_user_page",
					"account_manager_contact_roles",
					"administer",
					"services_error",
					"conversant_api_business_partner_access_error",
					"kaz",
					"user_sync_update_password",
					"_user_mail_notify",
					"password_reset",
					"pass_reset",
					"reset",
					"account_manager_contact_edit",
					"->id",
					"user_load",
					"whitelabel_masquerade_clear_cache",
					"user_load",
					"block",
					"account_manager_adempiere_read_contacts_by_business_partner",
					"whitelabel_masquerade_get_masquerading_user",
					"GLOBALS",
					"_GLOBALS",
					"contact",
					"adempiere_read_user",
					"RANGE",
					"variab",
					"user_mail",
					"module_invoke",
					"mail",
					"hook_mail",
					"Your customer number is",
					"mail_alter",
					"user_mail",
					"user_mail_no",
					"user_ma",
					"terms_link",
					"[$terms_link",
					"$terms_link",
					"activate",
					"[$activate",
					"$activate",
					"admin_created",
					"[$admin_created",
					"$admin_created",
					"register",
					"[$register",
					"$register",
					"WHITELABEL_MASQUERADE_ROLE_NAME",
					"define(",
					"activate",
					"auth.user.update",
					"onboard_roles",
					"register_apps",
					"winkstart.apps",
					"auth.load_account",
					"&gt",
					"&lt",
					"switch_day_month",
					"name",
					"whappnav.add",
					"enable_whapp",
					"winkstart.apps",
					"get_account",
					"auth.get_account",
					"datepicker",
					"setTimeout",
					"cache",
					"096",
					"split",
					"valid_numbers",
					"numbers",
					"bill",
					"available_apps",
					"send(",
					"dataType",
					"account.list",
					"async.parallel",
					"account_name",
					"async.parallel",
					"async.series",
					"sync",
					"descendants",
					"hid",
					"setup_table",
					"_data",
					"input",
					"primary",
					"list_ports",
					"account_name",
					"account_number",
					"descendants",
					".checked",
					"@todo",
					"settings",
					"content_type|content-type|contenttype",
					"content",
					"Content-Type",
					"contentType: ",
					"files",
					"winkstart.alert",
					"string_al",
					"border",
					"mouseover",
					"hover",
					">",
					"<",
					"number_of_docs",
					"data",
					"render_port_dialog",
					"@todo",
					"numbers_",
					"numbers",
					"port_types",
					"action_port",
					"popup_edit_user"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					">",
					"<",
					"&gt",
					"&lt",
					"ports_manager.",
					"ports_manager_html",
					"billing_postal_code",
					"There was an internal error and the changes may not be complete.",
					"There was an internal error and the changes may not be complete",
					"url",
					"!empty($values['roles']['user'])",
					"!empty($values['roles']['admin'])",
					"localhost",
					""
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 21.0
			},
			"input":
			{
				"height": 33.0
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 112.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.git":
			{
				"height": 100.0
			},
			"replace":
			{
				"height": 40.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
					[
						"accou",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"kaz",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"kazus",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"ka",
						"sites/all/modules/contrib/kazoo/kazoo.module"
					],
					[
						"convapi",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						"settlo",
						"sites/default/settings.local.php"
					],
					[
						"sett",
						"sites/default/settings.php"
					],
					[
						"restapi",
						"sites/all/modules/contrib/rest_api_query/includes/rest_api_query.class.inc"
					],
					[
						"rest",
						"sites/all/modules/contrib/rest_api_query/rest_api_query.module"
					],
					[
						"kazq",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"kazoo.",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"masq",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"usyinst",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"accmanmo",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"form.inc",
						"includes/form.inc"
					],
					[
						"cona",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						"user_sy",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"v1.js",
						"sites/all/modules/custom/conversant_api/tests/v1.js"
					],
					[
						"data",
						"includes/database/database.inc"
					],
					[
						"usersymo",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usyin",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"kaus",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install"
					],
					[
						"convap",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						".sh",
						"tests/console_test.sh"
					],
					[
						"kaad",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"usyins",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"kaq",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"conva",
						"sites/all/modules/custom/conversant_api/conversant_api.services.inc"
					],
					[
						"acmabusp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"usersy",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usmod",
						"modules/user/user.module"
					],
					[
						"webser",
						"sites/all/modules/custom/web_services/web_services.module"
					],
					[
						"setti",
						"sites/default/settings.php"
					],
					[
						"settloca",
						"sites/default/settings.local.php"
					],
					[
						"setting",
						"sites/default/settings.local.php"
					],
					[
						"kausmo",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"userapi",
						"modules/user/user.api.php"
					],
					[
						"user.m",
						"modules/user/user.module"
					],
					[
						"contacts",
						"tests/features/4. Contacts.feature"
					],
					[
						"acmanbptp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"usywe",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"usymod",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"acmanbusp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"accouman",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usyninf",
						"sites/all/modules/custom/user_sync/user_sync.info"
					],
					[
						"usermod",
						"modules/user/user.module"
					],
					[
						"conste",
						"tests/console_test.sh"
					],
					[
						"white",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.module"
					],
					[
						"accoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"accweb",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"acmamo",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usymo",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"appc",
						"whapps/myaccount/app_store/css/app_store.css"
					],
					[
						"app",
						"whapps/myaccount/app_store/app_store.js"
					],
					[
						"hosts",
						"hosts"
					],
					[
						"kusy",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install"
					],
					[
						"domain_",
						"sites/all/modules/contrib/domain/domain_conf/domain_conf.module"
					],
					[
						"wlmasin",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.install"
					],
					[
						"masqmo",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"pagtp",
						"modules/system/page.tpl.php"
					],
					[
						"accmod",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usynweb",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"accwe",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"usesym",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usermo",
						"modules/user/user.module"
					],
					[
						"acccoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"whdc",
						"sites/all/modules/custom/whitelabel_domain_config/whitelabel_domain_config.module"
					],
					[
						"win",
						"js/winkstart-request.js"
					],
					[
						"conj",
						"config/config.js"
					],
					[
						"aut",
						"whapps/auth/auth.js"
					],
					[
						"acc",
						"whapps/accounts/accounts_manager/accounts_manager.js"
					],
					[
						"jqdata",
						"js/external/jquery.dataTables.js"
					],
					[
						"ampreq",
						"js/amplify/amplify.request.js"
					],
					[
						"winkre",
						"js/winkstart-request.js"
					],
					[
						"accounts",
						"whapps/accounts/accounts.js"
					],
					[
						"portcs",
						"whapps/ports/ports_manager/css/ports_manager.css"
					],
					[
						"cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"voip/cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"conf",
						"config/config.js"
					],
					[
						"user/css/",
						"whapps/voip/user/css/user.css"
					],
					[
						"user/tmpl/",
						"whapps/voip/user/tmpl/edit.html"
					],
					[
						"us/",
						"user_sync/user_sync.module"
					],
					[
						"v",
						"conversant_api/tests/v1.js"
					],
					[
						"user",
						"user_sync/user_sync.install"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 252.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"PORT_",
						"PORT_WAITING"
					],
					[
						"Port",
						"PortRequestId"
					],
					[
						"PORT",
						"PORT_READY"
					],
					[
						"get",
						"get_modified_time"
					],
					[
						"de",
						"debug"
					],
					[
						"wh",
						"wh_json"
					],
					[
						"USER",
						"USER_LIST"
					],
					[
						"C",
						"Context"
					],
					[
						"customer",
						"customer_number"
					],
					[
						"user_sygse",
						"kazoo_user_sync_get_business_partner_search_key"
					],
					[
						"user_sync_get",
						"user_sync_get_adempiere_business_partner_id"
					],
					[
						"glo",
						"global"
					],
					[
						"custo",
						"customer_number"
					],
					[
						"cust",
						"customer_number"
					],
					[
						"sea",
						"search"
					],
					[
						"whitelabel_domain_config_mail",
						"whitelabel_domain_config_mail_on_user_reactivate"
					],
					[
						"white",
						"whitelabel_domain_config_"
					],
					[
						"upd",
						"update_user"
					],
					[
						"f",
						"f	Anonymous Function"
					],
					[
						"if",
						"if	if"
					],
					[
						"conf",
						"config"
					],
					[
						"user",
						"userportal"
					],
					[
						"wink",
						"winkstart"
					],
					[
						"disc",
						"disconnect_numbers"
					],
					[
						"request",
						"requested_port_time"
					],
					[
						"port",
						"port_form_data"
					],
					[
						"req",
						"requested_port_time"
					],
					[
						"requ",
						"requested_port_time"
					],
					[
						"chec",
						"checked"
					],
					[
						"requested",
						"requested_port_time"
					],
					[
						"val",
						"val	.val()"
					],
					[
						"validation",
						"validation_errors"
					],
					[
						"field_",
						"field_ids"
					],
					[
						"fax",
						"fax_numbers"
					],
					[
						"vali",
						"validation_errors"
					],
					[
						"in",
						"inarray	$.inArray()"
					],
					[
						"valid",
						"valid_numbers"
					],
					[
						"vald",
						"validation_errors"
					],
					[
						"margin-",
						"margin-top"
					],
					[
						"numb",
						"Number"
					],
					[
						"numbers",
						"numbers_text"
					],
					[
						"field",
						"field_id"
					],
					[
						"fiel",
						"field_id"
					],
					[
						"tab",
						"tab_data"
					],
					[
						"desc",
						"descendants"
					],
					[
						"acc",
						"account_data"
					],
					[
						"accoutn",
						"account_name"
					],
					[
						"account",
						"account_name"
					],
					[
						"each",
						"each	$.each()"
					],
					[
						"font",
						"font-size"
					],
					[
						"list",
						"list_ports"
					],
					[
						"render",
						"render_ports_manager"
					],
					[
						"fu",
						"fun	Function"
					],
					[
						"fun",
						"function"
					],
					[
						"em",
						"email"
					],
					[
						"da",
						"date"
					],
					[
						"type",
						"typeof"
					],
					[
						"port_date",
						"port_date_asap"
					],
					[
						"spl",
						"split_date"
					],
					[
						"spi",
						"split_date"
					],
					[
						"sp",
						"split_date"
					],
					[
						"date",
						"date_array"
					],
					[
						"va",
						"val	.val()"
					],
					[
						"h",
						"hide	hide"
					],
					[
						"popu",
						"popup_html"
					],
					[
						"d",
						"div	Tag"
					],
					[
						"att",
						"attachments"
					],
					[
						"subm",
						"submit_btn"
					],
					[
						"port_re",
						"port_request_failure"
					],
					[
						"al",
						"alert"
					],
					[
						"ba",
						"background-color"
					],
					[
						"email",
						"notify_email"
					],
					[
						"valida",
						"validation_errors"
					],
					[
						"port_ty",
						"port_type_dropdown"
					],
					[
						"remo",
						"removeClass	.removeClass"
					],
					[
						"ea",
						"each	$.each()"
					],
					[
						"sub",
						"submit	submit"
					],
					[
						"min",
						"min_date"
					],
					[
						"el",
						"else"
					],
					[
						"number",
						"number_data"
					],
					[
						"dele",
						"delete_port"
					],
					[
						"por",
						"port_ready"
					],
					[
						"main",
						"main_number"
					],
					[
						"pop",
						"populate_port_dialog"
					],
					[
						"get_",
						"get_port"
					],
					[
						"ports",
						"ports_manager"
					],
					[
						"create",
						"create_attachment"
					],
					[
						"crea",
						"create_number_doc"
					],
					[
						"port_t",
						"port_type_dropdown"
					],
					[
						"nu",
						"number_regex"
					],
					[
						"countr",
						"country_prefix"
					],
					[
						"count",
						"country_prefix"
					],
					[
						"current",
						"current_type"
					],
					[
						"error",
						"errors"
					],
					[
						"port_",
						"port_types"
					],
					[
						"re",
						"request"
					],
					[
						"winksta",
						"winkstart"
					],
					[
						"log",
						"logo_desc"
					],
					[
						"upload",
						"upload_icon"
					],
					[
						"form",
						"form_data"
					],
					[
						"upl",
						"upload_logo"
					],
					[
						"uplo",
						"upload_icon"
					],
					[
						"loc",
						"lock"
					],
					[
						"lock",
						"Lock"
					],
					[
						"messa",
						"Messages"
					],
					[
						"whi",
						"whitelabel_masquerade_get_available_users"
					],
					[
						"kaz",
						"kazoo_api_accounts"
					],
					[
						"t",
						"to"
					],
					[
						"masquerade",
						"masquerade_users"
					],
					[
						"masquer",
						"masquerade_users"
					],
					[
						"arra",
						"array"
					],
					[
						"accoun",
						"account_manager_user_is_wlr_admin"
					],
					[
						"res",
						"reseller"
					],
					[
						"resel",
						"resellers"
					],
					[
						"user_",
						"user_cancel	user_cancel"
					],
					[
						"db",
						"db_delete	db_delete"
					],
					[
						"whit",
						"whitelabel_masquerade_access"
					],
					[
						"whitela",
						"whitelabel_masquerade_menu"
					],
					[
						"user_ac",
						"user_access	user_access"
					],
					[
						"_mas",
						"_masquerade_can_access_user"
					],
					[
						"drupal_set",
						"drupal_set_message	drupal_set_message"
					],
					[
						"mod_i",
						"module_invoke_all	module_invoke_all"
					],
					[
						"domain_email_config",
						"domain_email_config_user_register_admin_created"
					],
					[
						"domain_email_config_",
						"domain_email_config_form_elements"
					],
					[
						"doma",
						"domain_email_config_"
					],
					[
						"variable_",
						"variable_get	variable_get"
					],
					[
						"kazoo_a",
						"kazoo_account_id"
					],
					[
						"business_",
						"business_partner_name"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/crossbar_doc.erl",
					"settings":
					{
						"buffer_size": 31626,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_resources.erl",
					"settings":
					{
						"buffer_size": 12336,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/misc/outbound_call_from_clicktocall_20140512.txt",
					"settings":
					{
						"buffer_size": 70189,
						"line_ending": "Windows"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_exe.erl",
					"settings":
					{
						"buffer_size": 28214,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_temporal_rules.erl",
					"settings":
					{
						"buffer_size": 6107,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_temporal_route.erl",
					"settings":
					{
						"buffer_size": 146765,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/licensing/license_info_rabbitmq-management",
					"settings":
					{
						"buffer_size": 698,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_hotdesk.erl",
					"settings":
					{
						"buffer_size": 17668,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "%%%-------------------------------------------------------------------\n%%% @copyright (C) 2012-2014, 2600Hz INC\n%%% @doc\n%%% Helpers for manipulating the #cb_context{} record\n%%% @end\n%%% @contributors\n%%%   James Aimonetti\n%%%-------------------------------------------------------------------\n-module(cb_context).\n\n-export([store/3\n         ,fetch/2, fetch/3\n         ,put_reqid/1\n         ,import_errors/1\n         ,response/1\n         ,has_errors/1\n         ,add_system_error/2, add_system_error/3\n         ,add_validation_error/4\n         ,validate_request_data/2, validate_request_data/3, validate_request_data/4\n         ,add_content_types_provided/2\n         ,add_content_types_accepted/2\n         ,add_attachment_content_type/3\n\n         ,is_context/1\n\n         %% Getters / Setters\n         ,setters/2\n\n         ,account_id/1, set_account_id/2\n         ,account_db/1, set_account_db/2\n         ,account_doc/1\n         ,auth_token/1, set_auth_token/2\n         ,auth_doc/1, set_auth_doc/2\n         ,auth_account_id/1, set_auth_account_id/2\n         ,req_verb/1, set_req_verb/2\n         ,req_data/1, set_req_data/2\n         ,req_id/1, set_req_id/2\n         ,req_files/1, set_req_files/2\n         ,req_nouns/1, set_req_nouns/2\n         ,query_string/1, set_query_string/2\n         ,client_ip/1\n         ,doc/1, set_doc/2\n         ,start/1, set_start/2\n         ,resp_data/1, set_resp_data/2\n         ,resp_status/1, set_resp_status/2\n         ,resp_expires/1, set_resp_expires/2\n         ,api_version/1, set_api_version/2\n         ,resp_etag/1, set_resp_etag/2\n         ,allow_methods/1, set_allow_methods/2\n         ,allowed_methods/1, set_allowed_methods/2\n         ,method/1, set_method/2\n         ,path_tokens/1\n         ,magic_pathed/1, set_magic_pathed/2\n\n         ,req_json/1, set_req_json/2\n         ,resp_error_code/1, set_resp_error_code/2\n         ,resp_error_msg/1, set_resp_error_msg/2\n\n         ,resp_headers/1\n         ,set_resp_headers/2, set_resp_header/3\n         ,add_resp_headers/2, add_resp_header/3\n\n         ,content_types_accepted/1, set_content_types_accepted/2\n         ,content_types_provided/1, set_content_types_provided/2\n         ,languages_provided/1, set_languages_provided/2\n         ,encodings_provided/1, set_encodings_provided/2\n\n         %% Special accessors\n         ,req_value/2, req_value/3\n        ]).\n\n-include(\"./crossbar.hrl\").\n\n-type context() :: #cb_context{}.\n-type setter_fun_2() :: fun((context(), term()) -> context()).\n-type setter_fun_3() :: fun((context(), term(), term()) -> context()).\n-type setter_fun() :: setter_fun_2() | setter_fun_3().\n-export_type([context/0\n              ,setter_fun/0\n              ,setter_fun_2/0\n              ,setter_fun_3/0\n             ]).\n\n-type setter_kv() :: {setter_fun_2(), term()} |\n                     {setter_fun_3(), term(), term()}.\n-type setters() :: [setter_kv(),...] | [].\n\n-spec is_context(any()) -> boolean().\nis_context(#cb_context{}) -> 'true';\nis_context(_) -> 'false'.\n\n-spec req_value(context(), wh_json:key()) -> wh_json:json_term().\n-spec req_value(context(), wh_json:key(), term()) -> wh_json:json_term().\nreq_value(#cb_context{}=Context, Key) ->\n    req_value(Context, Key, 'undefined').\nreq_value(#cb_context{req_data=ReqData, query_json=QS}, Key, Default) ->\n    wh_json:find(Key, [ReqData, QS], Default).\n\n%% Accessors\n-spec account_doc(context()) -> wh_json:object().\n\naccount_id(#cb_context{account_id=AcctId}) -> AcctId.\naccount_db(#cb_context{db_name=AcctDb}) -> AcctDb.\naccount_doc(#cb_context{}=Context) ->\n    AccountId = account_id(Context),\n    {'ok', Doc} =\n        couch_mgr:open_cache_doc(wh_util:format_account_id(AccountId, 'encoded'), AccountId),\n    Doc.\nauth_token(#cb_context{auth_token=AuthToken}) -> AuthToken.\nauth_doc(#cb_context{auth_doc=AuthDoc}) -> AuthDoc.\nauth_account_id(#cb_context{auth_account_id=AuthBy}) -> AuthBy.\nreq_verb(#cb_context{req_verb=ReqVerb}) -> ReqVerb.\nreq_data(#cb_context{req_data=ReqData}) -> ReqData.\nreq_files(#cb_context{req_files=ReqFiles}) -> ReqFiles. \nreq_nouns(#cb_context{req_nouns=ReqNouns}) -> ReqNouns.\nquery_string(#cb_context{query_json=Q}) -> Q.\nclient_ip(#cb_context{client_ip=IP}) -> IP.\nreq_id(#cb_context{req_id=ReqId}) -> ReqId.\ndoc(#cb_context{doc=Doc}) -> Doc.\nstart(#cb_context{start=Start}) -> Start.\nresp_data(#cb_context{resp_data=RespData}) -> RespData.\nresp_status(#cb_context{resp_status=RespStatus}) -> RespStatus.\nresp_expires(#cb_context{resp_expires=RespExpires}) -> RespExpires.\nresp_headers(#cb_context{resp_headers=RespHeaders}) -> RespHeaders.\napi_version(#cb_context{api_version=ApiVersion}) -> ApiVersion.\nresp_etag(#cb_context{resp_etag=ETag}) -> ETag.\n\nallow_methods(#cb_context{allow_methods=AMs}) -> AMs.\nallowed_methods(#cb_context{allowed_methods=AMs}) -> AMs.\nmethod(#cb_context{method=M}) -> M.\n\n-spec path_tokens(context()) -> ne_binaries().\npath_tokens(#cb_context{raw_path=Path}) ->\n    [cow_qs:urldecode(Token) || Token <- binary:split(Path, <<\"/\">>, ['global', 'trim'])].\n\n-spec magic_pathed(context()) -> boolean().\nmagic_pathed(#cb_context{magic_pathed=MP}) -> MP.\n\nreq_json(#cb_context{req_json=RJ}) -> RJ.\ncontent_types_accepted(#cb_context{content_types_accepted=CTAs}) -> CTAs.\ncontent_types_provided(#cb_context{content_types_provided=CTPs}) -> CTPs.\nlanguages_provided(#cb_context{languages_provided=LP}) -> LP.\nencodings_provided(#cb_context{encodings_provided=EP}) -> EP.\n\nresp_error_code(#cb_context{resp_error_code=Code}) -> Code.\nresp_error_msg(#cb_context{resp_error_msg=Msg}) -> Msg.\n\n%% Setters\n-spec setters(context(), setters()) -> context().\nsetters(#cb_context{}=Context, []) -> Context;\nsetters(#cb_context{}=Context, [_|_]=Setters) ->\n    lists:foldl(fun setters_fold/2, Context, Setters).\n\n-spec setters_fold(setter_kv(), context()) -> context().\nsetters_fold({F, V}, C) -> F(C, V);\nsetters_fold({F, K, V}, C) -> F(C, K, V).\n\n-spec set_account_id(context(), ne_binary()) -> context().\n-spec set_account_db(context(), ne_binary()) -> context().\n-spec set_auth_token(context(), ne_binary()) -> context().\n-spec set_auth_doc(context(), wh_json:object()) -> context().\n-spec set_auth_account_id(context(), ne_binary()) -> context().\n-spec set_req_verb(context(), ne_binary()) -> context().\n-spec set_req_data(context(), wh_json:object() | ne_binary()) -> context().\n-spec set_req_files(context(), req_files()) -> context().\n-spec set_req_nouns(context(), req_nouns()) -> context().\n-spec set_query_string(context(), wh_json:object()) -> context().\n-spec set_req_id(context(), ne_binary()) -> context().\n-spec set_doc(context(), api_object() | wh_json:objects()) -> context().\n-spec set_start(context(), wh_now()) -> context().\n-spec set_resp_data(context(), resp_data()) -> context().\n-spec set_resp_status(context(), crossbar_status()) -> context().\n-spec set_resp_expires(context(), wh_datetime()) -> context().\n-spec set_api_version(context(), ne_binary()) -> context().\n-spec set_resp_etag(context(), api_binary()) -> context().\n-spec set_resp_headers(context(), wh_proplist()) -> context().\n-spec add_resp_headers(context(), wh_proplist()) -> context().\n-spec set_resp_header(context(), ne_binary(), ne_binary()) -> context().\n-spec add_resp_header(context(), ne_binary(), ne_binary()) -> context().\n-spec set_allow_methods(context(), http_methods()) -> context().\n-spec set_allowed_methods(context(), http_methods()) -> context().\n-spec set_method(context(), http_method()) -> context().\n-spec set_req_json(context(), wh_json:object()) -> context().\n-spec set_content_types_accepted(context(), crossbar_content_handlers()) -> context().\n-spec set_content_types_provided(context(), crossbar_content_handlers()) -> context().\n-spec set_languages_provided(context(), ne_binaries()) -> context().\n-spec set_encodings_provided(context(), ne_binaries()) -> context().\n-spec set_resp_error_code(context(), integer()) -> context().\n-spec set_resp_error_msg(context(), api_binary()) -> context().\n-spec set_magic_pathed(context(), boolean()) -> context().\n\nset_account_id(#cb_context{}=Context, AcctId) -> Context#cb_context{account_id=AcctId}.\nset_account_db(#cb_context{}=Context, AcctDb) -> Context#cb_context{db_name=AcctDb}.\nset_auth_token(#cb_context{}=Context, AuthToken) -> Context#cb_context{auth_token=AuthToken}.\nset_auth_doc(#cb_context{}=Context, AuthDoc) -> Context#cb_context{auth_doc=AuthDoc}.\nset_auth_account_id(#cb_context{}=Context, AuthBy) -> Context#cb_context{auth_account_id=AuthBy}.\nset_req_verb(#cb_context{}=Context, ReqVerb) -> Context#cb_context{req_verb=ReqVerb}.\nset_req_data(#cb_context{}=Context, ReqData) -> Context#cb_context{req_data=ReqData}.\nset_req_files(#cb_context{}=Context, ReqFiles) -> Context#cb_context{req_files=ReqFiles}.\nset_req_nouns(#cb_context{}=Context, ReqNouns) -> Context#cb_context{req_nouns=ReqNouns}.\nset_query_string(#cb_context{}=Context, Q) -> Context#cb_context{query_json=Q}.\nset_req_id(#cb_context{}=Context, ReqId) -> Context#cb_context{req_id=ReqId}.\nset_doc(#cb_context{}=Context, Doc) -> Context#cb_context{doc=Doc}.\nset_start(#cb_context{}=Context, Start) -> Context#cb_context{start=Start}.\nset_resp_data(#cb_context{}=Context, RespData) -> Context#cb_context{resp_data=RespData}.\nset_resp_status(#cb_context{}=Context, RespStatus) -> Context#cb_context{resp_status=RespStatus}.\nset_resp_expires(#cb_context{}=Context, RespExpires) -> Context#cb_context{resp_expires=RespExpires}.\nset_api_version(#cb_context{}=Context, ApiVersion) -> Context#cb_context{api_version=ApiVersion}.\nset_resp_etag(#cb_context{}=Context, ETag) -> Context#cb_context{resp_etag=ETag}.\n\nset_allow_methods(#cb_context{}=Context, AMs) -> Context#cb_context{allow_methods=AMs}.\nset_allowed_methods(#cb_context{}=Context, AMs) -> Context#cb_context{allowed_methods=AMs}.\nset_method(#cb_context{}=Context, M) -> Context#cb_context{method=M}.\n\nset_req_json(#cb_context{}=Context, RJ) -> Context#cb_context{req_json=RJ}.\nset_content_types_accepted(#cb_context{}=Context, CTAs) -> Context#cb_context{content_types_accepted=CTAs}.\nset_content_types_provided(#cb_context{}=Context, CTPs) -> Context#cb_context{content_types_provided=CTPs}.\nset_languages_provided(#cb_context{}=Context, LP) -> Context#cb_context{languages_provided=LP}.\nset_encodings_provided(#cb_context{}=Context, EP) -> Context#cb_context{encodings_provided=EP}.\nset_magic_pathed(#cb_context{}=Context, MP) ->\n    Context#cb_context{magic_pathed=wh_util:is_true(MP)}.\n\nset_resp_error_code(#cb_context{}=Context, Code) -> Context#cb_context{resp_error_code=Code}.\nset_resp_error_msg(#cb_context{}=Context, Msg) -> Context#cb_context{resp_error_msg=Msg}.\n\nset_resp_headers(#cb_context{resp_headers=Hs}=Context, Headers) ->\n    Context#cb_context{resp_headers=lists:foldl(fun set_resp_header_fold/2, Hs, Headers)}.\nset_resp_header(#cb_context{resp_headers=RespHeaders}=Context, K, V) ->\n    Context#cb_context{resp_headers=lists:keystore(K, 1, RespHeaders, {K, V})}.\nset_resp_header_fold({K, V}, Hs) -> lists:keystore(K, 1, Hs, {K, V}).\n\nadd_resp_headers(#cb_context{resp_headers=RespHeaders}=Context, Headers) ->\n    Context#cb_context{resp_headers=lists:foldl(fun add_resp_headers_fold/2, RespHeaders, Headers)}.\nadd_resp_header(#cb_context{resp_headers=RespHeaders}=Context, K, V) ->\n    Context#cb_context{resp_headers=[{K, V} | RespHeaders]}.\nadd_resp_headers_fold({K, V}, Hs) -> [{K, V} | Hs].\n\n%% Helpers\n\n-spec add_content_types_provided(context(), crossbar_content_handler() | crossbar_content_handlers()) ->\n                                        context().\nadd_content_types_provided(#cb_context{content_types_provided=CTPs}=Context, [_|_]=NewCTPs) ->\n    Context#cb_context{content_types_provided = NewCTPs ++ CTPs};\nadd_content_types_provided(#cb_context{}=Context, {_, _}=NewCTP) ->\n    add_content_types_provided(Context,[NewCTP]).\n\n-spec add_content_types_accepted(context(), crossbar_content_handler() | crossbar_content_handlers()) ->\n                                        context().\nadd_content_types_accepted(#cb_context{content_types_accepted=CTAs}=Context, [_|_]=NewCTAs) ->\n    Context#cb_context{content_types_accepted = NewCTAs ++ CTAs};\nadd_content_types_accepted(#cb_context{}=Context, {_, _}=NewCTA) ->\n    add_content_types_provided(Context,[NewCTA]).\n\n-spec add_attachment_content_type(context(), ne_binary(), ne_binary()) -> context().\nadd_attachment_content_type(#cb_context{}=Context, DocId, AttachmentId) ->\n    Context1 = crossbar_doc:load(DocId, Context),\n    case resp_status(Context1) of\n        'success' ->\n            maybe_add_content_type_provided(Context1, AttachmentId);\n        _Status -> Context1\n    end.\n\n-spec maybe_add_content_type_provided(context(), ne_binary()) -> context().\nmaybe_add_content_type_provided(Context, AttachmentId) ->\n    ContentTypeKey = [<<\"_attachments\">>, AttachmentId, <<\"content_type\">>],\n    case wh_json:get_value(ContentTypeKey, doc(Context)) of\n        'undefined' -> Context;\n        ContentType ->\n            lager:debug(\"found content type ~s\", [ContentType]),\n            [Type, SubType] = binary:split(ContentType, <<\"/\">>),\n            add_content_types_provided(Context, [{'to_binary', [{Type, SubType}]}])\n    end.\n\n%%--------------------------------------------------------------------\n%% @public\n%% @doc\n%% Sets a value in the crossbar context for later retrieval during\n%% this request.\n%% @end\n%%--------------------------------------------------------------------\n-spec store(context(), term(), term()) -> context().\nstore(#cb_context{storage=Storage}=Context, Key, Data) ->\n    Context#cb_context{storage=[{Key, Data} | props:delete(Key, Storage)]}.\n\n%%--------------------------------------------------------------------\n%% @public\n%% @doc\n%% Fetches a previously stored value from the current request.\n%% @end\n%%--------------------------------------------------------------------\n-spec fetch(context(), term()) -> term().\n-spec fetch(context(), term(), term()) -> term().\n\nfetch(#cb_context{}=Context, Key) ->\n    fetch(Context, Key, 'undefined').\n\nfetch(#cb_context{storage=Storage}, Key, Default) ->\n    case props:get_value(Key, Storage) of\n        'undefined' -> Default;\n        Else -> Else\n    end.\n\n%%--------------------------------------------------------------------\n%% @public\n%% @doc\n%% This function extracts the request ID and sets it as 'callid' in\n%% the process dictionary, where the logger expects it.\n%% @end\n%%--------------------------------------------------------------------\n-spec put_reqid(context()) -> api_binary().\nput_reqid(#cb_context{req_id=ReqId}) ->\n    put('callid', ReqId).\n\n%%--------------------------------------------------------------------\n%% @public\n%% @doc\n%%\n%% @end\n%%--------------------------------------------------------------------\nhas_errors(#cb_context{validation_errors=JObj\n                       ,resp_status='success'\n                      }) ->\n    (not wh_util:is_empty(JObj));\nhas_errors(#cb_context{}) -> 'true'.\n\n%%--------------------------------------------------------------------\n%% @public\n%% @doc\n%%\n%% @end\n%%--------------------------------------------------------------------\nimport_errors(#cb_context{}=Context) ->\n    case response(Context) of\n        {'ok', _} -> Context;\n        {'error', {ErrorCode, ErrorMsg, Errors}} ->\n            Context#cb_context{resp_error_code=ErrorCode\n                               ,resp_error_msg=ErrorMsg\n                               ,resp_data=Errors\n                               ,resp_status='error'\n                              }\n    end.\n\nresponse(#cb_context{resp_status='success'\n                     ,resp_data=JObj\n                    }) ->\n    {'ok', JObj};\nresponse(#cb_context{resp_error_code=Code\n                     ,resp_error_msg=Msg\n                     ,resp_data=DataJObj\n                     ,validation_errors=ValidationJObj\n                    }) ->\n    ErrorCode = try wh_util:to_integer(Code) of\n                    C -> C\n                catch\n                    _:_ -> 500\n                end,\n    ErrorMsg = case wh_util:is_empty(Msg) of\n                   'false' -> wh_util:to_binary(Msg);\n                   'true' -> <<\"generic_error\">>\n               end,\n    ErrorData = case {wh_util:is_empty(ValidationJObj), wh_util:is_empty(DataJObj)} of\n                    {'false', _} -> ValidationJObj;\n                    {_, _} -> DataJObj\n                end,\n    {'error', {ErrorCode, ErrorMsg, ErrorData}}.\n\n%%--------------------------------------------------------------------\n%% @public\n%% @doc\n%% Add a validation error to the list of request errors\n%% @end\n%%--------------------------------------------------------------------\nvalidate_request_data(Schema, #cb_context{req_data=Data\n                                          ,resp_status=RespStatus\n                                         }=Context) ->\n    case wh_json_validator:is_valid(wh_json:public_fields(Data), Schema) of\n        {'fail', Errors} ->\n            lager:debug(\"request data did not validate against ~s: ~p\", [Schema, Errors]),\n            lists:foldl(fun({Property, Error}, C) ->\n                                [Code, Message] = binary:split(Error, <<\":\">>),\n                                add_validation_error(Property, Code, Message, C)\n                        end, Context#cb_context{resp_status='error'}, Errors);\n        {'pass', JObj} ->\n            Status = case RespStatus =:= 'error' of\n                         'true' -> 'error';\n                         'false' -> 'success'\n                     end,\n            %% Allow onboarding to set the document ID\n            case wh_json:get_ne_value(<<\"_id\">>, Data) of\n                'undefined' ->\n                    Context#cb_context{resp_status=Status\n                                       ,doc=JObj\n                                      };\n                Id ->\n                    Context#cb_context{resp_status=Status\n                                       ,doc=wh_json:set_value(<<\"_id\">>, Id, JObj)\n                                      }\n            end\n    end.\n\nvalidate_request_data(Schema, Context, OnSuccess) ->\n    validate_request_data(Schema, Context, OnSuccess, 'undefined').\n\nvalidate_request_data(Schema, Context, OnSuccess, OnFailure) ->\n    case validate_request_data(Schema, Context) of\n        #cb_context{resp_status='success'}=C1 when is_function(OnSuccess) ->\n            OnSuccess(C1);\n        #cb_context{}=C2 when is_function(OnFailure) ->\n            OnFailure(C2);\n        Else -> Else\n    end.\n\n%%--------------------------------------------------------------------\n%% @public\n%% @doc\n%%\n%% @end\n%%--------------------------------------------------------------------\n-spec add_system_error(atom() | binary(), context()) -> context().\nadd_system_error('too_many_requests', Context) ->\n    crossbar_util:response('fatal', <<\"too many requests\">>, 429, Context);\nadd_system_error('no_credit', Context) ->\n    crossbar_util:response('error', <<\"not enough credit to perform action\">>, 402, Context);\nadd_system_error('unspecified_fault', Context) ->\n    crossbar_util:response('fatal', <<\"unspecified fault\">>, Context);\nadd_system_error('account_cant_create_tree', Context) ->\n    crossbar_util:response('fatal', <<\"account creation fault\">>, Context);\nadd_system_error('account_has_descendants', Context) ->\n    crossbar_util:response('fatal', <<\"account has descendants\">>, Context);\nadd_system_error('faulty_request', Context) ->\n    crossbar_util:response_faulty_request(Context);\n\nadd_system_error('bad_identifier', Context) ->\n    crossbar_util:response_bad_identifier(<<\"unknown\">>, Context);\n\nadd_system_error('forbidden', Context) ->\n    crossbar_util:response('error', <<\"forbidden\">>, 403, Context);\nadd_system_error('invalid_credentials', Context) ->\n    crossbar_util:response('error', <<\"invalid credentials\">>, 401, Context);\n\nadd_system_error('datastore_missing', Context) ->\n    crossbar_util:response_db_missing(Context);\nadd_system_error('datastore_missing_view', Context) ->\n    crossbar_util:response_missing_view(Context);\nadd_system_error('datastore_conflict', Context) ->\n    crossbar_util:response_conflicting_docs(Context);\nadd_system_error('datastore_unreachable', Context) ->\n    crossbar_util:response_datastore_timeout(Context);\nadd_system_error('datastore_fault', Context) ->\n    crossbar_util:response_db_fatal(Context);\nadd_system_error('empty_tree_accounts_exist', Context) ->\n    crossbar_util:response('error', <<\"unable to create account tree\">>, 400, Context);\n\nadd_system_error('parse_error', Context) ->\n    crossbar_util:response('error', <<\"failed to parse request body\">>, 400, Context);\nadd_system_error('invalid_method', Context) ->\n    crossbar_util:response('error', <<\"method not allowed\">>, 405, Context);\nadd_system_error('not_found', Context) ->\n    crossbar_util:response('error', <<\"not found\">>, 404, Context);\nadd_system_error(Error, Context) ->\n    crossbar_util:response('error', Error, Context).\n\nadd_system_error('bad_identifier', Props, Context) ->\n    Identifier = props:get_value('details', Props),\n    crossbar_util:response_bad_identifier(Identifier, Context);\nadd_system_error('invalid_bulk_type', Props, Context) ->\n    Type = props:get_value('type', Props),\n    Reason = <<\"bulk operations do not support documents of type \", (wh_util:to_binary(Type))/binary>>,\n    crossbar_util:response('error', <<\"invalid bulk type\">>, 400, Reason, Context);\nadd_system_error('forbidden', Props, Context) ->\n    Reason = props:get_value('details', Props),\n    crossbar_util:response('error', <<\"forbidden\">>, 403, Reason, Context);\nadd_system_error('timeout', Props, Context) ->\n    crossbar_util:response('error', <<\"timeout\">>, 500, props:get_value('details', Props), Context);\nadd_system_error(Error, _, Context) ->\n    add_system_error(Error, Context).\n\n%%--------------------------------------------------------------------\n%% @public\n%% @doc\n%% Add a validation error to the list of request errors\n%% @end\n%%--------------------------------------------------------------------\nadd_validation_error(Property, <<\"type\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"items\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"required\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"minimum\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"maximum\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"minItems\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"maxItems\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"uniqueItems\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"pattern\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"minLength\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"maxLength\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"enum\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"format\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\nadd_validation_error(Property, <<\"divisibleBy\">>=C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\n\n%% Not unique within the datastore\nadd_validation_error(Property, <<\"unique\">> = C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\n%% User is not authorized to update the property\nadd_validation_error(Property, <<\"forbidden\">> = C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\n%% Date range is invalid, too small, or too large\nadd_validation_error(Property, <<\"date_range\">> = C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\n%% Value was required to locate a resource, but failed (like account_name)\nadd_validation_error(Property, <<\"not_found\">> = C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\n%% Value's keys didn't match property\nadd_validation_error(Property, <<\"patternProperties\">> = C, Message, Context) ->\n    add_depreciated_validation_error(Property, C, Message, Context);\n\nadd_validation_error(Property, Code, Message, Context) ->\n    lager:debug(\"UNKNOWN ERROR CODE: ~p\", [Code]),\n    _ = file:write_file(\"/tmp/kazoo_unknown_error_codes.log\", io_lib:format(\"~p~n\", [Code]), ['append']),\n    add_depreciated_validation_error(Property, Code, Message, Context).\n\nadd_depreciated_validation_error(Property, Code, Message, Context) when is_binary(Property) ->\n    add_depreciated_validation_error([Property], Code, Message, Context);\nadd_depreciated_validation_error(Property, Code, Message, #cb_context{validation_errors=JObj}=Context) ->\n    %% Maintain the same error format we are currently using until we are ready to\n    %% convert to something that makes sense....\n    Key = wh_util:join_binary(Property, <<\".\">>),\n    Context#cb_context{validation_errors=wh_json:set_value([Key, Code], Message, JObj)\n                       ,resp_status='error'\n                       ,resp_error_code=400\n                       ,resp_data=wh_json:new()\n                       ,resp_error_msg = <<\"invalid data\">>\n                      }.\n",
					"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/cb_context.erl",
					"file_size": 25944,
					"file_write_time": 130500200138169177,
					"settings":
					{
						"buffer_size": 25945,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/crossbar.erl",
					"settings":
					{
						"buffer_size": 10464,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/misc/kazoo_update_port_requests.txt",
					"settings":
					{
						"buffer_size": 3815,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_clicktocall.erl",
					"settings":
					{
						"buffer_size": 14424,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_util.erl",
					"settings":
					{
						"buffer_size": 45014,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_modules_util.erl",
					"settings":
					{
						"buffer_size": 15092,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_originate.erl",
					"settings":
					{
						"buffer_size": 36198,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_call_events.erl",
					"settings":
					{
						"buffer_size": 44233,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole.erl",
					"settings":
					{
						"buffer_size": 2170,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_util.erl",
					"settings":
					{
						"buffer_size": 3232,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "-ifndef(BLACKHOLE_HRL).\n\n%% Typical includes needed\n-include_lib(\"whistle/include/wh_amqp.hrl\").\n-include_lib(\"whistle/include/wh_types.hrl\").\n-include_lib(\"whistle/include/wh_log.hrl\").\n-include_lib(\"whistle/include/wh_databases.hrl\").\n-include_lib(\"whistle_apps/include/wh_hooks.hrl\").\n\n-define(APP_NAME, <<\"blackhole\">>).\n-define(APP_VERSION, <<\"1.0.0\">>).\n-define(BLACKHOLE_CONFIG_CAT, <<\"blackhole\">>).\n-define(TOKEN_DB, <<\"token_auth\">>).\n\n-define(DEFAULT_MODULES, ['bh_token_auth','bh_call']).\n\n-define(VERSION_SUPPORTED, [<<\"v1\">>]).\n\n\n\n-define(BLACKHOLE_HRL, 'true').\n\n-endif.\n",
					"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole.hrl",
					"file_size": 576,
					"file_write_time": 130479543182459487,
					"settings":
					{
						"buffer_size": 586,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/doc/example_client.html",
					"settings":
					{
						"buffer_size": 1296,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_bindings.erl",
					"settings":
					{
						"buffer_size": 6651,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/modules/bh_call.erl",
					"settings":
					{
						"buffer_size": 1975,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_originate_sup.erl",
					"settings":
					{
						"buffer_size": 2167,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_resources.erl",
					"settings":
					{
						"buffer_size": 33067,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/callflow_maintenance.erl",
					"settings":
					{
						"buffer_size": 19878,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr.hrl",
					"settings":
					{
						"buffer_size": 22675,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 3816 files for \"xferext\"\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_call_command.erl:\n  361                           end\n  362                         ],\n  363:             {<<\"xferext\">>, lists:foldr(fun(F, DP) -> F(DP) end, [], Routines)}\n  364      end;\n  365  \n  ...\n  424                                              F(DP, Node, UUID, JObj)\n  425                                      end, [], Routines),\n  426:             {<<\"xferext\">>, Extension}\n  427      end;\n  428  \n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_call_control.erl:\n  525      %% channel_destory (the last event we will ever receive from freeswitch for this call)\n  526      %% then create an error and force advance. This will happen with dialplan actions that\n  527:     %% have not been executed on freeswitch but were already queued (for example in xferext).\n  528      %% Commonly events like masquerade, noop, ect\n  529      _ = case CurrentApp =:= 'undefined'\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_bridge.erl:\n   40                         ],\n   41              lager:debug(\"creating bridge dialplan\"),\n   42:             XferExt = lists:foldr(fun(F, DP) ->\n   43                                            F(DP, Node, UUID, JObj) end\n   44                                    ,[], Routines),\n   45:             {<<\"xferext\">>, XferExt}\n   46      end.\n   47  \n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_util.erl:\n   70  send_cmd(Node, UUID, App, Args) when not is_list(App) ->\n   71      send_cmd(Node, UUID, wh_util:to_list(App), Args);\n   72: send_cmd(Node, UUID, \"xferext\", Dialplan) ->\n   73:     XferExt = [begin\n   74:                    lager:debug(\"building xferext on node ~s: ~s\", [Node, V]),\n   75                     {wh_util:to_list(K), wh_util:to_list(V)}\n   76                 end || {K, V} <- Dialplan],\n   77:     'ok' = freeswitch:sendmsg(Node, UUID, [{\"call-command\", \"xferext\"} | XferExt]);\n   78  send_cmd(Node, UUID, App, Args) when not is_list(Args) ->\n   79      send_cmd(Node, UUID, App, wh_util:to_list(Args));\n\n/home/sam/conversant/misc/outbound_call_from_clicktocall_20140512.txt:\n  209  May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:488 (<0.4189.376>) building bridge endpoint: [<<\"route\">>,undefined,undefined,<<\"+6421446202\">>,<<\"sip:+6421446202@119.9.40.133\">>]\n  210  \n  211: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: set ignore_display_updates=true\n  212  \n  213: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: set continue_on_fail=true\n  214  \n  215: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: export sip_redirect_context=context_2\n  216  \n  217: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: bridge {ignore_display_updates='true',ecallmgr_Account-ID='66251afde4ac965da6e037c3a9f72db3',ecallmgr_Reseller-ID='1d2225ba1316c330a1bfcda6f8e93740',effective_caller_id_number='0000000000',effective_caller_id_name='Unknown',origination_caller_id_number='0000000000',origination_caller_id_name='Unknown',ignore_early_media='false',local_var_clobber='true'}[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='841bc24477cd75ad659e9037be764986',absolute_codec_string='^^:PCMU:PCMA:G722:G7221@16000h:G7221@32000h',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@202.89.54.33|[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='d1a43d9ab8439757aaaff9e66ea1b85c',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@147.202.48.171|[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='b599d34d5d471848ef7c865e7ec90f19',absolute_codec_string='^^:PCMU:PCMA:G722:G7221@16000h:G7221@32000h',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@119.9.40.133\n  218  \n  219: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: event Event-Name=CUSTOM,Event-Subclass=whistle::masquerade,whistle_event_name=CHANNEL_EXECUTE_COMPLETE,whistle_application_name=bridge\n  220  \n  221: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: park\n  222  \n  223  May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_call_events:441 (<0.4187.376>) not publishing CHANNEL_EXECUTE_COMPLETE(park): undefined\n\n17 matches across 5 files\n\n\nSearching 3816 files for \"authorizing\"\n\n/home/sam/conversant/repos/kazoo/applications/acdc/src/acdc_agent_listener.erl:\n  993  \n  994      CCVs = props:filter_undefined([{<<\"Account-ID\">>, AcctId}\n  995:                                    ,{<<\"Authorizing-ID\">>, whapps_call:authorizing_id(Call)}\n  996                                     ,{<<\"Request-ID\">>, ReqId}\n  997                                     ,{<<\"Retain-CID\">>, <<\"true\">>}\n  ...\n 1019                ,{<<\"Export-Custom-Channel-Vars\">>, [<<\"Account-ID\">>\n 1020                                                     ,<<\"Retain-CID\">>\n 1021:                                                    ,<<\"Authorizing-ID\">>\n 1022:                                                    ,<<\"Authorizing-Type\">>\n 1023                                                    ]}\n 1024                ,{<<\"Account-ID\">>, AcctId}\n\n/home/sam/conversant/repos/kazoo/applications/acdc/src/acdc_handlers.erl:\n  137  \n  138  update_agent_device(Call, AgentId, <<\"login\">>) ->\n  139:     lager:debug(\"need to set owner_id to ~s on device ~s\", [AgentId, whapps_call:authorizing_id(Call)]),\n  140:     {'ok', Device} = couch_mgr:open_doc(whapps_call:account_db(Call), whapps_call:authorizing_id(Call)),\n  141      lager:debug(\"setting owner_id from ~s to ~s\", [wh_json:get_value(<<\"owner_id\">>, Device), AgentId]),\n  142  \n  143      move_agent_device(Call, AgentId, Device);\n  144  update_agent_device(Call, AgentId, <<\"logout\">>) ->\n  145:     {'ok', Device} = couch_mgr:open_doc(whapps_call:account_db(Call), whapps_call:authorizing_id(Call)),\n  146  \n  147      case wh_json:get_value(<<\"owner_id\">>, Device) of\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_attributes.erl:\n  408  \n  409  presence_id(Call) ->\n  410:     presence_id(whapps_call:authorizing_id(Call), Call).\n  411  \n  412  presence_id(EndpointId, Call) when is_binary(EndpointId) ->\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_endpoint.erl:\n   41                   {'ok', wh_json:object()} |\n   42                   {'error', term()}.\n   43: get(Call) -> get(whapps_call:authorizing_id(Call), Call).\n   44  \n   45  get('undefined', _Call) ->\n   ..\n  454  maybe_endpoint_called_self(Endpoint, Properties, Call) ->\n  455      CanCallSelf = wh_json:is_true(<<\"can_call_self\">>, Properties),\n  456:     AuthorizingId = whapps_call:authorizing_id(Call),\n  457      EndpointId = wh_json:get_value(<<\"_id\">>, Endpoint),\n  458      case CanCallSelf\n  459:         orelse (not is_binary(AuthorizingId))\n  460          orelse (not is_binary(EndpointId))\n  461:         orelse AuthorizingId =/= EndpointId\n  462      of\n  463          'true' -> 'ok';\n  ...\n  926                              'undefined' -> J;\n  927                              EndpointId ->\n  928:                                 wh_json:set_value(<<\"Authorizing-ID\">>, EndpointId, J)\n  929                          end\n  930                  end\n  ...\n  949                              _ ->\n  950                                  wh_json:set_values([{<<\"Call-Forward\">>, <<\"true\">>}\n  951:                                                     ,{<<\"Authorizing-Type\">>, <<\"device\">>}\n  952                                                     ], J)\n  953                          end\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_exe.erl:\n  666          _Else -> lager:info(\"inception ~s: using attributes for an external call\", [_Else])\n  667      end,\n  668:     lager:info(\"authorizing id ~s\", [whapps_call:authorizing_id(Call)]).\n  669  \n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_route_req.erl:\n   88  -spec allow_no_match_type(whapps_call:call()) -> boolean().\n   89  allow_no_match_type(Call) ->\n   90:     case whapps_call:authorizing_type(Call) of\n   91          'undefined' -> 'false';\n   92          <<\"resource\">> -> 'false';\n   ..\n  103  -spec callflow_should_respond(whapps_call:call()) -> boolean().\n  104  callflow_should_respond(Call) ->\n  105:     case whapps_call:authorizing_type(Call) of\n  106          <<\"user\">> -> 'true';\n  107          <<\"device\">> -> 'true';\n  ...\n  167      case whapps_config:get_is_true(<<\"callflow\">>, <<\"ring_ready_offnet\">>, 'true')\n  168          andalso whapps_call:inception(Call) =/= 'undefined'\n  169:         andalso whapps_call:authorizing_type(Call) =:= 'undefined'\n  170      of\n  171          'false' -> <<\"none\">>;\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_route_win.erl:\n   83  -spec get_caller_groups(wh_json:objects(), wh_json:object(), whapps_call:call()) -> set().\n   84  get_caller_groups(Groups, JObj, Call) ->\n   85:     Ids = [whapps_call:authorizing_id(Call)\n   86             ,wh_json:get_value(<<\"owner_id\">>, JObj)\n   87             | wh_json:get_keys([<<\"hotdesk\">>, <<\"users\">>], JObj)\n   ..\n  195          MetaFlow -> maybe_start_metaflow(Call, MetaFlow)\n  196      end,\n  197:     maybe_start_endpoint_metaflow(Call, whapps_call:authorizing_id(Call)),\n  198      Call.\n  199  \n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_util.erl:\n  804  -spec caller_belongs_to_group(ne_binary(), whapps_call:call()) -> boolean().\n  805  caller_belongs_to_group(GroupId, Call) ->\n  806:     lists:member(whapps_call:authorizing_id(Call), find_group_endpoints(GroupId, Call)).\n  807  \n  808  -spec caller_belongs_to_user(ne_binary(), whapps_call:call()) -> boolean().\n  809  caller_belongs_to_user(UserId, Call) ->\n  810:     lists:member(whapps_call:authorizing_id(Call), find_user_endpoints([UserId],[],Call)).\n  811  \n  812  -spec find_group_endpoints(ne_binary(), whapps_call:call()) -> ne_binaries().\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_acdc_agent.erl:\n   48                  maybe_update_status(Call, AgentId, Status, NewStatus, Data);\n   49              {'error', 'multiple_owners'} ->\n   50:                 lager:info(\"too many owners of device ~s, not logging in\", [whapps_call:authorizing_id(Call)]),\n   51                  play_agent_invalid(Call)\n   52          end,\n   ..\n  196                          {'error', find_agent_error()}.\n  197  find_agent(Call) ->\n  198:     find_agent(Call, whapps_call:authorizing_id(Call)).\n  199  \n  200  find_agent(_Call, 'undefined') ->\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_acdc_queue.erl:\n   38                  maybe_update_status(Call, AgentId, QueueId, Status, Action);\n   39              {'error', 'multiple_owners'} ->\n   40:                 lager:info(\"too many owners of device ~s, not logging in\", [whapps_call:authorizing_id(Call)]),\n   41                  cf_acdc_agent:play_agent_invalid(Call)\n   42          end,\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_call_forward.erl:\n  259  get_call_forward(Call) ->\n  260      AccountDb = whapps_call:account_db(Call),\n  261:     AuthorizingId = whapps_call:authorizing_id(Call),\n  262:     ViewOptions = [{<<\"key\">>, AuthorizingId}],\n  263      Id = case couch_mgr:get_results(AccountDb, <<\"cf_attributes/owner\">>, ViewOptions) of\n  264:              {'ok', [Owner]} -> wh_json:get_value(<<\"value\">>, Owner, AuthorizingId);\n  265:              _E -> AuthorizingId\n  266           end,\n  267      case couch_mgr:open_doc(AccountDb, Id) of\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_do_not_disturb.erl:\n   74          {'error', _} ->\n   75              lager:info(\"dnd feature could not find the owner document\", []),\n   76:             maybe_get_authorizing_device(AccountDb, Data, Call);\n   77          {'ok', _}=Ok -> Ok\n   78      end.\n   79  \n   80: -spec maybe_get_authorizing_device(ne_binary(), wh_json:object(), whapps_call:call()) -> wh_jobj_return().\n   81: maybe_get_authorizing_device(AccountDb, _, Call) ->\n   82:     AuthorizingId = whapps_call:authorizing_id(Call),\n   83:     maybe_get_doc(AccountDb, AuthorizingId).\n   84  \n   85  -spec maybe_get_doc(api_binary(), api_binary()) -> wh_jobj_return().\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_eavesdrop.erl:\n   60          DeviceId ->\n   61              %% Compare approved device_id with calling one\n   62:             DeviceId == whapps_call:authorizing_id(Call)\n   63      end.\n   64  \n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_group.erl:\n   76       || {Type, Id, Member} <- resolve_endpoint_ids(Members, [], Call)\n   77              ,Type =:= <<\"device\">>\n   78:             ,Id =/= whapps_call:authorizing_id(Call)\n   79      ].\n   80  \n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_group_pickup.erl:\n   62          DeviceId ->\n   63              % Compare approved device_id with calling one\n   64:             DeviceId == whapps_call:authorizing_id(Call)\n   65      end.\n   66  \n   67  -spec maybe_belongs_to_user(ne_binary(), whapps_call:call()) -> boolean().\n   68  maybe_belongs_to_user(UserId, Call) ->\n   69:     lists:member(whapps_call:authorizing_id(Call), find_user_endpoints([UserId],[],Call)).\n   70  \n   71  -spec maybe_belongs_to_group(ne_binary(), whapps_call:call()) -> boolean().\n   72  maybe_belongs_to_group(GroupId, Call) ->\n   73:     lists:member(whapps_call:authorizing_id(Call), find_group_endpoints(GroupId, Call)).\n   74  \n   75  -spec connect_to_ringing_channel(ne_binaries(), whapps_call:call()) -> 'ok'.\n   ..\n  189  find_channels(DeviceIds) ->\n  190      lager:debug(\"finding channels for devices ids ~p\", [DeviceIds]),\n  191:     Req = [{<<\"Authorizing-IDs\">>, DeviceIds}\n  192             ,{<<\"Active-Only\">>, 'true'}\n  193             | wh_api:default_headers(?APP_NAME, ?APP_VERSION)\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_hotdesk.erl:\n   52  \n   53  hotdesk_id(Data, <<\"logout\">>, Call) ->\n   54:     case cf_attributes:owner_ids(whapps_call:authorizing_id(Call), Call) of\n   55          [] -> wh_json:get_value(<<\"id\">>, Data);\n   56          [Id] -> wh_json:get_value(<<\"id\">>, Data, Id);\n   ..\n  121  %% @doc\n  122  %% Conditions that this needs to handle:\n  123: %% 0) sanity check the authorizing id\n  124  %% 1) Has there been to many attempts to enter a valid pwd/id\n  125  %% 2) Do we know the user id? if not ask for the hotdesk id...\n  ...\n  178  maybe_logout_elsewhere(#hotdesk{keep_logged_in_elsewhere='false'}=Hotdesk, Call) ->\n  179      H = remove_from_endpoints(Hotdesk, Call),\n  180:     get_authorizing_id(H, Call);\n  181  maybe_logout_elsewhere(Hotdesk, Call) ->\n  182:     get_authorizing_id(Hotdesk, Call).\n  183  \n  184: -spec get_authorizing_id(hotdesk(), whapps_call:call()) ->\n  185                                  whapps_api_std_return().\n  186: get_authorizing_id(Hotdesk, Call) ->\n  187:     login_authorizing_id(whapps_call:authorizing_id(Call), Hotdesk, Call).\n  188  \n  189: -spec login_authorizing_id(api_binary(), hotdesk(), whapps_call:call()) ->\n  190                                    whapps_api_std_return().\n  191: login_authorizing_id('undefined', _, Call) ->\n  192      whapps_call_command:b_prompt(<<\"hotdesk-abort\">>, Call),\n  193      whapps_call_command:b_prompt(<<\"vm-goodbye\">>, Call);\n  194: login_authorizing_id(AuthorizingId, #hotdesk{owner_id=OwnerId}=Hotdesk, Call) ->\n  195      AccountDb = whapps_call:account_db(Call),\n  196      Fun = fun(JObj) ->\n  197                    wh_json:set_value([<<\"hotdesk\">>, <<\"users\">>, OwnerId], wh_json:new(), JObj)\n  198            end,\n  199:     case update_hotdesk_endpoint(AccountDb, AuthorizingId, Fun) of\n  200          {'ok', _} -> logged_in(Hotdesk, Call);\n  201          {'error', _} ->\n  ...\n  214  %% @doc\n  215  %% Logout process\n  216: %% 0) sanity check the authorizing id\n  217  %%\n  218  %% Do Logout process\n  219  %% 1) Should the user remain logged in elsewhere?\n  220: %% 2y) Remove the owner_id of the authorizing object\n  221  %% 2n) Remove this owner_id from any devices\n  222  %% 3) Infrom the user\n  ...\n  230  maybe_keep_logged_in_elsewhere(#hotdesk{keep_logged_in_elsewhere='true'}=Hotdesk\n  231                                 ,Call) ->\n  232:     keep_logged_in_elsewhere(whapps_call:authorizing_id(Call), Hotdesk, Call);\n  233  maybe_keep_logged_in_elsewhere(Hotdesk, Call) ->\n  234      H = remove_from_endpoints(Hotdesk, Call),\n  ...\n  239  keep_logged_in_elsewhere('undefined', Hotdesk, Call) ->\n  240      logged_out(Hotdesk, Call);\n  241: keep_logged_in_elsewhere(AuthorizingId, #hotdesk{endpoint_ids=EndpointIds\n  242                                                   ,owner_id=OwnerId\n  243                                                  }=Hotdesk, Call) ->\n  ...\n  246                    wh_json:delete_key([<<\"hotdesk\">>, <<\"users\">>, OwnerId], JObj)\n  247            end,\n  248:     case update_hotdesk_endpoint(AccountDb, AuthorizingId, Fun) of\n  249          {'ok', _} ->\n  250:             UpdatedIds = lists:delete(AuthorizingId, EndpointIds),\n  251              logged_out(Hotdesk#hotdesk{endpoint_ids=UpdatedIds}, Call);\n  252          {'error', _} ->\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_intercept.erl:\n   50  -spec maybe_same_user(wh_json:object(), whapps_call:call()) -> boolean().\n   51  maybe_same_user(Data, Call) ->\n   52:     CallerDevice = whapps_call:authorizing_id(Call),\n   53      case couch_mgr:open_cache_doc(whapps_call:account_db(Call), CallerDevice) of\n   54          {'ok', DevDoc} ->\n   ..\n   78  -spec maybe_same_group(wh_json:object(), whapps_call:call()) -> boolean().\n   79  maybe_same_group(Data, Call) ->\n   80:     CallerDevice = whapps_call:authorizing_id(Call),\n   81      Acc = whapps_call:account_db(Call),\n   82      case couch_mgr:open_cache_doc(Acc, CallerDevice) of\n   ..\n  133          DeviceId ->\n  134              % Compare approved device_id with calling one\n  135:             {'ok', DeviceId == whapps_call:authorizing_id(Call)}\n  136      end.\n  137  \n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_intercept_feature.erl:\n   91  -spec maybe_allowed_to_intercept(whapps_call:call(), wh_proplist()) -> boolean().\n   92  maybe_allowed_to_intercept(Call, Props) ->\n   93:     case couch_mgr:open_cache_doc(whapps_call:account_db(Call), whapps_call:authorizing_id(Call)) of\n   94          {'ok', DeviceDoc} ->\n   95              maybe_allowed_to_intercept(Call, Props, DeviceDoc);\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_move.erl:\n   50  get_channels(OwnerId, Call) ->\n   51      DeviceIds = cf_attributes:owned_by(OwnerId, <<\"device\">>, Call),\n   52:     Req = [{<<\"Authorizing-IDs\">>, DeviceIds}\n   53             | wh_api:default_headers(?APP_NAME, ?APP_VERSION)\n   54            ],\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_page_group.erl:\n   68       || {Type, Id, Member} <- resolve_endpoint_ids(Members, [], Call)\n   69              ,Type =:= <<\"device\">>\n   70:             ,Id =/= whapps_call:authorizing_id(Call)\n   71      ].\n   72  \n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_ring_group.erl:\n   75       || {Type, Id, Member} <- resolve_endpoint_ids(Members, [], Call)\n   76              ,Type =:= <<\"device\">>\n   77:             ,Id =/= whapps_call:authorizing_id(Call)\n   78      ].\n   79  \n\n/home/sam/conversant/repos/kazoo/applications/cdr/priv/couchdb/fixtures/cdr.json:\n    8          \"realm\": \"account_realm\",\n    9          \"account_id\": \"7f89565344e3e6302df60168420e9265\",\n   10:         \"authorizing_id\": \"81d406796c370b29a3cdc3713720ed61\",\n   11:         \"authorizing_type\": \"device\",\n   12          \"owner_id\": \"c119a4487f26920476ad6dec74471768\",\n   13      },\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/priv/couchdb/account/cdrs.json:\n    4     \"views\": {\n    5         \"crossbar_listing\": {\n    6:            \"map\": \"function (doc) {if (doc.pvt_deleted || doc.pvt_type != 'cdr') return;if (doc.pvt_type == 'cdr' && doc.custom_channel_vars && (doc.custom_channel_vars.account_billing == 'per_minute' || doc.custom_channel_vars.account_billing == 'per_minute_limit') && doc.custom_channel_vars.account_id == doc.pvt_account_id.split('-')[0] && doc.pvt_vsn && parseInt(doc.pvt_vsn) == 2) {var Secs = (parseInt(doc.billing_seconds) || 0) - (parseInt(doc.custom_channel_vars.billing_seconds_offset) || 0);var Cost = 0;if (Secs >= 1) {var R = parseInt(doc.custom_channel_vars.rate) || 0;var RInc = parseInt(doc.custom_channel_vars.rate_increment) || 60;var RMin = parseInt(doc.custom_channel_vars.rate_minimum) || 0;var Sur = parseInt(doc.custom_channel_vars.surcharge) || 0;if (RInc < 1) {RInc = 60;}if (Secs <= RMin) {Cost = Sur + ((RMin / 60) * R);} else {Cost = Sur + ((RMin / 60) * R) + (Math.ceil((Secs - RMin) / RInc) * ((RInc / 60) * R));}}}if (Cost) {var Discount = (parseInt(doc.custom_channel_vars.discount_percentage) || 0) * 0.01 * Cost;emit(doc.pvt_created, {id: doc._id,call_id: doc.call_id,caller_id_name: doc.caller_id_name,caller_id_number: doc.caller_id_number,callee_id_name: doc.callee_id_name,callee_id_number: doc.callee_id_number,duration_seconds: doc.duration_seconds,billing_seconds: doc.billing_seconds,timestamp: doc.timestamp,hangup_cause: doc.hangup_cause,other_leg_call_id: doc.other_leg_call_id,owner_id: doc.custom_channel_vars.owner_id,to: doc.to_uri,from: doc.from_uri,inception: doc.custom_channel_vars.inception,direction: doc.call_direction,request: doc.request,authorizing_id: doc.custom_channel_vars.authorizing_id,cost: Cost - Discount});} else {emit(doc.pvt_created, {id: doc._id,call_id: doc.call_id,caller_id_name: doc.caller_id_name,caller_id_number: doc.caller_id_number,callee_id_name: doc.callee_id_name,callee_id_number: doc.callee_id_number,duration_seconds: doc.duration_seconds,billing_seconds: doc.billing_seconds,timestamp: doc.timestamp,hangup_cause: doc.hangup_cause,other_leg_call_id: doc.other_leg_call_id,owner_id: doc.custom_channel_vars.owner_id,to: doc.to_uri,from: doc.from_uri,inception: doc.custom_channel_vars.inception,direction: doc.call_direction,request: doc.request,authorizing_id: doc.custom_channel_vars.authorizing_id});}}\"\n    7         },\n    8         \"listing_by_owner\" : {\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/priv/couchdb/account/devices.json:\n   10          }\n   11         ,\"sip_credentials\":{\n   12:            \"map\": \"function (doc) {if (typeof doc.sip !== 'undefined' && !doc.pvt_deleted) {var sip = JSON.parse(JSON.stringify(doc.sip)); sip.authorizing_id = doc._id; sip.authorizing_type = doc.pvt_type; emit(sip.username.toLowerCase(), sip);} else if (doc.pvt_type === 'sys_info' && !doc.pvt_deleted) {for (i in doc.servers) {if (!doc.servers[i].auth || !doc.servers[i].auth.auth_method || doc.servers[i].auth.auth_method.toLowerCase() != \\\"password\\\") continue; var auth = doc.servers[i].auth; var sip = {'password': auth.auth_password, 'username': auth.auth_user, 'method': auth.auth_method || 'password', 'invite_format': doc.servers[i].options.inbound_format || 'e164'}; sip.authorizing_id = doc._id; sip.authorizing_type = doc.pvt_type; emit(sip.username.toLowerCase(), sip);}}}\"\n   13          },\n   14          \"listing_by_macaddress\": {\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/priv/couchdb/templates/loa.tmpl:\n    4      <p>My signature below certifies that I am the customer of record or the authorized representative for payment for each of the telephone numbers listed below.</p>\n    5      <p>For each of the telephone numbers listed herein and on Attachment A, I appoint {{reseller.name|default:\"\"}} (hereinafter \"TELCO\") to act as my Agent for the purpose of collecting my account information with my current local telephone carrier or provider (hereinafter \"Provider\").</p>\n    6:     <p>By selecting TELCO to act as my Agent to research my current services with my current Provider of local telephone service, I am authorizing the change of my local telephone Provider from that/those, which I am currently using to TELCO. This authorization will expire only upon written notification.</p>\n    7      <form>\n    8        <ul>\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_clicktocall.erl:\n   98  -spec authorize(#cb_context{}) -> 'true'.\n   99  authorize(#cb_context{req_nouns = ?CONNECT_C2C_URL, req_verb = ?HTTP_POST}) ->\n  100:     lager:debug(\"authorizing request\"),\n  101      true.\n  102  \n  ...\n  233              ,{<<\"Auto-Answer\">>, <<\"true\">>}\n  234              ,{<<\"Retain-CID\">>, <<\"true\">>}\n  235:             ,{<<\"Authorizing-ID\">>, wh_json:get_value(<<\"_id\">>, JObj)}\n  236              ,{<<\"Inherit-Codec\">>, <<\"false\">>}\n  237:             ,{<<\"Authorizing-Type\">>, <<\"device\">>}\n  238             ],\n  239  \n  ...\n  262                 ,{<<\"SIP-Headers\">>, wh_json:get_value(<<\"SIP-Headers\">>, JObj)}\n  263                 ,{<<\"Custom-Channel-Vars\">>, wh_json:from_list(CCVs)}\n  264:                ,{<<\"Export-Custom-Channel-Vars\">>, [<<\"Account-ID\">>, <<\"Retain-CID\">>, <<\"Authorizing-ID\">>, <<\"Authorizing-Type\">>]}\n  265                 | wh_api:default_headers(Amqp, <<\"resource\">>, <<\"originate_req\">>, ?APP_NAME, ?APP_VERSION)\n  266                ],\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_local_resources.erl:\n  324                              'undefined' -> IPs;\n  325                              CIDR ->\n  326:                                 AuthorizingId = wh_json:get_value([K, <<\"authorizing_id\">>], JObj),\n  327:                                 [{CIDR, AuthorizingId}\n  328                                   |IPs\n  329                                  ]\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_modules_util.erl:\n  102  \n  103  request_specific_extraction_funs_from_nouns(?DEVICES_QCALL_NOUNS) ->\n  104:     [fun(C) -> whapps_call:set_authorizing_id(_DeviceId, C) end\n  105:      ,fun(C) -> whapps_call:set_authorizing_type(<<\"device\">>, C) end\n  106       ,fun(C) -> whapps_call:set_request(<<_Number/binary, \"@devicequickcall\">>, C) end\n  107       ,fun(C) -> whapps_call:set_to(<<_Number/binary, \"@devicequickcall\">>, C) end\n  108      ];\n  109  request_specific_extraction_funs_from_nouns(?USERS_QCALL_NOUNS) ->\n  110:     [fun(C) -> whapps_call:set_authorizing_id(_UserId, C) end\n  111:      ,fun(C) -> whapps_call:set_authorizing_type(<<\"user\">>, C) end\n  112       ,fun(C) -> whapps_call:set_request(<<_Number/binary, \"@userquickcall\">>, C) end\n  113       ,fun(C) -> whapps_call:set_to(<<_Number/binary, \"@userquickcall\">>, C) end\n  ...\n  168              ,{<<\"Retain-CID\">>, <<\"true\">>}\n  169              ,{<<\"Inherit-Codec\">>, <<\"false\">>}\n  170:             ,{<<\"Authorizing-Type\">>, whapps_call:authorizing_type(Call)}\n  171:             ,{<<\"Authorizing-ID\">>, whapps_call:authorizing_id(Call)}\n  172             ],\n  173      MsgId = case wh_util:is_empty(cb_context:req_id(Context)) of\n  ...\n  189                 ,{<<\"Continue-On-Fail\">>, 'false'}\n  190                 ,{<<\"Custom-Channel-Vars\">>, wh_json:from_list(CCVs)}\n  191:                ,{<<\"Export-Custom-Channel-Vars\">>, [<<\"Account-ID\">>, <<\"Retain-CID\">>, <<\"Authorizing-ID\">>, <<\"Authorizing-Type\">>]}\n  192                 | wh_api:default_headers(<<>>, <<\"resource\">>, <<\"originate_req\">>, ?APP_NAME, ?APP_VERSION)\n  193                ],\n  ...\n  273              end;\n  274          {'error', _} ->\n  275:             lager:debug(\"not authorizing, error during lookup\"),\n  276              'false'\n  277      end.\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_noauthz.erl:\n   27  -spec authorize(#cb_context{}) -> 'true'.\n   28  authorize(_) ->\n   29:     lager:debug(\"noauthz authorizing request\"),\n   30      true.\n   31  \n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_schemas.erl:\n   34  \n   35  authorize(#cb_context{req_nouns=[{<<\"schemas\">>,_}]}) ->\n   36:     lager:debug(\"authorizing request to fetch schema(s)\"),\n   37      true.\n   38  \n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_shared_auth.erl:\n  144  validate(#cb_context{auth_doc=undefined, req_verb = ?HTTP_GET}=Context) ->\n  145      _ = cb_context:put_reqid(Context),\n  146:     lager:debug(\"valid shared auth request received but there is no authorizing doc (noauth running?)\"),\n  147      cb_context:add_system_error(invalid_credentials, Context);\n  148  validate(#cb_context{auth_doc=JObj, req_verb = ?HTTP_GET}=Context) ->\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_simple_authz.erl:\n   54      of\n   55          'true' ->\n   56:             lager:debug(\"authorizing the request\"),\n   57              'true';\n   58          'false' ->\n   ..\n   74  \n   75  account_is_descendant('false', _Context, 'undefined') ->\n   76:     lager:debug(\"not authorizing, auth account id is undefined\"),\n   77      'false';\n   78  account_is_descendant('false', Context, AuthAccountId) ->\n   ..\n   82          %% if the URL did not have the accounts noun then this module denies access\n   83          'undefined' ->\n   84:             lager:debug(\"not authorizing, no accounts in request\"),\n   85              'false';\n   86          Params ->\n   ..\n   94              case ReqAccountId =:= AuthAccountId orelse couch_mgr:open_cache_doc(ReqAccountDb, ReqAccountId) of\n   95                  'true' ->\n   96:                     lager:debug(\"authorizing, requested account is the same as the auth token account\"),\n   97                      'true';\n   98                  %% if the requested account exists, the second component of the key\n   ..\n  102                      case lists:member(AuthAccountId, Tree) of\n  103                          'true' ->\n  104:                             lager:debug(\"authorizing requested account is a descendant of the auth token\"),\n  105                              'true';\n  106                          'false' ->\n  107:                             lager:debug(\"not authorizing, requested account is not a descendant of the auth token\"),\n  108                              'false'\n  109                      end;\n  110                  %% anything else and they are not allowed\n  111                  {'error', _E} ->\n  112:                     lager:debug(\"not authorizing, error during lookup: ~p\", [_E]),\n  113                      'false'\n  114              end\n  ...\n  128          %% function doesnt deny it\n  129          'false' ->\n  130:             lager:debug(\"authorizing, the request does not contain any system administration modules\"),\n  131              'true';\n  132          %% if this request is to a system admin module then check if the\n  133          %% account has the 'pvt_superduper_admin'\n  134          'true' when IsSysAdmin ->\n  135:             lager:debug(\"authorizing superduper admin access to system administration module\"),\n  136              'true';\n  137          'true' ->\n  138:             lager:debug(\"not authorizing, the request contains a system administration module\"),\n  139              'false'\n  140      end.\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules_v1/cb_devices_v1.erl:\n  135      authorize(cb_context:req_nouns(Context), cb_context:req_verb(Context)).\n  136  authorize(?DEVICES_QCALL_NOUNS, ?HTTP_GET) ->\n  137:     lager:debug(\"authorizing request\"),\n  138      'true';\n  139  authorize(_Nouns, _Verb) -> 'false'.\n  ...\n  427  lookup_regs(AccountRealm) ->\n  428      Req = [{<<\"Realm\">>, AccountRealm}\n  429:            ,{<<\"Fields\">>, [<<\"Authorizing-ID\">>]}\n  430             | wh_api:default_headers(?APP_NAME, ?APP_VERSION)\n  431            ],\n  ...\n  439              [];\n  440          {_, JObjs} ->\n  441:             [wh_json:from_list([{<<\"device_id\">>, AuthorizingId}\n  442                                  ,{<<\"registered\">>, 'true'}\n  443                                 ])\n  444:              || AuthorizingId <- extract_device_registrations(JObjs)\n  445              ]\n  446      end.\n  ...\n  455      Fields = wh_json:get_value(<<\"Fields\">>, JObj, []),\n  456      S = lists:foldl(fun(J, S) ->\n  457:                             case wh_json:get_ne_value(<<\"Authorizing-ID\">>, J) of\n  458                                  'undefined' -> S;\n  459                                  AuthId -> sets:add_element(AuthId, S)\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules_v1/cb_users_v1.erl:\n  140  \n  141  authorize_users(?USERS_QCALL_NOUNS, ?HTTP_GET) ->\n  142:     lager:debug(\"authorizing request\"),\n  143      'true';\n  144  authorize_users(_Nouns, _Verb) -> 'false'.\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules_v2/cb_devices_v2.erl:\n  136  \n  137  authorize(?HTTP_GET, ?DEVICES_QCALL_NOUNS) ->\n  138:     lager:debug(\"authorizing request\"),\n  139      'true';\n  140  authorize(_Verb, _Nouns) ->\n  ...\n  465  lookup_regs(AccountRealm) ->\n  466      Req = [{<<\"Realm\">>, AccountRealm}\n  467:            ,{<<\"Fields\">>, [<<\"Authorizing-ID\">>]}\n  468             | wh_api:default_headers(?APP_NAME, ?APP_VERSION)\n  469            ],\n  ...\n  477              [];\n  478          {_, JObjs} ->\n  479:             [wh_json:from_list([{<<\"device_id\">>, AuthorizingId}\n  480                                  ,{<<\"registered\">>, 'true'}\n  481                                 ])\n  482:              || AuthorizingId <- extract_device_registrations(JObjs)\n  483              ]\n  484      end.\n  ...\n  493      Fields = wh_json:get_value(<<\"Fields\">>, JObj, []),\n  494      S = lists:foldl(fun(J, S) ->\n  495:                             case wh_json:get_ne_value(<<\"Authorizing-ID\">>, J) of\n  496                                  'undefined' -> S;\n  497                                  AuthId -> sets:add_element(AuthId, S)\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules_v2/cb_users_v2.erl:\n  120  \n  121  authorize_users(?USERS_QCALL_NOUNS, ?HTTP_GET) ->\n  122:     lager:debug(\"authorizing request\"),\n  123      'true';\n  124  authorize_users(_Nouns, _Verb) -> 'false'.\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr.hrl:\n   53                    ,account_id :: api_binary() | '$1' | '$2' | '_'\n   54                    ,account_billing :: api_binary() | '$7' | '_'\n   55:                   ,authorizing_id :: api_binary() | '$1' | '$3' | '_'\n   56:                   ,authorizing_type :: api_binary() | '_'\n   57                    ,owner_id :: api_binary() | '_'\n   58                    ,resource_id :: api_binary() | '$4' | '_'\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_authn.erl:\n  303              AccountId = wh_json:get_value([<<\"Custom-Channel-Vars\">>, <<\"Account-ID\">>], JObj),\n  304              AccountDb = wh_util:format_account_id(AccountId, 'encoded'),\n  305:             AuthorizingId = wh_json:get_value([<<\"Custom-Channel-Vars\">>, <<\"Authorizing-ID\">>], JObj),\n  306:             CacheProps = [{'origin', [{'db', AccountDb, AuthorizingId}\n  307                                       ,{'db', AccountDb, AccountId}\n  308                                       ]}\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_authz.erl:\n  115              end;\n  116          <<\"inbound\">> ->\n  117:             case props:get_value(?GET_CCV(<<\"Authorizing-ID\">>), Props) =:= 'undefined'\n  118:                 orelse props:get_value(?GET_CCV(<<\"Authorizing-Type\">>), Props) =:= <<\"resource\">>\n  119              of\n  120                  'true' -> request_channel_authorization(Props, CallId, Node);\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_channel.erl:\n  187         ,{<<\"account_id\">>, Channel#channel.account_id}\n  188         ,{<<\"account_billing\">>, Channel#channel.account_billing}\n  189:        ,{<<\"authorizing_id\">>, Channel#channel.authorizing_id}\n  190:        ,{<<\"authorizing_type\">>, Channel#channel.authorizing_type}\n  191         ,{<<\"owner_id\">>, Channel#channel.owner_id}\n  192         ,{<<\"resource_id\">>, Channel#channel.resource_id}\n  ...\n  220         ,{<<\"Account-ID\">>, Channel#channel.account_id}\n  221         ,{<<\"Account-Billing\">>, Channel#channel.account_billing}\n  222:        ,{<<\"Authorizing-ID\">>, Channel#channel.authorizing_id}\n  223:        ,{<<\"Authorizing-Type\">>, Channel#channel.authorizing_type}\n  224         ,{<<\"Owner-ID\">>, Channel#channel.owner_id}\n  225         ,{<<\"Resource-ID\">>, Channel#channel.resource_id}\n  ...\n  494               ,account_id=props:get_value(?GET_CCV(<<\"Account-ID\">>), Props)\n  495               ,account_billing=props:get_value(?GET_CCV(<<\"Account-Billing\">>), Props)\n  496:              ,authorizing_id=props:get_value(?GET_CCV(<<\"Authorizing-ID\">>), Props)\n  497:              ,authorizing_type=props:get_value(?GET_CCV(<<\"Authorizing-Type\">>), Props)\n  498               ,owner_id=props:get_value(?GET_CCV(<<\"Owner-ID\">>), Props)\n  499               ,resource_id=props:get_value(?GET_CCV(<<\"Resource-ID\">>), Props)\n  ...\n  537                              ,{#channel.account_id, props:get_value(?GET_CCV(<<\"Account-ID\">>), Props)}\n  538                              ,{#channel.account_billing, props:get_value(?GET_CCV(<<\"Account-Billing\">>), Props)}\n  539:                             ,{#channel.authorizing_id, props:get_value(?GET_CCV(<<\"Authorizing-ID\">>), Props)}\n  540:                             ,{#channel.authorizing_type, props:get_value(?GET_CCV(<<\"Authorizing-Type\">>), Props)}\n  541                              ,{#channel.owner_id, props:get_value(?GET_CCV(<<\"Owner-ID\">>), Props)}\n  542                              ,{#channel.resource_id, props:get_value(?GET_CCV(<<\"Resource-ID\">>), Props)}\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_channels.erl:\n  200                              find_by_user_realm(Usernames, Realm)\n  201                      end,\n  202:     UserChannels1 = case wh_json:get_value(<<\"Authorizing-IDs\">>, JObj) of\n  203                          'undefined' -> [];\n  204:                         AuthIds -> find_by_authorizing_id(AuthIds)\n  205                      end,\n  206      UserChannels2 = lists:keymerge(1, UserChannels0, UserChannels1),\n  ...\n  476                               {'ok', wh_json:objects()} |\n  477                               {'error', 'not_found'}.\n  478: find_by_auth_id(AuthorizingId) ->\n  479:     MatchSpec = [{#channel{authorizing_id = '$1', _ = '_'}\n  480:                   ,[{'=:=', '$1', {'const', AuthorizingId}}]\n  481                    ,['$_']}\n  482                  ],\n  ...\n  488      end.\n  489  \n  490: -spec find_by_authorizing_id(ne_binaries()) -> [] | wh_proplist().\n  491: -spec find_by_authorizing_id(ne_binaries(), wh_proplist()) -> [] | wh_proplist().\n  492: find_by_authorizing_id(AuthIds) ->\n  493:     find_by_authorizing_id(AuthIds, []).\n  494  \n  495: find_by_authorizing_id([], Acc) -> Acc;\n  496: find_by_authorizing_id([AuthId|AuthIds], Acc) ->\n  497:     Pattern = #channel{authorizing_id=AuthId\n  498                         ,_='_'},\n  499      case ets:match_object(?CHANNELS_TBL, Pattern) of\n  500:         [] -> find_by_authorizing_id(AuthIds, Acc);\n  501          Channels ->\n  502              Cs = [{Channel#channel.uuid, ecallmgr_fs_channel:to_json(Channel)}\n  503                    || Channel <- Channels\n  504                   ],\n  505:             find_by_authorizing_id(AuthIds, lists:keymerge(1, Acc, Cs))\n  506      end.\n  507  \n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_maintenance.erl:\n  509      io:format(\"+--------------------------------+-------------------+---------------+-------+------------------+----------------------------------+~n\", []),\n  510      FormatString = \"| ~-30s | ~-17s | ~-13s | ~-5s | ~-16s | ~-32s |~n\",\n  511:     io:format(FormatString, [<<\"Name\">>, <<\"CIDR\">>, <<\"List\">>, <<\"Type\">>, <<\"Authorizing Type\">>, <<\"ID\">>]),\n  512      io:format(\"+================================+===================+===============+=======+==================+==================================+~n\", []),\n  513      Props = wh_json:foldl(fun(Name, ACL, Acc) ->\n  ...\n  531                               ,wh_json:get_value(<<\"network-list-name\">>, ACL)\n  532                               ,wh_json:get_value(<<\"type\">>, ACL)\n  533:                              ,wh_json:get_value(<<\"authorizing_type\">>, ACL, <<\"system_config\">>)\n  534                               ,wh_json:get_first_defined([<<\"account_id\">>\n  535:                                                          ,<<\"authorizing_id\">>\n  536                                                          ], ACL, <<>>)\n  537                              ]);\n  ...\n  542                                             ,wh_json:get_value(<<\"network-list-name\">>, ACL)\n  543                                             ,wh_json:get_value(<<\"type\">>, ACL)\n  544:                                            ,wh_json:get_value(<<\"authorizing_type\">>, ACL, <<\"system_config\">>)\n  545                                             ,wh_json:get_first_defined([<<\"account_id\">>\n  546:                                                                        ,<<\"authorizing_id\">>\n  547                                                                        ], ACL, <<>>)\n  548                                            ]);\n  ...\n  569  -spec filter_acls_fun({wh_json:key(), wh_json:json_term()}) -> boolean().\n  570  filter_acls_fun({_Name, ACL}) ->\n  571:     wh_json:get_value(<<\"authorizing_type\">>, ACL) =:= 'undefined'.\n  572  \n  573  -spec carrier_acl(ne_binary()) -> wh_json:object().\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_registrar.erl:\n   94                         ,account_db :: api_binary() | '_'\n   95                         ,account_id :: api_binary() | '_'\n   96:                        ,authorizing_id :: api_binary() | '_'\n   97:                        ,authorizing_type :: api_binary() | '_'\n   98                         ,owner_id :: api_binary() | '_'\n   99                         ,initial = 'true' :: boolean() | '_'\n  ...\n  778              Reg#registration{account_id = AccountId\n  779                               ,account_db = AccountDb\n  780:                              ,authorizing_id = wh_json:get_value(<<\"Authorizing-ID\">>, CCVs)\n  781:                              ,authorizing_type = wh_json:get_value(<<\"Authorizing-Type\">>, CCVs)\n  782                               ,owner_id = wh_json:get_value(<<\"Owner-ID\">>, CCVs)\n  783                               ,account_realm = wh_json:get_value(<<\"Account-Realm\">>, CCVs)\n  ...\n  822              AccountId = wh_json:get_value(<<\"Account-ID\">>, CCVs),\n  823              AccountDb = wh_util:format_account_id(AccountId, 'encoded'),\n  824:             AuthorizingId = wh_json:get_value(<<\"Authorizing-ID\">>, CCVs),\n  825:             CacheProps = [{'origin', [{'db', AccountDb, AuthorizingId}\n  826                                        ,{'db', AccountDb, AccountId}\n  827                                       ]}\n  ...\n  833              Reg#registration{account_id = AccountId\n  834                               ,account_db = AccountDb\n  835:                              ,authorizing_id = AuthorizingId\n  836:                              ,authorizing_type = wh_json:get_value(<<\"Authorizing-Type\">>, CCVs)\n  837                               ,owner_id = wh_json:get_value(<<\"Owner-ID\">>, CCVs)\n  838                               ,suppress_unregister = wh_json:is_true(<<\"Suppress-Unregister-Notifications\">>, JObj)\n  ...\n  844  \n  845  -spec update_cache(registration()) -> registration().\n  846: update_cache(#registration{authorizing_id=AuthorizingId\n  847                             ,account_id=AccountId\n  848:                            ,authorizing_type=AuthorizingType\n  849                             ,account_db=AccountDb\n  850                             ,suppress_unregister=SuppressUnregister\n  ...\n  857      Props = [{#registration.account_id, AccountId}\n  858               ,{#registration.account_db, AccountDb}\n  859:              ,{#registration.authorizing_id, AuthorizingId}\n  860:              ,{#registration.authorizing_type, AuthorizingType}\n  861               ,{#registration.owner_id, OwnerId}\n  862               ,{#registration.suppress_unregister, SuppressUnregister}\n  ...\n  911       ,{<<\"Account-Realm\">>, Reg#registration.account_realm}\n  912       ,{<<\"Account-Name\">>, Reg#registration.account_name}\n  913:      ,{<<\"Authorizing-ID\">>, Reg#registration.authorizing_id}\n  914:      ,{<<\"Authorizing-Type\">>, Reg#registration.authorizing_type}\n  915       ,{<<\"Suppress-Unregister-Notify\">>, Reg#registration.suppress_unregister}\n  916       ,{<<\"Owner-ID\">>, Reg#registration.owner_id}\n\n/home/sam/conversant/repos/kazoo/applications/fax/src/fax_worker.erl:\n   88  handle_fax_event(JObj, Props) ->\n   89      Srv = props:get_value('server', Props),\n   90:     JobId = wh_json:get_value([<<\"Custom-Channel-Vars\">>,<<\"Authorizing-ID\">>], JObj),\n   91      Event = wh_json:get_value(<<\"Application-Event\">>, JObj),\n   92      gen_server:cast(Srv, {'fax_status', Event , JobId, JObj}).\n   ..\n   95  handle_channel_destroy(JObj, Props) ->\n   96      Srv = props:get_value('server', Props),\n   97:     JobId = wh_json:get_value([<<\"Custom-Channel-Vars\">>,<<\"Authorizing-ID\">>], JObj),\n   98      gen_server:cast(Srv, {'channel_destroy', JobId, JObj}).\n   99  \n  ...\n  717                 ,{<<\"Msg-ID\">>, JobId}\n  718                 ,{<<\"Ignore-Early-Media\">>, IgnoreEarlyMedia}\n  719:                ,{<<\"Custom-Channel-Vars\">>, wh_json:from_list([{<<\"Authorizing-ID\">>, JobId}\n  720:                                                               ,{<<\"Authorizing-Type\">>, <<\"outbound_fax\">>}\n  721                                                                ])}\n  722                 ,{<<\"SIP-Headers\">>, wh_json:get_value(<<\"custom_sip_headers\">>, JObj)}\n\n/home/sam/conversant/repos/kazoo/applications/konami/src/konami_code_fsm.erl:\n  447  is_a_leg(_Call, 'undefined') -> 'true';\n  448  is_a_leg(Call, <<_/binary>> = EndpointId) ->\n  449:     EndpointId =:= whapps_call:authorizing_id(Call);\n  450  is_a_leg(Call, JObj) ->\n  451      is_a_leg(Call, wh_json:get_value(<<\"Endpoint-ID\">>, JObj)).\n\n/home/sam/conversant/repos/kazoo/applications/konami/src/konami_listener.erl:\n   91      CCVs = wh_json:get_value(<<\"Custom-Channel-Vars\">>, JObj),\n   92      maybe_start_metaflows(wh_json:get_value(<<\"Account-ID\">>, CCVs)\n   93:                           ,wh_json:get_value(<<\"Authorizing-Type\">>, CCVs)\n   94:                           ,wh_json:get_value(<<\"Authorizing-ID\">>, CCVs)\n   95                            ,wh_json:get_value(<<\"Owner-ID\">>, CCVs)\n   96                            ,wh_json:get_value(<<\"Call-ID\">>, JObj)\n   ..\n   98  \n   99  -spec maybe_start_metaflows(api_binary(), api_binary(), api_binary(), api_binary(), api_binary()) -> 'ok'.\n  100: maybe_start_metaflows('undefined', _AuthorizingType, _AuthorizingId, _OwnerId, _CallId) ->\n  101:     lager:debug(\"no account id for ~s(~s) owned by ~s\", [_AuthorizingId, _AuthorizingType, _OwnerId]);\n  102  maybe_start_metaflows(AccountId, <<\"device\">>, DeviceId, OwnerId, CallId) ->\n  103      maybe_start_device_metaflows(AccountId, DeviceId, CallId),\n  ...\n  106      maybe_start_device_metaflows(AccountId, DeviceId, CallId),\n  107      maybe_start_user_metaflows(AccountId, OwnerId, CallId);\n  108: maybe_start_metaflows(_AccountId, _AuthorizingType, _AuthorizingId, _OwnerId, _CallId) ->\n  109      lager:debug(\"unhandled channel for account ~s: ~s(~s) owned by ~s\"\n  110:                 ,[_AccountId, _AuthorizingId, _AuthorizingType, _OwnerId]).\n  111  \n  112  -spec maybe_start_device_metaflows(ne_binary(), api_binary(), api_binary()) -> 'ok'.\n\n/home/sam/conversant/repos/kazoo/applications/konami/src/module/konami_move.erl:\n   97      {SourceDeviceId, TargetCallId} =\n   98          case source_leg_of_dtmf(SourceOfDTMF, Call) of\n   99:             'a' -> {whapps_call:authorizing_id(Call), whapps_call:other_leg_call_id(Call)};\n  100              'b' -> {find_device_id_for_leg(SourceOfDTMF), whapps_call:call_id(Call)}\n  101          end,\n  ...\n  170  -spec find_device_id_for_leg(ne_binary()) -> api_binary().\n  171  find_device_id_for_leg(CallId) ->\n  172:     case whapps_util:amqp_pool_request([{<<\"Fields\">>, [<<\"Authorizing-ID\">>]}\n  173                                          ,{<<\"Call-ID\">>, CallId}\n  174                                          | wh_api:default_headers(?APP_NAME, ?APP_VERSION)\n  ...\n  179      of\n  180          {'ok', RespJObj} ->\n  181:             wh_json:get_value([<<\"Channels\">>, CallId, <<\"Authorizing-ID\">>], RespJObj);\n  182          {'error', _E} ->\n  183              lager:debug(\"failed to query for ~s: ~p\", [CallId, _E]),\n\n/home/sam/conversant/repos/kazoo/applications/notify/priv/notify_deregister.config:\n    1: {default_text_template, <<\"Expired registration in account \\\"{{account.name}}\\\".\\nNotifications are enabled for loss of registration on the device {{last_registration.username}}@{{last_registration.realm}}\\n\\nLast Registration:\\nDevice ID: {{last_registration.authorizing_id}}\\nAccount ID: {{last_registration.account_id}}\\nUser Agent: {{last_registration.user_agent}}\\nContact: {{last_registration.contact}}\\n\\nThis may be due to a network connectivity issue, power outage, or misconfiguration. Please check the device.\">>}. \n    2: {default_html_template, <<\"<html><body><h2>Expired registration in account \\\"{{account.name}}\\\"</h2><p>Notifications are enabled for loss of registration on the device {{last_registration.username}}@{{last_registration.realm}}</p><h3>Last Registration</h3><table><tr><td>Device ID</td><td>{{last_registration.authorizing_id}}</td></tr><tr><td>Account ID</td><td>{{last_registration.account_id}}</td></tr><tr><td>User Agent</td><td>{{last_registration.user_agent}}</td></tr><tr><td>Contact</td><td>{{last_registration.contact}}</td></tr></table><p>This may be due to a network connectivity issue, power outage, or misconfiguration. Please check the device.</p></body></html>\">>}.\n    3  {default_subject_template, <<\"Loss of Registration for {{last_registration.username}}@{{last_registration.realm}}\">>}.\n    4  %% {default_from, <<>>}.\n\n/home/sam/conversant/repos/kazoo/applications/registrar/priv/couchdb/auth.json:\n    3    ,\"views\":{\n    4      \"lookup\":{\n    5:       \"map\": \"function (doc) {if (doc.pvt_type != 'device' || typeof doc.sip == 'undefined' || doc.pvt_deleted) return; var sip = JSON.parse(JSON.stringify(doc.sip)); sip.authorizing_id = doc._id; sip.authorizing_type = doc.pvt_type; if (typeof (sip.realm) == 'string') { emit([sip.realm.toLowerCase(), sip.username.toLowerCase()], sip); } else { for (var i in sip.realm) emit([sip.realm[i].toLowerCase(), sip.username.toLowerCase()], sip); }}\"\n    6      },\n    7      \"lookup_by_ip\":{\n    8:       \"map\": \"function (doc) {if (doc.pvt_deleted) return;if (doc.pvt_type == 'device' && doc.sip && doc.sip.ip && doc.sip.method == 'ip') {emit(doc.sip.inbound_ip || doc.sip.ip, {'owner_id': doc.owner_id,'account_id': doc.pvt_account_id,'authorizing_id': doc._id,'authorizing_type': doc.pvt_type});} else if (doc.pvt_type == 'resource' && doc.gateways && doc.peer) {doc.gateways.forEach(function (gateway) {if (gateway.inbound_ip || gateway.server) {emit(gateway.inbound_ip || gateway.server, {'account_id': doc.pvt_account_id,'authorizing_id': doc._id,'authorizing_type': doc.pvt_type});}});}}\"\n    9      },\n   10      \"lookup_by_account\":{\n\n/home/sam/conversant/repos/kazoo/applications/registrar/src/reg.hrl:\n   14                      ,account_id\n   15                      ,account_db\n   16:                     ,authorizing_type\n   17:                     ,authorizing_id\n   18                      ,method\n   19                      ,owner_id\n\n/home/sam/conversant/repos/kazoo/applications/registrar/src/reg_authn_req.erl:\n   85               ,{<<\"Realm\">>, AuthUser#auth_user.realm}\n   86               ,{<<\"Account-ID\">>, AuthUser#auth_user.account_id}\n   87:              ,{<<\"Authorizing-ID\">>, AuthUser#auth_user.authorizing_id}\n   88:              ,{<<\"Authorizing-Type\">>, AuthUser#auth_user.authorizing_type}\n   89               ,{<<\"Owner-ID\">>, AuthUser#auth_user.owner_id}\n   90               ,{<<\"Account-Realm\">>, AuthUser#auth_user.account_realm}\n   ..\n  283                 ,account_db = get_account_db(AuthDoc)\n  284                 ,password = wh_json:get_value(<<\"password\">>, AuthValue)\n  285:                ,authorizing_type = wh_json:get_value(<<\"authorizing_type\">>, AuthValue, <<\"anonymous\">>)\n  286:                ,authorizing_id = wh_json:get_value(<<\"id\">>, JObj)\n  287                 ,method = Method\n  288                 ,owner_id = wh_json:get_value(<<\"owner_id\">>, AuthDoc)\n\n/home/sam/conversant/repos/kazoo/applications/registrar/src/reg_route_req.erl:\n   45      AccountID = wh_json:get_value([<<\"value\">>,  <<\"account_id\">>], Doc),\n   46      OwnerID = wh_json:get_value([<<\"value\">>, <<\"owner_id\">>], Doc),\n   47:     AuthType = wh_json:get_value([<<\"value\">>, <<\"authorizing_type\">>], Doc, <<\"anonymous\">>),\n   48      lager:debug(\"adding account ~s and owner ~s to ccvs\", [AccountID, OwnerID]),\n   49      CCVs = wh_json:set_values(\n   ..\n   51                 [{<<\"Account-ID\">>, AccountID}\n   52                  ,{<<\"Owner-ID\">>, OwnerID}\n   53:                 ,{<<\"Authorizing-ID\">>, wh_json:get_value(<<\"id\">>, Doc)}\n   54:                 ,{<<\"Authorizing-Type\">>, AuthType}\n   55                 ])\n   56               ,wh_json:get_value(<<\"Custom-Channel-Vars\">>, JObj, wh_json:new())),\n\n/home/sam/conversant/repos/kazoo/applications/spyvsspy/src/spyvsspy_handlers.erl:\n   69                  ,{<<\"Export-Custom-Channel-Vars\">>, [<<\"Account-ID\">>\n   70                                                       ,<<\"Retain-CID\">>\n   71:                                                      ,<<\"Authorizing-ID\">>\n   72:                                                      ,<<\"Authorizing-Type\">>\n   73                                                      ]}\n   74                  ,{<<\"Account-ID\">>, AcctId}\n\n/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_authn_req.erl:\n   54      CCVs = props:filter_undefined(\n   55               [{<<\"Username\">>, Username}\n   56:               ,{<<\"Authorizing-ID\">>, props:get_value('resource_id', Props)}\n   57                ,{<<\"Realm\">>, props:get_value('realm', Props)}\n   58               ]),\n\n/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_inbound.erl:\n  265  %% @doc\n  266  %% build the JSON to set the custom channel vars with the calls\n  267: %% account and authorizing  ID\n  268  %% @end\n  269  %%--------------------------------------------------------------------\n\n/home/sam/conversant/repos/kazoo/applications/sysconf/src/sysconf_acls.erl:\n   41      IPs = wh_network_utils:resolve(wh_json:get_value(<<\"key\">>, JObj)),\n   42      AccountId = wh_json:get_value([<<\"value\">>, <<\"account_id\">>], JObj),\n   43:     AuthorizingId = wh_json:get_value(<<\"id\">>, JObj),\n   44:     AuthorizingType = wh_json:get_value([<<\"value\">>, <<\"authorizing_type\">>], JObj),\n   45:     add_trusted_objects(IPs, AccountId, AuthorizingId, AuthorizingType, ACLs).\n   46  \n   47  -spec local_resources(acls()) -> acls().\n   ..\n   70  handle_resource_result(JObj, ACLs) ->\n   71      IPs = resource_ips(wh_json:get_value(<<\"doc\">>, JObj)),\n   72:     AuthorizingId = wh_json:get_value(<<\"id\">>, JObj),\n   73:     add_trusted_objects(IPs, 'undefined', AuthorizingId, <<\"resource\">>, ACLs).\n   74  \n   75  -spec resource_ips(acls()) -> acls().\n   ..\n  100  -spec add_trusted_objects(ip_list(), api_binary(), ne_binary(), ne_binary(), acls()) -> acls().\n  101  add_trusted_objects([], _, _, _, ACLs) -> ACLs;\n  102: add_trusted_objects([IP|IPs], AccountId, AuthorizingId, AuthorizingType, ACLs) ->\n  103      Props = [{<<\"type\">>, <<\"allow\">>}\n  104               ,{<<\"network-list-name\">>, <<\"trusted\">>}\n  105               ,{<<\"cidr\">>, <<IP/binary, \"/32\">>}\n  106               ,{<<\"account_id\">>, AccountId}\n  107:              ,{<<\"authorizing_id\">>, AuthorizingId}\n  108:              ,{<<\"authorizing_type\">>, AuthorizingType}\n  109              ],\n  110      A = wh_json:set_value(IP, wh_json:from_list(props:filter_undefined(Props)), ACLs),\n  111:     add_trusted_objects(IPs, AccountId, AuthorizingId, AuthorizingType, A).\n  112  \n\n/home/sam/conversant/repos/kazoo/applications/sysconf/src/sysconf_gateways.erl:\n   54                   ,{<<\"Username\">>, wh_json:get_value(<<\"username\">>, JObj)}\n   55                   ,{<<\"Realm\">>, wh_json:get_value(<<\"realm\">>, JObj)}\n   56:                  ,{<<\"Authorizing-Type\">>, wh_json:get_value(<<\"resource\">>, JObj)}\n   57:                  ,{<<\"Authorizing-ID\">>, wh_json:get_value(<<\"id\">>, JObj)}\n   58                   ,{<<\"Inception\">>, <<\"${destination_number}\">>}\n   59                   ,{<<\"Gateway-Version\">>, wh_json:get_value(<<\"version\">>, JObj)}\n\n/home/sam/conversant/repos/kazoo/applications/trunkstore/src/ts_callflow.erl:\n  254  -spec is_trunkstore_acct(wh_json:object()) -> boolean().\n  255  is_trunkstore_acct(JObj) ->\n  256:     case wh_json:get_value([<<\"Custom-Channel-Vars\">>, <<\"Authorizing-Type\">>], JObj) of\n  257          <<\"sys_info\">> -> 'true';\n  258          'undefined' -> 'true';\n\n/home/sam/conversant/repos/kazoo/applications/trunkstore/src/ts_route_req.erl:\n   24      lager:info(\"received a request asking if trunkstore can route this call\"),\n   25      case {wh_json:get_value([<<\"Custom-Channel-Vars\">>, <<\"Account-ID\">>], ApiJObj)\n   26:           ,wh_json:get_value([<<\"Custom-Channel-Vars\">>, <<\"Authorizing-ID\">>], ApiJObj)\n   27           }\n   28      of\n\n/home/sam/conversant/repos/kazoo/core/braintree-1.0.0/include/braintree.hrl:\n   43  \n   44  -define(BT_TRANS_AUTHORIZATION_EXPIRED, <<\"authorization_expired\">>).\n   45: -define(BT_TRANS_AUTHORIZING, <<\"authorizing\">>).\n   46  -define(BT_TRANS_AUTHORIZED , <<\"authorized\">>).\n   47  -define(BT_TRANS_GATEWAY_REJECTED, <<\"gateway_rejected\">>).\n\n/home/sam/conversant/repos/kazoo/core/kazoo_translator-1.0.0/src/convertors/kzt_kazoo.erl:\n   39  -spec req_params(whapps_call:call()) -> wh_proplist().\n   40  req_params(Call) ->\n   41:     Owners = case cf_attributes:owner_ids(whapps_call:authorizing_id(Call), Call) of\n   42                   [] -> 'undefined';\n   43                   [OwnerId] -> OwnerId;\n\n/home/sam/conversant/repos/kazoo/core/whistle-1.0.0/src/wh_notify.erl:\n   74  \n   75  deregister(LastReg) ->\n   76:     AuthorizingId = wh_json:get_value(<<\"Authorizing-ID\">>, LastReg),\n   77      AccountDb = wh_json:get_value(<<\"Account-DB\">>, LastReg),\n   78:     case couch_mgr:open_cache_doc(AccountDb, AuthorizingId) of\n   79          {'ok', Endpoint} -> deregister(LastReg, Endpoint);\n   80          {'error', _R} ->\n   81:             lager:info(\"unable to lookup endpoint ~s in database ~s for deregister notice: ~p\", [AuthorizingId, AccountDb, _R])\n   82      end.\n   83  \n\n/home/sam/conversant/repos/kazoo/core/whistle-1.0.0/src/api/wapi_call.erl:\n  140  -define(QUERY_USER_CHANNELS_REQ_HEADERS, []).\n  141  -define(OPTIONAL_QUERY_USER_CHANNELS_REQ_HEADERS, [<<\"Usernames\">>, <<\"Username\">>\n  142:                                                    ,<<\"Realm\">>, <<\"Authorizing-IDs\">>\n  143                                                     ,<<\"Active-Only\">>\n  144                                                    ]).\n  ...\n  148  -define(QUERY_USER_CHANNELS_REQ_TYPES, [{<<\"Usernames\">>, fun erlang:is_list/1}\n  149                                          ,{<<\"Username\">>, fun erlang:is_binary/1}\n  150:                                         ,{<<\"Authorizing-IDs\">>, fun erlang:is_list/1}\n  151                                          ,{<<\"Active-Only\">>, fun wh_util:is_boolean/1}\n  152                                         ]).\n\n/home/sam/conversant/repos/kazoo/core/whistle-1.0.0/src/api/wapi_notifications.erl:\n  224                                        ,<<\"To-User\">>, <<\"To-Host\">>, <<\"Network-IP\">>, <<\"Network-Port\">>\n  225                                        ,<<\"Event-Timestamp\">>, <<\"Contact\">>, <<\"Expires\">>, <<\"Account-DB\">>\n  226:                                       ,<<\"Authorizing-ID\">>, <<\"Suppress-Unregister-Notify\">>\n  227                                       ]).\n  228  -define(DEREGISTER_VALUES, [{<<\"Event-Category\">>, <<\"notification\">>}\n  ...\n  250                                          ,<<\"Event-Timestamp\">>, <<\"Contact\">>\n  251                                          ,<<\"Expires\">>, <<\"Account-DB\">>\n  252:                                         ,<<\"Authorizing-ID\">>, <<\"Authorizing-Type\">>\n  253                                          ,<<\"Suppress-Unregister-Notify\">>\n  254                                       ]).\n\n/home/sam/conversant/repos/kazoo/core/whistle-1.0.0/src/api/wapi_registration.erl:\n   42                                         ,<<\"From-User\">>, <<\"From-Host\">>\n   43                                         ,<<\"To-User\">>, <<\"To-Host\">>\n   44:                                        ,<<\"RPid\">>, <<\"Authorizing-ID\">>\n   45                                         ,<<\"FreeSWITCH-Hostname\">>\n   46                                         ,<<\"FreeSWITCH-Nodename\">>\n\n/home/sam/conversant/repos/kazoo/core/whistle_apps-1.0.0/src/whapps_call.erl:\n   48  -export([set_inception/2, inception/1]).\n   49  \n   50: -export([set_authorizing_id/2, authorizing_id/1]).\n   51: -export([set_authorizing_type/2, authorizing_type/1]).\n   52  -export([set_owner_id/2, owner_id/1]).\n   53  -export([set_fetch_id/2, fetch_id/1]).\n   ..\n  113                        ,account_db :: api_binary()                  %% The database name of the account that authorized this call\n  114                        ,account_id :: api_binary()                  %% The account id that authorized this call\n  115:                       ,authorizing_id :: api_binary()              %% The ID of the record that authorized this call\n  116:                       ,authorizing_type :: api_binary()            %% The pvt_type of the record that authorized this call\n  117                        ,owner_id :: api_binary()                    %% The ID of the owner of this calling device, if any\n  118                        ,fetch_id :: api_binary()                    %% The Fetch ID of the Call\n  ...\n  137                         ,{<<\"Fetch-ID\">>, #whapps_call.fetch_id}\n  138                         ,{<<\"Bridge-ID\">>, #whapps_call.bridge_id}\n  139:                        ,{<<\"Authorizing-ID\">>, #whapps_call.authorizing_id}\n  140:                        ,{<<\"Authorizing-Type\">>, #whapps_call.authorizing_type}\n  141                        ]).\n  142  \n  ...\n  203                       ,switch_hostname = wh_json:get_value(<<\"Switch-Hostname\">>, RouteReq, switch_hostname(Call))\n  204                       ,switch_nodename = wh_json:get_ne_value(<<\"Switch-Nodename\">>, RouteReq, switch_nodename(Call))\n  205:                      ,authorizing_id = wh_json:get_ne_value(<<\"Authorizing-ID\">>, CCVs, authorizing_id(Call))\n  206:                      ,authorizing_type = wh_json:get_ne_value(<<\"Authorizing-Type\">>, CCVs, authorizing_type(Call))\n  207                       ,owner_id = wh_json:get_ne_value(<<\"Owner-ID\">>, CCVs, owner_id(Call))\n  208                       ,fetch_id = wh_json:get_ne_value(<<\"Fetch-ID\">>, CCVs, fetch_id(Call))\n  ...\n  223                                        ,account_id=OldAccountId\n  224                                        ,account_db=OldAccountDb\n  225:                                       ,authorizing_id=OldAuthzId\n  226:                                       ,authorizing_type=OldAuthzType\n  227                                        ,owner_id=OldOwnerId\n  228                                        ,fetch_id=OldFetchId\n  ...\n  243                       ,control_q = wh_json:get_value(<<\"Control-Queue\">>, RouteWin)\n  244                       ,inception = wh_json:get_value(<<\"Inception\">>, CCVs, OldInception)\n  245:                      ,authorizing_id = wh_json:get_ne_value(<<\"Authorizing-ID\">>, CCVs, OldAuthzId)\n  246:                      ,authorizing_type = wh_json:get_ne_value(<<\"Authorizing-Type\">>, CCVs, OldAuthzType)\n  247                       ,owner_id = wh_json:get_ne_value(<<\"Owner-ID\">>, CCVs, OldOwnerId)\n  248                       ,fetch_id = wh_json:get_ne_value(<<\"Fetch-ID\">>, CCVs, OldFetchId)\n  ...\n  288        ,account_db = wh_json:get_ne_value(<<\"Account-DB\">>, JObj, account_db(Call))\n  289        ,account_id = wh_json:get_ne_value(<<\"Account-ID\">>, JObj, account_id(Call))\n  290:       ,authorizing_id = wh_json:get_ne_value(<<\"Authorizing-ID\">>, JObj, authorizing_id(Call))\n  291:       ,authorizing_type = wh_json:get_ne_value(<<\"Authorizing-Type\">>, JObj, authorizing_type(Call))\n  292        ,owner_id = wh_json:get_ne_value(<<\"Owner-ID\">>, JObj, owner_id(Call))\n  293        ,fetch_id = wh_json:get_ne_value(<<\"Fetch-ID\">>, JObj, fetch_id(Call))\n  ...\n  347       ,{<<\"Account-DB\">>, account_db(Call)}\n  348       ,{<<\"Account-ID\">>, account_id(Call)}\n  349:      ,{<<\"Authorizing-ID\">>, authorizing_id(Call)}\n  350:      ,{<<\"Authorizing-Type\">>, authorizing_type(Call)}\n  351       ,{<<\"Owner-ID\">>, owner_id(Call)}\n  352       ,{<<\"Fetch-ID\">>, fetch_id(Call)}\n  ...\n  600      AccountId.\n  601  \n  602: -spec set_authorizing_id(ne_binary(), call()) -> call().\n  603: set_authorizing_id(AuthorizingId, #whapps_call{}=Call) when is_binary(AuthorizingId) ->\n  604:     set_custom_channel_var(<<\"Authorizing-ID\">>, AuthorizingId, Call#whapps_call{authorizing_id=AuthorizingId}).\n  605  \n  606: -spec authorizing_id(call()) -> api_binary().\n  607: authorizing_id(#whapps_call{authorizing_id=AuthorizingId}) ->\n  608:     AuthorizingId.\n  609  \n  610: -spec set_authorizing_type(ne_binary(), call()) -> call().\n  611: set_authorizing_type(AuthorizingType, #whapps_call{}=Call) when is_binary(AuthorizingType) ->\n  612:     set_custom_channel_var(<<\"Authorizing-Type\">>, AuthorizingType, Call#whapps_call{authorizing_type=AuthorizingType}).\n  613  \n  614: -spec authorizing_type(call()) -> api_binary().\n  615: authorizing_type(#whapps_call{authorizing_type=AuthorizingType}) ->\n  616:     AuthorizingType.\n  617  \n  618  -spec set_owner_id(ne_binary(), call()) -> call().\n  ...\n  801                     ,fun(C) -> whapps_call:set_account_db(<<\"account%2F12%2F3456789\">>, C) end\n  802                     ,fun(C) -> whapps_call:set_account_id(<<\"123456789\">>, C) end\n  803:                    ,fun(C) -> whapps_call:set_authorizing_id(<<\"987654321\">>, C) end\n  804:                    ,fun(C) -> whapps_call:set_authorizing_type(<<\"test\">>, C) end\n  805                     ,fun(C) -> whapps_call:set_owner_id(<<\"abcdefghi\">>, C) end\n  806                     ,fun(C) -> whapps_call:set_fetch_id(<<\"1234567890ABCDEFG\">>, C) end\n\n/home/sam/conversant/repos/kazoo/core/whistle_number_manager-1.0.0/src/wnm_number.erl:\n   95                 ,{<<\"pvt_db_name\">>, wnm_util:number_to_db_name(Num)}\n   96                 ,{<<\"pvt_created\">>, wh_util:current_tstamp()}\n   97:                ,{<<\"pvt_authorizing_account\">>, AuthBy}\n   98                ],\n   99      JObj = wh_json:set_values(Updates, wh_json:public_fields(Doc)),\n  ...\n  123                 ,{<<\"pvt_db_name\">>, wnm_util:number_to_db_name(Num)}\n  124                 ,{<<\"pvt_created\">>, wh_util:current_tstamp()}\n  125:                ,{<<\"pvt_authorizing_account\">>, AuthBy}\n  126                 ,{<<\"pvt_assigned_to\">>, AssignTo}\n  127                ],\n\n/home/sam/conversant/repos/kazoo/core/whistle_number_manager-1.0.0/src/carriers/wnm_bandwidth.erl:\n  139              OrderName = list_to_binary([OrderNamePrefix, \"-\", wh_util:to_binary(wh_util:current_tstamp())]),\n  140              ExtRef = case wh_util:is_empty(AuthBy) of\n  141:                          'true' -> \"no_authorizing_account\";\n  142                           'false' -> wh_util:to_list(AuthBy)\n  143                       end,\n\n/home/sam/conversant/repos/kazoo/utils/lineman/workorders/registrar_load_test.xml:\n  102  	      <variables>\n  103  		<variable name=\"ecallmgr_Inception\" value=\"on-net\" />          \n  104: 		<variable name=\"ecallmgr_Authorizing-Type\" value=\"device\" />          \n  105  		<variable name=\"ecallmgr_Account-ID\" value=\"c0705d7474ea0160c10a351b2544006b\" />          \n  106  		<variable name=\"ecallmgr_Realm\" value=\"{{realm}}\" />          \n  ...\n  204  	      <variables>\n  205  		<variable name=\"ecallmgr_Inception\" value=\"on-net\" />          \n  206: 		<variable name=\"ecallmgr_Authorizing-Type\" value=\"device\" />          \n  207  		<variable name=\"ecallmgr_Account-ID\" value=\"c0705d7474ea0160c10a351b2544006b\" />          \n  208  		<variable name=\"ecallmgr_Realm\" value=\"{{realm}}\" />          \n  ...\n  306  	      <variables>\n  307  		<variable name=\"ecallmgr_Inception\" value=\"on-net\" />          \n  308: 		<variable name=\"ecallmgr_Authorizing-Type\" value=\"device\" />          \n  309  		<variable name=\"ecallmgr_Account-ID\" value=\"c0705d7474ea0160c10a351b2544006b\" />          \n  310  		<variable name=\"ecallmgr_Realm\" value=\"{{realm}}\" />          \n\n/home/sam/conversant/repos/kazoo/utils/lineman/workorders/registrar_validation.xml:\n   22  	<![CDATA[\n   23  	  {\"total_rows\":1,\"offset\":0,\"rows\":[\n   24: 	  {\"id\":\"e00816343ee126968a5f18a0aa2442e4\",\"key\":\"{{username}}\",\"value\":{\"method\":\"password\",\"invite_format\":\"username\",\"username\":\"{{username}}\",\"password\":\"123456\",\"expire_seconds\":\"360\",\"custom_sip_headers\":{},\"registration_expiration\":300,\"authorizing_id\":\"e00816343ee126968a5f18a0aa2442e4\",\"authorizing_type\":\"device\"}}\n   25  	  ]} \n   26  	]]>\n   ..\n  124  	      <variables>\n  125  		<variable name=\"ecallmgr_Inception\" value=\"on-net\" />          \n  126: 		<variable name=\"ecallmgr_Authorizing-Type\" value=\"device\" />          \n  127  		<variable name=\"ecallmgr_Account-ID\" value=\"c0705d7474ea0160c10a351b2544006b\" />          \n  128  		<variable name=\"ecallmgr_Realm\" value=\"{{realm}}\" />          \n\n/home/sam/conversant/misc/outbound_call_from_clicktocall_20140512.txt:\n    3  May 12 08:19:11 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_call_events:514 (<0.4061.376>) publishing call event channel_create\n    4  \n    5: May 12 08:19:11 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|webhooks_listener:184 (<0.24632.2078>) handling channel event {[{<<\"Callee-ID-Name\">>,<<\"Stephen Persson\">>},{<<\"Callee-ID-Number\">>,<<\"2006\">>},{<<\"Caller-ID-Name\">>,<<\"callernamesomerealmco\">>},{<<\"Caller-ID-Number\">>,<<\"7654321\">>},{<<\"Media-Server\">>,<<\"dublin.conversant.co.nz\">>},{<<\"Presence-ID\">>,<<\"user_ahob3r@1001232\">>},{<<\"Request\">>,<<\"user_ahob3r@1001232\">>},{<<\"From\">>,<<\"2006-b\">>},{<<\"To\">>,<<\"user_ahob3r@1001232\">>},{<<\"Other-Leg-Call-ID\">>,<<\"1814d6ee-d9ae-11e3-8689-cb3cb3e368ff\">>},{<<\"Other-Leg-Destination-Number\">>,<<\"2006\">>},{<<\"Other-Leg-Caller-ID-Number\">>,<<\"7654321\">>},{<<\"Other-Leg-Caller-ID-Name\">>,<<\"callernamesomerealmco\">>},{<<\"Other-Leg-Direction\">>,<<\"inbound\">>},{<<\"Call-Direction\">>,<<\"outbound\">>},{<<\"Timestamp\">>,63567101951},{<<\"Custom-Channel-Vars\">>,{[{<<\"Username\">>,<<\"user_ahob3r\">>},{<<\"Realm\">>,<<\"1001232\">>},{<<\"Account-ID\">>,<<\"66251afde4ac965da6e037c3a9f72db3\">>},{<<\"Owner-ID\">>,<<\"a197e4522136955c389c0fd0117efb76\">>},{<<\"Authorizing-ID\">>,<<\"4f80f67474f414ee6280686b55ce7078\">>},{<<\"Ecallmgr-Node\">>,<<\"ecallmgr@hanoi.conversant.co.nz\">>},{<<\"Bridge-ID\">>,<<\"1814d6ee-d9ae-11e3-8689-cb3cb3e368ff\">>}]}},{<<\"Call-ID\">>,<<\"18960e1c-d9ae-11e3-8699-cb3cb3e368ff\">>},{<<\"Server-ID\">>,<<>>},{<<\"Node\">>,<<\"ecallmgr@hanoi.conversant.co.nz\">>},{<<\"Msg-ID\">>,<<\"1399882751118673\">>},{<<\"App-Version\">>,<<\"0.8.0\">>},{<<\"App-Name\">>,<<\"ecallmgr\">>},{<<\"Event-Name\">>,<<\"CHANNEL_CREATE\">>},{<<\"Event-Category\">>,<<\"call_event\">>}]}\n    6  \n    7  May 12 08:19:11 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wnm_util:242 (<0.24632.2078>) number 'user_ahob3r' is not reconcilable\n    .\n   31  May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|omnip_subscriptions:398 (<0.24899.2078>) no subscriptions for user_ahob3r@1001232 (state confirmed)\n   32  \n   33: May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|webhooks_listener:184 (<0.24900.2078>) handling channel event {[{<<\"Callee-ID-Name\">>,<<\"Stephen Persson\">>},{<<\"Callee-ID-Number\">>,<<\"2006\">>},{<<\"Caller-ID-Name\">>,<<\"callernamesomerealmco\">>},{<<\"Caller-ID-Number\">>,<<\"7654321\">>},{<<\"Media-Server\">>,<<\"dublin.conversant.co.nz\">>},{<<\"Presence-ID\">>,<<\"user_ahob3r@1001232\">>},{<<\"Request\">>,<<\"user_ahob3r@1001232\">>},{<<\"From\">>,<<\"2006-b\">>},{<<\"To\">>,<<\"user_ahob3r@1001232\">>},{<<\"From-Uri\">>,<<\"7654321@nodomain.com\">>},{<<\"To-Uri\">>,<<\"user_ahob3r@58.28.158.53:10114\">>},{<<\"Other-Leg-Call-ID\">>,<<\"1814d6ee-d9ae-11e3-8689-cb3cb3e368ff\">>},{<<\"Other-Leg-Destination-Number\">>,<<\"2006\">>},{<<\"Other-Leg-Caller-ID-Number\">>,<<\"7654321\">>},{<<\"Other-Leg-Caller-ID-Name\">>,<<\"callernamesomerealmco\">>},{<<\"Other-Leg-Direction\">>,<<\"inbound\">>},{<<\"Call-Direction\">>,<<\"outbound\">>},{<<\"Timestamp\">>,63567101958},{<<\"Custom-Channel-Vars\">>,{[{<<\"Account-ID\">>,<<\"66251afde4ac965da6e037c3a9f72db3\">>},{<<\"Channel-Authorized\">>,<<\"true\">>},{<<\"Username\">>,<<\"user_ahob3r\">>},{<<\"Realm\">>,<<\"1001232\">>},{<<\"Owner-ID\">>,<<\"a197e4522136955c389c0fd0117efb76\">>},{<<\"Authorizing-ID\">>,<<\"4f80f67474f414ee6280686b55ce7078\">>},{<<\"Ecallmgr-Node\">>,<<\"ecallmgr@hanoi.conversant.co.nz\">>},{<<\"Bridge-ID\">>,<<\"1814d6ee-d9ae-11e3-8689-cb3cb3e368ff\">>}]}},{<<\"Call-ID\">>,<<\"18960e1c-d9ae-11e3-8699-cb3cb3e368ff\">>},{<<\"Server-ID\">>,<<>>},{<<\"Node\">>,<<\"ecallmgr@hanoi.conversant.co.nz\">>},{<<\"Msg-ID\">>,<<\"1399882758358667\">>},{<<\"App-Version\">>,<<\"0.8.0\">>},{<<\"App-Name\">>,<<\"ecallmgr\">>},{<<\"Event-Name\">>,<<\"CHANNEL_ANSWER\">>},{<<\"Event-Category\">>,<<\"call_event\">>}]}\n   34  \n   35  May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wnm_util:242 (<0.24900.2078>) number 'user_ahob3r' is not reconcilable\n   ..\n   51  May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|cf_util:427 (<0.24932.2078>) searching for callflow in account%2F66%2F25%2F1afde4ac965da6e037c3a9f72db3 to satisfy '+6421446202'\n   52  \n   53: May 12 08:19:18 hanoi 2600hz[12963]: |1814d6ee-d9ae-11e3-8689-cb3cb3e368ff|webhooks_listener:184 (<0.24956.2078>) handling channel event {[{<<\"Callee-ID-Name\">>,<<\"Stephen Persson\">>},{<<\"Callee-ID-Number\">>,<<\"2006\">>},{<<\"Caller-ID-Name\">>,<<\"callernamesomerealmco\">>},{<<\"Caller-ID-Number\">>,<<\"7654321\">>},{<<\"Media-Server\">>,<<\"dublin.conversant.co.nz\">>},{<<\"Request\">>,<<\"2006@nodomain.com\">>},{<<\"From\">>,<<\"nouser@nodomain.com\">>},{<<\"To\">>,<<\"2006@nodomain.com\">>},{<<\"Ringing-Seconds\">>,<<\"1\">>},{<<\"Billing-Seconds\">>,<<\"0\">>},{<<\"Duration-Seconds\">>,<<\"8\">>},{<<\"Hangup-Cause\">>,<<\"NORMAL_UNSPECIFIED\">>},{<<\"Disposition\">>,<<\"SUCCESS\">>},{<<\"Other-Leg-Call-ID\">>,<<\"18960e1c-d9ae-11e3-8699-cb3cb3e368ff\">>},{<<\"Other-Leg-Destination-Number\">>,<<\"user_ahob3r\">>},{<<\"Other-Leg-Caller-ID-Number\">>,<<\"7654321\">>},{<<\"Other-Leg-Caller-ID-Name\">>,<<\"callernamesomerealmco\">>},{<<\"Other-Leg-Direction\">>,<<\"outbound\">>},{<<\"Call-Direction\">>,<<\"inbound\">>},{<<\"Timestamp\">>,63567101958},{<<\"Custom-Channel-Vars\">>,{[{<<\"Fetch-ID\">>,<<\"a60c30ff56a6cd024db84bba23fbc7c7\">>},{<<\"Ecallmgr-Node\">>,<<\"ecallmgr@hanoi.conversant.co.nz\">>},{<<\"Inception\">>,<<\"on-net\">>},{<<\"Authorizing-Type\">>,<<\"device\">>},{<<\"Authorizing-ID\">>,<<\"b6e555ae3893c7d07f724a59555e2acc\">>},{<<\"Retain-CID\">>,<<\"true\">>},{<<\"Account-ID\">>,<<\"66251afde4ac965da6e037c3a9f72db3\">>},{<<\"Bridge-ID\">>,<<\"1814d6ee-d9ae-11e3-8689-cb3cb3e368ff\">>},{<<\"Channel-Authorized\">>,<<\"true\">>}]}},{<<\"Call-ID\">>,<<\"1814d6ee-d9ae-11e3-8689-cb3cb3e368ff\">>},{<<\"Server-ID\">>,<<>>},{<<\"Node\">>,<<\"ecallmgr@hanoi.conversant.co.nz\">>},{<<\"Msg-ID\">>,<<\"1399882758408656\">>},{<<\"App-Version\">>,<<\"0.8.0\">>},{<<\"App-Name\">>,<<\"ecallmgr\">>},{<<\"Event-Name\">>,<<\"CHANNEL_DESTROY\">>},{<<\"Event-Category\">>,<<\"call_event\">>}]}\n   54  \n   55  May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wh_number_manager:115 (<0.24900.2078>) no port for user_ahob3r: {error,not_reconcilable}\n   ..\n  141  May 12 08:19:18 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_call_control:990 (<0.4189.376>) executing call command 'set' e876a3b4e98cf133d368bb4e54274979\n  142  \n  143: May 12 08:19:18 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_fs_command:31 (<0.4189.376>) freeswitch@dublin.conversant.co.nz api uuid_setvar_mulit 18960e1c-d9ae-11e3-8699-cb3cb3e368ff effective_caller_id_name=Unknown;effective_caller_id_number=0000000000;ecallmgr_Account-ID=66251afde4ac965da6e037c3a9f72db3;ecallmgr_Channel-Authorized=true;ecallmgr_Retain-CID=true;ecallmgr_Authorizing-ID=b6e555ae3893c7d07f724a59555e2acc;ecallmgr_Authorizing-Type=device;ecallmgr_Ecallmgr-Node=ecallmgr@hanoi.conversant.co.nz;ecallmgr_Username=user_ahob3r;ecallmgr_Realm=1001232;ecallmgr_Owner-ID=a197e4522136955c389c0fd0117efb76;ecallmgr_Bridge-ID=1814d6ee-d9ae-11e3-8689-cb3cb3e368ff;ecallmgr_Fetch-ID=a60c30ff56a6cd024db84bba23fbc7c7\n  144  \n  145  May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wh_amqp_channel:143 (<0.24975.2078>) published to callctl(amqp://guest:guest@119.9.43.88:5672) exchange (routing key ecallmgr@hanoi.conversant.co.nz-<0.4189.376>-1c980a0a) via <0.911.0>\n  ...\n  161  May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|cf_exe:664 (<0.24990.2078>) inception undefined: using attributes for an external call\n  162  \n  163: May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|cf_exe:666 (<0.24990.2078>) authorizing id b6e555ae3893c7d07f724a59555e2acc\n  164  \n  165  May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wh_amqp_channel:240 (<0.24990.2078>) declared queue whistle_apps@hanoi.conversant.co.nz-<0.24990.2078>-3fa93bc7 via channel <0.17733.2074>\n\n343 matches across 71 files\n\n\nSearching 3816 files for \"effective_caller_id\"\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr.hrl:\n  168                                 ,{<<\"Auth-User\">>, <<\"sip_auth_username\">>}\n  169                                 ,{<<\"Auth-Password\">>, <<\"sip_auth_password\">>}\n  170:                                ,{<<\"Caller-ID-Name\">>, <<\"effective_caller_id_name\">>}\n  171:                                ,{<<\"Caller-ID-Number\">>, <<\"effective_caller_id_number\">>}\n  172                                 ,{<<\"Callee-ID-Name\">>, <<\"effective_callee_id_name\">>}\n  173                                 ,{<<\"Callee-ID-Number\">>, <<\"effective_callee_id_number\">>}\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_call_command.erl:\n  334                          end\n  335                          ,fun(DP) ->\n  336:                                  CIDName = wh_json:get_ne_value(<<\"Caller-ID-Name\">>, JObj, <<\"$${effective_caller_id_name}\">>),\n  337                                   [{\"application\", <<\"set conference_auto_outcall_caller_id_name=\", CIDName/binary>>}|DP]\n  338                           end\n  339                          ,fun(DP) ->\n  340:                                  CIDNumber = wh_json:get_ne_value(<<\"Caller-ID-Number\">>, JObj, <<\"$${effective_caller_id_number}\">>),\n  341                                   [{\"application\", <<\"set conference_auto_outcall_caller_id_number=\", CIDNumber/binary>>}|DP]\n  342                           end\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_call_events.erl:\n  531       ,{<<\"Channel-Moving\">>, get_channel_moving(Props)}\n  532       ,{<<\"Call-Direction\">>, props:get_value(<<\"Call-Direction\">>, Props)}\n  533:      ,{<<\"Caller-ID-Number\">>, props:get_first_defined([<<\"variable_effective_caller_id_number\">>\n  534                                                          ,<<\"Caller-Caller-ID-Number\">>\n  535                                                         ], Props)}\n  536:      ,{<<\"Caller-ID-Name\">>, props:get_first_defined([<<\"variable_effective_caller_id_name\">>\n  537                                                        ,<<\"Caller-Caller-ID-Name\">>\n  538                                                       ], Props)}\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_authz.erl:\n  280         ,{<<\"Call-Direction\">>, props:get_value(<<\"Call-Direction\">>, Props)}\n  281         ,{<<\"Other-Leg-Call-ID\">>, props:get_value(<<\"Other-Leg-Unique-ID\">>, Props)}\n  282:        ,{<<\"Caller-ID-Name\">>, props:get_first_defined([<<\"variable_effective_caller_id_name\">>\n  283                                                        ,<<\"Caller-Caller-ID-Name\">>\n  284                                                       ], Props, <<\"Unknown\">>)}\n  285:        ,{<<\"Caller-ID-Number\">>, props:get_first_defined([<<\"variable_effective_caller_id_number\">>\n  286                                                          ,<<\"Caller-Caller-ID-Number\">>\n  287                                                       ], Props, <<\"Unknown\">>)}\n  ...\n  294      AccountId = props:get_value(?GET_CCV(<<\"Account-ID\">>), Props),\n  295      [{<<\"To-DID\">>, props:get_value(<<\"Caller-Destination-Number\">>, Props)}\n  296:      ,{<<\"From-DID\">>, props:get_value(<<\"variable_effective_caller_id_number\">>, Props\n  297                                         ,props:get_value(<<\"Caller-Caller-ID-Number\">>, Props))}\n  298       ,{<<\"Call-ID\">>, CallId}\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_route.erl:\n  272      [{<<\"Msg-ID\">>, FetchId}\n  273       ,{<<\"Call-ID\">>, CallId}\n  274:      ,{<<\"Caller-ID-Name\">>, props:get_first_defined([<<\"variable_effective_caller_id_name\">>\n  275                                                        ,<<\"Caller-Caller-ID-Name\">>\n  276                                                       ], Props, <<\"Unknown\">>)}\n  277:      ,{<<\"Caller-ID-Number\">>, props:get_first_defined([<<\"variable_effective_caller_id_number\">>\n  278                                                          ,<<\"Caller-Caller-ID-Number\">>\n  279                                                         ], Props, <<\"0000000000\">>)}\n\n/home/sam/conversant/misc/outbound_call_from_clicktocall_20140512.txt:\n  141  May 12 08:19:18 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_call_control:990 (<0.4189.376>) executing call command 'set' e876a3b4e98cf133d368bb4e54274979\n  142  \n  143: May 12 08:19:18 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_fs_command:31 (<0.4189.376>) freeswitch@dublin.conversant.co.nz api uuid_setvar_mulit 18960e1c-d9ae-11e3-8699-cb3cb3e368ff effective_caller_id_name=Unknown;effective_caller_id_number=0000000000;ecallmgr_Account-ID=66251afde4ac965da6e037c3a9f72db3;ecallmgr_Channel-Authorized=true;ecallmgr_Retain-CID=true;ecallmgr_Authorizing-ID=b6e555ae3893c7d07f724a59555e2acc;ecallmgr_Authorizing-Type=device;ecallmgr_Ecallmgr-Node=ecallmgr@hanoi.conversant.co.nz;ecallmgr_Username=user_ahob3r;ecallmgr_Realm=1001232;ecallmgr_Owner-ID=a197e4522136955c389c0fd0117efb76;ecallmgr_Bridge-ID=1814d6ee-d9ae-11e3-8689-cb3cb3e368ff;ecallmgr_Fetch-ID=a60c30ff56a6cd024db84bba23fbc7c7\n  144  \n  145  May 12 08:19:18 hanoi 2600hz[12963]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wh_amqp_channel:143 (<0.24975.2078>) published to callctl(amqp://guest:guest@119.9.43.88:5672) exchange (routing key ecallmgr@hanoi.conversant.co.nz-<0.4189.376>-1c980a0a) via <0.911.0>\n  ...\n  215  May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: export sip_redirect_context=context_2\n  216  \n  217: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: bridge {ignore_display_updates='true',ecallmgr_Account-ID='66251afde4ac965da6e037c3a9f72db3',ecallmgr_Reseller-ID='1d2225ba1316c330a1bfcda6f8e93740',effective_caller_id_number='0000000000',effective_caller_id_name='Unknown',origination_caller_id_number='0000000000',origination_caller_id_name='Unknown',ignore_early_media='false',local_var_clobber='true'}[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='841bc24477cd75ad659e9037be764986',absolute_codec_string='^^:PCMU:PCMA:G722:G7221@16000h:G7221@32000h',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@202.89.54.33|[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='d1a43d9ab8439757aaaff9e66ea1b85c',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@147.202.48.171|[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='b599d34d5d471848ef7c865e7ec90f19',absolute_codec_string='^^:PCMU:PCMA:G722:G7221@16000h:G7221@32000h',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@119.9.40.133\n  218  \n  219  May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_util:74 (<0.4189.376>) building xferext on node freeswitch@dublin.conversant.co.nz: event Event-Name=CUSTOM,Event-Subclass=whistle::masquerade,whistle_event_name=CHANNEL_EXECUTE_COMPLETE,whistle_application_name=bridge\n  ...\n  259  May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wh_amqp_channel:143 (<0.4187.376>) published to callevt(amqp://guest:guest@119.9.43.88:5672) exchange (routing key call.CHANNEL_EXECUTE.18960e1c-d9ae-11e3-8699-cb3cb3e368ff) via <0.26094.375>\n  260  \n  261: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_call_events:521 (<0.4187.376>) publishing call event channel_execute 'bridge({ignore_display_updates='true',ecallmgr_Account-ID='66251afde4ac965da6e037c3a9f72db3',ecallmgr_Reseller-ID='1d2225ba1316c330a1bfcda6f8e93740',effective_caller_id_number='0000000000',effective_caller_id_name='Unknown',origination_caller_id_number='0000000000',origination_caller_id_name='Unknown',ignore_early_media='false',local_var_clobber='true'}[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='841bc24477cd75ad659e9037be764986',absolute_codec_string='^^:PCMU:PCMA:G722:G7221@16000h:G7221@32000h',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@202.89.54.33|[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='d1a43d9ab8439757aaaff9e66ea1b85c',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@147.202.48.171|[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='b599d34d5d471848ef7c865e7ec90f19',absolute_codec_string='^^:PCMU:PCMA:G722:G7221@16000h:G7221@32000h',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@119.9.40.133)'\n  262  \n  263  May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wh_amqp_channel:143 (<0.4187.376>) published to callevt(amqp://guest:guest@119.9.43.88:5672) exchange (routing key call.CHANNEL_EXECUTE.18960e1c-d9ae-11e3-8699-cb3cb3e368ff) via <0.26094.375>\n  ...\n  295  May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wh_amqp_channel:143 (<0.4187.376>) published to callevt(amqp://guest:guest@119.9.43.88:5672) exchange (routing key call.CHANNEL_EXECUTE.18960e1c-d9ae-11e3-8699-cb3cb3e368ff) via <0.26094.375>\n  296  \n  297: May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|ecallmgr_call_events:521 (<0.4187.376>) publishing call event channel_execute 'bridge({ignore_display_updates='true',ecallmgr_Account-ID='66251afde4ac965da6e037c3a9f72db3',ecallmgr_Reseller-ID='1d2225ba1316c330a1bfcda6f8e93740',effective_caller_id_number='0000000000',effective_caller_id_name='Unknown',origination_caller_id_number='0000000000',origination_caller_id_name='Unknown',ignore_early_media='false',local_var_clobber='true'}[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='841bc24477cd75ad659e9037be764986',absolute_codec_string='^^:PCMU:PCMA:G722:G7221@16000h:G7221@32000h',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@202.89.54.33|[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='d1a43d9ab8439757aaaff9e66ea1b85c',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@147.202.48.171|[sip_from_uri='sip:0000000000@nodomain.com',ecallmgr_Global-Resource='true',ecallmgr_Resource-ID='b599d34d5d471848ef7c865e7ec90f19',absolute_codec_string='^^:PCMU:PCMA:G722:G7221@16000h:G7221@32000h',leg_progress_timeout='10',effective_callee_id_number='+6421446202',effective_callee_id_name='6421446202']sofia/sipinterface_1/+6421446202@119.9.40.133)'\n  298  \n  299  May 12 08:19:23 hanoi 2600hz[13062]: |18960e1c-d9ae-11e3-8699-cb3cb3e368ff|wh_amqp_channel:143 (<0.4187.376>) published to callevt(amqp://guest:guest@119.9.43.88:5672) exchange (routing key call.CHANNEL_EXECUTE.18960e1c-d9ae-11e3-8699-cb3cb3e368ff) via <0.26094.375>\n\n19 matches across 6 files\n\n\nSearching 3816 files for \"loopback\"\n\n/home/sam/conversant/repos/kazoo/erl_crash.dump:\n 12459  enc_value_default\n 12460  enc_value\n 12461: loopback\n 12462  binary_or_uint\n 12463  linkaddr\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_endpoint.erl:\n  794      Prop = [{<<\"Invite-Format\">>, <<\"route\">>}\n  795              ,{<<\"To-DID\">>, wh_json:get_value(<<\"number\">>, Endpoint, whapps_call:request_user(Call))}\n  796:             ,{<<\"Route\">>, <<\"loopback/\", (wh_json:get_value(<<\"number\">>, CallForward, <<\"unknown\">>))/binary, \"/context_2\">>}\n  797              ,{<<\"Ignore-Early-Media\">>, IgnoreEarlyMedia}\n  798              ,{<<\"Bypass-Media\">>, <<\"false\">>}\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_clicktocall.erl:\n  239  \n  240      Endpoint = [{<<\"Invite-Format\">>, <<\"route\">>}\n  241:                 ,{<<\"Route\">>,  <<\"loopback/\", Exten/binary, \"/context_2\">>}\n  242                  ,{<<\"To-DID\">>, Exten}\n  243                 ],\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr.hrl:\n  192                                 ,{<<\"Ignore-Display-Updates\">>, <<\"ignore_display_updates\">>}\n  193                                 ,{<<\"Eavesdrop-Group-ID\">>, <<\"eavesdrop_group\">>}\n  194:                                ,{<<\"Loopback-Bowout\">>, <<\"loopback_bowout_on_execute\">>}\n  195  \n  196                                 ,{<<\"SIP-Invite-Domain\">>, <<\"sip_invite_domain\">>}\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_channel.erl:\n  560      get_other_leg_name(UUID, Props, props:get_value(<<\"Other-Leg-Channel-Name\">>, Props)).\n  561  \n  562: get_other_leg_name(UUID, Props, <<\"loopback/\", _/binary>>) ->\n  563:     %% loopback channel, use channel var BridgeId\n  564      get_other_leg(UUID, Props, props:get_value(?GET_CCV(<<\"Bridge-ID\">>), Props));\n  565  get_other_leg_name(UUID, Props, _ChannelName) ->\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_originate.erl:\n  156  -spec bind_to_events({'ok', ne_binary()}, atom()) -> 'ok'.\n  157  bind_to_events({'ok', <<\"mod_kazoo\", _/binary>>}, Node) ->\n  158:     'ok' = freeswitch:event(Node, ['CUSTOM', 'loopback::bowout']);\n  159  bind_to_events(_, Node) ->\n  160:     gproc:reg({'p', 'l', {'event', Node, <<\"loopback::bowout\">>}}).\n  161  \n  162  %%--------------------------------------------------------------------\n  ...\n  529      J = wh_json:set_values([{[<<\"Custom-Channel-Vars\">>, <<\"Fetch-ID\">>], FetchId}\n  530                                                     ,{[<<\"Custom-Channel-Vars\">>, <<\"Ecallmgr-Node\">>], wh_util:to_binary(node())}\n  531:                                                    ,{<<\"Loopback-Bowout\">>, <<\"true\">>}\n  532                             ], JObj),\n  533      list_to_binary([ecallmgr_fs_xml:get_channel_vars(J), DialStrings, \" \", Action]).\n  ...\n  797  should_update_uuid(OldUUID, Props) ->\n  798      case props:get_value(<<\"Event-Subclass\">>, Props, props:get_value(<<\"Event-Name\">>, Props)) of\n  799:         <<\"loopback::bowout\">> ->\n  800               props:get_value(<<\"Resigning-UUID\">>, Props) =:= OldUUID;\n  801          _ -> 'false'\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_util.erl:\n  745  -spec maybe_set_interface(ne_binary(), bridge_endpoint()) -> ne_binary().\n  746  maybe_set_interface(<<\"sofia/\", _/binary>>=Contact, _) -> Contact;\n  747: maybe_set_interface(<<\"loopback/\", _/binary>>=Contact, _) -> Contact;\n  748  maybe_set_interface(Contact, #bridge_endpoint{sip_interface='undefined'}) ->\n  749      <<?SIP_INTERFACE, Contact/binary>>;\n\n/home/sam/conversant/repos/kazoo/applications/trunkstore/src/ts_from_offnet.erl:\n   42      Q = ts_callflow:get_my_queue(State),\n   43      'true' = wapi_dialplan:bridge_endpoint_v(EP),\n   44:     MediaHandling = case wh_json:get_value([<<\"Custom-Channel-Vars\">>, <<\"Offnet-Loopback-Number\">>], JObj) of\n   45                          'undefined' ->\n   46                              case wh_util:is_false(wh_json:get_value(<<\"Bypass-Media\">>, EP)) of\n\n13 matches across 8 files\n\n\nSearching 3816 files for \"loopback\"\n\n/home/sam/conversant/repos/kazoo/erl_crash.dump:\n 12459  enc_value_default\n 12460  enc_value\n 12461: loopback\n 12462  binary_or_uint\n 12463  linkaddr\n\n/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_endpoint.erl:\n  794      Prop = [{<<\"Invite-Format\">>, <<\"route\">>}\n  795              ,{<<\"To-DID\">>, wh_json:get_value(<<\"number\">>, Endpoint, whapps_call:request_user(Call))}\n  796:             ,{<<\"Route\">>, <<\"loopback/\", (wh_json:get_value(<<\"number\">>, CallForward, <<\"unknown\">>))/binary, \"/context_2\">>}\n  797              ,{<<\"Ignore-Early-Media\">>, IgnoreEarlyMedia}\n  798              ,{<<\"Bypass-Media\">>, <<\"false\">>}\n\n/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_clicktocall.erl:\n  239  \n  240      Endpoint = [{<<\"Invite-Format\">>, <<\"route\">>}\n  241:                 ,{<<\"Route\">>,  <<\"loopback/\", Exten/binary, \"/context_2\">>}\n  242                  ,{<<\"To-DID\">>, Exten}\n  243                 ],\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr.hrl:\n  192                                 ,{<<\"Ignore-Display-Updates\">>, <<\"ignore_display_updates\">>}\n  193                                 ,{<<\"Eavesdrop-Group-ID\">>, <<\"eavesdrop_group\">>}\n  194:                                ,{<<\"Loopback-Bowout\">>, <<\"loopback_bowout_on_execute\">>}\n  195:                                ,{<<\"Loopback-Export\">>, <<\"loopback_export\">>}\n  196  \n  197                                 ,{<<\"SIP-Invite-Domain\">>, <<\"sip_invite_domain\">>}\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_channel.erl:\n  560      get_other_leg_name(UUID, Props, props:get_value(<<\"Other-Leg-Channel-Name\">>, Props)).\n  561  \n  562: get_other_leg_name(UUID, Props, <<\"loopback/\", _/binary>>) ->\n  563:     %% loopback channel, use channel var BridgeId\n  564      get_other_leg(UUID, Props, props:get_value(?GET_CCV(<<\"Bridge-ID\">>), Props));\n  565  get_other_leg_name(UUID, Props, _ChannelName) ->\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_originate.erl:\n  156  -spec bind_to_events({'ok', ne_binary()}, atom()) -> 'ok'.\n  157  bind_to_events({'ok', <<\"mod_kazoo\", _/binary>>}, Node) ->\n  158:     'ok' = freeswitch:event(Node, ['CUSTOM', 'loopback::bowout']);\n  159  bind_to_events(_, Node) ->\n  160:     gproc:reg({'p', 'l', {'event', Node, <<\"loopback::bowout\">>}}).\n  161  \n  162  %%--------------------------------------------------------------------\n  ...\n  529      J = wh_json:set_values([{[<<\"Custom-Channel-Vars\">>, <<\"Fetch-ID\">>], FetchId}\n  530                                                     ,{[<<\"Custom-Channel-Vars\">>, <<\"Ecallmgr-Node\">>], wh_util:to_binary(node())}\n  531:                                                    ,{<<\"Loopback-Bowout\">>, <<\"true\">>}\n  532                             ], JObj),\n  533      list_to_binary([ecallmgr_fs_xml:get_channel_vars(J), DialStrings, \" \", Action]).\n  ...\n  797  should_update_uuid(OldUUID, Props) ->\n  798      case props:get_value(<<\"Event-Subclass\">>, Props, props:get_value(<<\"Event-Name\">>, Props)) of\n  799:         <<\"loopback::bowout\">> ->\n  800               props:get_value(<<\"Resigning-UUID\">>, Props) =:= OldUUID;\n  801          _ -> 'false'\n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_util.erl:\n  745  -spec maybe_set_interface(ne_binary(), bridge_endpoint()) -> ne_binary().\n  746  maybe_set_interface(<<\"sofia/\", _/binary>>=Contact, _) -> Contact;\n  747: maybe_set_interface(<<\"loopback/\", _/binary>>=Contact, _) -> Contact;\n  748  maybe_set_interface(Contact, #bridge_endpoint{sip_interface='undefined'}) ->\n  749      <<?SIP_INTERFACE, Contact/binary>>;\n\n/home/sam/conversant/repos/kazoo/applications/trunkstore/src/ts_from_offnet.erl:\n   42      Q = ts_callflow:get_my_queue(State),\n   43      'true' = wapi_dialplan:bridge_endpoint_v(EP),\n   44:     MediaHandling = case wh_json:get_value([<<\"Custom-Channel-Vars\">>, <<\"Offnet-Loopback-Number\">>], JObj) of\n   45                          'undefined' ->\n   46                              case wh_util:is_false(wh_json:get_value(<<\"Bypass-Media\">>, EP)) of\n\n15 matches across 8 files\n\n\nSearching 3816 files for \"socket\"\n\n/home/sam/conversant/repos/kazoo/erl_crash.dump:\n 10560  exbadport\n 10561  port_list\n 10562: udp_sockets\n 10563: tcp_sockets\n 10564  fmt_port\n 10565  ntoa\n .....\n 10617  popf\n 10618  pushf\n 10619: withsocket\n 10620  getif\n 10621  udp_closed\n .....\n 10750  inet_hosts_byaddr\n 10751  inet_cache\n 10752: lookup_socket\n 10753: unregister_socket\n 10754: register_socket\n 10755  dnt\n 10756  dnip\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/doc/example_client.html:\n    1  <html>\n    2    <head>\n    3:     <script src=\"//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.6/socket.io.min.js\"></script>\n    4    </head>\n    5    <body>\n    6      <div id=\"content\"></div>\n    7      <script>\n    8:       var socket = io.connect('http://192.168.56.111:5555');\n    9:       socket.emit(\"subscribe\", { account_id: \"4b31dd1d32ce6d249897c06332375d65\", auth_token: \"7b70f69a2a4976d80bfa0382894d1553\", binding: \"call.CHANNEL_CREATE.*\"});\n   10:       socket.emit(\"subscribe\", { account_id: \"4b31dd1d32ce6d249897c06332375d65\", auth_token: \"7b70f69a2a4976d80bfa0382894d1553\", binding: \"call.CHANNEL_ANSWER.*\"});\n   11:       socket.emit(\"subscribe\", { account_id: \"4b31dd1d32ce6d249897c06332375d65\", auth_token: \"7b70f69a2a4976d80bfa0382894d1553\", binding: \"call.CHANNEL_DESTROY.*\"});\n   12:       socket.emit(\"subscribe\", { account_id: \"4b31dd1d32ce6d249897c06332375d65\", auth_token: \"7b70f69a2a4976d80bfa0382894d1553\", binding: \"conference.event.*\"});\n   13  \n   14:       socket.on(\"participants_event\", function (data) {\n   15        console.log(data);\n   16        });\n   17:       socket.on(\"CHANNEL_CREATE\", function (data) {\n   18        console.log(data); // data = EventJObj\n   19        });\n   20:       socket.on(\"CHANNEL_ANSWER\", function (data) {\n   21        console.log(data);\n   22        });\n   23:       socket.on(\"CHANNEL_DESTROY\", function (data) {\n   24        console.log(data);\n   25        });\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/bh_context.erl:\n   15          ,auth_token/1, set_auth_token/2\n   16          ,auth_account_id/1, set_auth_account_id/2\n   17:         ,websocket_session_id/1, set_websocket_session_id/2\n   18:         ,websocket_pid/1, set_websocket_pid/2\n   19          ]).\n   20  \n   ..\n   26            ,account_id :: api_binary()\n   27            ,binding :: api_binary()\n   28:           ,websocket_session_id :: api_binary()\n   29:           ,websocket_pid :: api_pid()\n   30           }).\n   31  \n   ..\n   39  -spec new(pid(), ne_binary()) -> context().\n   40  new(SessionPid, SessionId) ->\n   41:     #bh_context{websocket_session_id=SessionId\n   42:                 ,websocket_pid=SessionPid\n   43                 }.\n   44  \n   ..\n   62  auth_account_id(#bh_context{auth_account_id=AuthBy}) -> AuthBy.\n   63  binding(#bh_context{binding=Binding}) -> Binding.\n   64: websocket_session_id(#bh_context{websocket_session_id=SessionId}) -> SessionId.\n   65: websocket_pid(#bh_context{websocket_pid=SocketPid}) -> SocketPid.\n   66  \n   67  -spec set_account_id(context(), ne_binary()) -> context().\n   ..\n   69  -spec set_auth_account_id(context(), ne_binary()) -> context().\n   70  -spec set_binding(context(), ne_binary()) -> context().\n   71: -spec set_websocket_session_id(context(), ne_binary()) -> context().\n   72: -spec set_websocket_pid(context(), pid()) -> context().\n   73  set_account_id(#bh_context{}=Context, AcctId) -> Context#bh_context{account_id=AcctId}.\n   74  set_auth_token(#bh_context{}=Context, AuthToken) -> Context#bh_context{auth_token=AuthToken}.\n   75  set_auth_account_id(#bh_context{}=Context, AuthBy) -> Context#bh_context{auth_account_id=AuthBy}.\n   76  set_binding(#bh_context{}=Context, Binding) -> Context#bh_context{binding=Binding}.\n   77: set_websocket_session_id(#bh_context{}=Context, SessionId) -> \n   78:     Context#bh_context{websocket_session_id=SessionId}.\n   79: set_websocket_pid(#bh_context{}=Context, SocketPid) ->\n   80:     Context#bh_context{websocket_pid=SocketPid}.\n   81  \n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole.app.src:\n    1  {application, blackhole,\n    2   [\n    3:   {description, \"blackhole - websocket\"},\n    4    {vsn, \"1\"},\n    5    {registered, []},\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole.erl:\n   36  -spec stop() -> 'ok'.\n   37  stop() -> \n   38:     cowboy:stop_listener('socketio_http_listener'),\n   39      exit(whereis('blackhole_sup'), 'shutdown'),\n   40      'ok'.\n   ..\n   59                                                 ,'public_key'\n   60                                                 ,'ssl'\n   61:                                                ,'socketio'\n   62                                                 ]],\n   63      'ok'.\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_data_emitter.erl:\n   16  emit(SessionPid, Event, Data) when is_pid(SessionPid) ->\n   17      lager:debug(\"sending event data: ~s\", [Event]),\n   18:     socketio_session:send_event(SessionPid, Event, Data);\n   19  emit([_|_]=SessionPids, Event, Data) ->\n   20:     [socketio_session:send_event(SessionPid, Event, Data) || SessionPid <- SessionPids].\n   21  \n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_socket_callback.erl:\n    7  %%%-------------------------------------------------------------------\n    8  \n    9: -module(blackhole_socket_callback).\n   10  \n   11  -include(\"blackhole.hrl\").\n   ..\n   17  \n   18  open(SessionPid, SessionId, _Opts) ->\n   19:     lager:debug(\"opening socket ~p\", [SessionId]),\n   20      {'ok', bh_context:new(SessionPid, SessionId)}.\n   21   \n   22  recv(SessionPid, SessionId, {message, <<>>, Message}, State) ->\n   23:     lager:debug(\"received message ~p on socket ~p\", [Message, SessionId]),\n   24      blackhole_resource:handle_message(Message, SessionId, SessionPid),\n   25      {'ok', State};\n   ..\n   42  \n   43  recv(_SessionPid, _SessionId, {'event', _Ignore, _Event, _Data}, Context) ->\n   44:     lager:debug(\"received event: ~p on socket ~p with data payload\", [_Event, _SessionId]),\n   45      {'ok', Context};\n   46  recv(_SessionPid, SessionId, Message, Context) ->\n   47:     lager:info(\"receive unknown message ~p on socket ~p\", [Message, SessionId]),\n   48      {'ok', Context}.\n   49  \n   50  close(SessionPid, SessionId, _Context) ->\n   51:     lager:debug(\"closing socket ~p\", [SessionId]),\n   52      blackhole_bindings:filter(fun(Binding, _Module, _Function, BindingContext) ->\n   53                                        case bh_context:is_context(BindingContext) of\n   54                                            'false' -> 'true';\n   55                                            'true' ->\n   56:                                               case not (bh_context:websocket_pid(BindingContext) =:= SessionPid) of\n   57                                                    'true' -> 'true';\n   58                                                    'false' ->\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_sup.erl:\n   37  start_link() ->\n   38      Dispatch = cowboy_router:compile([\n   39:                                       {'_', [{\"/socket.io/1/[...]\"\n   40:                                              ,'socketio_handler'\n   41:                                              ,[socketio_session:configure([{'heartbeat', 5000}\n   42                                                                            ,{'heartbeat_timeout', 30000}\n   43                                                                            ,{'session_timeout', 30000}\n   44:                                                                           ,{'callback', 'blackhole_socket_callback'}\n   45:                                                                           ,{'protocol', 'socketio_data_protocol'}\n   46                                                                            ])]}\n   47                                              ]\n   ..\n   49                                       ]),\n   50      Port = whapps_config:get_integer(<<\"blackhole\">>, <<\"port\">>, 5555),\n   51:     {'ok', _} = cowboy:start_http('socketio_http_listener', 100, [{'port', Port}],\n   52                                    [{'env', [{'dispatch', Dispatch}]}]),\n   53      supervisor:start_link({'local', ?MODULE}, ?MODULE, []).\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/modules/bh_call.erl:\n   20  handle_event(Context, EventJObj) ->\n   21      wh_util:put_callid(EventJObj),\n   22:     lager:debug(\"handle_event fired for ~s ~s\", [bh_context:account_id(Context), bh_context:websocket_session_id(Context)]),\n   23      'true' = wapi_call:event_v(EventJObj) andalso is_account_event(Context, EventJObj),\n   24:     lager:debug(\"valid event and emitting to ~p: ~s\", [bh_context:websocket_pid(Context), event_name(EventJObj)]),\n   25:     blackhole_data_emitter:emit(bh_context:websocket_pid(Context), event_name(EventJObj), EventJObj).\n   26  \n   27  is_account_event(Context, EventJObj) ->\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/modules/bh_conference.erl:\n   27  handle_event(Context, EventJObj) ->\n   28      lager:debug(\"handling conference event ~s\", [get_response_key(EventJObj)]),\n   29:     blackhole_data_emitter:emit(bh_context:websocket_pid(Context)\n   30                                  ,get_response_key(EventJObj)\n   31                                  ,EventJObj\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/modules/bh_fax.erl:\n   18  handle_event(Context, EventJObj) ->\n   19      wh_util:put_callid(EventJObj),\n   20:     lager:debug(\"handle_event fired for ~s ~s\", [bh_context:account_id(Context), bh_context:websocket_session_id(Context)]),\n   21      'true' = wapi_fax:status_v(EventJObj) andalso is_account_event(Context, EventJObj),\n   22:     lager:debug(\"valid event and emitting to ~p: ~s\", [bh_context:websocket_pid(Context), event_name(EventJObj)]),\n   23:     blackhole_data_emitter:emit(bh_context:websocket_pid(Context), event_name(EventJObj), EventJObj).\n   24  \n   25  -spec is_account_event(bh_context:context(), wh_json:object()) -> any().\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/modules/bh_skel.erl:\n   21  handle_event(Context, EventJObj) ->\n   22      wh_util:put_callid(EventJObj),\n   23:     lager:debug(\"handle_event fired for ~s ~s\", [bh_context:account_id(Context), bh_context:websocket_session_id(Context)]),\n   24:     blackhole_data_emitter:emit(bh_context:websocket_pid(Context), event_name(EventJObj), EventJObj).\n   25  \n   26  event_name(JObj) ->\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/modules/bh_token_auth.erl:\n   42          'true' -> check_auth_token(Context, bh_context:auth_token(Context));\n   43          'false' ->\n   44:             lager:warning(\"rate limiting threshold hit for ~s!\", [bh_context:websocket_session_id(Context)]),\n   45              {'halt', 'badness'}\n   46      end.\n   ..\n   69  -spec bucket_name(bh_context:context()) -> ne_binary().\n   70  bucket_name(Context) ->\n   71:     bh_context:websocket_session_id(Context).\n   72  \n\n/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_event_stream.erl:\n   27                  ,ip :: inet:ip_address()\n   28                  ,port :: inet:port_number()\n   29:                 ,socket :: inet:socket()\n   30                 }).\n   31  -type state() :: #state{}.\n   ..\n  115  handle_cast('connect', #state{ip=IP, port=Port}=State) ->\n  116      case gen_tcp:connect(IP, Port, [{'mode', 'binary'}, {'packet', 2}]) of\n  117:         {'ok', Socket} ->\n  118:             lager:debug(\"opened event stream socket to ~p:~p for ~p\"\n  119                          ,[IP, Port, get_event_binding(State)]),\n  120:             {'noreply', State#state{socket=Socket}};\n  121          {'error', Reason} ->\n  122              {'stop', Reason, State}\n  ...\n  151  %% @end\n  152  %%--------------------------------------------------------------------\n  153: handle_info({'tcp', Socket, Data}, #state{socket=Socket, node=Node}=State) ->\n  154      _ = spawn(?MODULE, 'process_event', [Data, Node]),\n  155      {'noreply', State};\n  156: handle_info({'tcp_closed', Socket}, #state{socket=Socket, node=Node}=State) ->\n  157      lager:info(\"event stream for ~p on node ~p closed\"\n  158                  , [get_event_binding(State), Node]),\n  159:     {'stop', 'normal', State#state{socket='undefined'}};\n  160: handle_info({'tcp_error', Socket, _Reason}, #state{socket=Socket}=State) ->\n  161      lager:warning(\"event stream tcp error: ~p\", [_Reason]),\n  162:     gen_tcp:close(Socket),\n  163      gen_server:cast(self(), 'request_event_stream'),\n  164:     {'noreply', State#state{socket='undefined'}};\n  165  handle_info(_Msg, State) ->\n  166      lager:debug(\"unhandled message: ~p\", [_Msg]),\n  ...\n  178  %% @end\n  179  %%--------------------------------------------------------------------\n  180: terminate(_Reason, #state{socket='undefined', node=Node}=State) ->\n  181      lager:debug(\"event stream for ~p on node ~p terminating: ~p\"\n  182                  ,[get_event_binding(State), Node, _Reason]);\n  183: terminate(_Reason, #state{socket=Socket, node=Node}=State) ->\n  184:     gen_tcp:close(Socket),\n  185      lager:debug(\"event stream for ~p on node ~p terminating: ~p\"\n  186                  ,[get_event_binding(State), Node, _Reason]).\n\n/home/sam/conversant/repos/kazoo/applications/fax/src/fax_request.erl:\n  149      TransferRate = wh_json:get_integer_value([<<\"Application-Data\">>,<<\"Fax-Transfer-Rate\">>], JObj, 1),\n  150      lager:debug(\"inbound fax status - negociate result - ~p\",[TransferRate]),\n  151:     %% TODO update stats/websockets/job\n  152      %%      maybe setup timer to cancel job bassed on transmission rate     \n  153      {'noreply', State};\n  ...\n  156      lager:debug(\"inbound fax status - page result - ~p : ~p\"\n  157                  ,[TransferredPages, wh_util:current_tstamp()]),\n  158:     %% TODO update stats/websockets/job \n  159      {'noreply', State};\n  160  handle_cast({'fax_status', <<\"result\">>, JObj}, State) ->\n  161:     %% TODO update stats/websockets/job \n  162      end_receive_fax(JObj, State);\n  163  %    {'stop', 'normal', State};\n  164  handle_cast({'fax_status', Event, JObj}, State) ->\n  165      lager:debug(\"fax status not handled - ~s\",[Event]),\n  166:     %% TODO update stats/websockets/job \n  167      {'noreply', State};\n  168  handle_cast({'exec_completed', <<\"store_fax\">>, <<\"success\">>, JObj}, State) ->\n\n/home/sam/conversant/repos/kazoo/applications/media_mgr/doc/README.org:\n   13                     accept client\n   14                     verify stream path exists (can issue redirect to couch?)\n   15:                    send chunked data to socket\n   16                     \n   17                     \n\n/home/sam/conversant/repos/kazoo/core/whistle_apps-1.0.0/src/whapps_controller.erl:\n   77                        ,'whistle_amqp', 'whistle_stats', 'sasl', 'lager', 'gproc'\n   78                        ,'amqp_client', 'syslog', 'asn1', 'folsom', 'kazoo_token_buckets'\n   79:                       ,'socketio', 'kazoo_bindings', 'cowlib'\n   80                       ]).\n   81  -spec running_apps() -> atoms() | string().\n\n/home/sam/conversant/repos/kazoo/core/whistle_media-1.0.0/src/wh_media_continuous_proxy.erl:\n   66                     cowboy_req:set_resp_body_fun(\n   67                       Size\n   68:                      ,fun(Socket, Transport) ->\n   69:                               lager:debug(\"ready to stream file using transport ~p to socket ~p\", [Transport, Socket]),\n   70:                               wh_media_proxy_util:stream(Socket, Transport, ChunkSize, Bin\n   71                                                           ,wh_media_proxy_util:get_shout_header(MediaName, Url)\n   72                                                           , 'true')\n   ..\n   76                     cowboy_req:set_resp_body_fun(\n   77                       Size\n   78:                      ,fun(Socket, Transport) ->\n   79:                               lager:debug(\"ready to stream file using transport ~p to socket ~p\", [Transport, Socket]),\n   80:                               wh_media_proxy_util:stream(Socket, Transport, ChunkSize, Bin, 'undefined', 'false')\n   81                        end\n   82                       ,set_resp_headers(Req0, CT))\n\n/home/sam/conversant/repos/kazoo/core/whistle_media-1.0.0/src/wh_media_proxy_util.erl:\n   18  -export_type([shout_header/0]).\n   19  \n   20: -spec stream(inet:socket(), atom(), pos_integer(), binary(), shout_header() | 'undefined', boolean()) -> any().\n   21: stream(Socket, Transport, ChunkSize, Bin, Header, ToPad) ->\n   22      lager:debug(\"let's stream the binary\"),\n   23:     send_chunks(Socket, Transport, ChunkSize, Bin, Header, ToPad).\n   24  \n   25  send_chunks(_S, _T, _, <<>>, _, _) ->\n   26      lager:debug(\"nothing to send\");\n   27: send_chunks(Socket, Transport, ChunkSize, Bin, Header, ToPad) ->\n   28      try\n   29          <<Send:ChunkSize/binary, Rest/binary>> = Bin,\n   30:         write_chunk(Socket, Transport, Send, Header),\n   31:         send_chunks(Socket, Transport, ChunkSize, Rest, bump(Header), ToPad)\n   32      catch\n   33          'error':{'badmatch',_} ->\n   34              lager:debug(\"sending last chunk\"),\n   35:             write_data(Socket, Transport, ChunkSize, Bin, Header, ToPad)\n   36      end.\n   37  \n   ..\n   40  \n   41  %% When we know we have the whole chunk, just send it + header\n   42: write_chunk(Socket, Transport, Bin, 'undefined') ->\n   43:     Transport:send(Socket, Bin);\n   44: write_chunk(Socket, Transport, Bin, Header) ->\n   45:     Transport:send(Socket, [Bin, the_header(Header)]).\n   46  \n   47  %% when we have less than the chunk size to send, possibly pad it\n   48: write_data(Socket, Transport, ChunkSize, Bin, Header, 'true') ->\n   49      Size = byte_size(Bin),\n   50      H = the_header(Header),\n   ..\n   52      Padding = binary:copy(<<0>>, ChunkSize-Size-byte_size(H)),\n   53  \n   54:     Transport:send(Socket, [Bin, H, Padding]);\n   55: write_data(Socket, Transport, _, Bin, 'undefined', _) ->\n   56:     Transport:send(Socket, Bin);\n   57: write_data(Socket, Transport, _, Bin, Header, 'false') ->\n   58:     Transport:send(Socket, [Bin, the_header(Header)]).\n   59  \n   60  the_header('undefined') -> <<>>;\n\n/home/sam/conversant/repos/kazoo/core/whistle_media-1.0.0/src/wh_media_single_proxy.erl:\n   75                     Req1 = set_resp_headers(Req0, ChunkSize, ContentType, MediaName, Url),\n   76                     cowboy_req:set_resp_body_fun(Size\n   77:                                                 ,fun(Socket, Transport) ->\n   78:                                                          wh_media_proxy_util:stream(Socket, Transport, ChunkSize, Bin\n   79                                                                                      ,wh_media_proxy_util:get_shout_header(MediaName, Url)\n   80                                                                                      ,'true')\n   ..\n   84                     Req1 = set_resp_headers(Req0, CT),\n   85                     cowboy_req:set_resp_body_fun(Size\n   86:                                                 ,fun(Socket, Transport) ->\n   87:                                                          wh_media_proxy_util:stream(Socket, Transport, ChunkSize, Bin, 'undefined', 'false')\n   88                                                   end\n   89                                                  ,Req1)\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/CHANGELOG.md:\n   74  \n   75      The guide now has a REST principles chapter and revised\n   76:     and completed Websocket chapters, alongside a new multipart chapter.\n   77  \n   78   *  Add a multipart file upload example\n   ..\n  109   *  Trigger a human readable error when routes lack the starting slash\n  110  \n  111:  *  Add websocket_compress metadata\n  112  \n  113   *  Fix parsing of hosts given as IPv6 addresses\n  ...\n  115   *  Fix the decoding of chunked bodies\n  116  \n  117:  *  Fix handling of close, ping and pong Websocket replies\n  118  \n  119:  *  Fix the x-webkit-deflate-frame Websocket extension\n  120  \n  121   *  Fix PUT behavior in cowboy_rest when creating a resource at the request URL\n  ...\n  146   *  Update Ranch to 0.8.4\n  147  \n  148:  *  Add experimental support for the x-webkit-deflate-frame Websocket extension\n  149  \n  150:     This allows Cowboy to handle compressed Websocket frames,\n  151      lowering the amount of data that needs to be sent over the\n  152:     socket.\n  153  \n  154      The extension will only be used if compression was enabled\n  ...\n  353   *  Fix cowboy_req:has_body/1 when Content-Length == 0\n  354  \n  355:  *  Fix passing of state to websocket_terminate/3 on server close\n  356  \n  357   *  Fix compilation with +native\n  ...\n  359   *  Compile with more warnings enabled by default; fix warnings\n  360  \n  361:  *  Set the socket in passive mode after the loop handler terminates\n  362  \n  363   *  Improve typespecs\n  ...\n  377      Add basic_auth, compress_response, cookie, elixir_hello_world,\n  378      markdown_middleware, rest_pastebin, rest_stream_response\n  379:     and websocket examples.\n  380  \n  381      Rename the static example to static_world for clarity.\n  ...\n  415     *  cowboy_http_rest becomes cowboy_rest\n  416     *  cowboy_http_static becomes cowboy_static\n  417:    *  cowboy_http_websocket becomes cowboy_websocket\n  418  \n  419   *  Introduce the cowboy_req:req() opaque type\n  ...\n  436   *  Improve the body streaming interface in cowboy_req\n  437  \n  438:     The function now receives the Transport and Socket directly as arguments.\n  439  \n  440   *  Rename or drop many cowboy_req functions\n  ...\n  480     *  Fix an internal message leak\n  481  \n  482:  *  Enhance the Websocket API\n  483:    *  Change a websocket error from {error, protocol} to {error, badframe}\n  484:    *  Allow websocket handlers to reply more than one frame\n  485     *  Check for errors when calling Transport:send/2 to avoid crashes\n  486     *  Add close, {close, Payload}, {close, StatusCode, Payload},\n  487        ping, pong frame types for replies\n  488:    *  Ensure websocket_terminate is always called\n  489     *  Improve timeout handling\n  490     *  Remove support for the old hixie76 protocol\n  491:    *  Add parsing support for Sec-Websocket-Protocol\n  492     *  Check for UTF-8 correctness of text frames\n  493     *  Perform unmasking and UTF-8 validation on the fly\n  494     *  Reject clients that send unmasked frames\n  495:    *  Add cowboy_websocket:close_code/0 type\n  496  \n  497   *  Enhance the REST API\n  ...\n  517   *  Add the body data to onresponse_fun/0 callback\n  518  \n  519:  *  Avoid a duplicate HTTP reply in cowboy_websocket:upgrade_error/1\n  520  \n  521   *  Fix use of the Vary header, was named Variances in the previous code\n  ...\n  568      properly decoded data ready for consumption.\n  569  \n  570:  *  Add fragmented websocket messages support\n  571  \n  572:     Properly tested by the addition of the Autobahn websocket\n  573      test suite to our toolbox. All tests pass except a few\n  574      related to UTF-8 handling, as Cowboy does no checks on that\n  ...\n  620   *  Fix a bug with setting cookie values containing slashes\n  621  \n  622:  *  Fix a small timer leak when using loop/websocket timeouts\n  623  \n  624   *  Make charset and media type parsing more relaxed\n  ...\n  737      using the given fun. The size of the response must be known beforehand.\n  738  \n  739:  *  Add transport/1 to obtain the transport and socket for the request\n  740  \n  741:     This allows handlers to have low-level socket access in those cases\n  742      where they do need it, like when streaming a response body with\n  743      set_resp_body_fun/3.\n  ...\n  750   *  Add meta/2 and meta/3 to save useful protocol information\n  751  \n  752:     Currently used to save the Websocket protocol version currently used,\n  753      and to save request information in the REST protocol handler.\n  754  \n  ...\n  818   *  Improve the error message for HTTP handlers\n  819  \n  820: ### cowboy_http_websocket\n  821  \n  822:  *  Add websocket support for all versions up to RFC 6455\n  823  \n  824      Support isn't perfect yet according to the specifications, but\n  825      is working against all currently known client implementations.\n  826  \n  827:  *  Allow websocket_init/3 to return with the hibernate option set\n  828  \n  829:  *  Add {shutdown, Req} return value to websocket_init/3 to fail an upgrade\n  830  \n  831:  *  Fix websocket timeout handling\n  832  \n  833   *  Fix error messages: wrong callback name was reported on error\n  834  \n  835:  *  Fix byte-by-byte websocket handling\n  836  \n  837   *  Fix an issue when using hixie-76 with certain proxies\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/ROADMAP.md:\n   18   *  HTTP/2.0\n   19  \n   20:  *  Websocket permessage deflate compression\n   21  \n   22   *  Better cowboy_req usability\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/README.md:\n   53      serves files with lists directory entries\n   54  \n   55:  *  [websocket](./websocket):\n   56:     websocket example\n   57  \n   58  Other languages\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/rest_stream_response/src/toppage_handler.erl:\n   26  \n   27  result_streamer(Table, MS) ->\n   28: 	fun (Socket, Transport) ->\n   29: 		send_records(Socket, Transport, ets:select(Table, MS, 1))\n   30  	end.\n   31  \n   32: send_records(Socket, Transport, {[Rec], Cont}) ->\n   33  	timer:sleep(500),\n   34: 	send_line(Socket, Transport, Rec),\n   35: 	send_records(Socket, Transport, ets:select(Cont));\n   36: send_records(_Socket, _Transport, '$end_of_table') ->\n   37  	ok.\n   38  \n   39: send_line(Socket, Transport, [Key, V1, V2]) ->\n   40: 	Transport:send(Socket,\n   41  		[Key, $,, integer_to_list(V1), $,, integer_to_list(V2), $\\r, $\\n]).\n   42  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/websocket/Makefile:\n    1: PROJECT = websocket\n    2  \n    3  DEPS = cowboy\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/websocket/README.md:\n    1: Websocket example\n    2  =================\n    3  \n    .\n   13  \n   14  ``` bash\n   15: $ ./_rel/bin/websocket_example console\n   16  ```\n   17  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/websocket/relx.config:\n    1: {release, {websocket_example, \"1\"}, [websocket]}.\n    2  {extended_start_script, true}.\n    3  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/websocket/priv/index.html:\n    2    <head>\n    3      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n    4:     <title>Websocket client</title>\n    5      <script src=\"/static/jquery.min.js\"></script>\n    6      <script type=\"text/javascript\">\n    7        \n    8:       var websocket;\n    9        $(document).ready(init);\n   10        \n   11        function init() {\n   12:           $('#server').val(\"ws://\" + window.location.host + \"/websocket\");\n   13:           if(!(\"WebSocket\" in window)){  \n   14:               $('#status').append('<p><span style=\"color: red;\">websockets are not supported </span></p>');\n   15                $(\"#navigation\").hide();  \n   16            } else {\n   17:               $('#status').append('<p><span style=\"color: green;\">websockets are supported </span></p>');\n   18                connect();\n   19            };\n   ..\n   25        {\n   26            wsHost = $(\"#server\").val()\n   27:           websocket = new WebSocket(wsHost);\n   28            showScreen('<b>Connecting to: ' +  wsHost + '</b>'); \n   29:           websocket.onopen = function(evt) { onOpen(evt) }; \n   30:           websocket.onclose = function(evt) { onClose(evt) }; \n   31:           websocket.onmessage = function(evt) { onMessage(evt) }; \n   32:           websocket.onerror = function(evt) { onError(evt) }; \n   33        };  \n   34        \n   35        function disconnect() {\n   36:           websocket.close();\n   37        }; \n   38  \n   39        function toggle_connection(){\n   40:           if(websocket.readyState == websocket.OPEN){\n   41                disconnect();\n   42            } else {\n   ..\n   46  \n   47        function sendTxt() {\n   48:           if(websocket.readyState == websocket.OPEN){\n   49                txt = $(\"#send_txt\").val();\n   50:               websocket.send(txt);\n   51                showScreen('sending: ' + txt); \n   52            } else {\n   53:                showScreen('websocket is not connected'); \n   54            };\n   55        };\n   ..\n   86    <body>\n   87      <div id=\"header\">\n   88:       <h1>Websocket client</h1>\n   89        <div id=\"status\"></div>\n   90      </div>\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/websocket/src/websocket.app.src:\n    1  %% Feel free to use, reuse and abuse the code in this file.\n    2  \n    3: {application, websocket, [\n    4: 	{description, \"Cowboy websocket example.\"},\n    5  	{vsn, \"1\"},\n    6  	{modules, []},\n    7: 	{registered, [websocket_sup]},\n    8  	{applications, [\n    9  		kernel,\n   ..\n   11  		cowboy\n   12  	]},\n   13: 	{mod, {websocket_app, []}},\n   14  	{env, []}\n   15  ]}.\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/websocket/src/websocket_app.erl:\n    2  \n    3  %% @private\n    4: -module(websocket_app).\n    5  -behaviour(application).\n    6  \n    .\n   13  	Dispatch = cowboy_router:compile([\n   14  		{'_', [\n   15: 			{\"/\", cowboy_static, {priv_file, websocket, \"index.html\"}},\n   16: 			{\"/websocket\", ws_handler, []},\n   17: 			{\"/static/[...]\", cowboy_static, {priv_dir, websocket, \"static\"}}\n   18  		]}\n   19  	]),\n   20  	{ok, _} = cowboy:start_http(http, 100, [{port, 8080}],\n   21  		[{env, [{dispatch, Dispatch}]}]),\n   22: 	websocket_sup:start_link().\n   23  \n   24  stop(_State) ->\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/websocket/src/websocket_sup.erl:\n    2  \n    3  %% @private\n    4: -module(websocket_sup).\n    5  -behaviour(supervisor).\n    6  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/examples/websocket/src/ws_handler.erl:\n    1  -module(ws_handler).\n    2: -behaviour(cowboy_websocket_handler).\n    3  \n    4  -export([init/3]).\n    5: -export([websocket_init/3]).\n    6: -export([websocket_handle/3]).\n    7: -export([websocket_info/3]).\n    8: -export([websocket_terminate/3]).\n    9  \n   10  init({tcp, http}, _Req, _Opts) ->\n   11: 	{upgrade, protocol, cowboy_websocket}.\n   12  \n   13: websocket_init(_TransportName, Req, _Opts) ->\n   14  	erlang:start_timer(1000, self(), <<\"Hello!\">>),\n   15  	{ok, Req, undefined_state}.\n   16  \n   17: websocket_handle({text, Msg}, Req, State) ->\n   18  	{reply, {text, << \"That's what she said! \", Msg/binary >>}, Req, State};\n   19: websocket_handle(_Data, Req, State) ->\n   20  	{ok, Req, State}.\n   21  \n   22: websocket_info({timeout, _Ref, Msg}, Req, State) ->\n   23  	erlang:start_timer(1000, self(), <<\"How' you doin'?\">>),\n   24  	{reply, {text, Msg}, Req, State};\n   25: websocket_info(_Info, Req, State) ->\n   26  	{ok, Req, State}.\n   27  \n   28: websocket_terminate(_Reason, _Req, _State) ->\n   29  	ok.\n   30  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/erlang_web.md:\n   94  the client to perform asynchronous calls to the server.\n   95  \n   96: Then Websocket appeared and allowed both the server and the client\n   97  to send data to the other endpoint completely asynchronously. The\n   98  data is contained within frames and no response is necessary.\n   ..\n  104  \n  105  It is therefore quite easy to imagine Erlang being good at receiving\n  106: Websocket frames, which may come in at unpredictable times, pass the\n  107  data to the responsible processes which are always ready waiting for\n  108  new messages, and perform the operations required by only activating\n  109  the required parts of the system.\n  110  \n  111: The more recent Web technologies, like Websocket of course, but also\n  112  SPDY and HTTP/2.0, are all fully asynchronous protocols. The concept\n  113  of requests and responses is retained of course, but anything could\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/handlers.md:\n   11  \n   12  Different kinds of handlers can be combined in a single module. This\n   13: allows a module to handle both websocket and long-polling code in a\n   14  single place, for example.\n   15  \n   ..\n   18  \n   19  Cowboy features many different handlers: HTTP handlers, loop handlers,\n   20: websocket handlers, REST handlers and static handlers. All of them\n   21  have a common entry point: the `init/3` function.\n   22  \n   23  By default, Cowboy considers your handler to be an HTTP handler.\n   24  \n   25: To switch to a different protocol, like, for example, Websocket,\n   26  you must perform a protocol upgrade. This is done by returning\n   27  a protocol upgrade tuple at the end of `init/3`.\n   ..\n   35  \n   36  Cowboy comes with two protocol upgrades: `cowboy_rest` and\n   37: `cowboy_websocket`. Use these values in place of `my_protocol`\n   38  to use them.\n   39  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/hooks.md:\n   44  \n   45  The `onresponse` hook is called right before sending the response\n   46: to the socket. It can be used for the purposes of logging responses,\n   47  or for modifying the response headers or body. The best example is\n   48  providing custom error pages.\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/http_req_life.md:\n   31  The `acceptor` is the part of the server that accepts\n   32  the connection and create an Erlang process to handle\n   33: it. The `parser` then starts reading from the socket\n   34: and handling requests as they come until the socket\n   35  is closed.\n   36  \n   ..\n   72  When the client sends a request to the server, it includes\n   73  a header indicating whether it would like to leave the\n   74: socket open. The server may or may not accept, indicating\n   75  its choice by sending the same header in the response.\n   76  \n   77  Cowboy will include this header automatically in all\n   78  responses to HTTP/1.1 requests. You can however force\n   79: the closing of the socket if you want. When Cowboy sees\n   80  you want to send a `connection: close` header, it will\n   81  not override it and will close the connection as soon\n   ..\n   87  {ok, Req2} = cowboy_req:reply(200, [\n   88      {<<\"connection\">>, <<\"close\">>},\n   89: ], <<\"Closing the socket in 3.. 2.. 1..\">>, Req).\n   90  ```\n   91  \n   ..\n  118  response from the server, nothing prevents the client\n  119  from sending more requests to the server without waiting\n  120: for the response, due to how sockets work. The server\n  121  still handles the requests sequentially and sends the\n  122  responses in the same order.\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/internals.md:\n   11  \n   12  It uses only one process per connection. The process where your\n   13: code runs is the process controlling the socket. Using one process\n   14  instead of two allows for lower memory usage.\n   15  \n   ..\n   74  only processing short-lived requests.\n   75  \n   76: Another option is to define platform-specific socket options that\n   77  are known to improve their efficiency.\n   78  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/introduction.md:\n    5  \n    6  Cowboy aims to provide a complete HTTP stack, including its derivatives\n    7: SPDY, Websocket and REST. Cowboy currently supports HTTP/1.0, HTTP/1.1,\n    8: Websocket (all implemented drafts + standard) and Webmachine-based REST.\n    9  \n   10  Cowboy is a high quality project. It has a small code base, is very\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/middlewares.md:\n   29   *  `{suspend, Module, Function, Args}` to hibernate\n   30   *  `{halt, Req}` to stop processing and move on to the next request\n   31:  *  `{error, StatusCode, Req}` to reply an error and close the socket\n   32  \n   33  Of note is that when hibernating, processing will resume on the given\n   ..\n   36  \n   37  If an error happens during middleware processing, Cowboy will not try\n   38: to send an error back to the socket, the process will just crash. It\n   39  is up to the middleware to make sure that a reply is sent if something\n   40  goes wrong.\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/modern_web.md:\n  166  UTF-8 encoded text data. Binary data and text data encoded\n  167  differently are not allowed by the protocol. A heavier but\n  168: more generic approach can be found in Websocket.\n  169  \n  170: Websocket\n  171  ---------\n  172  \n  173: Websocket is a protocol built on top of HTTP/1.1 that provides\n  174  a two-ways communication channel between the client and the\n  175  server. Communication is asynchronous and can occur concurrently.\n  176  \n  177  It consists of a Javascript object allowing setting up a\n  178: Websocket connection to the server, and a binary based\n  179  protocol for sending data to the server or the client.\n  180  \n  181: Websocket connections can transfer either UTF-8 encoded text\n  182  data or binary data. The protocol also includes support for\n  183  implementing a ping/pong mechanism, allowing the server and\n  ...\n  185  alive.\n  186  \n  187: A Websocket connection can be used to transfer any kind of data,\n  188: small or big, text or binary. Because of this Websocket is\n  189  sometimes used for communication between systems.\n  190  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/req.md:\n   54  \n   55  The third group contains the functions that manipulate\n   56: the socket or perform operations that may legitimately fail.\n   57  They may return `{Result, Req}`, `{Result, Value, Req}`\n   58  or `{error, atom()}`. This includes the following functions:\n   ..\n  270  \n  271  ``` erlang\n  272: {MetaVal, Req2} = cowboy_req:meta(websocket_version, Req).\n  273  ```\n  274  \n  ...\n  276  \n  277  ``` erlang\n  278: {MetaVal, Req2} = cowboy_req:meta(websocket_version, Req, 13).\n  279  ```\n  280  \n  ...\n  302  When you are done reading information from the request object\n  303  and know you are not going to access it anymore, for example\n  304: when using long-polling or Websocket, you can use the `compact/1`\n  305  function to remove most of the data from the request object and\n  306  free memory.\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/req_body.md:\n  112  \n  113  The `read_length` option defines the maximum amount of data\n  114: to be received from the socket at once, in bytes.\n  115  \n  116  The `read_timeout` option defines the time Cowboy waits\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/resp.md:\n  151  \n  152  ``` erlang\n  153: F = fun (Socket, Transport) ->\n  154:     Transport:send(Socket, \"Hello world!\")\n  155  end,\n  156  Req2 = cowboy_req:set_resp_body_fun(12, F, Req).\n  ...\n  168  ```\n  169  \n  170: Finally, you can also send data on the socket directly,\n  171  without knowing the length in advance. Cowboy may be\n  172  forced to close the connection at the end of the response\n  ...\n  174  \n  175  ``` erlang\n  176: F = fun (Socket, Transport) ->\n  177      Body = lists:duplicate(random:uniform(1024, $a)),\n  178:     Transport:send(Socket, Body)\n  179  end,\n  180  Req2 = cowboy_req:set_resp_body_fun(F, Req).\n  ...\n  186  You can send files directly from disk without having to\n  187  read them. Cowboy will use the `sendfile` syscall when\n  188: possible, which means that the file is sent to the socket\n  189  directly from the kernel, which is a lot more performant\n  190  than doing it from userland.\n  ...\n  194  \n  195  ``` erlang\n  196: F = fun (Socket, Transport) ->\n  197:     Transport:sendfile(Socket, \"priv/styles.css\")\n  198  end,\n  199  Req2 = cowboy_req:set_resp_body_fun(FileSize, F, Req).\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/rest_handlers.md:\n   19  -----\n   20  \n   21: Like Websocket, REST is a sub-protocol of HTTP. It therefore\n   22  requires a protocol upgrade.\n   23  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/toc.md:\n   55   *  CORS\n   56  \n   57: Using Websocket\n   58  ---------------\n   59  \n   60:  *  [The Websocket protocol](ws_protocol.md)\n   61:  *  [Handling Websocket connections](ws_handlers.md)\n   62  \n   63  Advanced HTTP\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/ws_handlers.md:\n    1: Handling Websocket connections\n    2  ==============================\n    3  \n    4: A special handler is required for handling Websocket connections.\n    5: Websocket handlers allow you to initialize the connection,\n    6: handle incoming frames from the socket, handle incoming Erlang\n    7  messages and then clean up on termination.\n    8  \n    9: Websocket handlers essentially act as a bridge between the client\n   10  and the Erlang system. They will typically do little more than\n   11: socket communication and decoding/encoding of frames.\n   12  \n   13  Initialization\n   ..\n   15  \n   16  First, the `init/3` callback is called. This callback is common\n   17: to all handlers. To establish a Websocket connection, this function\n   18  must return an `upgrade` tuple.\n   19  \n   20  ``` erlang\n   21  init(_, Req, Opts) ->\n   22: 	{upgrade, protocol, cowboy_websocket}.\n   23  ```\n   24  \n   ..\n   28  ``` erlang\n   29  init(_Type, Req, Opts) ->\n   30: 	{upgrade, protocol, cowboy_websocket, Req, Opts}.\n   31  ```\n   32  \n   33  Upon receiving this tuple, Cowboy will switch to the code\n   34: that handles Websocket connections. It does not immediately\n   35: perform the handshake however. First, it calls the `websocket_init/3`\n   36  callback.\n   37  \n   ..\n   39  also be used to register the process, start a timer, etc.\n   40  As long as the function returns an `ok` tuple, then Cowboy\n   41: performs the Websocket handshake.\n   42  \n   43  ``` erlang\n   44: websocket_init(_Type, Req, _Opts) ->\n   45      {ok, Req, #state{}}.\n   46  ```\n   ..\n   51  \n   52  ``` erlang\n   53: websocket_init(_Type, Req, _Opts) ->\n   54  	{shutdown, Req}.\n   55  ```\n   ..\n   59  the response sent back to the client.\n   60  \n   61: Note that browser support for handling Websocket connection\n   62  failures may vary.\n   63  \n   64: If the sec-websocket-protocol header was sent with the request\n   65: for establishing a Websocket connection, then the Websocket\n   66  handler *must* select one of these subprotocol and send it\n   67  back to the client, otherwise the client might decide to close\n   ..\n   69  \n   70  ``` erlang\n   71: websocket_init(_Type, Req, _Opts) ->\n   72: 	case cowboy_req:parse_header(<<\"sec-websocket-protocol\">>, Req) of\n   73  		{ok, undefined, Req2} ->\n   74  			{ok, Req, #state{}};\n   ..\n   76  			case lists:keymember(<<\"mychat2\">>, 1, Subprotocols) of\n   77  				true ->\n   78: 					Req3 = cowboy:set_resp_header(<<\"sec-websocket-protocol\">>,\n   79  						<<\"mychat2\">>, Req2),\n   80  					{ok, Req3, #state{}};\n   ..\n   85  ```\n   86  \n   87: It is not recommended to wait too long inside the `websocket_init/3`\n   88  function. Any extra initialization may be done after returning by\n   89  sending yourself a message before doing anything. Any message sent\n   90: to `self()` from `websocket_init/3` is guaranteed to arrive before\n   91  any frames from the client.\n   92  \n   ..\n   96  \n   97  ``` erlang\n   98: websocket_init(_Type, Req, _Opts) ->\n   99  	self() ! post_init,\n  100  	%% Register process here...\n  101  	{ok, Req, #state{}}.\n  102  \n  103: websocket_info(post_init, Req, State) ->\n  104  	%% Perform post_init initialization here...\n  105  	{ok, Req, State}.\n  ...\n  109  -------------------------------\n  110  \n  111: Cowboy will call `websocket_handle/3` whenever a text, binary,\n  112  ping or pong frame arrives from the client. Note that in the\n  113  case of ping and pong frames, no action is expected as Cowboy\n  114  automatically replies to ping frames.\n  115  \n  116: The handler can decide to send frames to the socket, shutdown\n  117  or just continue without sending anything.\n  118  \n  ...\n  121  \n  122  ``` erlang\n  123: websocket_handle(Frame = {text, _}, Req, State) ->\n  124  	{reply, Frame, Req, State};\n  125: websocket_handle(_Frame, Req, State) ->\n  126  	{ok, Req, State}.\n  127  ```\n  ...\n  130  ------------------------\n  131  \n  132: Cowboy will call `websocket_info/3` whenever an Erlang message\n  133  arrives.\n  134  \n  135: The handler can decide to send frames to the socket, shutdown\n  136  or just continue without sending anything.\n  137  \n  138: The following snippet forwards any `log` message to the socket\n  139  and ignores all others.\n  140  \n  141  ``` erlang\n  142: websocket_info({log, Text}, Req, State) ->\n  143  	{reply, {text, Text}, Req, State};\n  144: websocket_info(_Info, Req, State) ->\n  145  	{ok, Req, State}.\n  146  ```\n  147  \n  148: Sending frames to the socket\n  149  ----------------------------\n  150  \n  151  Cowboy allows sending either a single frame or a list of\n  152: frames to the socket. Any frame can be sent: text, binary, ping,\n  153  pong or close frames.\n  154  \n  ...\n  157  \n  158  ``` erlang\n  159: websocket_info(hello_world, Req, State) ->\n  160  	{reply, [\n  161  		{text, \"Hello\"},\n  ...\n  163  		{binary, <<0:8000>>}\n  164  	], Req, State};\n  165: %% More websocket_info/3 clauses here...\n  166  ```\n  167  \n  ...\n  171  \n  172  Sending a `close` frame will immediately initiate the closing\n  173: of the Websocket connection. Be aware that any additional\n  174  frames sent by the client or any Erlang messages waiting to\n  175  be received will not be processed. Also note that when replying\n  ...\n  181  \n  182  The biggest performance improvement you can do when dealing\n  183: with a huge number of Websocket connections is to reduce the\n  184  number of timers that are started on the server. A common use\n  185  of timers when dealing with connections is for sending a ping\n  186  every once in a while. This should be done exclusively on the\n  187: client side. Indeed, a server handling one million Websocket\n  188  connections will perform a lot better when it doesn't have to\n  189  handle one million extra timers too!\n  ...\n  193  informative purpose, but no further action is required.\n  194  \n  195: Cowboy can be configured to automatically close the Websocket\n  196: connection when no data arrives on the socket. It is highly\n  197  recommended to configure a timeout for it, as otherwise you\n  198: may end up with zombie \"half-connected\" sockets that may\n  199  leave the process alive forever.\n  200  \n  ...\n  202  \n  203  ``` erlang\n  204: websocket_init(_Type, Req, _Opts) ->\n  205  	{ok, Req, #state{}, 60000}.\n  206  ```\n  ...\n  225  -------------------------\n  226  \n  227: Unfortunately Websocket is a relatively recent technology,\n  228  which means that not all browsers support it. A library like\n  229  [Bullet](https://github.com/extend/bullet) can be used to\n  230: emulate Websocket connections on older browsers.\n  231  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/ws_protocol.md:\n    1: The Websocket protocol\n    2  ======================\n    3  \n    4: This chapter explains what Websocket is and why it is\n    5  a vital component of soft realtime Web applications.\n    6  \n    .\n    8  -----------\n    9  \n   10: Websocket is an extension to HTTP that emulates plain TCP\n   11  connections between the client, typically a Web browser,\n   12  and the server. It uses the HTTP Upgrade mechanism to\n   13  establish the connection.\n   14  \n   15: Websocket connections are asynchronous, unlike HTTP. This\n   16  means that not only can the client send frames to the server\n   17  at any time, but the server can also send frames to the client\n   18  without the client initiating anything other than the\n   19: Websocket connection itself. This allows the server to push\n   20  data to the client directly.\n   21  \n   22: Websocket is an IETF standard. Cowboy supports the standard\n   23  and all drafts that were previously implemented by browsers,\n   24  excluding the initial flawed draft sometimes known as\n   ..\n   28  --------------\n   29  \n   30: Cowboy implements Websocket as a protocol upgrade. Once the\n   31  upgrade is performed from the `init/3` callback, Cowboy\n   32: switches to Websocket. Please consult the next chapter for\n   33: more information on initiating and handling Websocket\n   34  connections.\n   35  \n   36: The implementation of Websocket in Cowboy is validated using\n   37  the Autobahn test suite, which is an extensive suite of tests\n   38  covering all aspects of the protocol. Cowboy passes the\n   39  suite with 100% success, including all optional tests.\n   40  \n   41: Cowboy's Websocket implementation also includes the\n   42  x-webkit-deflate-frame compression draft which is being used\n   43  by some browsers to reduce the size of data being transmitted.\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/manual/cowboy_app.md:\n    9  The `cowboy` application uses the Erlang applications `ranch`\n   10  for listening and accepting TCP connections, `crypto` for\n   11: establishing Websocket connections, and `cowlib` for parsing and\n   12  building messages for Web protocols. These dependencies must\n   13  be loaded for the `cowboy` application to work. In an embedded\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/manual/cowboy_loop_handler.md:\n   42  >\n   43  > The receive loop will run for a duration of up to `Timeout`\n   44: > milliseconds after it last received data from the socket,\n   45  > at which point it will stop and send a `204 No Content` reply.\n   46  > By default this value is set to `infinity`. It is recommended\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/manual/cowboy_req.md:\n  206  > | if-unmodified-since    | `calendar:datetime()`                             |\n  207  > | range                  | `{Unit, [Range]}`                                 |\n  208: > | sec-websocket-protocol | `[binary()]`                                      |\n  209  > | transfer-encoding      | `[binary()]`                                      |\n  210  > | upgrade                | `[binary()]`                                      |\n  ...\n  220  >  *  Range = {non_neg_integer(), non_neg_integer() | infinity} | neg_integer()\n  221  >\n  222: > The cookie names and values, the values of the sec-websocket-protocol\n  223  > and x-forwarded-for headers, the values in `AcceptExt` and `Params`,\n  224  > the authorization `Credentials`, the `ExpectValue` and `OpaqueTag`\n  ...\n  460  > same options it received. It uses the same defaults.\n  461  >\n  462: > If there are more data to be read from the socket for this\n  463  > part, the function will return what it could read inside a\n  464  > `more` tuple. Otherwise, it will return an `ok` tuple.\n  ...\n  599  \n  600  > Types:\n  601: >  *  Fun = fun((Socket, Transport) -> ok)\n  602: >  *  Socket = inet:socket()\n  603  >  *  Transport = module()\n  604  >  *  Length = non_neg_integer()\n  ...\n  614  > using the `reply/2` or `reply/3` function.\n  615  >\n  616: > The fun will receive the Ranch `Socket` and `Transport` as\n  617  > arguments. Only send and sendfile operations are supported.\n  618  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/manual/cowboy_websocket.md:\n    1: cowboy_websocket\n    2  ================\n    3  \n    4: The `cowboy_websocket` module implements the Websocket protocol.\n    5  \n    6: The callbacks for websocket handlers are defined in the manual\n    7: for the `cowboy_websocket_handler` behaviour.\n    8  \n    9  Types\n   ..\n   23  -----------\n   24  \n   25: ### websocket_compress\n   26  \n   27  > Type: true | false\n   28  >\n   29: > Whether a websocket compression extension in in use.\n   30  \n   31: ### websocket_version\n   32  \n   33  > Type: 7 | 8 | 13\n   34  >\n   35: > The version of the Websocket protocol being used.\n   36  \n   37  Exports\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/manual/cowboy_websocket_handler.md:\n    1: cowboy_websocket_handler\n    2  ========================\n    3  \n    4: The `cowboy_websocket_handler` behaviour defines the interface used\n    5: by Websocket handlers.\n    6  \n    7: The `init/3` and `websocket_init/3` callbacks will always be called,\n    8: followed by zero or more calls to `websocket_handle/3` and\n    9: `websocket_info/3`. The `websocket_terminate/3` will always\n   10  be called last.\n   11  \n   ..\n   19  \n   20  ### init({TransportName, ProtocolName}, Req, Opts)\n   21: 	-> {upgrade, protocol, cowboy_websocket}\n   22: 	| {upgrade, protocol, cowboy_websocket, Req, Opts}\n   23  \n   24  > Types:\n   ..\n   28  >  *  Opts = any()\n   29  >\n   30: > Upgrade the protocol to `cowboy_websocket`.\n   31  \n   32: ### websocket_init(TransportName, Req, Opts)\n   33  	-> {ok, Req, State}\n   34  	| {ok, Req, State, hibernate}\n   ..\n   46  > Initialize the state for this session.\n   47  >\n   48: > This function is called before the upgrade to Websocket occurs.\n   49: > It can be used to negotiate Websocket protocol extensions\n   50  > with the client. It will typically be used to register this process\n   51  > to an event manager or a message queue in order to receive\n   ..\n   53  >\n   54  > The connection will stay up for a duration of up to `Timeout`\n   55: > milliseconds after it last received data from the socket,\n   56  > at which point it will stop and close the connection.\n   57  > By default this value is set to `infinity`. It is recommended\n   ..\n   61  >\n   62  > The `hibernate` option will hibernate the process until it\n   63: > starts receiving either data from the Websocket connection\n   64  > or Erlang messages.\n   65  >\n   66  > The `shutdown` return value can be used to close the connection\n   67: > before upgrading to Websocket.\n   68  \n   69: ### websocket_handle(InFrame, Req, State)\n   70  	-> {ok, Req, State}\n   71  	| {ok, Req, State, hibernate}\n   ..\n   78  >  *  Req = cowboy_req:req()\n   79  >  *  State = any()\n   80: >  *  OutFrame = cowboy_websocket:frame()\n   81  >\n   82: > Handle the data received from the Websocket connection.\n   83  >\n   84  > This function will be called every time data is received\n   85: > from the Websocket connection.\n   86  >\n   87  > The `shutdown` return value can be used to close the\n   ..\n   90  >\n   91  > The `hibernate` option will hibernate the process until\n   92: > it receives new data from the Websocket connection or an\n   93  > Erlang message.\n   94  \n   95: ### websocket_info(Info, Req, State)\n   96  	-> {ok, Req, State}\n   97  	| {ok, Req, State, hibernate}\n   ..\n  104  >  *  Req = cowboy_req:req()\n  105  >  *  State = any()\n  106: >  *  OutFrame = cowboy_websocket:frame()\n  107  >\n  108  > Handle the Erlang message received.\n  ...\n  116  >\n  117  > The `hibernate` option will hibernate the process until\n  118: > it receives another message or new data from the Websocket\n  119  > connection.\n  120  \n  121: ### websocket_terminate(Reason, Req, State) -> ok\n  122  \n  123  > Types:\n  124: >  *  Reason = {normal, shutdown | timeout} | {remote, closed} | {remote, cowboy_websocket:close_code(), binary()} | {error, badencoding | badframe | closed | atom()}\n  125  >  *  Req = cowboy_req:req()\n  126  >  *  State = any()\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/manual/toc.md:\n   17   *  [cowboy_static](cowboy_static.md)\n   18   *  [cowboy_sub_protocol](cowboy_sub_protocol.md)\n   19:  *  [cowboy_websocket](cowboy_websocket.md)\n   20:  *  [cowboy_websocket_handler](cowboy_websocket_handler.md)\n   21  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/src/cowboy_bstr.erl:\n  113  	Tests = [\n  114  		{<<\"heLLo-woRld\">>, <<\"Hello-World\">>},\n  115: 		{<<\"Sec-Websocket-Version\">>, <<\"Sec-Websocket-Version\">>},\n  116: 		{<<\"Sec-WebSocket-Version\">>, <<\"Sec-Websocket-Version\">>},\n  117: 		{<<\"sec-websocket-version\">>, <<\"Sec-Websocket-Version\">>},\n  118: 		{<<\"SEC-WEBSOCKET-VERSION\">>, <<\"Sec-Websocket-Version\">>},\n  119: 		{<<\"Sec-WebSocket--Version\">>, <<\"Sec-Websocket--Version\">>},\n  120: 		{<<\"Sec-WebSocket---Version\">>, <<\"Sec-Websocket---Version\">>}\n  121  	],\n  122  	[{H, fun() -> R = capitalize_token(H) end} || {H, R} <- Tests].\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/src/cowboy_handler.erl:\n   19  %% environment under the <em>result</em> value.\n   20  %%\n   21: %% When using loop handlers, we are receiving data from the socket because we\n   22: %% want to know when the socket gets closed. This is generally not an issue\n   23  %% because these kinds of requests are generally not pipelined, and don't have\n   24  %% a body. If they do have a body, this body is often read in the\n   ..\n  151  	when Req::cowboy_req:req().\n  152  handler_before_loop(Req, State=#state{hibernate=true}, Handler, HandlerState) ->\n  153: 	[Socket, Transport] = cowboy_req:get([socket, transport], Req),\n  154: 	Transport:setopts(Socket, [{active, once}]),\n  155  	{suspend, ?MODULE, handler_loop,\n  156  		[Req, State#state{hibernate=false}, Handler, HandlerState]};\n  157  handler_before_loop(Req, State, Handler, HandlerState) ->\n  158: 	[Socket, Transport] = cowboy_req:get([socket, transport], Req),\n  159: 	Transport:setopts(Socket, [{active, once}]),\n  160  	handler_loop(Req, State, Handler, HandlerState).\n  161  \n  162: %% Almost the same code can be found in cowboy_websocket.\n  163  -spec handler_loop_timeout(#state{}) -> #state{}.\n  164  handler_loop_timeout(State=#state{loop_timeout=infinity}) ->\n  ...\n  180  		loop_max_buffer=Threshold, loop_timeout_ref=TRef},\n  181  		Handler, HandlerState) ->\n  182: 	[Socket, Transport] = cowboy_req:get([socket, transport], Req),\n  183  	{OK, Closed, Error} = Transport:messages(),\n  184  	receive\n  185: 		{OK, Socket, Data} ->\n  186  			NbBytes2 = NbBytes + byte_size(Data),\n  187  			if	NbBytes2 > Threshold ->\n  ...\n  196  					handler_before_loop(Req2, State2, Handler, HandlerState)\n  197  			end;\n  198: 		{Closed, Socket} ->\n  199  			terminate_request(Req, State, Handler, HandlerState,\n  200  				{error, closed});\n  201: 		{Error, Socket, Reason} ->\n  202  			terminate_request(Req, State, Handler, HandlerState,\n  203  				{error, Reason});\n  ...\n  208  			handler_loop(Req, State, Handler, HandlerState);\n  209  		Message ->\n  210: 			%% We set the socket back to {active, false} mode in case\n  211  			%% the handler is going to call recv. We also flush any\n  212  			%% data received after that and put it into the buffer.\n  213  			%% We do not check the size here, if data keeps coming\n  214  			%% we'll error out on the next packet received.\n  215: 			Transport:setopts(Socket, [{active, false}]),\n  216: 			Req2 = receive {OK, Socket, Data} ->\n  217  				cowboy_req:append_buffer(Data, Req)\n  218  			after 0 ->\n  ...\n  253  	end.\n  254  \n  255: %% It is sometimes important to make a socket passive as it was initially\n  256  %% and as it is expected to be by cowboy_protocol, right after we're done\n  257  %% with loop handling. The browser may freely pipeline a bunch of requests\n  ...\n  261  	{ok, Req, cowboy_middleware:env()} when Req::cowboy_req:req().\n  262  handler_after_loop(Req, State, Handler, HandlerState, Reason) ->\n  263: 	[Socket, Transport] = cowboy_req:get([socket, transport], Req),\n  264: 	Transport:setopts(Socket, [{active, false}]),\n  265  	{OK, _Closed, _Error} = Transport:messages(),\n  266  	Req2 = receive\n  267: 		{OK, Socket, Data} ->\n  268  			cowboy_req:append_buffer(Data, Req)\n  269  	after 0 ->\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/src/cowboy_protocol.erl:\n   39  \n   40  -record(state, {\n   41: 	socket :: inet:socket(),\n   42  	transport :: module(),\n   43  	middlewares :: [module()],\n   ..\n   61  %% API.\n   62  \n   63: -spec start_link(ranch:ref(), inet:socket(), module(), opts()) -> {ok, pid()}.\n   64: start_link(Ref, Socket, Transport, Opts) ->\n   65: 	Pid = spawn_link(?MODULE, init, [Ref, Socket, Transport, Opts]),\n   66  	{ok, Pid}.\n   67  \n   ..\n   75  	end.\n   76  \n   77: -spec init(ranch:ref(), inet:socket(), module(), opts()) -> ok.\n   78: init(Ref, Socket, Transport, Opts) ->\n   79  	Compress = get_value(compress, Opts, false),\n   80  	MaxEmptyLines = get_value(max_empty_lines, Opts, 5),\n   ..\n   90  	Timeout = get_value(timeout, Opts, 5000),\n   91  	ok = ranch:accept_ack(Ref),\n   92: 	wait_request(<<>>, #state{socket=Socket, transport=Transport,\n   93  		middlewares=Middlewares, compress=Compress, env=Env,\n   94  		max_empty_lines=MaxEmptyLines, max_keepalive=MaxKeepalive,\n   ..\n  113  %% more interesting past that point.\n  114  \n  115: -spec recv(inet:socket(), module(), non_neg_integer() | infinity)\n  116  	-> {ok, binary()} | {error, closed | timeout | atom()}.\n  117: recv(Socket, Transport, infinity) ->\n  118: 	Transport:recv(Socket, 0, infinity);\n  119: recv(Socket, Transport, Until) ->\n  120  	{Me, S, Mi} = os:timestamp(),\n  121  	Now = Me * 1000000000 + S * 1000 + Mi div 1000,\n  ...\n  124  			{error, timeout};\n  125  		true ->\n  126: 			Transport:recv(Socket, 0, Timeout)\n  127  	end.\n  128  \n  129  -spec wait_request(binary(), #state{}, non_neg_integer()) -> ok.\n  130: wait_request(Buffer, State=#state{socket=Socket, transport=Transport,\n  131  		until=Until}, ReqEmpty) ->\n  132: 	case recv(Socket, Transport, Until) of\n  133  		{ok, Data} ->\n  134  			parse_request(<< Buffer/binary, Data/binary >>, State, ReqEmpty);\n  ...\n  142  	error_terminate(400, State);\n  143  %% We limit the length of the Request-line to MaxLength to avoid endlessly\n  144: %% reading from the socket and eventually crashing.\n  145  parse_request(Buffer, State=#state{max_request_line_length=MaxLength,\n  146  		max_empty_lines=MaxEmpty}, ReqEmpty) ->\n  ...\n  226  		when length(Headers) >= MaxHeaders ->\n  227  	error_terminate(400, State);\n  228: wait_header(Buffer, State=#state{socket=Socket, transport=Transport,\n  229  		until=Until}, M, P, Q, V, H) ->\n  230: 	case recv(Socket, Transport, Until) of\n  231  		{ok, Data} ->\n  232  			parse_header(<< Buffer/binary, Data/binary >>,\n  ...\n  274  \n  275  wait_hd_before_value(Buffer, State=#state{\n  276: 		socket=Socket, transport=Transport, until=Until},\n  277  		M, P, Q, V, H, N) ->\n  278: 	case recv(Socket, Transport, Until) of\n  279  		{ok, Data} ->\n  280  			parse_hd_before_value(<< Buffer/binary, Data/binary >>,\n  ...\n  306  %% operations for no reasons.\n  307  wait_hd_value(_, State=#state{\n  308: 		socket=Socket, transport=Transport, until=Until},\n  309  		M, P, Q, V, H, N, SoFar) ->\n  310: 	case recv(Socket, Transport, Until) of\n  311  		{ok, Data} ->\n  312  			parse_hd_value(Data, State, M, P, Q, V, H, N, SoFar);\n  ...\n  321  %% the critical path, but forces us to have a special function.\n  322  wait_hd_value_nl(_, State=#state{\n  323: 		socket=Socket, transport=Transport, until=Until},\n  324  		M, P, Q, V, Headers, Name, SoFar) ->\n  325: 	case recv(Socket, Transport, Until) of\n  326  		{ok, << C, Data/bits >>} when C =:= $\\s; C =:= $\\t  ->\n  327  			parse_hd_value(Data, State, M, P, Q, V, Headers, Name, SoFar);\n  ...\n  395  %% We create the Req object and start handling the request.\n  396  \n  397: request(Buffer, State=#state{socket=Socket, transport=Transport,\n  398  		req_keepalive=ReqKeepalive, max_keepalive=MaxKeepalive,\n  399  		compress=Compress, onresponse=OnResponse},\n  400  		Method, Path, Query, Version, Headers, Host, Port) ->\n  401: 	case Transport:peername(Socket) of\n  402  		{ok, Peer} ->\n  403: 			Req = cowboy_req:new(Socket, Transport, Peer, Method, Path,\n  404  				Query, Version, Headers, Host, Port, Buffer,\n  405  				ReqKeepalive < MaxKeepalive, Compress, OnResponse),\n  ...\n  487  \n  488  -spec error_terminate(cowboy:http_status(), #state{}) -> ok.\n  489: error_terminate(Status, State=#state{socket=Socket, transport=Transport,\n  490  		compress=Compress, onresponse=OnResponse}) ->\n  491: 	error_terminate(Status, cowboy_req:new(Socket, Transport,\n  492  		undefined, <<\"GET\">>, <<>>, <<>>, 'HTTP/1.1', [], <<>>,\n  493  		undefined, <<>>, false, Compress, OnResponse), State).\n  ...\n  499  \n  500  -spec terminate(#state{}) -> ok.\n  501: terminate(#state{socket=Socket, transport=Transport}) ->\n  502: 	Transport:close(Socket),\n  503  	ok.\n  504  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/src/cowboy_req.erl:\n  124  -record(http_req, {\n  125  	%% Transport.\n  126: 	socket = undefined :: any(),\n  127  	transport = undefined :: undefined | module(),\n  128  	connection = keepalive :: keepalive | close,\n  ...\n  178  	undefined | cowboy:onresponse_fun())\n  179  	-> req().\n  180: new(Socket, Transport, Peer, Method, Path, Query,\n  181  		Version, Headers, Host, Port, Buffer, CanKeepalive,\n  182  		Compress, OnResponse) ->\n  183: 	Req = #http_req{socket=Socket, transport=Transport, pid=self(), peer=Peer,\n  184  		method=Method, path=Path, qs=Query, version=Version,\n  185  		headers=Headers, host=Host, port=Port, buffer=Buffer,\n  ...\n  392  	parse_header(Name, Req, Default, fun cowboy_http:range/1);\n  393  parse_header(Name, Req, Default)\n  394: 		when Name =:= <<\"sec-websocket-protocol\">>;\n  395  			Name =:= <<\"x-forwarded-for\">> ->\n  396  	parse_header(Name, Req, Default,\n  ...\n  406  			cowboy_http:nonempty_list(Value, fun cowboy_http:token_ci/2)\n  407  		end);\n  408: parse_header(Name = <<\"sec-websocket-extensions\">>, Req, Default) ->\n  409  	parse_header(Name, Req, Default, fun cowboy_http:parameterized_tokens/1);\n  410  parse_header(Name, Req, Default) ->\n  ...\n  590  	end.\n  591  \n  592: body_recv(Req=#http_req{transport=Transport, socket=Socket, buffer=Buffer},\n  593  		ReadTimeout, ReadLength) ->\n  594: 	case Transport:recv(Socket, ReadLength, ReadTimeout) of\n  595  		{ok, Data} ->\n  596  			body_decode(Req#http_req{buffer= << Buffer/binary, Data/binary >>},\n  ...\n  863  	-> {ok, Req} when Req::req().\n  864  reply(Status, Headers, Body, Req=#http_req{\n  865: 		socket=Socket, transport=Transport,\n  866  		version=Version, connection=Connection,\n  867  		method=Method, resp_compress=Compress,\n  ...\n  893  			end,\n  894  			if	RespType =/= hook, Method =/= <<\"HEAD\">> ->\n  895: 					BodyFun(Socket, Transport);\n  896  				true -> ok\n  897  			end,\n  ...\n  921  				|HTTP11Headers], stream, Req),\n  922  			if	RespType =/= hook, Method =/= <<\"HEAD\">> ->\n  923: 					BodyFun(Socket, Transport);\n  924  				true -> ok\n  925  			end,\n  ...\n  999  chunk(_Data, #http_req{method= <<\"HEAD\">>}) ->\n 1000  	ok;\n 1001: chunk(Data, #http_req{socket=Socket, transport=cowboy_spdy,\n 1002  		resp_state=chunks}) ->\n 1003: 	cowboy_spdy:stream_data(Socket, Data);\n 1004: chunk(Data, #http_req{socket=Socket, transport=Transport,\n 1005  		resp_state=stream}) ->\n 1006: 	Transport:send(Socket, Data);\n 1007: chunk(Data, #http_req{socket=Socket, transport=Transport,\n 1008  		resp_state=chunks}) ->\n 1009: 	Transport:send(Socket, [integer_to_list(iolist_size(Data), 16),\n 1010  		<<\"\\r\\n\">>, Data, <<\"\\r\\n\">>]).\n 1011  \n 1012  %% If ever made public, need to send nothing if HEAD.\n 1013  -spec last_chunk(Req) -> Req when Req::req().\n 1014: last_chunk(Req=#http_req{socket=Socket, transport=cowboy_spdy}) ->\n 1015: 	_ = cowboy_spdy:stream_close(Socket),\n 1016  	Req#http_req{resp_state=done};\n 1017: last_chunk(Req=#http_req{socket=Socket, transport=Transport}) ->\n 1018: 	_ = Transport:send(Socket, <<\"0\\r\\n\\r\\n\">>),\n 1019  	Req#http_req{resp_state=done}.\n 1020  \n ....\n 1030  \n 1031  -spec continue(req()) -> ok | {error, atom()}.\n 1032: continue(#http_req{socket=Socket, transport=Transport,\n 1033  		version=Version}) ->\n 1034  	HTTPVer = atom_to_binary(Version, latin1),\n 1035: 	Transport:send(Socket,\n 1036  		<< HTTPVer/binary, \" \", (status(100))/binary, \"\\r\\n\\r\\n\" >>).\n 1037  \n ....\n 1101  g(resp_headers, #http_req{resp_headers=Ret}) -> Ret;\n 1102  g(resp_state, #http_req{resp_state=Ret}) -> Ret;\n 1103: g(socket, #http_req{socket=Ret}) -> Ret;\n 1104  g(transport, #http_req{transport=Ret}) -> Ret;\n 1105  g(version, #http_req{version=Ret}) -> Ret.\n ....\n 1130  set([{resp_headers, Val}|Tail], Req) -> set(Tail, Req#http_req{resp_headers=Val});\n 1131  set([{resp_state, Val}|Tail], Req) -> set(Tail, Req#http_req{resp_state=Val});\n 1132: set([{socket, Val}|Tail], Req) -> set(Tail, Req#http_req{socket=Val});\n 1133  set([{transport, Val}|Tail], Req) -> set(Tail, Req#http_req{transport=Val});\n 1134  set([{version, Val}|Tail], Req) -> set(Tail, Req#http_req{version=Val}).\n ....\n 1199  	-> {normal | hook, Req} when Req::req().\n 1200  response(Status, Headers, RespHeaders, DefaultHeaders, Body, Req=#http_req{\n 1201: 		socket=Socket, transport=Transport, version=Version,\n 1202  		pid=ReqPid, onresponse=OnResponse}) ->\n 1203  	FullHeaders = case OnResponse of\n ....\n 1222  	ReplyType = case Req2#http_req.resp_state of\n 1223  		waiting when Transport =:= cowboy_spdy, Body =:= stream ->\n 1224: 			cowboy_spdy:stream_reply(Socket, status(Status2), FullHeaders2),\n 1225  			ReqPid ! {?MODULE, resp_sent},\n 1226  			normal;\n 1227  		waiting when Transport =:= cowboy_spdy ->\n 1228: 			cowboy_spdy:reply(Socket, status(Status2), FullHeaders2, Body),\n 1229  			ReqPid ! {?MODULE, resp_sent},\n 1230  			normal;\n ....\n 1235  			HeaderLines = [[Key, <<\": \">>, Value, <<\"\\r\\n\">>]\n 1236  				|| {Key, Value} <- FullHeaders2],\n 1237: 			Transport:send(Socket, [StatusLine, HeaderLines, <<\"\\r\\n\">>, Body2]),\n 1238  			ReqPid ! {?MODULE, resp_sent},\n 1239  			normal;\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/src/cowboy_spdy.erl:\n   41  \n   42  -type streamid() :: non_neg_integer().\n   43: -type socket() :: {pid(), streamid()}.\n   44  \n   45  -record(child, {\n   ..\n   48  	input = nofin :: fin | nofin,\n   49  	in_buffer = <<>> :: binary(),\n   50: 	is_recv = false :: false | {active, socket(), pid()}\n   51: 		| {passive, socket(), pid(), non_neg_integer(), reference()},\n   52  	output = nofin :: fin | nofin\n   53  }).\n   ..\n   55  -record(state, {\n   56  	parent = undefined :: pid(),\n   57: 	socket,\n   58  	transport,\n   59  	buffer = <<>> :: binary(),\n   ..\n   77  %% API.\n   78  \n   79: -spec start_link(any(), inet:socket(), module(), any()) -> {ok, pid()}.\n   80: start_link(Ref, Socket, Transport, Opts) ->\n   81  	proc_lib:start_link(?MODULE, init,\n   82: 		[self(), Ref, Socket, Transport, Opts]).\n   83  \n   84  %% Internal.\n   ..\n   91  	end.\n   92  \n   93: -spec init(pid(), ranch:ref(), inet:socket(), module(), opts()) -> ok.\n   94: init(Parent, Ref, Socket, Transport, Opts) ->\n   95  	process_flag(trap_exit, true),\n   96  	ok = proc_lib:init_ack(Parent, {ok, self()}),\n   97: 	{ok, Peer} = Transport:peername(Socket),\n   98  	Middlewares = get_value(middlewares, Opts, [cowboy_router, cowboy_handler]),\n   99  	Env = [{listener, Ref}|get_value(env, Opts, [])],\n  ...\n  103  	Zinf = cow_spdy:inflate_init(),\n  104  	ok = ranch:accept_ack(Ref),\n  105: 	loop(#state{parent=Parent, socket=Socket, transport=Transport,\n  106  		middlewares=Middlewares, env=Env, onrequest=OnRequest,\n  107  		onresponse=OnResponse, peer=Peer, zdef=Zdef, zinf=Zinf}).\n  108  \n  109: loop(State=#state{parent=Parent, socket=Socket, transport=Transport,\n  110  		buffer=Buffer, zinf=Zinf, children=Children}) ->\n  111  	{OK, Closed, Error} = Transport:messages(),\n  112: 	Transport:setopts(Socket, [{active, once}]),\n  113  	receive\n  114: 		{OK, Socket, Data} ->\n  115  			Data2 = << Buffer/binary, Data/binary >>,\n  116  			case cow_spdy:split(Data2) of\n  ...\n  121  					loop(State#state{buffer=Data2})\n  122  			end;\n  123: 		{Closed, Socket} ->\n  124  			terminate(State);\n  125: 		{Error, Socket, _Reason} ->\n  126  			terminate(State);\n  127: 		{recv, FromSocket = {Pid, StreamID}, FromPid, Length, Timeout}\n  128  				when Pid =:= self() ->\n  129  			Child = #child{in_buffer=InBuffer, is_recv=false}\n  ...\n  131  			if\n  132  				Length =:= 0, InBuffer =/= <<>> ->\n  133: 					FromPid ! {recv, FromSocket, {ok, InBuffer}},\n  134  					loop(replace_child(Child#child{in_buffer= <<>>}, State));\n  135  				byte_size(InBuffer) >= Length ->\n  136  					<< Data:Length/binary, Rest/binary >> = InBuffer,\n  137: 					FromPid ! {recv, FromSocket, {ok, Data}},\n  138  					loop(replace_child(Child#child{in_buffer=Rest}, State));\n  139  				true ->\n  140  					TRef = erlang:send_after(Timeout, self(),\n  141: 						{recv_timeout, FromSocket}),\n  142  					loop(replace_child(Child#child{\n  143: 						is_recv={passive, FromSocket, FromPid, Length, TRef}},\n  144  						State))\n  145  			end;\n  146  		{recv_timeout, {Pid, StreamID}}\n  147  				when Pid =:= self() ->\n  148: 			Child = #child{is_recv={passive, FromSocket, FromPid, _, _}}\n  149  				= get_child(StreamID, State),\n  150: 			FromPid ! {recv, FromSocket, {error, timeout}},\n  151  			loop(replace_child(Child, State));\n  152  		{reply, {Pid, StreamID}, Status, Headers}\n  ...\n  181  			data_from_file(State, StreamID, Filepath),\n  182  			loop(replace_child(Child#child{output=fin}, State));\n  183: 		{active, FromSocket = {Pid, StreamID}, FromPid} when Pid =:= self() ->\n  184  			Child = #child{in_buffer=InBuffer, is_recv=false}\n  185  				= get_child(StreamID, State),\n  ...\n  187  				<<>> ->\n  188  					loop(replace_child(Child#child{\n  189: 						is_recv={active, FromSocket, FromPid}}, State));\n  190  				_ ->\n  191: 					FromPid ! {spdy, FromSocket, InBuffer},\n  192  					loop(replace_child(Child#child{in_buffer= <<>>}, State))\n  193  			end;\n  194: 		{passive, FromSocket = {Pid, StreamID}, FromPid} when Pid =:= self() ->\n  195  			Child = #child{is_recv=IsRecv} = get_child(StreamID, State),\n  196  			%% Make sure we aren't in the middle of a recv call.\n  197: 			case IsRecv of false -> ok; {active, FromSocket, FromPid} -> ok end,\n  198  			loop(replace_child(Child#child{is_recv=false}, State));\n  199  		{'EXIT', Parent, Reason} ->\n  ...\n  270  	loop(State);\n  271  %% PING initiated by the client; send it back.\n  272: handle_frame(State=#state{socket=Socket, transport=Transport},\n  273  		{ping, PingID}) ->\n  274: 	Transport:send(Socket, cow_spdy:ping(PingID)),\n  275  	loop(State);\n  276  %% Data received for a stream.\n  ...\n  281  	IsFin2 = if IsFin -> fin; true -> nofin end,\n  282  	Child2 = case IsRecv of\n  283: 		{active, FromSocket, FromPid} ->\n  284: 			FromPid ! {spdy, FromSocket, Data},\n  285  			Child#child{input=IsFin2, is_recv=false};\n  286: 		{passive, FromSocket, FromPid, 0, TRef} ->\n  287: 			FromPid ! {recv, FromSocket, {ok, Data2}},\n  288  			cancel_recv_timeout(StreamID, TRef),\n  289  			Child#child{input=IsFin2, in_buffer= <<>>, is_recv=false};\n  290: 		{passive, FromSocket, FromPid, Length, TRef}\n  291  				when byte_size(Data2) >= Length ->\n  292  			<< Data3:Length/binary, Rest/binary >> = Data2,\n  293: 			FromPid ! {recv, FromSocket, {ok, Data3}},\n  294  			cancel_recv_timeout(StreamID, TRef),\n  295  			Child#child{input=IsFin2, in_buffer=Rest, is_recv=false};\n  ...\n  322  	ok.\n  323  \n  324: syn_reply(#state{socket=Socket, transport=Transport, zdef=Zdef},\n  325  		StreamID, IsFin, Status, Headers) ->\n  326: 	Transport:send(Socket, cow_spdy:syn_reply(Zdef, StreamID, IsFin,\n  327  		Status, <<\"HTTP/1.1\">>, Headers)).\n  328  \n  329: rst_stream(#state{socket=Socket, transport=Transport}, StreamID, Status) ->\n  330: 	Transport:send(Socket, cow_spdy:rst_stream(StreamID, Status)).\n  331  \n  332: goaway(#state{socket=Socket, transport=Transport, last_streamid=LastStreamID},\n  333  		Status) ->\n  334: 	Transport:send(Socket, cow_spdy:goaway(LastStreamID, Status)).\n  335  \n  336: data(#state{socket=Socket, transport=Transport}, StreamID, IsFin, Data) ->\n  337: 	Transport:send(Socket, cow_spdy:data(StreamID, IsFin, Data)).\n  338  \n  339: data_from_file(#state{socket=Socket, transport=Transport},\n  340  		StreamID, Filepath) ->\n  341  	{ok, IoDevice} = file:open(Filepath, [read, binary, raw]),\n  342: 	data_from_file(Socket, Transport, StreamID, IoDevice).\n  343  \n  344: data_from_file(Socket, Transport, StreamID, IoDevice) ->\n  345  	case file:read(IoDevice, 16#1fff) of\n  346  		eof ->\n  347: 			_ = Transport:send(Socket, cow_spdy:data(StreamID, true, <<>>)),\n  348  			ok;\n  349  		{ok, Data} ->\n  350: 			case Transport:send(Socket, cow_spdy:data(StreamID, false, Data)) of\n  351  				ok ->\n  352: 					data_from_file(Socket, Transport, StreamID, IoDevice);\n  353  				{error, _} ->\n  354  					ok\n  ...\n  378  %% Request process.\n  379  \n  380: -spec request_init(socket(), {inet:ip_address(), inet:port_number()},\n  381  		cowboy:onrequest_fun(), cowboy:onresponse_fun(),\n  382  		cowboy_middleware:env(), [module()],\n  383  		binary(), binary(), binary(), binary(), [{binary(), binary()}])\n  384  	-> ok.\n  385: request_init(FakeSocket, Peer, OnRequest, OnResponse,\n  386  		Env, Middlewares, Method, Host, Path, Version, Headers) ->\n  387  	{Host2, Port} = cow_http:parse_fullhost(Host),\n  388  	{Path2, Qs} = cow_http:parse_fullpath(Path),\n  389  	Version2 = cow_http:parse_version(Version),\n  390: 	Req = cowboy_req:new(FakeSocket, ?MODULE, Peer,\n  391  		Method, Path2, Qs, Version2, Headers,\n  392  		Host2, Port, <<>>, true, false, OnResponse),\n  ...\n  436  %% Reply functions used by cowboy_req.\n  437  \n  438: -spec reply(socket(), binary(), cowboy:http_headers(), iodata()) -> ok.\n  439: reply(Socket = {Pid, _}, Status, Headers, Body) ->\n  440  	_ = case iolist_size(Body) of\n  441: 		0 -> Pid ! {reply, Socket, Status, Headers};\n  442: 		_ -> Pid ! {reply, Socket, Status, Headers, Body}\n  443  	end,\n  444  	ok.\n  445  \n  446: -spec stream_reply(socket(), binary(), cowboy:http_headers()) -> ok.\n  447: stream_reply(Socket = {Pid, _}, Status, Headers) ->\n  448: 	_ = Pid ! {stream_reply, Socket, Status, Headers},\n  449  	ok.\n  450  \n  451: -spec stream_data(socket(), iodata()) -> ok.\n  452: stream_data(Socket = {Pid, _}, Data) ->\n  453: 	_ = Pid ! {stream_data, Socket, Data},\n  454  	ok.\n  455  \n  456: -spec stream_close(socket()) -> ok.\n  457: stream_close(Socket = {Pid, _}) ->\n  458: 	_ = Pid ! {stream_close, Socket},\n  459  	ok.\n  460  \n  ...\n  469  	{spdy, spdy_closed, spdy_error}.\n  470  \n  471: -spec recv(socket(), non_neg_integer(), timeout())\n  472  	-> {ok, binary()} | {error, timeout}.\n  473: recv(Socket = {Pid, _}, Length, Timeout) ->\n  474: 	_ = Pid ! {recv, Socket, self(), Length, Timeout},\n  475  	receive\n  476: 		{recv, Socket, Ret} ->\n  477  			Ret\n  478  	end.\n  479  \n  480: -spec send(socket(), iodata()) -> ok.\n  481: send(Socket, Data) ->\n  482: 	stream_data(Socket, Data).\n  483  \n  484  %% We don't wait for the result of the actual sendfile call,\n  485  %% therefore we can't know how much was actually sent.\n  486  %% This isn't a problem as we don't use this value in Cowboy.\n  487: -spec sendfile(socket(), file:name_all()) -> {ok, undefined}.\n  488: sendfile(Socket = {Pid, _}, Filepath) ->\n  489: 	_ = Pid ! {sendfile, Socket, Filepath},\n  490  	{ok, undefined}.\n  491  \n  492  -spec setopts({pid(), _}, list()) -> ok.\n  493: setopts(Socket = {Pid, _}, [{active, once}]) ->\n  494: 	_ = Pid ! {active, Socket, self()},\n  495  	ok;\n  496: setopts(Socket = {Pid, _}, [{active, false}]) ->\n  497: 	_ = Pid ! {passive, Socket, self()},\n  498  	ok.\n  499  \n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/src/cowboy_static.erl:\n  283  	when State::state().\n  284  get_file(Req, State={Path, {ok, #file_info{size=Size}}, _}) ->\n  285: 	Sendfile = fun (Socket, Transport) ->\n  286: 		case Transport:sendfile(Socket, Path) of\n  287  			{ok, _} -> ok;\n  288  			{error, closed} -> ok;\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/src/cowboy_websocket.erl:\n   13  %% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n   14  \n   15: %% Cowboy supports versions 7 through 17 of the Websocket drafts.\n   16: %% It also supports RFC6455, the proposed standard for Websocket.\n   17: -module(cowboy_websocket).\n   18  -behaviour(cowboy_sub_protocol).\n   19  \n   ..\n   43  -record(state, {\n   44  	env :: cowboy_middleware:env(),\n   45: 	socket = undefined :: inet:socket(),\n   46  	transport = undefined :: module(),\n   47  	handler :: module(),\n   ..\n   65  	{_, Ref} = lists:keyfind(listener, 1, Env),\n   66  	ranch:remove_connection(Ref),\n   67: 	[Socket, Transport] = cowboy_req:get([socket, transport], Req),\n   68: 	State = #state{env=Env, socket=Socket, transport=Transport,\n   69  		handler=Handler},\n   70: 	try websocket_upgrade(State, Req) of\n   71  		{ok, State2, Req2} ->\n   72  			handler_init(State2, Req2, HandlerOpts)\n   ..\n   76  	end.\n   77  \n   78: -spec websocket_upgrade(#state{}, Req)\n   79  	-> {ok, #state{}, Req} when Req::cowboy_req:req().\n   80: websocket_upgrade(State, Req) ->\n   81  	{ok, ConnTokens, Req2}\n   82  		= cowboy_req:parse_header(<<\"connection\">>, Req),\n   83  	true = lists:member(<<\"upgrade\">>, ConnTokens),\n   84  	%% @todo Should probably send a 426 if the Upgrade header is missing.\n   85: 	{ok, [<<\"websocket\">>], Req3}\n   86  		= cowboy_req:parse_header(<<\"upgrade\">>, Req2),\n   87: 	{Version, Req4} = cowboy_req:header(<<\"sec-websocket-version\">>, Req3),\n   88  	IntVersion = list_to_integer(binary_to_list(Version)),\n   89  	true = (IntVersion =:= 7) orelse (IntVersion =:= 8)\n   90  		orelse (IntVersion =:= 13),\n   91: 	{Key, Req5} = cowboy_req:header(<<\"sec-websocket-key\">>, Req4),\n   92  	false = Key =:= undefined,\n   93: 	websocket_extensions(State#state{key=Key},\n   94: 		cowboy_req:set_meta(websocket_version, IntVersion, Req5)).\n   95  \n   96: -spec websocket_extensions(#state{}, Req)\n   97  	-> {ok, #state{}, Req} when Req::cowboy_req:req().\n   98: websocket_extensions(State, Req) ->\n   99: 	case cowboy_req:parse_header(<<\"sec-websocket-extensions\">>, Req) of\n  100  		{ok, Extensions, Req2} when Extensions =/= undefined ->\n  101  			[Compress] = cowboy_req:get([resp_compress], Req),\n  ...\n  116  						inflate_state = Inflate,\n  117  						deflate_state = Deflate\n  118: 					}, cowboy_req:set_meta(websocket_compress, true, Req2)};\n  119  				_ ->\n  120: 					{ok, State, cowboy_req:set_meta(websocket_compress, false, Req2)}\n  121  			end;\n  122  		_ ->\n  123: 			{ok, State, cowboy_req:set_meta(websocket_compress, false, Req)}\n  124  	end.\n  125  \n  ...\n  130  handler_init(State=#state{env=Env, transport=Transport,\n  131  		handler=Handler}, Req, HandlerOpts) ->\n  132: 	try Handler:websocket_init(Transport:name(), Req, HandlerOpts) of\n  133  		{ok, Req2, HandlerState} ->\n  134: 			websocket_handshake(State, Req2, HandlerState);\n  135  		{ok, Req2, HandlerState, hibernate} ->\n  136: 			websocket_handshake(State#state{hibernate=true},\n  137  				Req2, HandlerState);\n  138  		{ok, Req2, HandlerState, Timeout} ->\n  139: 			websocket_handshake(State#state{timeout=Timeout},\n  140  				Req2, HandlerState);\n  141  		{ok, Req2, HandlerState, Timeout, hibernate} ->\n  142: 			websocket_handshake(State#state{timeout=Timeout,\n  143  				hibernate=true}, Req2, HandlerState);\n  144  		{shutdown, Req2} ->\n  ...\n  149  		erlang:Class([\n  150  			{reason, Reason},\n  151: 			{mfa, {Handler, websocket_init, 3}},\n  152  			{stacktrace, erlang:get_stacktrace()},\n  153  			{req, cowboy_req:to_list(Req)},\n  ...\n  156  	end.\n  157  \n  158: -spec websocket_handshake(#state{}, Req, any())\n  159  	-> {ok, Req, cowboy_middleware:env()}\n  160  	| {suspend, module(), atom(), [any()]}\n  161  	when Req::cowboy_req:req().\n  162: websocket_handshake(State=#state{\n  163  			transport=Transport, key=Key, deflate_frame=DeflateFrame},\n  164  		Req, HandlerState) ->\n  ...\n  168  	Extensions = case DeflateFrame of\n  169  		false -> [];\n  170: 		true -> [{<<\"sec-websocket-extensions\">>, <<\"x-webkit-deflate-frame\">>}]\n  171  	end,\n  172  	{ok, Req2} = cowboy_req:upgrade_reply(\n  173  		101,\n  174: 		[{<<\"upgrade\">>, <<\"websocket\">>},\n  175: 		 {<<\"sec-websocket-accept\">>, Challenge}|\n  176  		 Extensions],\n  177  		Req),\n  ...\n  187  	when Req::cowboy_req:req().\n  188  handler_before_loop(State=#state{\n  189: 			socket=Socket, transport=Transport, hibernate=true},\n  190  		Req, HandlerState, SoFar) ->\n  191: 	Transport:setopts(Socket, [{active, once}]),\n  192  	{suspend, ?MODULE, handler_loop,\n  193  		[State#state{hibernate=false}, Req, HandlerState, SoFar]};\n  194: handler_before_loop(State=#state{socket=Socket, transport=Transport},\n  195  		Req, HandlerState, SoFar) ->\n  196: 	Transport:setopts(Socket, [{active, once}]),\n  197  	handler_loop(State, Req, HandlerState, SoFar).\n  198  \n  ...\n  210  	| {suspend, module(), atom(), [any()]}\n  211  	when Req::cowboy_req:req().\n  212: handler_loop(State=#state{socket=Socket, messages={OK, Closed, Error},\n  213  		timeout_ref=TRef}, Req, HandlerState, SoFar) ->\n  214  	receive\n  215: 		{OK, Socket, Data} ->\n  216  			State2 = handler_loop_timeout(State),\n  217: 			websocket_data(State2, Req, HandlerState,\n  218  				<< SoFar/binary, Data/binary >>);\n  219: 		{Closed, Socket} ->\n  220  			handler_terminate(State, Req, HandlerState, {error, closed});\n  221: 		{Error, Socket, Reason} ->\n  222  			handler_terminate(State, Req, HandlerState, {error, Reason});\n  223  		{timeout, TRef, ?MODULE} ->\n  224: 			websocket_close(State, Req, HandlerState, {normal, timeout});\n  225  		{timeout, OlderTRef, ?MODULE} when is_reference(OlderTRef) ->\n  226  			handler_loop(State, Req, HandlerState, SoFar);\n  227  		Message ->\n  228  			handler_call(State, Req, HandlerState,\n  229: 				SoFar, websocket_info, Message, fun handler_before_loop/4)\n  230  	end.\n  231  \n  ...\n  233  %% with the only exception of text and close frames with a payload\n  234  %% which may still contain errors.\n  235: -spec websocket_data(#state{}, Req, any(), binary())\n  236  	-> {ok, Req, cowboy_middleware:env()}\n  237  	| {suspend, module(), atom(), [any()]}\n  ...\n  239  %% RSV bits MUST be 0 unless an extension is negotiated\n  240  %% that defines meanings for non-zero values.\n  241: websocket_data(State, Req, HandlerState, << _:1, Rsv:3, _/bits >>)\n  242  		when Rsv =/= 0, State#state.deflate_frame =:= false ->\n  243: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  244  %% Invalid opcode. Note that these opcodes may be used by extensions.\n  245: websocket_data(State, Req, HandlerState, << _:4, Opcode:4, _/bits >>)\n  246  		when Opcode > 2, Opcode =/= 8, Opcode =/= 9, Opcode =/= 10 ->\n  247: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  248  %% Control frames MUST NOT be fragmented.\n  249: websocket_data(State, Req, HandlerState, << 0:1, _:3, Opcode:4, _/bits >>)\n  250  		when Opcode >= 8 ->\n  251: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  252  %% A frame MUST NOT use the zero opcode unless fragmentation was initiated.\n  253: websocket_data(State=#state{frag_state=undefined}, Req, HandlerState,\n  254  		<< _:4, 0:4, _/bits >>) ->\n  255: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  256  %% Non-control opcode when expecting control message or next fragment.\n  257: websocket_data(State=#state{frag_state={nofin, _, _}}, Req, HandlerState,\n  258  		<< _:4, Opcode:4, _/bits >>)\n  259  		when Opcode =/= 0, Opcode < 8 ->\n  260: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  261  %% Close control frame length MUST be 0 or >= 2.\n  262: websocket_data(State, Req, HandlerState, << _:4, 8:4, _:1, 1:7, _/bits >>) ->\n  263: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  264  %% Close control frame with incomplete close code. Need more data.\n  265: websocket_data(State, Req, HandlerState,\n  266  		Data = << _:4, 8:4, 1:1, Len:7, _/bits >>)\n  267  		when Len > 1, byte_size(Data) < 8 ->\n  268  	handler_before_loop(State, Req, HandlerState, Data);\n  269  %% 7 bits payload length.\n  270: websocket_data(State, Req, HandlerState, << Fin:1, Rsv:3/bits, Opcode:4, 1:1,\n  271  		Len:7, MaskKey:32, Rest/bits >>)\n  272  		when Len < 126 ->\n  273: 	websocket_data(State, Req, HandlerState,\n  274  		Opcode, Len, MaskKey, Rest, Rsv, Fin);\n  275  %% 16 bits payload length.\n  276: websocket_data(State, Req, HandlerState, << Fin:1, Rsv:3/bits, Opcode:4, 1:1,\n  277  		126:7, Len:16, MaskKey:32, Rest/bits >>)\n  278  		when Len > 125, Opcode < 8 ->\n  279: 	websocket_data(State, Req, HandlerState,\n  280  		Opcode, Len, MaskKey, Rest, Rsv, Fin);\n  281  %% 63 bits payload length.\n  282: websocket_data(State, Req, HandlerState, << Fin:1, Rsv:3/bits, Opcode:4, 1:1,\n  283  		127:7, 0:1, Len:63, MaskKey:32, Rest/bits >>)\n  284  		when Len > 16#ffff, Opcode < 8 ->\n  285: 	websocket_data(State, Req, HandlerState,\n  286  		Opcode, Len, MaskKey, Rest, Rsv, Fin);\n  287  %% When payload length is over 63 bits, the most significant bit MUST be 0.\n  288: websocket_data(State, Req, HandlerState, << _:8, 1:1, 127:7, 1:1, _:7, _/binary >>) ->\n  289: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  290  %% All frames sent from the client to the server are masked.\n  291: websocket_data(State, Req, HandlerState, << _:8, 0:1, _/bits >>) ->\n  292: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  293  %% For the next two clauses, it can be one of the following:\n  294  %%\n  295  %%  *  The minimal number of bytes MUST be used to encode the length\n  296  %%  *  All control frames MUST have a payload length of 125 bytes or less\n  297: websocket_data(State, Req, HandlerState, << _:9, 126:7, _:48, _/bits >>) ->\n  298: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  299: websocket_data(State, Req, HandlerState, << _:9, 127:7, _:96, _/bits >>) ->\n  300: 	websocket_close(State, Req, HandlerState, {error, badframe});\n  301  %% Need more data.\n  302: websocket_data(State, Req, HandlerState, Data) ->\n  303  	handler_before_loop(State, Req, HandlerState, Data).\n  304  \n  305  %% Initialize or update fragmentation state.\n  306: -spec websocket_data(#state{}, Req, any(),\n  307  	opcode(), non_neg_integer(), mask_key(), binary(), rsv(), 0 | 1)\n  308  	-> {ok, Req, cowboy_middleware:env()}\n  ...\n  310  	when Req::cowboy_req:req().\n  311  %% The opcode is only included in the first frame fragment.\n  312: websocket_data(State=#state{frag_state=undefined}, Req, HandlerState,\n  313  		Opcode, Len, MaskKey, Data, Rsv, 0) ->\n  314: 	websocket_payload(State#state{frag_state={nofin, Opcode, <<>>}},\n  315  		Req, HandlerState, 0, Len, MaskKey, <<>>, 0, Data, Rsv);\n  316  %% Subsequent frame fragments.\n  317: websocket_data(State=#state{frag_state={nofin, _, _}}, Req, HandlerState,\n  318  		0, Len, MaskKey, Data, Rsv, 0) ->\n  319: 	websocket_payload(State, Req, HandlerState,\n  320  		0, Len, MaskKey, <<>>, 0, Data, Rsv);\n  321  %% Final frame fragment.\n  322: websocket_data(State=#state{frag_state={nofin, Opcode, SoFar}},\n  323  		Req, HandlerState, 0, Len, MaskKey, Data, Rsv, 1) ->\n  324: 	websocket_payload(State#state{frag_state={fin, Opcode, SoFar}},\n  325  		Req, HandlerState, 0, Len, MaskKey, <<>>, 0, Data, Rsv);\n  326  %% Unfragmented frame.\n  327: websocket_data(State, Req, HandlerState, Opcode, Len, MaskKey, Data, Rsv, 1) ->\n  328: 	websocket_payload(State, Req, HandlerState,\n  329  		Opcode, Len, MaskKey, <<>>, 0, Data, Rsv).\n  330  \n  331: -spec websocket_payload(#state{}, Req, any(),\n  332  	opcode(), non_neg_integer(), mask_key(), binary(), non_neg_integer(),\n  333  	binary(), rsv())\n  ...\n  336  	when Req::cowboy_req:req().\n  337  %% Close control frames with a payload MUST contain a valid close code.\n  338: websocket_payload(State, Req, HandlerState,\n  339  		Opcode=8, Len, MaskKey, <<>>, 0,\n  340  		<< MaskedCode:2/binary, Rest/bits >>, Rsv) ->\n  341: 	Unmasked = << Code:16 >> = websocket_unmask(MaskedCode, MaskKey, <<>>),\n  342  	if	Code < 1000; Code =:= 1004; Code =:= 1005; Code =:= 1006;\n  343  				(Code > 1011) and (Code < 3000); Code > 4999 ->\n  344: 			websocket_close(State, Req, HandlerState, {error, badframe});\n  345  		true ->\n  346: 			websocket_payload(State, Req, HandlerState,\n  347  				Opcode, Len - 2, MaskKey, Unmasked, byte_size(MaskedCode),\n  348  				Rest, Rsv)\n  349  	end;\n  350  %% Text frames and close control frames MUST have a payload that is valid UTF-8.\n  351: websocket_payload(State=#state{utf8_state=Incomplete},\n  352  		Req, HandlerState, Opcode, Len, MaskKey, Unmasked, UnmaskedLen,\n  353  		Data, Rsv)\n  354  		when (byte_size(Data) < Len) andalso ((Opcode =:= 1) orelse\n  355  			((Opcode =:= 8) andalso (Unmasked =/= <<>>))) ->\n  356: 	Unmasked2 = websocket_unmask(Data,\n  357  		rotate_mask_key(MaskKey, UnmaskedLen), <<>>),\n  358: 	{Unmasked3, State2} = websocket_inflate_frame(Unmasked2, Rsv, false, State),\n  359  	case is_utf8(<< Incomplete/binary, Unmasked3/binary >>) of\n  360  		false ->\n  361: 			websocket_close(State2, Req, HandlerState, {error, badencoding});\n  362  		Utf8State ->\n  363: 			websocket_payload_loop(State2#state{utf8_state=Utf8State},\n  364  				Req, HandlerState, Opcode, Len - byte_size(Data), MaskKey,\n  365  				<< Unmasked/binary, Unmasked3/binary >>,\n  366  				UnmaskedLen + byte_size(Data), Rsv)\n  367  	end;\n  368: websocket_payload(State=#state{utf8_state=Incomplete},\n  369  		Req, HandlerState, Opcode, Len, MaskKey, Unmasked, UnmaskedLen,\n  370  		Data, Rsv)\n  371  		when Opcode =:= 1; (Opcode =:= 8) and (Unmasked =/= <<>>) ->\n  372  	<< End:Len/binary, Rest/bits >> = Data,\n  373: 	Unmasked2 = websocket_unmask(End,\n  374  		rotate_mask_key(MaskKey, UnmaskedLen), <<>>),\n  375: 	{Unmasked3, State2} = websocket_inflate_frame(Unmasked2, Rsv, true, State),\n  376  	case is_utf8(<< Incomplete/binary, Unmasked3/binary >>) of\n  377  		<<>> ->\n  378: 			websocket_dispatch(State2#state{utf8_state= <<>>},\n  379  				Req, HandlerState, Rest, Opcode,\n  380  				<< Unmasked/binary, Unmasked3/binary >>);\n  381  		_ ->\n  382: 			websocket_close(State2, Req, HandlerState, {error, badencoding})\n  383  	end;\n  384  %% Fragmented text frames may cut payload in the middle of UTF-8 codepoints.\n  385: websocket_payload(State=#state{frag_state={_, 1, _}, utf8_state=Incomplete},\n  386  		Req, HandlerState, Opcode=0, Len, MaskKey, Unmasked, UnmaskedLen,\n  387  		Data, Rsv)\n  388  		when byte_size(Data) < Len ->\n  389: 	Unmasked2 = websocket_unmask(Data,\n  390  		rotate_mask_key(MaskKey, UnmaskedLen), <<>>),\n  391: 	{Unmasked3, State2} = websocket_inflate_frame(Unmasked2, Rsv, false, State),\n  392  	case is_utf8(<< Incomplete/binary, Unmasked3/binary >>) of\n  393  		false ->\n  394: 			websocket_close(State2, Req, HandlerState, {error, badencoding});\n  395  		Utf8State ->\n  396: 			websocket_payload_loop(State2#state{utf8_state=Utf8State},\n  397  				Req, HandlerState, Opcode, Len - byte_size(Data), MaskKey,\n  398  				<< Unmasked/binary, Unmasked3/binary >>,\n  399  				UnmaskedLen + byte_size(Data), Rsv)\n  400  	end;\n  401: websocket_payload(State=#state{frag_state={Fin, 1, _}, utf8_state=Incomplete},\n  402  		Req, HandlerState, Opcode=0, Len, MaskKey, Unmasked, UnmaskedLen,\n  403  		Data, Rsv) ->\n  404  	<< End:Len/binary, Rest/bits >> = Data,\n  405: 	Unmasked2 = websocket_unmask(End,\n  406  		rotate_mask_key(MaskKey, UnmaskedLen), <<>>),\n  407: 	{Unmasked3, State2} = websocket_inflate_frame(Unmasked2, Rsv, Fin =:= fin, State),\n  408  	case is_utf8(<< Incomplete/binary, Unmasked3/binary >>) of\n  409  		<<>> ->\n  410: 			websocket_dispatch(State2#state{utf8_state= <<>>},\n  411  				Req, HandlerState, Rest, Opcode,\n  412  				<< Unmasked/binary, Unmasked3/binary >>);\n  413  		Utf8State when is_binary(Utf8State), Fin =:= nofin ->\n  414: 			websocket_dispatch(State2#state{utf8_state=Utf8State},\n  415  				Req, HandlerState, Rest, Opcode,\n  416  				<< Unmasked/binary, Unmasked3/binary >>);\n  417  		_ ->\n  418: 			websocket_close(State, Req, HandlerState, {error, badencoding})\n  419  	end;\n  420  %% Other frames have a binary payload.\n  421: websocket_payload(State, Req, HandlerState,\n  422  		Opcode, Len, MaskKey, Unmasked, UnmaskedLen, Data, Rsv)\n  423  		when byte_size(Data) < Len ->\n  424: 	Unmasked2 = websocket_unmask(Data,\n  425  		rotate_mask_key(MaskKey, UnmaskedLen), <<>>),\n  426: 	{Unmasked3, State2} = websocket_inflate_frame(Unmasked2, Rsv, false, State),\n  427: 	websocket_payload_loop(State2, Req, HandlerState,\n  428  		Opcode, Len - byte_size(Data), MaskKey,\n  429  		<< Unmasked/binary, Unmasked3/binary >>, UnmaskedLen + byte_size(Data),\n  430  		Rsv);\n  431: websocket_payload(State, Req, HandlerState,\n  432  		Opcode, Len, MaskKey, Unmasked, UnmaskedLen, Data, Rsv) ->\n  433  	<< End:Len/binary, Rest/bits >> = Data,\n  434: 	Unmasked2 = websocket_unmask(End,\n  435  		rotate_mask_key(MaskKey, UnmaskedLen), <<>>),\n  436: 	{Unmasked3, State2} = websocket_inflate_frame(Unmasked2, Rsv, true, State),\n  437: 	websocket_dispatch(State2, Req, HandlerState, Rest, Opcode,\n  438  		<< Unmasked/binary, Unmasked3/binary >>).\n  439  \n  440: -spec websocket_inflate_frame(binary(), rsv(), boolean(), #state{}) ->\n  441  		{binary(), #state{}}.\n  442: websocket_inflate_frame(Data, << Rsv1:1, _:2 >>, _,\n  443  		#state{deflate_frame = DeflateFrame} = State)\n  444  		when DeflateFrame =:= false orelse Rsv1 =:= 0 ->\n  445  	{Data, State};\n  446: websocket_inflate_frame(Data, << 1:1, _:2 >>, false, State) ->\n  447  	Result = zlib:inflate(State#state.inflate_state, Data),\n  448  	{iolist_to_binary(Result), State};\n  449: websocket_inflate_frame(Data, << 1:1, _:2 >>, true, State) ->\n  450  	Result = zlib:inflate(State#state.inflate_state,\n  451  		<< Data/binary, 0:8, 0:8, 255:8, 255:8 >>),\n  452  	{iolist_to_binary(Result), State}.\n  453  \n  454: -spec websocket_unmask(B, mask_key(), B) -> B when B::binary().\n  455: websocket_unmask(<<>>, _, Unmasked) ->\n  456  	Unmasked;\n  457: websocket_unmask(<< O:32, Rest/bits >>, MaskKey, Acc) ->\n  458  	T = O bxor MaskKey,\n  459: 	websocket_unmask(Rest, MaskKey, << Acc/binary, T:32 >>);\n  460: websocket_unmask(<< O:24 >>, MaskKey, Acc) ->\n  461  	<< MaskKey2:24, _:8 >> = << MaskKey:32 >>,\n  462  	T = O bxor MaskKey2,\n  463  	<< Acc/binary, T:24 >>;\n  464: websocket_unmask(<< O:16 >>, MaskKey, Acc) ->\n  465  	<< MaskKey2:16, _:16 >> = << MaskKey:32 >>,\n  466  	T = O bxor MaskKey2,\n  467  	<< Acc/binary, T:16 >>;\n  468: websocket_unmask(<< O:8 >>, MaskKey, Acc) ->\n  469  	<< MaskKey2:8, _:24 >> = << MaskKey:32 >>,\n  470  	T = O bxor MaskKey2,\n  ...\n  508  	false.\n  509  \n  510: -spec websocket_payload_loop(#state{}, Req, any(),\n  511  		opcode(), non_neg_integer(), mask_key(), binary(),\n  512  		non_neg_integer(), rsv())\n  ...\n  514  	| {suspend, module(), atom(), [any()]}\n  515  	when Req::cowboy_req:req().\n  516: websocket_payload_loop(State=#state{socket=Socket, transport=Transport,\n  517  		messages={OK, Closed, Error}, timeout_ref=TRef},\n  518  		Req, HandlerState, Opcode, Len, MaskKey, Unmasked, UnmaskedLen, Rsv) ->\n  519: 	Transport:setopts(Socket, [{active, once}]),\n  520  	receive\n  521: 		{OK, Socket, Data} ->\n  522  			State2 = handler_loop_timeout(State),\n  523: 			websocket_payload(State2, Req, HandlerState,\n  524  				Opcode, Len, MaskKey, Unmasked, UnmaskedLen, Data, Rsv);\n  525: 		{Closed, Socket} ->\n  526  			handler_terminate(State, Req, HandlerState, {error, closed});\n  527: 		{Error, Socket, Reason} ->\n  528  			handler_terminate(State, Req, HandlerState, {error, Reason});\n  529  		{timeout, TRef, ?MODULE} ->\n  530: 			websocket_close(State, Req, HandlerState, {normal, timeout});\n  531  		{timeout, OlderTRef, ?MODULE} when is_reference(OlderTRef) ->\n  532: 			websocket_payload_loop(State, Req, HandlerState,\n  533  				Opcode, Len, MaskKey, Unmasked, UnmaskedLen, Rsv);\n  534  		Message ->\n  535  			handler_call(State, Req, HandlerState,\n  536: 				<<>>, websocket_info, Message,\n  537  				fun (State2, Req2, HandlerState2, _) ->\n  538: 					websocket_payload_loop(State2, Req2, HandlerState2,\n  539  						Opcode, Len, MaskKey, Unmasked, UnmaskedLen, Rsv)\n  540  				end)\n  541  	end.\n  542  \n  543: -spec websocket_dispatch(#state{}, Req, any(), binary(), opcode(), binary())\n  544  	-> {ok, Req, cowboy_middleware:env()}\n  545  	| {suspend, module(), atom(), [any()]}\n  546  	when Req::cowboy_req:req().\n  547  %% Continuation frame.\n  548: websocket_dispatch(State=#state{frag_state={nofin, Opcode, SoFar}},\n  549  		Req, HandlerState, RemainingData, 0, Payload) ->\n  550: 	websocket_data(State#state{frag_state={nofin, Opcode,\n  551  		<< SoFar/binary, Payload/binary >>}}, Req, HandlerState, RemainingData);\n  552  %% Last continuation frame.\n  553: websocket_dispatch(State=#state{frag_state={fin, Opcode, SoFar}},\n  554  		Req, HandlerState, RemainingData, 0, Payload) ->\n  555: 	websocket_dispatch(State#state{frag_state=undefined}, Req, HandlerState,\n  556  		RemainingData, Opcode, << SoFar/binary, Payload/binary >>);\n  557  %% Text frame.\n  558: websocket_dispatch(State, Req, HandlerState, RemainingData, 1, Payload) ->\n  559  	handler_call(State, Req, HandlerState, RemainingData,\n  560: 		websocket_handle, {text, Payload}, fun websocket_data/4);\n  561  %% Binary frame.\n  562: websocket_dispatch(State, Req, HandlerState, RemainingData, 2, Payload) ->\n  563  	handler_call(State, Req, HandlerState, RemainingData,\n  564: 		websocket_handle, {binary, Payload}, fun websocket_data/4);\n  565  %% Close control frame.\n  566: websocket_dispatch(State, Req, HandlerState, _RemainingData, 8, <<>>) ->\n  567: 	websocket_close(State, Req, HandlerState, {remote, closed});\n  568: websocket_dispatch(State, Req, HandlerState, _RemainingData, 8,\n  569  		<< Code:16, Payload/bits >>) ->\n  570: 	websocket_close(State, Req, HandlerState, {remote, Code, Payload});\n  571  %% Ping control frame. Send a pong back and forward the ping to the handler.\n  572: websocket_dispatch(State=#state{socket=Socket, transport=Transport},\n  573  		Req, HandlerState, RemainingData, 9, Payload) ->\n  574  	Len = payload_length_to_binary(byte_size(Payload)),\n  575: 	Transport:send(Socket, << 1:1, 0:3, 10:4, 0:1, Len/bits, Payload/binary >>),\n  576  	handler_call(State, Req, HandlerState, RemainingData,\n  577: 		websocket_handle, {ping, Payload}, fun websocket_data/4);\n  578  %% Pong control frame.\n  579: websocket_dispatch(State, Req, HandlerState, RemainingData, 10, Payload) ->\n  580  	handler_call(State, Req, HandlerState, RemainingData,\n  581: 		websocket_handle, {pong, Payload}, fun websocket_data/4).\n  582  \n  583  -spec handler_call(#state{}, Req, any(), binary(), atom(), any(), fun())\n  ...\n  595  		{reply, Payload, Req2, HandlerState2}\n  596  				when is_list(Payload) ->\n  597: 			case websocket_send_many(Payload, State) of\n  598  				{ok, State2} ->\n  599  					NextState(State2, Req2, HandlerState2, RemainingData);\n  ...\n  606  		{reply, Payload, Req2, HandlerState2, hibernate}\n  607  				when is_list(Payload) ->\n  608: 			case websocket_send_many(Payload, State) of\n  609  				{ok, State2} ->\n  610  					NextState(State2#state{hibernate=true},\n  ...\n  617  			end;\n  618  		{reply, Payload, Req2, HandlerState2} ->\n  619: 			case websocket_send(Payload, State) of\n  620  				{ok, State2} ->\n  621  					NextState(State2, Req2, HandlerState2, RemainingData);\n  ...\n  627  			end;\n  628  		{reply, Payload, Req2, HandlerState2, hibernate} ->\n  629: 			case websocket_send(Payload, State) of\n  630  				{ok, State2} ->\n  631  					NextState(State2#state{hibernate=true},\n  ...\n  638  			end;\n  639  		{shutdown, Req2, HandlerState2} ->\n  640: 			websocket_close(State, Req2, HandlerState2, {normal, shutdown})\n  641  	catch Class:Reason ->\n  642: 		_ = websocket_close(State, Req, HandlerState, {error, handler}),\n  643  		erlang:Class([\n  644  			{reason, Reason},\n  ...\n  651  	end.\n  652  \n  653: websocket_opcode(text) -> 1;\n  654: websocket_opcode(binary) -> 2;\n  655: websocket_opcode(close) -> 8;\n  656: websocket_opcode(ping) -> 9;\n  657: websocket_opcode(pong) -> 10.\n  658  \n  659: -spec websocket_deflate_frame(opcode(), binary(), #state{}) ->\n  660  	{binary(), rsv(), #state{}}.\n  661: websocket_deflate_frame(Opcode, Payload,\n  662  		State=#state{deflate_frame = DeflateFrame})\n  663  		when DeflateFrame =:= false orelse Opcode >= 8 ->\n  664  	{Payload, << 0:3 >>, State};\n  665: websocket_deflate_frame(_, Payload, State=#state{deflate_state = Deflate}) ->\n  666  	Deflated = iolist_to_binary(zlib:deflate(Deflate, Payload, sync)),\n  667  	DeflatedBodyLength = erlang:size(Deflated) - 4,\n  ...\n  672  	{Deflated1, << 1:1, 0:2 >>, State}.\n  673  \n  674: -spec websocket_send(frame(), #state{})\n  675  -> {ok, #state{}} | {shutdown, #state{}} | {{error, atom()}, #state{}}.\n  676: websocket_send(Type, State=#state{socket=Socket, transport=Transport})\n  677  		when Type =:= close ->\n  678: 	Opcode = websocket_opcode(Type),\n  679: 	case Transport:send(Socket, << 1:1, 0:3, Opcode:4, 0:8 >>) of\n  680  		ok -> {shutdown, State};\n  681  		Error -> {Error, State}\n  682  	end;\n  683: websocket_send(Type, State=#state{socket=Socket, transport=Transport})\n  684  		when Type =:= ping; Type =:= pong ->\n  685: 	Opcode = websocket_opcode(Type),\n  686: 	{Transport:send(Socket, << 1:1, 0:3, Opcode:4, 0:8 >>), State};\n  687: websocket_send({close, Payload}, State) ->\n  688: 	websocket_send({close, 1000, Payload}, State);\n  689: websocket_send({Type = close, StatusCode, Payload}, State=#state{\n  690: 		socket=Socket, transport=Transport}) ->\n  691: 	Opcode = websocket_opcode(Type),\n  692  	Len = 2 + iolist_size(Payload),\n  693  	%% Control packets must not be > 125 in length.\n  694  	true = Len =< 125,\n  695  	BinLen = payload_length_to_binary(Len),\n  696: 	Transport:send(Socket,\n  697  		[<< 1:1, 0:3, Opcode:4, 0:1, BinLen/bits, StatusCode:16 >>, Payload]),\n  698  	{shutdown, State};\n  699: websocket_send({Type, Payload0}, State=#state{socket=Socket, transport=Transport}) ->\n  700: 	Opcode = websocket_opcode(Type),\n  701: 	{Payload, Rsv, State2} = websocket_deflate_frame(Opcode, iolist_to_binary(Payload0), State),\n  702  	Len = iolist_size(Payload),\n  703  	%% Control packets must not be > 125 in length.\n  ...\n  708  	end,\n  709  	BinLen = payload_length_to_binary(Len),\n  710: 	{Transport:send(Socket,\n  711  		[<< 1:1, Rsv/bits, Opcode:4, 0:1, BinLen/bits >>, Payload]), State2}.\n  712  \n  713: -spec websocket_send_many([frame()], #state{})\n  714  	-> {ok, #state{}} | {shutdown, #state{}} | {{error, atom()}, #state{}}.\n  715: websocket_send_many([], State) ->\n  716  	{ok, State};\n  717: websocket_send_many([Frame|Tail], State) ->\n  718: 	case websocket_send(Frame, State) of\n  719: 		{ok, State2} -> websocket_send_many(Tail, State2);\n  720  		{shutdown, State2} -> {shutdown, State2};\n  721  		{Error, State2} -> {Error, State2}\n  722  	end.\n  723  \n  724: -spec websocket_close(#state{}, Req, any(), terminate_reason())\n  725  	-> {ok, Req, cowboy_middleware:env()}\n  726  	when Req::cowboy_req:req().\n  727: websocket_close(State=#state{socket=Socket, transport=Transport},\n  728  		Req, HandlerState, Reason) ->\n  729  	case Reason of\n  730  		{normal, _} ->\n  731: 			Transport:send(Socket, << 1:1, 0:3, 8:4, 0:1, 2:7, 1000:16 >>);\n  732  		{error, badframe} ->\n  733: 			Transport:send(Socket, << 1:1, 0:3, 8:4, 0:1, 2:7, 1002:16 >>);\n  734  		{error, badencoding} ->\n  735: 			Transport:send(Socket, << 1:1, 0:3, 8:4, 0:1, 2:7, 1007:16 >>);\n  736  		{error, handler} ->\n  737: 			Transport:send(Socket, << 1:1, 0:3, 8:4, 0:1, 2:7, 1011:16 >>);\n  738  		{remote, closed} ->\n  739: 			Transport:send(Socket, << 1:1, 0:3, 8:4, 0:8 >>);\n  740  		{remote, Code, _} ->\n  741: 			Transport:send(Socket, << 1:1, 0:3, 8:4, 0:1, 2:7, Code:16 >>)\n  742  	end,\n  743  	handler_terminate(State, Req, HandlerState, Reason).\n  ...\n  749  		Req, HandlerState, TerminateReason) ->\n  750  	try\n  751: 		Handler:websocket_terminate(TerminateReason, Req, HandlerState)\n  752  	catch Class:Reason ->\n  753  		erlang:Class([\n  754  			{reason, Reason},\n  755: 			{mfa, {Handler, websocket_terminate, 3}},\n  756  			{stacktrace, erlang:get_stacktrace()},\n  757  			{req, cowboy_req:to_list(Req)},\n\n/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/src/cowboy_websocket_handler.erl:\n   13  %% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n   14  \n   15: -module(cowboy_websocket_handler).\n   16  \n   17  -type opts() :: any().\n   ..\n   21  	| {error, closed}\n   22  	| {remote, closed}\n   23: 	| {remote, cowboy_websocket:close_code(), binary()}\n   24  	| {error, badencoding}\n   25  	| {error, badframe}\n   26  	| {error, atom()}.\n   27  \n   28: -callback websocket_init(atom(), Req, opts())\n   29  	-> {ok, Req, state()}\n   30  	| {ok, Req, state(), hibernate}\n   ..\n   33  	| {shutdown, Req}\n   34  	when Req::cowboy_req:req().\n   35: -callback websocket_handle({text | binary | ping | pong, binary()}, Req, State)\n   36  	-> {ok, Req, State}\n   37  	| {ok, Req, State, hibernate}\n   38: 	| {reply, cowboy_websocket:frame() | [cowboy_websocket:frame()], Req, State}\n   39: 	| {reply, cowboy_websocket:frame() | [cowboy_websocket:frame()], Req, State, hibernate}\n   40  	| {shutdown, Req, State}\n   41  	when Req::cowboy_req:req(), State::state().\n   42: -callback websocket_info(any(), Req, State)\n   43  	-> {ok, Req, State}\n   44  	| {ok, Req, State, hibernate}\n   45: 	| {reply, cowboy_websocket:frame() | [cowboy_websocket:frame()], Req, State}\n   46: 	| {reply, cowboy_websocket:frame() | [cowboy_websocket:frame()], Req, State, hibernate}\n   47  	| {shutdown, Req, State}\n   48  	when Req::cowboy_req:req(), State::state().\n   49: -callback websocket_terminate(terminate_reason(), cowboy_req:req(), state())\n   50  	-> ok.\n   51  \n\n/home/sam/conversant/repos/kazoo/deps/cowlib-0.6.2/README.md:\n    8  \n    9  Cowlib provides libraries for parsing and building messages\n   10: for various Web protocols, including SPDY, HTTP and Websocket.\n   11  \n   12  It is optimized for completeness rather than speed. No value\n\n/home/sam/conversant/repos/kazoo/deps/edown-0.0.1/samples/markedoc/SAMPLE1.md:\n  280  \n  281  ## TODO\n  282: * decrementing pool size could close sockets that are in use\n  283  * spawn individual conn_mgr gen_server processes for each pool\n  284  * allow row results to be returned as binary\n\n/home/sam/conversant/repos/kazoo/deps/edown-0.0.1/samples/markedoc/what-you-should-see/SAMPLE1.edoc:\n  308  \n  309  == TODO ==\n  310: <li> decrementing pool size could close sockets that are in use</li>\n  311  <li> spawn individual conn_mgr gen_server processes for each pool</li>\n  312  <li> allow row results to be returned as binary</li>\n\n/home/sam/conversant/repos/kazoo/deps/edown-0.0.1/samples/markedoc/what-you-should-see/sample1.html:\n  277  \n  278  <h3><a name=\"TODO\">TODO</a></h3><p>\n  279: <li> decrementing pool size could close sockets that are in use</li>\n  280  <li> spawn individual conn_mgr gen_server processes for each pool</li>\n  281  <li> allow row results to be returned as binary</li></p>\n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/c_src/exmpp_tls_openssl.c:\n  190  	 * We never check return codes against SSL_ERROR_WANT_WRITE because\n  191  	 * writes to BIO_mem() always succeed and OpenSSL can't tell if\n  192: 	 * the data was effectively written to the socket.\n  193  	 */\n  194  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/doc/html/ejabberd_socket.html:\n    2  <html>\n    3  <head>\n    4: <title>Module ejabberd_socket</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    5  <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\" title=\"EDoc\">\n    6  </head>\n    .\n    9  <hr>\n   10  \n   11: <h1>Module ejabberd_socket</h1>\n   12  <ul class=\"index\"><li><a href=\"#description\">Description</a></li><li><a href=\"#index\">Function Index</a></li><li><a href=\"#functions\">Function Details</a></li></ul>\n   13:   This <strong>ejabberd_socket</strong> module is for compatibility with ejabberd.\n   14  \n   15  \n   16  <h2><a name=\"description\">Description</a></h2>\n   17:   This <strong>ejabberd_socket</strong> module is for compatibility with ejabberd.\n   18  <h2><a name=\"index\">Function Index</a></h2>\n   19  <table width=\"100%\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" summary=\"function index\"><tr><td valign=\"top\"><a href=\"#change_shaper-2\">change_shaper/2</a></td><td></td></tr>\n   ..\n   39  <h3 class=\"function\"><a name=\"change_shaper-2\">change_shaper/2</a></h3>\n   40  <div class=\"spec\">\n   41: <p><tt>change_shaper(SocketData, Shaper) -&gt; any()</tt></p>\n   42  </div>\n   43  \n   44  <h3 class=\"function\"><a name=\"close-1\">close/1</a></h3>\n   45  <div class=\"spec\">\n   46: <p><tt>close(SocketData) -&gt; any()</tt></p>\n   47  </div>\n   48  \n   49  <h3 class=\"function\"><a name=\"compress-1\">compress/1</a></h3>\n   50  <div class=\"spec\">\n   51: <p><tt>compress(SocketData) -&gt; any()</tt></p>\n   52  </div>\n   53  \n   54  <h3 class=\"function\"><a name=\"compress-2\">compress/2</a></h3>\n   55  <div class=\"spec\">\n   56: <p><tt>compress(SocketData, Data) -&gt; any()</tt></p>\n   57  </div>\n   58  \n   ..\n   64  <h3 class=\"function\"><a name=\"get_peer_certificate-1\">get_peer_certificate/1</a></h3>\n   65  <div class=\"spec\">\n   66: <p><tt>get_peer_certificate(SocketData) -&gt; any()</tt></p>\n   67  </div>\n   68  \n   69  <h3 class=\"function\"><a name=\"get_sockmod-1\">get_sockmod/1</a></h3>\n   70  <div class=\"spec\">\n   71: <p><tt>get_sockmod(SocketData) -&gt; any()</tt></p>\n   72  </div>\n   73  \n   74  <h3 class=\"function\"><a name=\"get_verify_result-1\">get_verify_result/1</a></h3>\n   75  <div class=\"spec\">\n   76: <p><tt>get_verify_result(SocketData) -&gt; any()</tt></p>\n   77  </div>\n   78  \n   79  <h3 class=\"function\"><a name=\"monitor-1\">monitor/1</a></h3>\n   80  <div class=\"spec\">\n   81: <p><tt>monitor(SocketData) -&gt; any()</tt></p>\n   82  </div>\n   83  \n   84  <h3 class=\"function\"><a name=\"peername-1\">peername/1</a></h3>\n   85  <div class=\"spec\">\n   86: <p><tt>peername(Socket_state) -&gt; any()</tt></p>\n   87  </div>\n   88  \n   89  <h3 class=\"function\"><a name=\"reset_stream-1\">reset_stream/1</a></h3>\n   90  <div class=\"spec\">\n   91: <p><tt>reset_stream(SocketData) -&gt; any()</tt></p>\n   92  </div>\n   93  \n   94  <h3 class=\"function\"><a name=\"send-2\">send/2</a></h3>\n   95  <div class=\"spec\">\n   96: <p><tt>send(SocketData, Data) -&gt; any()</tt></p>\n   97  </div>\n   98  \n   99  <h3 class=\"function\"><a name=\"sockname-1\">sockname/1</a></h3>\n  100  <div class=\"spec\">\n  101: <p><tt>sockname(Socket_state) -&gt; any()</tt></p>\n  102  </div>\n  103  \n  104  <h3 class=\"function\"><a name=\"start-4\">start/4</a></h3>\n  105  <div class=\"spec\">\n  106: <p><tt>start(Module, SockMod, Socket, Opts) -&gt; any()</tt></p>\n  107  </div>\n  108  \n  109  <h3 class=\"function\"><a name=\"starttls-2\">starttls/2</a></h3>\n  110  <div class=\"spec\">\n  111: <p><tt>starttls(SocketData, TLSOpts) -&gt; any()</tt></p>\n  112  </div>\n  113  \n  114  <h3 class=\"function\"><a name=\"starttls-3\">starttls/3</a></h3>\n  115  <div class=\"spec\">\n  116: <p><tt>starttls(SocketData, TLSOpts, Data) -&gt; any()</tt></p>\n  117  </div>\n  118  <hr>\n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/doc/html/exmpp_compress.html:\n   22  <h2><a name=\"types\">Data Types</a></h2>\n   23  \n   24: <h3 class=\"typedecl\"><a name=\"type-compress_socket\">compress_socket()</a></h3>\n   25: <p><b>abstract datatype</b>: <tt>compress_socket()</tt></p>\n   26: <p>Compression socket obtained with <a href=\"#compress-2\"><code>compress/2</code></a>.</p>\n   27  \n   28  <h2><a name=\"index\">Function Index</a></h2>\n   29: <table width=\"100%\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" summary=\"function index\"><tr><td valign=\"top\"><a href=\"#close-1\">close/1</a></td><td>Turn off compression and close the underlying socket.</td></tr>\n   30: <tr><td valign=\"top\"><a href=\"#controlling_process-2\">controlling_process/2</a></td><td>Change the controlling socket of the underlying socket.</td></tr>\n   31: <tr><td valign=\"top\"><a href=\"#disable_compression-1\">disable_compression/1</a></td><td>Disable compression and return the underlying socket.</td></tr>\n   32: <tr><td valign=\"top\"><a href=\"#enable_compression-2\">enable_compression/2</a></td><td>Enable compression over the given socket.</td></tr>\n   33  <tr><td valign=\"top\"><a href=\"#get_compress_methods-0\">get_compress_methods/0</a></td><td>Return the list of supported compress methods.</td></tr>\n   34  <tr><td valign=\"top\"><a href=\"#get_engine_driver-1\">get_engine_driver/1</a></td><td>Return the port driver name associated to the given engine.</td></tr>\n   ..\n   37  <tr><td valign=\"top\"><a href=\"#get_prefered_engine_name-1\">get_prefered_engine_name/1</a></td><td>Return the name of the prefered compression engines which support the\n   38    given compress method.</td></tr>\n   39: <tr><td valign=\"top\"><a href=\"#getopts-2\">getopts/2</a></td><td>Sets one or more options for a socket.</td></tr>\n   40  <tr><td valign=\"top\"><a href=\"#is_engine_available-1\">is_engine_available/1</a></td><td>Tell if <code>Engine_Name</code> is available.</td></tr>\n   41  <tr><td valign=\"top\"><a href=\"#peername-1\">peername/1</a></td><td>Returns the address and port for the other end of a connection.</td></tr>\n   ..\n   47  <tr><td valign=\"top\"><a href=\"#send-2\">send/2</a></td><td>Send <code>Orig_Packet</code> over a compressed connection.</td></tr>\n   48  <tr><td valign=\"top\"><a href=\"#send_data-2\">send_data/2</a></td><td>Compress <code>Orig_Data</code> before sending over compressed connection.</td></tr>\n   49: <tr><td valign=\"top\"><a href=\"#setopts-2\">setopts/2</a></td><td>Sets one or more options for a socket.</td></tr>\n   50: <tr><td valign=\"top\"><a href=\"#sockname-1\">sockname/1</a></td><td>Returns the local address and port number for a socket.</td></tr>\n   51  </table>\n   52  \n   ..\n   55  <h3 class=\"function\"><a name=\"close-1\">close/1</a></h3>\n   56  <div class=\"spec\">\n   57: <p><tt>close(Compress_socket::Compress_Socket) -&gt; ok | {error, Reason}</tt>\n   58: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li><li><tt>Reason = term()</tt></li></ul></p>\n   59: </div><p>Turn off compression and close the underlying socket.</p>\n   60  \n   61  <h3 class=\"function\"><a name=\"controlling_process-2\">controlling_process/2</a></h3>\n   62  <div class=\"spec\">\n   63: <p><tt>controlling_process(Compress_socket::Compress_Socket, Pid) -&gt; ok | {error, Reason}</tt>\n   64: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li><li><tt>Pid = pid()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n   65: </div><p>Change the controlling socket of the underlying socket.</p>\n   66  \n   67  <h3 class=\"function\"><a name=\"disable_compression-1\">disable_compression/1</a></h3>\n   68  <div class=\"spec\">\n   69: <p><tt>disable_compression(Compress_socket::Compress_Socket) -&gt; Socket_Desc</tt>\n   70: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li></ul></p>\n   71: </div><p>Disable compression and return the underlying socket.</p>\n   72  \n   73  <h3 class=\"function\"><a name=\"enable_compression-2\">enable_compression/2</a></h3>\n   74  <div class=\"spec\">\n   75: <p><tt>enable_compression(Socket_Desc, Options) -&gt; Compress_Socket</tt>\n   76: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Options = [Option]</tt></li><li><tt>Option = {compress_method, Method} | {engine, Engine} | {mode, Mode} | {compress_level, Level}</tt></li><li><tt>Method = atom()</tt></li><li><tt>Engine = atom()</tt></li><li><tt>Mode = binary | list</tt></li><li><tt>Level = integer()</tt></li><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li></ul></p>\n   77: </div><p>Enable compression over the given socket.</p>\n   78  \n   79  <h3 class=\"function\"><a name=\"get_compress_methods-0\">get_compress_methods/0</a></h3>\n   ..\n  112  <h3 class=\"function\"><a name=\"getopts-2\">getopts/2</a></h3>\n  113  <div class=\"spec\">\n  114: <p><tt>getopts(Compress_socket::Compress_Socket, Options) -&gt; {ok, Option_Values} | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  115: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Options = list()</tt></li><li><tt>Option_Values = list()</tt></li></ul></p>\n  116: </div><p>Sets one or more options for a socket.</p>\n  117  \n  118  <h3 class=\"function\"><a name=\"is_engine_available-1\">is_engine_available/1</a></h3>\n  ...\n  124  <h3 class=\"function\"><a name=\"peername-1\">peername/1</a></h3>\n  125  <div class=\"spec\">\n  126: <p><tt>peername(Compress_socket::Compress_Socket) -&gt; {ok, {Address, Port}} | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  127: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Address = <a href=\"#type-ip_address\">ip_address()</a></tt></li><li><tt>Port = integer()</tt></li></ul></p>\n  128  </div><p>Returns the address and port for the other end of a connection.</p>\n  129  \n  130  <h3 class=\"function\"><a name=\"recv-1\">recv/1</a></h3>\n  131  <div class=\"spec\">\n  132: <p><tt>recv(Compress_Socket) -&gt; {ok, Orig_Packet} | {error, Reason}</tt>\n  133: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li><li><tt>Orig_Packet = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  134  </div><p>Receive data over a compressed connection.</p>\n  135  \n  136  <h3 class=\"function\"><a name=\"recv-2\">recv/2</a></h3>\n  137  <div class=\"spec\">\n  138: <p><tt>recv(Compress_socket::Compress_Socket, Timeout) -&gt; {ok, Orig_Packet} | {error, Reason}</tt>\n  139: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li><li><tt>Timeout = integer()</tt></li><li><tt>Orig_Packet = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  140  </div><p>Receive data over a compressed connection.</p>\n  141  \n  142  <h3 class=\"function\"><a name=\"recv_data-2\">recv_data/2</a></h3>\n  143  <div class=\"spec\">\n  144: <p><tt>recv_data(Compress_socket::Compress_Socket, Packet) -&gt; {ok, Orig_Packet} | {error, Reason}</tt>\n  145: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li><li><tt>Packet = binary() | list()</tt></li><li><tt>Orig_Packet = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  146  </div><p>Uncompress already received data.</p>\n  147  \n  ...\n  160  <h3 class=\"function\"><a name=\"send-2\">send/2</a></h3>\n  161  <div class=\"spec\">\n  162: <p><tt>send(Compress_socket::Compress_Socket, Packet::Orig_Packet) -&gt; ok | {error, Reason}</tt>\n  163: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li><li><tt>Orig_Packet = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  164  </div><p>Send <code>Orig_Packet</code> over a compressed connection.</p>\n  165  \n  166  <h3 class=\"function\"><a name=\"send_data-2\">send_data/2</a></h3>\n  167  <div class=\"spec\">\n  168: <p><tt>send_data(Compress_socket::Compress_Socket, Data::Orig_Data) -&gt; {ok, CompressedData} | {error, Reason}</tt>\n  169: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-compress_socket\">compress_socket()</a></tt></li><li><tt>Orig_Data = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  170  </div><p>Compress <code>Orig_Data</code> before sending over compressed connection.</p>\n  171  \n  172  <h3 class=\"function\"><a name=\"setopts-2\">setopts/2</a></h3>\n  173  <div class=\"spec\">\n  174: <p><tt>setopts(Compress_socket::Compress_Socket, Options) -&gt; ok | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  175: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Options = list()</tt></li></ul></p>\n  176: </div><p>Sets one or more options for a socket.</p>\n  177  \n  178  <h3 class=\"function\"><a name=\"sockname-1\">sockname/1</a></h3>\n  179  <div class=\"spec\">\n  180: <p><tt>sockname(Compress_socket::Compress_Socket) -&gt; {ok, {Address, Port}} | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  181: <ul class=\"definitions\"><li><tt>Compress_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Address = <a href=\"#type-ip_address\">ip_address()</a></tt></li><li><tt>Port = integer()</tt></li></ul></p>\n  182: </div><p>Returns the local address and port number for a socket.</p>\n  183  <hr>\n  184  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/doc/html/exmpp_internals.html:\n   62  <h3 class=\"function\"><a name=\"gen_close-1\">gen_close/1</a></h3>\n   63  <div class=\"spec\">\n   64: <p><tt>gen_close(X1::Socket_Desc) -&gt; ok | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n   65: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li></ul></p>\n   66  </div><p>Wrapper to abstract the <code>close</code> function of multiple communication\n   67    modules.</p>\n   ..\n   69  <h3 class=\"function\"><a name=\"gen_controlling_process-2\">gen_controlling_process/2</a></h3>\n   70  <div class=\"spec\">\n   71: <p><tt>gen_controlling_process(X1::Socket_Desc, Pid) -&gt; ok | {error, Reason}</tt>\n   72: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Pid = pid()</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Reason = close | not_owner | <a href=\"#type-posix\">posix()</a></tt></li></ul></p>\n   73  </div><p>Wrapper to abstract the <code>controlling_process</code> function of\n   74    multiple communication modules.</p>\n   ..\n   76  <h3 class=\"function\"><a name=\"gen_getopts-2\">gen_getopts/2</a></h3>\n   77  <div class=\"spec\">\n   78: <p><tt>gen_getopts(X1::Socket_Desc, Options) -&gt; Option_Values | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n   79: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Options = list()</tt></li><li><tt>Option_Values = {ok, list()}</tt></li></ul></p>\n   80  </div><p>Wrapper to abstract the <code>getopts</code> function of multiple communication\n   81    modules.</p>\n   ..\n   83  <h3 class=\"function\"><a name=\"gen_peername-1\">gen_peername/1</a></h3>\n   84  <div class=\"spec\">\n   85: <p><tt>gen_peername(X1::Socket_Desc) -&gt; {ok, {Address, Port}} | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n   86: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Address = <a href=\"#type-ip_address\">ip_address()</a></tt></li><li><tt>Port = integer()</tt></li></ul></p>\n   87  </div><p>Wrapper to abstract the <code>peername</code> function of multiple communication\n   88    modules.</p>\n   ..\n   90  <h3 class=\"function\"><a name=\"gen_recv-2\">gen_recv/2</a></h3>\n   91  <div class=\"spec\">\n   92: <p><tt>gen_recv(X1::Socket_Desc, Timeout) -&gt; {ok, Packet} | {error, Reason}</tt>\n   93: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Timeout = integer() | infinity</tt></li><li><tt>Packet = [char()] | binary()</tt></li><li><tt>Reason = closed | <a href=\"#type-posix\">posix()</a></tt></li></ul></p>\n   94  </div><p>Wrapper to abstract the <code>recv</code> function of multiple communication\n   95    modules.</p>\n   ..\n   97  <h3 class=\"function\"><a name=\"gen_send-2\">gen_send/2</a></h3>\n   98  <div class=\"spec\">\n   99: <p><tt>gen_send(X1::Socket_Desc, Packet) -&gt; ok | {error, Reason}</tt>\n  100: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Packet = [char()] | binary()</tt></li><li><tt>Reason = closed | <a href=\"#type-posix\">posix()</a></tt></li></ul></p>\n  101  </div><p>Wrapper to abstract the <code>send</code> function of multiple communication\n  102    modules.</p>\n  ...\n  104  <h3 class=\"function\"><a name=\"gen_setopts-2\">gen_setopts/2</a></h3>\n  105  <div class=\"spec\">\n  106: <p><tt>gen_setopts(X1::Socket_Desc, Options) -&gt; ok | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  107: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Options = list()</tt></li></ul></p>\n  108  </div><p>Wrapper to abstract the <code>setopts</code> function of multiple communication\n  109    modules.</p>\n  ...\n  111  <h3 class=\"function\"><a name=\"gen_sockname-1\">gen_sockname/1</a></h3>\n  112  <div class=\"spec\">\n  113: <p><tt>gen_sockname(X1::Socket_Desc) -&gt; {ok, {Address, Port}} | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  114: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Address = <a href=\"#type-ip_address\">ip_address()</a></tt></li><li><tt>Port = integer()</tt></li></ul></p>\n  115  </div><p>Wrapper to abstract the <code>sockname</code> function of multiple communication\n  116    modules.</p>\n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/doc/html/exmpp_session.html:\n   41  <tr><td valign=\"top\"><a href=\"#connect_TCP-3\">connect_TCP/3</a></td><td></td></tr>\n   42  <tr><td valign=\"top\"><a href=\"#connect_TCP-4\">connect_TCP/4</a></td><td></td></tr>\n   43: <tr><td valign=\"top\"><a href=\"#get_connection_property-2\">get_connection_property/2</a></td><td>Get a property of the underling connection (socket or bosh connection).</td></tr>\n   44  <tr><td valign=\"top\"><a href=\"#handle_event-3\">handle_event/3</a></td><td></td></tr>\n   45  <tr><td valign=\"top\"><a href=\"#handle_info-3\">handle_info/3</a></td><td></td></tr>\n   ..\n  156  <div class=\"spec\">\n  157  <p><tt>get_connection_property(Session::pid(), Prop::atom()) -&gt; {ok, any()} | {error, any()}</tt><br></p>\n  158: </div><p><p>Get a property of the underling connection (socket or bosh connection)</p>\n  159   \n  160:        See documentation on exmpp_socket and exmpp_bosh to see the supported properties.\n  161         Returns {error, undefined} if the property is not defined for that kind of connection.</p>\n  162  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/doc/html/exmpp_socket.html:\n    2  <html>\n    3  <head>\n    4: <title>Module exmpp_socket</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    5  <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\" title=\"EDoc\">\n    6  </head>\n    .\n    9  <hr>\n   10  \n   11: <h1>Module exmpp_socket</h1>\n   12  <ul class=\"index\"><li><a href=\"#description\">Description</a></li><li><a href=\"#index\">Function Index</a></li><li><a href=\"#functions\">Function Details</a></li></ul>\n   13:   The module <strong>exmpp_socket</strong> manages TCP/IP socket  \n   14  connections to an XMPP server with or without TLS/SSL encryption.\n   15  \n   ..\n   17  \n   18  <h2><a name=\"description\">Description</a></h2><p>\n   19:   The module <strong>exmpp_socket</strong> manages TCP/IP socket  \n   20  connections to an XMPP server with or without TLS/SSL encryption.</p>\n   21   \n   ..\n   39  <h3 class=\"function\"><a name=\"close-2\">close/2</a></h3>\n   40  <div class=\"spec\">\n   41: <p><tt>close(Socket, ReceiverPid) -&gt; any()</tt></p>\n   42  </div>\n   43  \n   ..\n   54  <h3 class=\"function\"><a name=\"get_property-2\">get_property/2</a></h3>\n   55  <div class=\"spec\">\n   56: <p><tt>get_property(Socket, Prop) -&gt; any()</tt></p>\n   57  </div>\n   58  \n   59  <h3 class=\"function\"><a name=\"receiver-3\">receiver/3</a></h3>\n   60  <div class=\"spec\">\n   61: <p><tt>receiver(ClientPid, Socket, StreamRef) -&gt; any()</tt></p>\n   62  </div>\n   63  \n   ..\n   69  <h3 class=\"function\"><a name=\"send-2\">send/2</a></h3>\n   70  <div class=\"spec\">\n   71: <p><tt>send(Socket, XMLPacket) -&gt; any()</tt></p>\n   72  </div>\n   73  \n   ..\n   79  <h3 class=\"function\"><a name=\"wping-1\">wping/1</a></h3>\n   80  <div class=\"spec\">\n   81: <p><tt>wping(Socket) -&gt; any()</tt></p>\n   82  </div>\n   83  <hr>\n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/doc/html/exmpp_tls.html:\n   22  <h2><a name=\"types\">Data Types</a></h2>\n   23  \n   24: <h3 class=\"typedecl\"><a name=\"type-tls_socket\">tls_socket()</a></h3>\n   25: <p><b>abstract datatype</b>: <tt>tls_socket()</tt></p>\n   26: <p>TLS socket obtained with <a href=\"#connect-4\"><code>connect/4</code></a> or <a href=\"#accept-4\"><code>accept/4</code></a>.</p>\n   27  \n   28  <h2><a name=\"index\">Function Index</a></h2>\n   29  <table width=\"100%\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" summary=\"function index\"><tr><td valign=\"top\"><a href=\"#accept-4\">accept/4</a></td><td>Start TLS handshake as a server.</td></tr>\n   30: <tr><td valign=\"top\"><a href=\"#close-1\">close/1</a></td><td>Shutdown the TLS session and close the underlying socket.</td></tr>\n   31  <tr><td valign=\"top\"><a href=\"#connect-4\">connect/4</a></td><td>Start TLS handshake as a client.</td></tr>\n   32: <tr><td valign=\"top\"><a href=\"#controlling_process-2\">controlling_process/2</a></td><td>Change the controlling socket of the underlying socket.</td></tr>\n   33  <tr><td valign=\"top\"><a href=\"#get_auth_methods-0\">get_auth_methods/0</a></td><td>Return the list of supported auth methods.</td></tr>\n   34  <tr><td valign=\"top\"><a href=\"#get_engine_driver-1\">get_engine_driver/1</a></td><td>Return the port driver name associated to the given engine.</td></tr>\n   ..\n   41    given auth method.</td></tr>\n   42  <tr><td valign=\"top\"><a href=\"#get_verify_result-1\">get_verify_result/1</a></td><td>Return verify result.</td></tr>\n   43: <tr><td valign=\"top\"><a href=\"#getopts-2\">getopts/2</a></td><td>Gets one or more options for a socket.</td></tr>\n   44  <tr><td valign=\"top\"><a href=\"#handshake-5\">handshake/5</a></td><td></td></tr>\n   45  <tr><td valign=\"top\"><a href=\"#is_engine_available-1\">is_engine_available/1</a></td><td>Tell if <code>Engine_Name</code> is available.</td></tr>\n   ..\n   53  <tr><td valign=\"top\"><a href=\"#send-2\">send/2</a></td><td>Send <code>Orig_Packet</code> over a TLS-protected connection.</td></tr>\n   54  <tr><td valign=\"top\"><a href=\"#send_data-2\">send_data/2</a></td><td></td></tr>\n   55: <tr><td valign=\"top\"><a href=\"#setopts-2\">setopts/2</a></td><td>Sets one or more options for a socket.</td></tr>\n   56  <tr><td valign=\"top\"><a href=\"#shutdown-1\">shutdown/1</a></td><td>Shutdown the TLS session.</td></tr>\n   57  <tr><td valign=\"top\"><a href=\"#shutdown-2\">shutdown/2</a></td><td>Shutdown the TLS session.</td></tr>\n   58  <tr><td valign=\"top\"><a href=\"#shutdown-3\">shutdown/3</a></td><td>Shutdown the TLS session.</td></tr>\n   59: <tr><td valign=\"top\"><a href=\"#sockname-1\">sockname/1</a></td><td>Returns the local address and port number for a socket.</td></tr>\n   60  </table>\n   61  \n   ..\n   64  <h3 class=\"function\"><a name=\"accept-4\">accept/4</a></h3>\n   65  <div class=\"spec\">\n   66: <p><tt>accept(Socket_Desc, Identity, Peer_Verification, Options) -&gt; TLS_Socket</tt>\n   67: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Identity = {Auth_Method, Certificate, Private_Key}</tt></li><li><tt>Auth_Method = atom()</tt></li><li><tt>Certificate = string()</tt></li><li><tt>Private_Key = string()</tt></li><li><tt>Peer_Verification = bool() | Peer_Name</tt></li><li><tt>Peer_Name = string()</tt></li><li><tt>Options = [Option]</tt></li><li><tt>Option = {engine, Engine} | {mode, Mode} | {trusted_certs, {Auth_Method, Certs}} | peer_cert_required | accept_expired_cert | accept_revoked_cert | accept_non_trusted_cert | accept_corrupted_cert</tt></li><li><tt>Engine = atom()</tt></li><li><tt>Mode = binary | list</tt></li><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li></ul></p>\n   68  </div><p>Start TLS handshake as a server.</p>\n   69  \n   70  <h3 class=\"function\"><a name=\"close-1\">close/1</a></h3>\n   71  <div class=\"spec\">\n   72: <p><tt>close(Tls_socket::TLS_Socket) -&gt; ok | {error, Reason}</tt>\n   73: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Reason = term()</tt></li></ul></p>\n   74: </div><p>Shutdown the TLS session and close the underlying socket.</p>\n   75  \n   76  <h3 class=\"function\"><a name=\"connect-4\">connect/4</a></h3>\n   77  <div class=\"spec\">\n   78: <p><tt>connect(Socket_Desc, Identity, Peer_Verification, Options) -&gt; TLS_Socket</tt>\n   79: <ul class=\"definitions\"><li><tt>Socket_Desc = {Mod, Socket}</tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Identity = {Auth_Method, Certificate, Private_Key} | undefined</tt></li><li><tt>Auth_Method = atom()</tt></li><li><tt>Certificate = string()</tt></li><li><tt>Private_Key = string()</tt></li><li><tt>Peer_Verification = bool() | Peer_Name</tt></li><li><tt>Peer_Name = string()</tt></li><li><tt>Options = [Option]</tt></li><li><tt>Option = {engine, Engine} | {mode, Mode} | {trusted_certs, Auth_Method, Certs} | peer_cert_required | accept_expired_cert | accept_revoked_cert | accept_non_trusted_cert | accept_corrupted_cert</tt></li><li><tt>Engine = atom()</tt></li><li><tt>Mode = binary | list</tt></li><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li></ul></p>\n   80  </div><p>Start TLS handshake as a client.</p>\n   81  \n   82  <h3 class=\"function\"><a name=\"controlling_process-2\">controlling_process/2</a></h3>\n   83  <div class=\"spec\">\n   84: <p><tt>controlling_process(Tls_socket::TLS_Socket, Pid) -&gt; ok | {error, Reason}</tt>\n   85: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Pid = pid()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n   86: </div><p>Change the controlling socket of the underlying socket.</p>\n   87  \n   88  <h3 class=\"function\"><a name=\"get_auth_methods-0\">get_auth_methods/0</a></h3>\n   ..\n  114  <h3 class=\"function\"><a name=\"get_finished-1\">get_finished/1</a></h3>\n  115  <div class=\"spec\">\n  116: <p><tt>get_finished(Tls_socket::TLS_Socket) -&gt; Finished</tt>\n  117: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Finished = binary()</tt></li></ul></p>\n  118  </div><p><p>Retrieve latest \"Finished\" message (sent out from this side).</p>\n  119   \n  ...\n  123  <h3 class=\"function\"><a name=\"get_peer_certificate-1\">get_peer_certificate/1</a></h3>\n  124  <div class=\"spec\">\n  125: <p><tt>get_peer_certificate(Tls_socket::TLS_Socket) -&gt; Certificate | undefined</tt>\n  126: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Certificate = <a href=\"#type-certificate\">certificate()</a></tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  127  </div><p>throws <tt>{tls, peer_certificate, decode_failed, Reason}</tt></p>\n  128  <p><p>Return the peer certificate if he provided one.</p>\n  ...\n  138  <h3 class=\"function\"><a name=\"get_peer_finished-1\">get_peer_finished/1</a></h3>\n  139  <div class=\"spec\">\n  140: <p><tt>get_peer_finished(Tls_socket::TLS_Socket) -&gt; Finished</tt>\n  141: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Finished = binary()</tt></li></ul></p>\n  142  </div><p><p>Retrieve latest \"Finished\" message (received on this side).</p>\n  143   \n  ...\n  154  <h3 class=\"function\"><a name=\"get_verify_result-1\">get_verify_result/1</a></h3>\n  155  <div class=\"spec\">\n  156: <p><tt>get_verify_result(Tls_socket::TLS_Socket) -&gt; Result</tt>\n  157: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Result = integer()</tt></li></ul></p>\n  158  </div><p>Return verify result.</p>\n  159  \n  160  <h3 class=\"function\"><a name=\"getopts-2\">getopts/2</a></h3>\n  161  <div class=\"spec\">\n  162: <p><tt>getopts(Tls_socket::TLS_Socket, Options) -&gt; {ok, Option_Values} | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  163: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Options = list()</tt></li><li><tt>Option_Values = list()</tt></li></ul></p>\n  164: </div><p>Gets one or more options for a socket.</p>\n  165  \n  166  <h3 class=\"function\"><a name=\"handshake-5\">handshake/5</a></h3>\n  167  <div class=\"spec\">\n  168: <p><tt>handshake(Mode, Socket_Desc, Identity, Peer_Verification, Options) -&gt; any()</tt></p>\n  169  </div>\n  170  \n  ...\n  177  <h3 class=\"function\"><a name=\"peername-1\">peername/1</a></h3>\n  178  <div class=\"spec\">\n  179: <p><tt>peername(Tls_socket::TLS_Socket) -&gt; {ok, {Address, Port}} | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  180: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Address = <a href=\"#type-ip_address\">ip_address()</a></tt></li><li><tt>Port = integer()</tt></li></ul></p>\n  181  </div><p>Returns the address and port for the other end of a connection.</p>\n  182  \n  183  <h3 class=\"function\"><a name=\"quiet_shutdown-1\">quiet_shutdown/1</a></h3>\n  184  <div class=\"spec\">\n  185: <p><tt>quiet_shutdown(Tls_socket::TLS_Socket) -&gt; Socket_Desc</tt>\n  186: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Socket_Desc = {Mod, Socket}</tt></li></ul></p>\n  187  </div><p><p>Flag the TLS session as down but do not exchange \"close notify\".</p>\n  188   \n  189:   The underlying socket is NOT closed.</p>\n  190  \n  191  <h3 class=\"function\"><a name=\"recv-1\">recv/1</a></h3>\n  192  <div class=\"spec\">\n  193: <p><tt>recv(TLS_Socket) -&gt; {ok, Orig_Packet} | {error, Reason}</tt>\n  194: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Orig_Packet = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  195  </div><p>Receive data over a TLS-protected connection.</p>\n  196  \n  197  <h3 class=\"function\"><a name=\"recv-2\">recv/2</a></h3>\n  198  <div class=\"spec\">\n  199: <p><tt>recv(Tls_socket::TLS_Socket, Timeout) -&gt; {ok, Orig_Packet} | {error, Reason}</tt>\n  200: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Timeout = integer()</tt></li><li><tt>Orig_Packet = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  201  </div><p>Receive data over a TLS-protected connection.</p>\n  202  \n  203  <h3 class=\"function\"><a name=\"recv_data-2\">recv_data/2</a></h3>\n  204  <div class=\"spec\">\n  205: <p><tt>recv_data(Tls_socket::TLS_Socket, Packet) -&gt; {ok, Orig_Packet} | {error, Reason}</tt>\n  206: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Packet = binary() | list()</tt></li><li><tt>Orig_Packet = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  207  </div><p><p>Decrypt already received data.</p>\n  208   \n  209:   This function won't read anything from the underlying socket but WILL\n  210    write to it.</p>\n  211  \n  ...\n  224  <h3 class=\"function\"><a name=\"send-2\">send/2</a></h3>\n  225  <div class=\"spec\">\n  226: <p><tt>send(Tls_socket::TLS_Socket, Packet::Orig_Packet) -&gt; ok | {error, Reason}</tt>\n  227: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Orig_Packet = binary() | list()</tt></li><li><tt>Reason = term()</tt></li></ul></p>\n  228  </div><p>Send <code>Orig_Packet</code> over a TLS-protected connection.</p>\n  229  \n  230  <h3 class=\"function\"><a name=\"send_data-2\">send_data/2</a></h3>\n  231  <div class=\"spec\">\n  232: <p><tt>send_data(Tls_socket, Packet) -&gt; any()</tt></p>\n  233  </div>\n  234  \n  235  <h3 class=\"function\"><a name=\"setopts-2\">setopts/2</a></h3>\n  236  <div class=\"spec\">\n  237: <p><tt>setopts(Tls_socket::TLS_Socket, Options) -&gt; ok | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  238: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Options = list()</tt></li></ul></p>\n  239: </div><p>Sets one or more options for a socket.</p>\n  240  \n  241  <h3 class=\"function\"><a name=\"shutdown-1\">shutdown/1</a></h3>\n  242  <div class=\"spec\">\n  243: <p><tt>shutdown(TLS_Socket) -&gt; Socket_Desc</tt>\n  244: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Socket_Desc = {Mod, Socket}</tt></li></ul></p>\n  245  </div><p><p>Shutdown the TLS session.</p>\n  246   \n  247    <p>Only a unidirectional shutdown is made.</p>\n  248   \n  249:   The underlying socket is NOT closed.</p>\n  250  \n  251  <h3 class=\"function\"><a name=\"shutdown-2\">shutdown/2</a></h3>\n  252  <div class=\"spec\">\n  253: <p><tt>shutdown(TLS_Socket, Mode) -&gt; Socket_Desc</tt>\n  254: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mode = unidirectional | bidirectional</tt></li><li><tt>Socket_Desc = {Mod, Socket}</tt></li></ul></p>\n  255  </div><p><p>Shutdown the TLS session.</p>\n  256   \n  ...\n  258  \"close notify\".</p>\n  259   \n  260:   The underlying socket is NOT closed.</p>\n  261  \n  262  <h3 class=\"function\"><a name=\"shutdown-3\">shutdown/3</a></h3>\n  263  <div class=\"spec\">\n  264: <p><tt>shutdown(Tls_socket::TLS_Socket, Mode, Timeout) -&gt; Socket_Desc</tt>\n  265: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mode = unidirectional | bidirectional</tt></li><li><tt>Timeout = infinity | integer()</tt></li><li><tt>Socket_Desc = {Mod, Socket}</tt></li></ul></p>\n  266  </div><p><p>Shutdown the TLS session.</p>\n  267   \n  ...\n  269    <code>Timeout</code> milliseconds.</p>\n  270   \n  271:   <p>If the peer doesn't send its \"close notify\" or if the underlying socket  \n  272  is closed, the function still succeeds.</p>\n  273   \n  274:   The underlying socket is NOT closed by this function.</p>\n  275  \n  276  <h3 class=\"function\"><a name=\"sockname-1\">sockname/1</a></h3>\n  277  <div class=\"spec\">\n  278: <p><tt>sockname(Tls_socket::TLS_Socket) -&gt; {ok, {Address, Port}} | {error, <a href=\"#type-posix\">posix()</a>}</tt>\n  279: <ul class=\"definitions\"><li><tt>TLS_Socket = <a href=\"#type-tls_socket\">tls_socket()</a></tt></li><li><tt>Mod = atom()</tt></li><li><tt>Socket = term()</tt></li><li><tt>Address = <a href=\"#type-ip_address\">ip_address()</a></tt></li><li><tt>Port = integer()</tt></li></ul></p>\n  280: </div><p>Returns the local address and port number for a socket.</p>\n  281  <hr>\n  282  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/doc/html/modules-frame.html:\n    8  <h2 class=\"indextitle\">Modules</h2>\n    9  <table width=\"100%\" border=\"0\" summary=\"list of modules\">\n   10: <tr><td><a href=\"ejabberd_socket.html\" target=\"overviewFrame\" class=\"module\">ejabberd_socket</a></td></tr>\n   11  <tr><td><a href=\"exmpp.html\" target=\"overviewFrame\" class=\"module\">exmpp</a></td></tr>\n   12  <tr><td><a href=\"exmpp_bosh.html\" target=\"overviewFrame\" class=\"module\">exmpp_bosh</a></td></tr>\n   ..\n   45  <tr><td><a href=\"exmpp_server_tls.html\" target=\"overviewFrame\" class=\"module\">exmpp_server_tls</a></td></tr>\n   46  <tr><td><a href=\"exmpp_session.html\" target=\"overviewFrame\" class=\"module\">exmpp_session</a></td></tr>\n   47: <tr><td><a href=\"exmpp_socket.html\" target=\"overviewFrame\" class=\"module\">exmpp_socket</a></td></tr>\n   48  <tr><td><a href=\"exmpp_stanza.html\" target=\"overviewFrame\" class=\"module\">exmpp_stanza</a></td></tr>\n   49  <tr><td><a href=\"exmpp_stream.html\" target=\"overviewFrame\" class=\"module\">exmpp_stream</a></td></tr>\n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/doc/html/tls.html:\n   63  <h3 class=\"function\"><a name=\"recv-2\">recv/2</a></h3>\n   64  <div class=\"spec\">\n   65: <p><tt>recv(Socket, Length) -&gt; any()</tt></p>\n   66  </div>\n   67  \n   ..\n  103  <h3 class=\"function\"><a name=\"tcp_to_tls-2\">tcp_to_tls/2</a></h3>\n  104  <div class=\"spec\">\n  105: <p><tt>tcp_to_tls(TCPSocket, Options) -&gt; any()</tt></p>\n  106  </div>\n  107  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/include/exmpp_nss.hrl:\n   54  -define(NS_E2E_b,                    <<\"urn:ietf:params:xml:ns:xmpp-e2e\">>).\n   55  \n   56: % Defined by XEP-0003: Proxy Accept Socket Service (PASS).\n   57  -define(NS_PASS,                     'jabber:iq:pass').\n   58  -define(NS_PASS_s,                   \"jabber:iq:pass\").\n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/compat/ejabberd_socket.erl:\n    1  %%%----------------------------------------------------------------------\n    2: %%% File    : ejabberd_socket.erl\n    3  %%% Author  : Alexey Shchepin <alexey@process-one.net>\n    4: %%% Purpose : Socket with zlib and TLS support library\n    5  %%% Created : 23 Aug 2006 by Alexey Shchepin <alexey@process-one.net>\n    6  %%%\n    .\n   28  %% This <strong>{@module}</strong> module is for compatibility with ejabberd.\n   29  \n   30: -module(ejabberd_socket).\n   31  -author('alexey@process-one.net').\n   32  \n   ..\n   48  	 sockname/1, peername/1]).\n   49  \n   50: -record(socket_state, {sockmod, socket, receiver}).\n   51  \n   52  %%====================================================================\n   ..\n   57  %% Description:\n   58  %%--------------------------------------------------------------------\n   59: start(Module, SockMod, Socket, Opts) ->\n   60:     case Module:socket_type() of\n   61  	xml_stream ->\n   62  	    MaxStanzaSize =\n   ..\n   65  		    _ -> infinity\n   66  		end,\n   67: 	    Receiver = ejabberd_receiver:start(Socket, SockMod, none,\n   68  					       MaxStanzaSize),\n   69: 	    SocketData = #socket_state{sockmod = SockMod,\n   70: 				       socket = Socket,\n   71  				       receiver = Receiver},\n   72: 	    case Module:start({?MODULE, SocketData}, Opts) of\n   73  		{ok, Pid} ->\n   74: 		    case SockMod:controlling_process(Socket, Receiver) of\n   75  			ok ->\n   76  			    ok;\n   77  			{error, _Reason} ->\n   78: 			    SockMod:close(Socket)\n   79  		    end,\n   80  		    ejabberd_receiver:become_controller(Receiver, Pid);\n   81  		{error, _Reason} ->\n   82: 		    SockMod:close(Socket)\n   83  	    end;\n   84  	raw ->\n   85: 	    case Module:start({SockMod, Socket}, Opts) of\n   86  		{ok, Pid} ->\n   87: 		    case SockMod:controlling_process(Socket, Pid) of\n   88  			ok ->\n   89  			    ok;\n   90  			{error, _Reason} ->\n   91: 			    SockMod:close(Socket)\n   92  		    end;\n   93  		{error, _Reason} ->\n   94: 		    SockMod:close(Socket)\n   95  	    end\n   96      end.\n   ..\n   98  connect(Addr, Port, Opts) ->\n   99      case gen_tcp:connect(Addr, Port, Opts) of\n  100: 	{ok, Socket} ->\n  101: 	    Receiver = ejabberd_receiver:start(Socket, gen_tcp, none),\n  102: 	    SocketData = #socket_state{sockmod = gen_tcp,\n  103: 				       socket = Socket,\n  104  				       receiver = Receiver},\n  105  	    Pid = self(),\n  106: 	    case gen_tcp:controlling_process(Socket, Receiver) of\n  107  		ok ->\n  108  		    ejabberd_receiver:become_controller(Receiver, Pid),\n  109: 		    {ok, SocketData};\n  110  		{error, _Reason} = Error ->\n  111: 		    gen_tcp:close(Socket),\n  112  		    Error\n  113  	    end;\n  ...\n  116      end.\n  117  \n  118: starttls(SocketData, TLSOpts) ->\n  119:     {ok, TLSSocket} = tls:tcp_to_tls(SocketData#socket_state.socket, TLSOpts),\n  120:     ejabberd_receiver:starttls(SocketData#socket_state.receiver, TLSSocket),\n  121:     SocketData#socket_state{socket = TLSSocket, sockmod = tls}.\n  122  \n  123: starttls(SocketData, TLSOpts, Data) ->\n  124:     send(SocketData, Data),\n  125:     starttls(SocketData, TLSOpts).\n  126  \n  127: compress(SocketData) ->\n  128:     {ok, ZlibSocket} = ejabberd_zlib:enable_zlib(\n  129: 			 SocketData#socket_state.sockmod,\n  130: 			 SocketData#socket_state.socket),\n  131:     ejabberd_receiver:compress(SocketData#socket_state.receiver, ZlibSocket),\n  132:     SocketData#socket_state{socket = ZlibSocket, sockmod = ejabberd_zlib}.\n  133  \n  134: compress(SocketData, Data) ->\n  135:     {ok, ZlibSocket} = ejabberd_zlib:enable_zlib(\n  136: 			 SocketData#socket_state.sockmod,\n  137: 			 SocketData#socket_state.socket),\n  138:     ejabberd_receiver:compress(SocketData#socket_state.receiver, ZlibSocket),\n  139:     send(SocketData, Data),\n  140:     SocketData#socket_state{socket = ZlibSocket, sockmod = ejabberd_zlib}.\n  141  \n  142: reset_stream(SocketData) ->\n  143:     ejabberd_receiver:reset_stream(SocketData#socket_state.receiver).\n  144  \n  145: send(SocketData, Data) ->\n  146:     catch (SocketData#socket_state.sockmod):send(\n  147: 	    SocketData#socket_state.socket, Data).\n  148  \n  149: change_shaper(SocketData, Shaper) ->\n  150:     ejabberd_receiver:change_shaper(SocketData#socket_state.receiver, Shaper).\n  151  \n  152: monitor(SocketData) ->\n  153:     erlang:monitor(process, SocketData#socket_state.receiver).\n  154  \n  155: get_sockmod(SocketData) ->\n  156:     SocketData#socket_state.sockmod.\n  157  \n  158: get_peer_certificate(SocketData) ->\n  159:     tls:get_peer_certificate(SocketData#socket_state.socket).\n  160  \n  161: get_verify_result(SocketData) ->\n  162:     tls:get_verify_result(SocketData#socket_state.socket).\n  163  \n  164: close(SocketData) ->\n  165:     ejabberd_receiver:close(SocketData#socket_state.receiver).\n  166  \n  167: sockname(#socket_state{sockmod = SockMod, socket = Socket}) ->\n  168      case SockMod of\n  169  	gen_tcp ->\n  170: 	    inet:sockname(Socket);\n  171  	_ ->\n  172: 	    SockMod:sockname(Socket)\n  173      end.\n  174  \n  175: peername(#socket_state{sockmod = SockMod, socket = Socket}) ->\n  176      case SockMod of\n  177  	gen_tcp ->\n  178: 	    inet:peername(Socket);\n  179  	_ ->\n  180: 	    SockMod:peername(Socket)\n  181      end.\n  182  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/compat/tls.erl:\n   58  \n   59  \n   60: tcp_to_tls(TCPSocket, Options) ->\n   61      case lists:keysearch(certfile, 1, Options) of\n   62  	{value, {certfile, CertFile}} ->\n   63: 	    Socket_Desc = {gen_tcp, TCPSocket},\n   64  	    Command = case lists:member(connect, Options) of\n   65  			  true ->\n   ..\n   69  		      end,\n   70  	    try\n   71: 		TLSSock = exmpp_tls:Command(Socket_Desc,\n   72  					    {x509, CertFile, CertFile},\n   73  					    false, []),\n   ..\n   82  \n   83  tls_to_tcp(TLSSock) ->\n   84:     {gen_tcp, TCPSocket} = exmpp_tls:quiet_shutdown(TLSSock),\n   85:     TCPSocket.\n   86  \n   87: recv(Socket, Length) ->\n   88:     recv(Socket, Length, infinity).\n   89  recv(TLSSock, _Length, Timeout) ->\n   90      exmpp_tls:recv(TLSSock, Timeout).\n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/core/exmpp_compress.erl:\n   46  	]).\n   47  \n   48: %% Common socket API.\n   49  -export([\n   50  	 send/2,\n   ..\n   82  			 }).\n   83  \n   84: -record(compress_socket, {socket,\n   85  			  packet_mode = binary,\n   86  			  port\n   ..\n  237  %% --------------------------------------------------------------------\n  238  \n  239: %% @spec (Socket_Desc, Options) -> Compress_Socket\n  240: %%     Socket_Desc = {Mod, Socket}\n  241  %%     Mod = atom()\n  242: %%     Socket = term()\n  243  %%     Options = [Option]\n  244  %%     Option = {compress_method, Method} | {engine, Engine} | {mode, Mode} | {compress_level, Level}\n  ...\n  247  %%     Mode = binary | list\n  248  %%     Level = integer()\n  249: %%     Compress_Socket = compress_socket()\n  250: %% @doc Enable compression over the given socket.\n  251  \n  252: enable_compression(Socket_Desc, Options) ->\n  253      %% Start a port driver instance.\n  254      Driver_Name = get_engine_from_options(Options),\n  ...\n  275          engine_prepare_compress(Port),\n  276          engine_prepare_uncompress(Port),\n  277:         #compress_socket{socket = Socket_Desc,\n  278  			 packet_mode = Packet_Mode,\n  279  			 port = Port}\n  ...\n  284      end.\n  285  \n  286: %% @spec (Compress_Socket) -> Socket_Desc\n  287: %%     Compress_Socket = compress_socket()\n  288: %%     Socket_Desc = {Mod, Socket}\n  289  %%     Mod = atom()\n  290: %%     Socket = term()\n  291: %% @doc Disable compression and return the underlying socket.\n  292  \n  293: disable_compression(#compress_socket{socket = Socket_Desc, port = Port}) ->\n  294      exmpp_internals:close_port(Port),\n  295:     Socket_Desc.\n  296  \n  297  %% --------------------------------------------------------------------\n  ...\n  330  \n  331  %% --------------------------------------------------------------------\n  332: %% Common socket API.\n  333  %% --------------------------------------------------------------------\n  334  \n  335: %% @spec (Compress_Socket, Orig_Packet) -> ok | {error, Reason}\n  336: %%     Compress_Socket = compress_socket()\n  337  %%     Orig_Packet = binary() | list()\n  338  %%     Reason = term()\n  339  %% @doc Send `Orig_Packet' over a compressed connection.\n  340  \n  341: send(#compress_socket{socket = Socket_Desc, port = Port}, Packet) ->\n  342      try\n  343          Compressed = engine_compress(Port, Packet),\n  344:         exmpp_internals:gen_send(Socket_Desc, Compressed)\n  345      catch\n  346          Exception ->\n  ...\n  348      end.\n  349  \n  350: %% @spec (Compress_Socket, Orig_Data) -> {ok, CompressedData} | {error, Reason}\n  351: %%     Compress_Socket = compress_socket()\n  352  %%     Orig_Data = binary() | list()\n  353  %%     Reason = term()\n  354  %% @doc Compress `Orig_Data' before sending over compressed connection.\n  355  \n  356: send_data(#compress_socket{port = Port}, Data) ->\n  357      try\n  358          Compressed = engine_compress(Port, Data),\n  ...\n  363      end.\n  364  \n  365: %% @spec (Compress_Socket) -> {ok, Orig_Packet} | {error, Reason}\n  366: %%     Compress_Socket = compress_socket()\n  367  %%     Orig_Packet = binary() | list()\n  368  %%     Reason = term()\n  369  %% @doc Receive data over a compressed connection.\n  370  \n  371: recv(Compress_Socket) ->\n  372:     recv(Compress_Socket, infinity).\n  373  \n  374: %% @spec (Compress_Socket, Timeout) -> {ok, Orig_Packet} | {error, Reason}\n  375: %%     Compress_Socket = compress_socket()\n  376  %%     Timeout = integer()\n  377  %%     Orig_Packet = binary() | list()\n  ...\n  379  %% @doc Receive data over a compressed connection.\n  380  \n  381: recv(#compress_socket{socket = Socket_Desc} = Compress_Socket, Timeout) ->\n  382      try\n  383:         case exmpp_internals:gen_recv(Socket_Desc, Timeout) of\n  384              {ok, Packet} ->\n  385:                 recv_data(Compress_Socket, Packet);\n  386              {error, Reason} ->\n  387                  {error, Reason}\n  ...\n  392      end.\n  393  \n  394: %% @spec (Compress_Socket, Packet) -> {ok, Orig_Packet} | {error, Reason}\n  395: %%     Compress_Socket = compress_socket()\n  396  %%     Packet = binary() | list()\n  397  %%     Orig_Packet = binary() | list()\n  ...\n  399  %% @doc Uncompress already received data.\n  400  \n  401: recv_data(#compress_socket{port = Port, packet_mode = Packet_Mode}, Packet) ->\n  402      try\n  403          Uncompressed = engine_uncompress(Port, Packet),\n  ...\n  411      end.\n  412  \n  413: %% @spec (Compress_Socket, Options) -> {ok, Option_Values} | {error, posix()}\n  414: %%     Compress_Socket = tls_socket()\n  415  %%     Mod = atom()\n  416: %%     Socket = term()\n  417  %%     Options = list()\n  418  %%     Option_Values = list()\n  419: %% @doc Sets one or more options for a socket.\n  420  \n  421: getopts(#compress_socket{socket = Socket_Desc}, Options) ->\n  422:     exmpp_internals:gen_getopts(Socket_Desc, Options).\n  423  \n  424: %% @spec (Compress_Socket, Options) -> ok | {error, posix()}\n  425: %%     Compress_Socket = tls_socket()\n  426  %%     Mod = atom()\n  427: %%     Socket = term()\n  428  %%     Options = list()\n  429: %% @doc Sets one or more options for a socket.\n  430  \n  431: setopts(#compress_socket{socket = Socket_Desc}, Options) ->\n  432:     exmpp_internals:gen_setopts(Socket_Desc, Options).\n  433  \n  434: %% @spec (Compress_Socket) -> {ok, {Address, Port}} | {error, posix()}\n  435: %%     Compress_Socket = tls_socket()\n  436  %%     Mod = atom()\n  437: %%     Socket = term()\n  438  %%     Address = ip_address()\n  439  %%     Port = integer()\n  440  %% @doc Returns the address and port for the other end of a connection.\n  441  \n  442: peername(#compress_socket{socket = Socket_Desc}) ->\n  443:     exmpp_internals:gen_peername(Socket_Desc).\n  444  \n  445: %% @spec (Compress_Socket) -> {ok, {Address, Port}} | {error, posix()}\n  446: %%     Compress_Socket = tls_socket()\n  447  %%     Mod = atom()\n  448: %%     Socket = term()\n  449  %%     Address = ip_address()\n  450  %%     Port = integer()\n  451: %% @doc Returns the local address and port number for a socket.\n  452  \n  453: sockname(#compress_socket{socket = Socket_Desc}) ->\n  454:     exmpp_internals:gen_sockname(Socket_Desc).\n  455  \n  456: %% @spec (Compress_Socket, Pid) -> ok | {error, Reason}\n  457: %%     Compress_Socket = compress_socket()\n  458  %%     Pid = pid()\n  459  %%     Reason = term()\n  460: %% @doc Change the controlling socket of the underlying socket.\n  461  \n  462: controlling_process(#compress_socket{socket = Socket_Desc}, Pid) ->\n  463:     exmpp_internals:gen_controlling_process(Socket_Desc, Pid).\n  464  \n  465: %% @spec (Compress_Socket) -> ok | {error, Reason}\n  466: %%     Compress_Socket = compress_socket()\n  467  %%     Reason = term()\n  468: %% @doc Turn off compression and close the underlying socket.\n  469  \n  470: close(#compress_socket{socket = Socket_Desc} = Compress_Socket) ->\n  471      %% First, turn off compression.\n  472:     disable_compression(Compress_Socket),\n  473:     %% Close the underlying socket.\n  474:     exmpp_internals:gen_close(Socket_Desc).\n  475  \n  476  %% @hidden\n  477  \n  478: port_revision(#compress_socket{port = Port}) ->\n  479      engine_svn_revision(Port).\n  480  \n  ...\n  664  %% --------------------------------------------------------------------\n  665  \n  666: %% @type compress_socket().\n  667: %% Compression socket obtained with {@link compress/2}.\n  668  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/core/exmpp_internals.erl:\n   30  	]).\n   31  \n   32: %% Generic socket handling.\n   33  -export([\n   34  	 gen_recv/2,\n   ..\n  157  \n  158  %% --------------------------------------------------------------------\n  159: %% Generic socket handling.\n  160  %% --------------------------------------------------------------------\n  161  \n  162: %% @spec (Socket_Desc, Timeout) -> {ok, Packet} | {error, Reason}\n  163: %%     Socket_Desc = {Mod, Socket}\n  164  %%     Mod = atom()\n  165: %%     Socket = term()\n  166  %%     Timeout = integer() | infinity\n  167  %%     Packet = [char()] | binary()\n  ...\n  173        ({atom(), any()}, integer() | infinity) -> {ok, binary()} | {error, any()}).\n  174  \n  175: gen_recv({gen_tcp, Socket}, Timeout) ->\n  176:     gen_tcp:recv(Socket, 0, Timeout);\n  177: gen_recv({Mod, Socket}, Timeout) ->\n  178:     Mod:recv(Socket, Timeout).\n  179  \n  180: %% @spec (Socket_Desc, Packet) -> ok | {error, Reason}\n  181: %%     Socket_Desc = {Mod, Socket}\n  182  %%     Mod = atom()\n  183: %%     Socket = term()\n  184  %%     Packet = [char()] | binary()\n  185  %%     Reason = closed | posix()\n  ...\n  189  -spec(gen_send/2 :: ({atom(), any()}, binary()) -> ok | {error, any()}).\n  190  \n  191: gen_send({Mod, Socket}, Packet) ->\n  192:     Mod:send(Socket, Packet).\n  193  \n  194: %% @spec (Socket_Desc, Options) -> Option_Values | {error, posix()}\n  195: %%     Socket_Desc = {Mod, Socket}\n  196  %%     Mod = atom()\n  197: %%     Socket = term()\n  198  %%     Options = list()\n  199  %%     Option_Values = {ok,list()}\n  ...\n  203  -spec(gen_getopts/2 :: ({atom(), any()}, list()) -> list() | {error, any()}).\n  204  \n  205: gen_getopts({gen_tcp, Socket}, Options) ->\n  206:     inet:getopts(Socket, Options);\n  207: gen_getopts({Mod, Socket}, Options) ->\n  208:     Mod:getopts(Socket, Options).\n  209  \n  210: %% @spec (Socket_Desc, Options) -> ok | {error, posix()}\n  211: %%     Socket_Desc = {Mod, Socket}\n  212  %%     Mod = atom()\n  213: %%     Socket = term()\n  214  %%     Options = list()\n  215  %% @doc Wrapper to abstract the `setopts' function of multiple communication\n  ...\n  218  -spec(gen_setopts/2 :: ({atom(), any()}, list()) -> ok | {error, any()}).\n  219  \n  220: gen_setopts({gen_tcp, Socket}, Options) ->\n  221:     inet:setopts(Socket, Options);\n  222: gen_setopts({Mod, Socket}, Options) ->\n  223:     Mod:setopts(Socket, Options).\n  224  \n  225: %% @spec (Socket_Desc) -> {ok, {Address, Port}} | {error, posix()}\n  226: %%     Socket_Desc = {Mod, Socket}\n  227  %%     Mod = atom()\n  228: %%     Socket = term()\n  229  %%     Address = ip_address()\n  230  %%     Port = integer()\n  ...\n  234  -spec(gen_peername/1 :: ({atom(), any()}) -> {ok, any()} | {error, any()}).\n  235  \n  236: gen_peername({gen_tcp, Socket}) ->\n  237:     inet:peername(Socket);\n  238: gen_peername({Mod, Socket}) ->\n  239:     Mod:peername(Socket).\n  240  \n  241: %% @spec (Socket_Desc) -> {ok, {Address, Port}} | {error, posix()}\n  242: %%     Socket_Desc = {Mod, Socket}\n  243  %%     Mod = atom()\n  244: %%     Socket = term()\n  245  %%     Address = ip_address()\n  246  %%     Port = integer()\n  ...\n  250  -spec(gen_sockname/1 :: ({atom(), any()}) -> {ok, any()} | {error, any()}).\n  251  \n  252: gen_sockname({gen_tcp, Socket}) ->\n  253:     inet:sockname(Socket);\n  254: gen_sockname({Mod, Socket}) ->\n  255:     Mod:sockname(Socket).\n  256  \n  257: %% @spec (Socket_Desc, Pid) -> ok | {error, Reason}\n  258: %%     Socket_Desc = {Mod, Socket}\n  259  %%     Pid = pid()\n  260  %%     Mod = atom()\n  261: %%     Socket = term()\n  262  %%     Reason = close | not_owner | posix()\n  263  %% @doc Wrapper to abstract the `controlling_process' function of\n  ...\n  267        ({atom(), any()}, pid()) -> ok | {error, any()}).\n  268  \n  269: gen_controlling_process({Mod, Socket}, Pid) ->\n  270:     Mod:controlling_process(Socket, Pid).\n  271  \n  272: %% @spec (Socket_Desc) -> ok | {error, posix()}\n  273: %%     Socket_Desc = {Mod, Socket}\n  274  %%     Mod = atom()\n  275: %%     Socket = term()\n  276  %% @doc Wrapper to abstract the `close' function of multiple communication\n  277  %% modules.\n  ...\n  279  -spec(gen_close/1 :: ({atom(), any()}) -> ok | {error, any()}).\n  280  \n  281: gen_close({Mod, Socket}) ->\n  282:     Mod:close(Socket).\n  283  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/core/exmpp_tls.erl:\n   55  	]).\n   56  \n   57: %% Common socket API.\n   58  -export([\n   59  	 send/2,\n   ..\n   93  	 }).\n   94  \n   95: -record(tls_socket, {\n   96: 	  socket,\n   97  	  packet_mode = binary,\n   98  	  port\n   ..\n  270  %% --------------------------------------------------------------------\n  271  \n  272: %% @spec (Socket_Desc, Identity, Peer_Verification, Options) -> TLS_Socket\n  273: %%     Socket_Desc = {Mod, Socket}\n  274  %%     Mod = atom()\n  275: %%     Socket = term()\n  276  %%     Identity = {Auth_Method, Certificate, Private_Key} | undefined\n  277  %%     Auth_Method = atom()\n  ...\n  284  %%     Engine = atom()\n  285  %%     Mode = binary | list\n  286: %%     TLS_Socket = tls_socket()\n  287  %% @doc Start TLS handshake as a client.\n  288  \n  289: connect(Socket_Desc, Identity, Peer_Verification, Options) ->\n  290:     handshake(client, Socket_Desc, Identity, Peer_Verification, Options).\n  291  \n  292: %% @spec (Socket_Desc, Identity, Peer_Verification, Options) -> TLS_Socket\n  293: %%     Socket_Desc = {Mod, Socket}\n  294  %%     Mod = atom()\n  295: %%     Socket = term()\n  296  %%     Identity = {Auth_Method, Certificate, Private_Key}\n  297  %%     Auth_Method = atom()\n  ...\n  304  %%     Engine = atom()\n  305  %%     Mode = binary | list\n  306: %%     TLS_Socket = tls_socket()\n  307  %% @doc Start TLS handshake as a server.\n  308  \n  309: accept(Socket_Desc, Identity, Peer_Verification, Options) ->\n  310:     handshake(server, Socket_Desc, Identity, Peer_Verification, Options).\n  311  \n  312: handshake(Mode, Socket_Desc, Identity, Peer_Verification, Options) ->\n  313:     handshake(Mode, Socket_Desc, Identity, Peer_Verification, Options,\n  314  	      infinity).\n  315  \n  316: handshake(Mode, Socket_Desc, Identity, Peer_Verification, Options,\n  317  	  Recv_Timeout) ->\n  318      %% Check arguments.\n  ...\n  320      check_peer_verification(Peer_Verification, Mode),\n  321  \n  322:     %% We save the 'active' state of the socket.\n  323:     Is_Active = case exmpp_internals:gen_getopts(Socket_Desc, [active]) of\n  324  		    {ok, [{active, Active}]} ->\n  325  			    Active;\n  ...\n  362  			   proplists:get_bool(accept_corrupted_cert, Options)),\n  363  \n  364: 	%% Before anything use of the socket, we must disable the 'active'\n  365  	%% mode. Otherwise, we can't receive any data.\n  366:         exmpp_internals:gen_setopts(Socket_Desc, [{active, false}]),\n  367  \n  368  	%% Handshake!\n  369          engine_prepare_handshake(Port),\n  370:         TLS_Socket = handshake2(Mode, Socket_Desc, Port, Recv_Timeout),\n  371  \n  372  	%% We can now restore the 'active' mode.\n  373:         exmpp_internals:gen_setopts(Socket_Desc, [{active, Is_Active}]),\n  374  \n  375:         TLS_Socket#tls_socket{packet_mode = Packet_Mode}\n  376      catch\n  377          _:Exception ->\n  378              exmpp_internals:close_port(Port),\n  379:             exmpp_internals:gen_setopts(Socket_Desc, [{active, Is_Active}]),\n  380              throw(Exception)\n  381      end.\n  382  \n  383: handshake2(client = Mode, Socket_Desc, Port, Recv_Timeout) ->\n  384      %% Try to handshake.\n  385      case engine_handshake(Port) of\n  ...\n  387  	    %% Send the current data.\n  388              New_Packet = engine_get_encrypted_output(Port),\n  389:             case exmpp_internals:gen_send(Socket_Desc, New_Packet) of\n  390                  ok ->\n  391  		    %% Wait for a packet from the client.\n  392:                     case exmpp_internals:gen_recv(Socket_Desc, Recv_Timeout) of\n  393                          {ok, Packet} ->\n  394                              engine_set_encrypted_input(Port, Packet),\n  395  			    %% Recurse!\n  396:                             handshake2(Mode, Socket_Desc, Port, Recv_Timeout);\n  397                          {error, Reason} ->\n  398                              throw({tls, handshake, underlying_recv, Reason})\n  ...\n  403          ok ->\n  404  	    %% Handshake done.\n  405:             #tls_socket{socket = Socket_Desc, port = Port}\n  406      end;\n  407: handshake2(server = Mode, Socket_Desc, Port, Recv_Timeout) ->\n  408      %% Wait for a packet from the client.\n  409:     case exmpp_internals:gen_recv(Socket_Desc, Recv_Timeout) of\n  410          {ok, Packet} ->\n  411              engine_set_encrypted_input(Port, Packet),\n  ...\n  415  		    %% Send the current data.\n  416                      New_Packet = engine_get_encrypted_output(Port),\n  417:                     case exmpp_internals:gen_send(Socket_Desc, New_Packet) of\n  418                          ok ->\n  419  			    %% Recurse!\n  420:                             handshake2(Mode, Socket_Desc, Port, Recv_Timeout);\n  421                          {error, Reason} ->\n  422                              throw({tls, handshake, underlying_send, Reason})\n  ...\n  424                  ok ->\n  425                      New_Packet = engine_get_encrypted_output(Port),\n  426:                     case exmpp_internals:gen_send(Socket_Desc, New_Packet) of\n  427                          ok ->\n  428  			    %% Handshake done.\n  429:                             #tls_socket{socket = Socket_Desc, port = Port};\n  430                          {error, Reason} ->\n  431                              throw({tls, handshake, underlying_send, Reason})\n  ...\n  436      end.\n  437  \n  438: %% @spec (TLS_Socket) -> Certificate | undefined\n  439: %%     TLS_Socket = tls_socket()\n  440  %%     Certificate = certificate()\n  441  %%     Reason = term()\n  ...\n  451  %% public_key certificate record</a>.\n  452  \n  453: get_peer_certificate(#tls_socket{port = Port}) ->\n  454      case engine_get_peer_certificate(Port) of\n  455          undefined ->\n  ...\n  475      end.\n  476  \n  477: %% @spec (TLS_Socket) -> Result\n  478: %%     TLS_Socket = tls_socket()\n  479  %%     Result = integer()\n  480  %% @doc Return verify result.\n  481  \n  482: get_verify_result(#tls_socket{port = Port}) ->\n  483      engine_get_verify_result(Port).\n  484  \n  485: %% @spec (TLS_Socket) -> Socket_Desc\n  486: %%     TLS_Socket = tls_socket()\n  487: %%     Socket_Desc = {Mod, Socket}\n  488  %% @doc Shutdown the TLS session.\n  489  %%\n  490  %% Only a unidirectional shutdown is made.\n  491  %%\n  492: %% The underlying socket is NOT closed.\n  493  \n  494: shutdown(TLS_Socket) ->\n  495:     shutdown(TLS_Socket, unidirectional).\n  496  \n  497: %% @spec (TLS_Socket, Mode) -> Socket_Desc\n  498: %%     TLS_Socket = tls_socket()\n  499  %%     Mode = unidirectional | bidirectional\n  500: %%     Socket_Desc = {Mod, Socket}\n  501  %% @doc Shutdown the TLS session.\n  502  %%\n  ...\n  504  %% \"close notify\".\n  505  %%\n  506: %% The underlying socket is NOT closed.\n  507  \n  508: shutdown(TLS_Socket, Mode) ->\n  509:     shutdown(TLS_Socket, Mode, infinity).\n  510  \n  511: %% @spec (TLS_Socket, Mode, Timeout) -> Socket_Desc\n  512: %%     TLS_Socket = tls_socket()\n  513  %%     Mode = unidirectional | bidirectional\n  514  %%     Timeout = infinity | integer()\n  515: %%     Socket_Desc = {Mod, Socket}\n  516  %% @doc Shutdown the TLS session.\n  517  %%\n  ...\n  519  %% `Timeout' milliseconds.\n  520  %%\n  521: %% If the peer doesn't send its \"close notify\" or if the underlying socket\n  522  %% is closed, the function still succeeds.\n  523  %%\n  524: %% The underlying socket is NOT closed by this function.\n  525  \n  526: shutdown(#tls_socket{socket = Socket_Desc, port = Port} = TLS_Socket,\n  527  	 Mode, Timeout) ->\n  528      %% Start/continue the shutdown process.\n  ...\n  530          want_read when Mode == bidirectional ->\n  531  	    %% Wait for a packet from the client.\n  532:             case exmpp_internals:gen_recv(Socket_Desc, Timeout) of\n  533                  {ok, Packet} ->\n  534                      engine_set_encrypted_input(Port, Packet),\n  535  		    %% Recurse!\n  536:                     shutdown(TLS_Socket);\n  537                  {error, timeout} ->\n  538  		    %% The peer didn't send its \"close notify\".\n  ...\n  540  		    %% asked for a bidirectional shutdown)?\n  541                      exmpp_internals:close_port(Port),\n  542:                     Socket_Desc;\n  543                  {error, closed} ->\n  544: 		    %% The peer closed the underlying socket.\n  545  		    %% XXX Should this be treated as an error (the purpose\n  546: 		    %% was not to close the socket)?\n  547                      exmpp_internals:close_port(Port),\n  548:                     Socket_Desc;\n  549                  {error, Reason} ->\n  550                      throw({tls, shutdown, underlying_recv, Reason})\n  ...\n  553  	    %% The \"close notify\" is ready to be sent.\n  554              New_Packet = engine_get_encrypted_output(Port),\n  555:             case exmpp_internals:gen_send(Socket_Desc, New_Packet) of\n  556                  ok ->\n  557  		    %% Skip to the next step.\n  558:                     shutdown(TLS_Socket);\n  559                  {error, Reason} ->\n  560                      throw({tls, shutdown, underlying_send, Reason})\n  ...\n  564  	    %% prefered).\n  565              exmpp_internals:close_port(Port),\n  566:             Socket_Desc\n  567      end.\n  568  \n  569: %% @spec (TLS_Socket) -> Socket_Desc\n  570: %%     TLS_Socket = tls_socket()\n  571: %%     Socket_Desc = {Mod, Socket}\n  572  %% @doc Flag the TLS session as down but do not exchange \"close notify\".\n  573  %%\n  574: %% The underlying socket is NOT closed.\n  575  \n  576: quiet_shutdown(#tls_socket{socket = Socket_Desc, port = Port}) ->\n  577      engine_quiet_shutdown(Port),\n  578      exmpp_internals:close_port(Port),\n  579:     Socket_Desc.\n  580  \n  581: %% @spec (TLS_Socket) -> Finished\n  582: %%     TLS_Socket = tls_socket()\n  583  %%     Finished = binary()\n  584  %% @doc Retrieve latest \"Finished\" message (received on this side).\n  ...\n  587  %% used for example by SCRAM-SHA-1-PLUS SASL method.\n  588  \n  589: get_peer_finished(#tls_socket{port = Port}) ->\n  590      engine_get_peer_finished(Port).\n  591  \n  592: %% @spec (TLS_Socket) -> Finished\n  593: %%     TLS_Socket = tls_socket()\n  594  %%     Finished = binary()\n  595  %% @doc Retrieve latest \"Finished\" message (sent out from this side).\n  ...\n  598  %% used for example by SCRAM-SHA-1-PLUS SASL method.\n  599  \n  600: get_finished(#tls_socket{port = Port}) ->\n  601      engine_get_finished(Port).\n  602  \n  ...\n  681  \n  682  %% --------------------------------------------------------------------\n  683: %% Common socket API.\n  684  %% --------------------------------------------------------------------\n  685  \n  686: %% @spec (TLS_Socket, Orig_Packet) -> ok | {error, Reason}\n  687: %%     TLS_Socket = tls_socket()\n  688  %%     Orig_Packet = binary() | list()\n  689  %%     Reason = term()\n  690  %% @doc Send `Orig_Packet' over a TLS-protected connection.\n  691  \n  692: send(#tls_socket{socket = Socket_Desc} = Socket, Packet) ->\n  693      try\n  694:         {ok, Encrypted} = send_data(Socket, Packet),\n  695:         exmpp_internals:gen_send(Socket_Desc, Encrypted)\n  696      catch\n  697          Exception ->\n  ...\n  699      end.\n  700  \n  701: send_data(#tls_socket{port = Port}, Packet) ->\n  702          engine_set_decrypted_output(Port, Packet),\n  703          {ok, engine_get_encrypted_output(Port)}.\n  704  \n  705: %% @spec (TLS_Socket) -> {ok, Orig_Packet} | {error, Reason}\n  706: %%     TLS_Socket = tls_socket()\n  707  %%     Orig_Packet = binary() | list()\n  708  %%     Reason = term()\n  709  %% @doc Receive data over a TLS-protected connection.\n  710  \n  711: recv(TLS_Socket) ->\n  712:     recv(TLS_Socket, infinity).\n  713  \n  714: %% @spec (TLS_Socket, Timeout) -> {ok, Orig_Packet} | {error, Reason}\n  715: %%     TLS_Socket = tls_socket()\n  716  %%     Timeout = integer()\n  717  %%     Orig_Packet = binary() | list()\n  ...\n  719  %% @doc Receive data over a TLS-protected connection.\n  720  \n  721: recv(#tls_socket{socket = Socket_Desc, port = Port} = TLS_Socket, Timeout) ->\n  722      try\n  723:         case recv_common(TLS_Socket) of\n  724              want_read ->\n  725  		%% Ok, we need more data.\n  ...\n  728  			infinity ->\n  729  			    {\n  730: 			  exmpp_internals:gen_recv(Socket_Desc, Timeout),\n  731  			  Timeout\n  732  			 };\n  733  			_ ->\n  734  			    {Elapsed, Ret} = timer:tc(exmpp_internals, gen_recv,\n  735: 						      [Socket_Desc, Timeout]),\n  736  			    {Ret, Timeout - Elapsed div 1000}\n  737  		    end,\n  ...\n  740                          engine_set_encrypted_input(Port, Packet),\n  741  			%% Try to decipher it.\n  742:                         recv(TLS_Socket, New_Timeout);\n  743                      {error, Reason} ->\n  744                          {error, Reason}\n  ...\n  753      end.\n  754  \n  755: %% @spec (TLS_Socket, Packet) -> {ok, Orig_Packet} | {error, Reason}\n  756: %%     TLS_Socket = tls_socket()\n  757  %%     Packet = binary() | list()\n  758  %%     Orig_Packet = binary() | list()\n  ...\n  760  %% @doc Decrypt already received data.\n  761  %%\n  762: %% This function won't read anything from the underlying socket but WILL\n  763  %% write to it.\n  764  \n  765: recv_data(#tls_socket{port = Port} = TLS_Socket,\n  766  	  Packet) ->\n  767      try\n  ...\n  769          engine_set_encrypted_input(Port, Packet),\n  770  	%% Ask for available unencrypted data.\n  771:         case recv_all(TLS_Socket) of\n  772              {error, Reason} ->\n  773                  {error, Reason};\n  ...\n  780      end.\n  781  \n  782: recv_all(TLS_Socket) ->\n  783:     recv_all(TLS_Socket, <<>>, recv_common(TLS_Socket)).\n  784  \n  785: recv_all(_TLS_Socket, _Accum, {error, Reason}) ->\n  786      {error, Reason};\n  787  %%couldn't be want_write also?, in the c driver it says no because it is a BIO_mem\n  788: recv_all(#tls_socket{packet_mode = PacketMode}, Accum, want_read) -> \n  789      case PacketMode of\n  790          list -> binary_to_list(Accum);\n  791          binary -> Accum\n  792      end;\n  793: recv_all(TLS_Socket, Accum, Data) when is_binary(Data) ->\n  794:     recv_all(TLS_Socket, <<Accum/binary, Data/binary>>, recv_common(TLS_Socket)).\n  795  \n  796  \n  797: recv_common(#tls_socket{socket = Socket_Desc, port = Port}) ->\n  798      %% Ask for available unencrypted data.\n  799      case engine_get_decrypted_input(Port) of\n  ...\n  804  	    %% Got a chunk of plain-text data.\n  805              Ack = engine_get_encrypted_output(Port),\n  806:             case exmpp_internals:gen_send(Socket_Desc, Ack) of\n  807                  ok ->\n  808                      Data;\n  ...\n  812      end.\n  813  \n  814: %% @spec (TLS_Socket, Options) -> {ok, Option_Values} | {error, posix()}\n  815: %%     TLS_Socket = tls_socket()\n  816  %%     Mod = atom()\n  817: %%     Socket = term()\n  818  %%     Options = list()\n  819  %%     Option_Values = list()\n  820: %% @doc Gets one or more options for a socket.\n  821  \n  822: getopts(#tls_socket{socket = Socket_Desc}, Options) ->\n  823:     exmpp_internals:gen_getopts(Socket_Desc, Options).\n  824  \n  825: %% @spec (TLS_Socket, Options) -> ok | {error, posix()}\n  826: %%     TLS_Socket = tls_socket()\n  827  %%     Mod = atom()\n  828: %%     Socket = term()\n  829  %%     Options = list()\n  830: %% @doc Sets one or more options for a socket.\n  831  \n  832: setopts(#tls_socket{socket = Socket_Desc}, Options) ->\n  833:     exmpp_internals:gen_setopts(Socket_Desc, Options).\n  834  \n  835: %% @spec (TLS_Socket) -> {ok, {Address, Port}} | {error, posix()}\n  836: %%     TLS_Socket = tls_socket()\n  837  %%     Mod = atom()\n  838: %%     Socket = term()\n  839  %%     Address = ip_address()\n  840  %%     Port = integer()\n  841  %% @doc Returns the address and port for the other end of a connection.\n  842  \n  843: peername(#tls_socket{socket = Socket_Desc}) ->\n  844:     exmpp_internals:gen_peername(Socket_Desc).\n  845  \n  846: %% @spec (TLS_Socket) -> {ok, {Address, Port}} | {error, posix()}\n  847: %%     TLS_Socket = tls_socket()\n  848  %%     Mod = atom()\n  849: %%     Socket = term()\n  850  %%     Address = ip_address()\n  851  %%     Port = integer()\n  852: %% @doc Returns the local address and port number for a socket.\n  853  \n  854: sockname(#tls_socket{socket = Socket_Desc}) ->\n  855:     exmpp_internals:gen_sockname(Socket_Desc).\n  856  \n  857: %% @spec (TLS_Socket, Pid) -> ok | {error, Reason}\n  858: %%     TLS_Socket = tls_socket()\n  859  %%     Pid = pid()\n  860  %%     Reason = term()\n  861: %% @doc Change the controlling socket of the underlying socket.\n  862  \n  863: controlling_process(#tls_socket{socket = Socket_Desc}, Pid) ->\n  864:     exmpp_internals:gen_controlling_process(Socket_Desc, Pid).\n  865  \n  866: %% @spec (TLS_Socket) -> ok | {error, Reason}\n  867: %%     TLS_Socket = tls_socket()\n  868  %%     Reason = term()\n  869: %% @doc Shutdown the TLS session and close the underlying socket.\n  870  \n  871: close(#tls_socket{socket = Socket_Desc} = TLS_Socket) ->\n  872      try\n  873  	%% First, shutdown the TLS session (unidirectional).\n  874:         shutdown(TLS_Socket),\n  875: 	%% Close the underlying socket.\n  876:         exmpp_internals:gen_close(Socket_Desc)\n  877      catch\n  878          Exception ->\n  ...\n  882  %% @hidden\n  883  \n  884: port_revision(#tls_socket{port = Port}) ->\n  885      engine_port_revision(Port).\n  886  \n  ...\n 1173  %% --------------------------------------------------------------------\n 1174  \n 1175: %% @type tls_socket().\n 1176: %% TLS socket obtained with {@link connect/4} or {@link accept/4}.\n 1177  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/network/exmpp_bosh.erl:\n   57          queue, %% stanzas that have been queued because we reach the limit of requets\n   58          new = true,                                                                                 \n   59:         open, % [{Rid, Socket}]                                                                     \n   60:         free,  %[socket()] free keep-alive connections                                              \n   61:         local_ip,  %ip to bind sockets to                                                           \n   62          local_port                                                                                  \n   63          }).                                                                                  \n   ..\n  124             parsed_bosh_url = {Host, _Port, Path ,_},                          \n  125             domain = Domain} =  State,                                         \n  126:     {NewState, Socket} = new_socket(State, once),                             \n  127:     ok = make_raw_request(Socket, Host, Path, restart_stream_msg(Sid, Rid, Domain)),\n  128          StreamStart =                                                               \n  129                  [\"<?xml version='1.0'?><stream:stream xmlns='jabber:client'\"        \n  ...\n  134      {reply, ok, NewState#state{new = false,                                         \n  135                              rid = Rid +1,                                           \n  136:                             open = [{Socket, Rid}|State#state.open],                \n  137                              stream_ref = NewStreamRef2}, hibernate};                \n  138  \n  ...\n  141  handle_call(stop, _From, State = #state{parsed_bosh_url = URL, sid = Sid, rid = Rid}) ->\n  142      {Host, _Port, Path ,_} = URL,                                                       \n  143:     {NewState, Socket} = new_socket(State, false),                                      \n  144:     ok = make_raw_request(Socket, Host, Path, close_stream_msg(Sid, Rid)),              \n  145      {stop, normal, ok, NewState};                                                       \n  146  handle_call(_Call, _From, State) ->                                                     \n  ...\n  152      {noreply, State}.                \n  153  %{http_response, NewVsn, StatusCode, Reason}\n  154: handle_info({http, Socket, {http_response, Vsn, 200, <<\"OK\">>}}, State) ->\n  155          #state{stream_ref = Stream,                                       \n  156                  open = Open,                                              \n  ...\n  159                  parsed_bosh_url = {Host, _, Path, _},                     \n  160                  rid = Rid} = State,                                       \n  161:         {ok, {{200, <<\"OK\">>}, _Hdrs, Resp}} = read_response(Socket, Vsn, {200, <<\"OK\">>}, [], <<>>),\n  162          {ok, NewStream} = exmpp_xmlstream:parse(Stream, Resp),                                       \n  163          %io:format(\"Got: ~s \\n\", [Resp]),                                                            \n  164:         NewOpen = lists:keydelete(Socket, 1, Open),                                                  \n  165          NewState2  = if                                                                              \n  166                       NewOpen == [] andalso State#state.new =:= false ->                              \n  167                          %io:format(\"Making empty request\\n\"),                                        \n  168:                         ok = make_empty_request(Socket,Sid, Rid, Queue, Host, Path),                 \n  169:                         inet:setopts(Socket, [{packet, http_bin}, {active, once}]),                  \n  170:                         State#state{open = [{Socket, Rid}], rid = Rid +1, queue = []};      \n  171                       true ->                                                                         \n  172:                         %io:format(\"Closing the socket\\n\"),                                          \n  173:                         NewState = return_socket(State, Socket),                                     \n  174                          NewState#state{open = NewOpen}                                               \n  175          end,                                                                                         \n  176          {noreply, NewState2#state{stream_ref = NewStream}, hibernate};                               \n  177  \n  178: handle_info({tcp_closed, Socket}, State = #state{open = Open, free = Free}) ->\n  179:         case lists:keymember(Socket, 1, Open) of                              \n  180                  true ->                                                       \n  181                          {stop, {error, tcp_closed}, State};                   \n  182                  false ->                                                      \n  183  \n  184:                         {noreply, State#state{free = lists:delete(Socket,Free)}}\n  185          end;                                                                    \n  186  \n  ...\n  189      {stop, _Info, State}.                                      \n  190  terminate(_Reason, #state{open = Open}) when is_list(Open) ->  \n  191:     lists:map(fun({Socket, _}) -> gen_tcp:close(Socket) end, Open),\n  192      ok;                                                            \n  193  terminate(_Reason, #state{}) ->                                    \n  ...\n  197  \n  198  \n  199: make_empty_request(Socket, Sid, Rid, Queue, Host, Path) ->\n  200      StanzasText = [exmpp_xml:document_to_iolist(I) || I <- lists:reverse(Queue)],\n  201      Body = stanzas_msg(Sid, Rid, StanzasText),                                   \n  202:     make_request(Socket, Host, Path, Body).                                      \n  203  \n  204: make_raw_request(Socket, Host, Path, Body) ->\n  205:     make_request(Socket, Host, Path, Body).  \n  206  \n  207: make_request(Socket, Sid, Rid, Queue, Host, Path, Packet) when is_record(Packet, xmlel) ->\n  208      StanzasText = [exmpp_xml:document_to_iolist(I) || I <- lists:reverse([Packet|Queue])],\n  209      Body = stanzas_msg(Sid, Rid, StanzasText),                                                    \n  210:     make_request(Socket, Host, Path, Body).                                                       \n  211                                                                                                    \n  212: make_request(Socket,Host, Path, Body) ->                                                          \n  213       Hdrs = [{\"Content-Type\", ?CONTENT_TYPE}, {\"keep-alive\", \"true\"}],                            \n  214       Request = format_request(Path, \"POST\", Hdrs, Host, Body),                                    \n  215:      ok = gen_tcp:send(Socket, Request).                                                          \n  216       %io:format(\"Sent: ~s \\n\", [Body]).                                                           \n  217  \n  ...\n  228              rid = Rid} = State,                         \n  229      {Host, _Port, Path, _Ssl} = ParsedURL,              \n  230:     {NewState, Socket} = new_socket(State, false),      \n  231:     ok = make_raw_request(Socket, Host, Path, create_session_msg(Rid, Domain, ?WAIT, ?HOLD)),\n  232:     {ok, {{200, <<\"OK\">>}, _Hdrs, Resp}} = read_response(Socket, nil, nil, [], <<>>),        \n  233:     NewState2 = return_socket(NewState, Socket), %%TODO: this can be improved.. don't close the socket and reuse it for latter\n  234  \n  235      [#xmlel{name=body} = BodyEl] = exmpp_xml:parse_document(Resp),\n  ...\n  273       case Result of\n  274           send ->   \n  275:               {NewState, Socket} = new_socket(State, once),\n  276:               ok = make_request(Socket, Sid, Rid, Queue, Host, Path, Packet), \n  277:               {noreply, NewState#state{rid = Rid +1, open = [{Socket, Rid}|Open]}, hibernate};\n  278           queue ->                                                                                                         \n  279                  %io:format(\"Queuing request.    Open = ~p    Rid= ~p \\n\", [Open, Rid]),                                   \n  ...\n  285  \n  286   %%TODO  a veces tiene que ser activo, otras veces pasivo. \n  287: new_socket(State = #state{free = [Socket | Rest]}, Active) ->\n  288:         inet:setopts(Socket, [{active, Active}, {packet, http_bin}]),\n  289:         {State#state{free = Rest}, Socket};                          \n  290: new_socket(State = #state{parsed_bosh_url = {Host, Port, _, _}, local_ip = LocalIp, local_port = LocalPort}, Active) ->\n  291      Options = case LocalIp of                                                                                          \n  292                          undefined -> [{active, Active}, {packet, http_bin}];                                           \n  ...\n  296                                end                                                                                      \n  297                  end,                                                                                                   \n  298:     {ok, Socket} = gen_tcp:connect(Host, Port,  Options, ?CONNECT_TIMEOUT),                                            \n  299:     {State, Socket}.                                                                                                   \n  300  \n  301: return_socket(State, Socket) ->\n  302:         inet:setopts(Socket, [{active, once}]), %receive data from it, we want to know if something happens\n  303:         State#state{free = [Socket | State#state.free]}.                                                   \n  304  \n  305: %new_socket(Host, Port, Active)  ->\n  306: %    {ok, Socket} = gen_tcp:connect(Host, Port, [{active, Active}, {packet, http_bin}], ?CONNECT_TIMEOUT),\n  307: %    Socket.                                                                                              \n  308                                                                                                            \n  309  \n  ...\n  344  \n  345  \n  346: %receiver(Socket, BoshProcess) ->\n  347: %        inet:setopts(Socket, [{packet, http_bin}, {active, false}]),\n  348: %       {ok, Resp} = read_response(Socket, nil, nil, [], <<>>),      \n  349  %       BoshProcess ! {http_response, Resp},                         \n  350: %       receiver(Socket, BoshProcess).                               \n  351  \n  352  \n  353  \n  354: read_response(Socket, Vsn, Status, Hdrs, Body) ->\n  355:     inet:setopts(Socket, [{packet, http_bin}, {active, false}]),\n  356:     case gen_tcp:recv(Socket, 0) of                             \n  357          {ok, {http_response, NewVsn, StatusCode, Reason}} ->    \n  358              NewStatus = {StatusCode, Reason},                   \n  359:             read_response(Socket, NewVsn, NewStatus, Hdrs, Body);\n  360          {ok, {http_header, _, Name, _, Value}} ->                \n  361              Header = {Name, Value},                              \n  362:             read_response(Socket, Vsn, Status, [Header | Hdrs], Body);\n  363          {ok, http_eoh} ->                                             \n  364:             inet:setopts(Socket, [{packet, raw}, binary]),            \n  365:             {NewBody, NewHdrs} = read_body(Vsn, Hdrs, Socket),        \n  366              Response = {Status, NewHdrs, NewBody},                    \n  367              {ok, Response};                                           \n  ...\n  372      end.                                                              \n  373  \n  374: read_body(_Vsn, Hdrs, Socket) ->\n  375      % Find out how to read the entity body from the request.\n  376      % * If we have a Content-Length, just use that and read the complete\n  ...\n  378      % * If Transfer-Encoding is set to chunked, we should read one chunk at\n  379      %   the time                                                           \n  380:     % * If neither of this is true, we need to read until the socket is    \n  381      %   closed (AFAIK, this was common in versions before 1.1).            \n  382      case proplists:get_value('Content-Length', Hdrs, undefined) of         \n  ...\n  384                  throw({no_content_length, Hdrs});                          \n  385          ContentLength ->                                                   \n  386:             read_length(Hdrs, Socket, list_to_integer(binary_to_list(ContentLength)))\n  387      end.                                                                             \n  388  \n  389: read_length(Hdrs, Socket, Length) ->\n  390:     case gen_tcp:recv(Socket, Length) of\n  391          {ok, Data} ->                   \n  392              {Data, Hdrs};               \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/network/exmpp_component.erl:\n   59        auth_method,\n   60  	  client_pid,\n   61: 	  connection = exmpp_socket,\n   62  	  connection_ref,\n   63  	  stream_ref,\n   ..\n  239  		     authentication_or_domain_undefined}, setup, State};\n  240  	_Other ->\n  241: 	    connect(exmpp_socket, {Host, Port, []}, From, State)\n  242      end.\n  243  \n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/network/exmpp_session.erl:\n  110            host, \n  111  	  client_pid,\n  112: 	  connection = exmpp_socket,\n  113  	  connection_ref,\n  114  	  stream_ref,\n  ...\n  253  %% Initiate standard TCP XMPP server connection\n  254  %% Returns {ok,StreamId::String} | {ok, StreamId::string(), Features :: xmlel{}}\n  255: %%  Option() = {local_ip, IP} | {local_port, fun() -> integer()}   bind sockets to this local ip / port.\n  256  %%      | {domain, Domain} | {starttls, Value} | {compression, Value}  | {whitespace_ping, Timeout} | {timeout, Timeout}\n  257  %% Value() = enabled | disabled\n  ...\n  271      end,\n  272      case gen_fsm:sync_send_event(Session,\n  273: 				 {connect_socket, Server, Port, Opts},\n  274  				 Timeout) of\n  275  	{ok, StreamId} -> {ok, StreamId};\n  ...\n  283  %% Returns {ok,StreamId::String} | {ok, StreamId::string(), Features :: xmlel{}}\n  284  %%  Options = [option()]\n  285: %%  Option() = {local_ip, IP} | {local_port, fun() -> integer()}  bind sockets to this local ip / port.\n  286  %%             {timeout, Timeout}\n  287  \n  ...\n  322  %% Returns {ok,StreamId::String} | {ok, StreamId::string(), Features :: xmlel{}}\n  323  %%  Options = [option()]\n  324: %%  Option() = {local_ip, IP} | {local_port, fun() -> integer()}  bind sockets to this local ip / port.\n  325  %%             | {whitespace_ping, TimeoutInSecs} | {timeout, Timeout}\n  326  connect_SSL(Session, Server, Port, Options) ->\n  327:     connect_TCP(Session, Server, Port, [{socket_type, ssl} | Options]).\n  328  \n  329  %% Try to add the session user with inband registration\n  ...\n  385      end.\n  386  \n  387: %% @doc Get a property of the underling connection (socket or bosh connection)\n  388  %%\n  389: %%      See documentation on exmpp_socket and exmpp_bosh to see the supported properties.\n  390  %%      Returns {error, undefined} if the property is not defined for that kind of connection.\n  391  -spec(get_connection_property/2 :: \n  ...\n  470  				     receiver_ref = ReceiverRef,\n  471  				     from_pid=From}) ->\n  472:     Module:close(ConnRef, ReceiverRef), %stop receiving data from socket\n  473      exmpp_xmlstream:stop(StreamRef),\n  474      exmpp_xml:stop_parser(exmpp_xmlstream:get_parser(StreamRef)),\n  ...\n  508      {reply, ok, setup, State#state{auth_method=Method}};\n  509  \n  510: setup({connect_socket, Host, Port, Options}, From, State) ->\n  511      Compress = proplists:get_value(compression, Options, enabled),\n  512      StartTLS = proplists:get_value(starttls, Options, enabled),\n  ...\n  523  	{undefined, _Other} ->\n  524  			 %io:format(\"exmpp connect other ~p~n\",[_Other]),\n  525: 	    connect(exmpp_socket, {Host, Port, Options}, From, \n  526  		    State#state{host=Host, options=SessionOptions, whitespace_ping = WhitespacePingT});\n  527  	{Domain, _Any} ->\n  528  			 %io:format(\"exmpp connect ~p/~p~n\",[Domain, _Any]),\n  529  \n  530:     	    connect(exmpp_socket, {Host, Port, Options}, Domain, From, \n  531  		    State#state{host=Host, options=SessionOptions, whitespace_ping = WhitespacePingT})\n  532      end;\n  ...\n  669             } = State,\n  670      case Module:compress(ReceiverRef) of\n  671:         {ok, NewSocket} ->\n  672              %%Domain = get_domain(Auth),\n  673              Module:reset_parser(ReceiverRef),\n  674:             ok = Module:send(NewSocket, exmpp_stream:opening(Domain, ?NS_JABBER_CLIENT, {1,0})),\n  675:             {next_state, wait_for_stream, State#state{compressed=true, connection_ref = NewSocket}};\n  676          _ ->\n  677              {stop, 'could-not-compress-stream', State}\n  ...\n  684             } = State,\n  685      case Module:starttls(ReceiverRef, client) of\n  686:         {ok, NewSocket} ->\n  687              %%Domain = get_domain(Auth),\n  688              Module:reset_parser(ReceiverRef),\n  689:             ok = Module:send(NewSocket, exmpp_stream:opening(Domain, ?NS_JABBER_CLIENT, {1,0})),\n  690:             {next_state, wait_for_stream, State#state{connection_ref = NewSocket}};\n  691          _ ->\n  692              {stop, 'could-not-encrypt-stream', State}\n\n/home/sam/conversant/repos/kazoo/deps/exmpp-0.9.9/src/network/exmpp_socket.erl:\n   15  \n   16  %% @doc\n   17: %% The module <strong>{@module}</strong> manages TCP/IP socket\n   18  %% connections to an XMPP server with or without TLS/SSL encryption.\n   19  %%\n   ..\n   22  %% </p>\n   23  \n   24: -module(exmpp_socket).\n   25  \n   26  -export([connect/3, send/2, close/2, reset_parser/1, get_property/2,\n   ..\n   33  \n   34  % None implemented so far.\n   35: get_property(_Socket, _Prop) ->\n   36      {error, undefined}.\n   37  \n   ..\n   43  %% Returns:\n   44  %% Ref or throw error\n   45: %% Ref is a socket\n   46  connect(ClientPid, StreamRef, {Host, Port, Options}) ->\n   47      LocalIP = proplists:get_value(local_ip, Options, undefined),                     \n   48      LocalPort= proplists:get_value(local_port, Options, undefined),                  \n   49:     SckType = proplists:get_value(socket_type, Options, gen_tcp),                  \n   50      IPOptions = case LocalIP of                                                                                          \n   51                          undefined -> [];                                           \n   ..\n   58      Opts = [{reuseaddr,true}|DefaultOptions],\n   59      case SckType:connect(Host, Port, Opts, 30000) of\n   60: 	{ok, Socket} ->\n   61:             ESocket = {SckType, Socket},\n   62  	    %% TODO: Hide receiver failures in API\n   63  	    ReceiverPid = spawn_link(?MODULE, receiver,\n   64: 				     [ClientPid, ESocket, StreamRef]),\n   65: 	    SckType:controlling_process(Socket, ReceiverPid),\n   66:             {ESocket, ReceiverPid};\n   67  	{error, Reason} ->\n   68: 	    erlang:throw({socket_error, Reason})\n   69      end.\n   70  \n   ..\n   73  % more data to the exmpp_xmlstream after closed. This\n   74  % avoid the -useless- crash reports produced when the \n   75: % receiver process read data from socket before received\n   76  % the stop message, but after the xmlstream was closed.\n   77  % See shutdown order in exmpp_session:terminate/3.\n   78: close(_Socket, ReceiverPid) ->\n   79      ReceiverPid ! stop.\n   80  \n   81: send(Socket, XMLPacket) when is_tuple(XMLPacket) ->\n   82      Bin = exmpp_xml:document_to_binary(XMLPacket),\n   83      %io:format(\"- SENDING:~n~s~n\", [Bin]),\n   84:     exmpp_internals:gen_send(Socket, Bin);\n   85  \n   86: send(Socket, XMLPacket) when is_binary(XMLPacket) ->\n   87      %io:format(\"- SENDING:~n~s~n\", [XMLPacket]),\n   88:     exmpp_internals:gen_send(Socket, XMLPacket);\n   89  \n   90: send(Socket, XMLPacket) ->\n   91      %io:format(\"- SENDING:~n~s~n\", [XMLPacket]),\n   92:     exmpp_internals:gen_send(Socket, XMLPacket).\n   93  \n   94: wping(Socket) ->\n   95: 	exmpp_internals:gen_send(Socket, <<\"\\n\">>).\n   96  \n   97  compress(ReceiverPid) ->\n   ..\n   99      ReceiverPid ! {compress, self(), Ref},\n  100      receive\n  101:         {ok, Ref, Socket} -> {ok, Socket}\n  102      after\n  103          1000 -> timeout\n  ...\n  109      ReceiverPid ! {starttls, self(), Ref, Mode},\n  110      receive\n  111:         {ok, Ref, Socket} -> {ok, Socket}\n  112      after\n  113          1000 -> timeout\n  ...\n  117  %% Internal functions\n  118  %%--------------------------------------------------------------------\n  119: receiver(ClientPid, Socket, StreamRef) ->\n  120:     receiver_loop(ClientPid, Socket, StreamRef).\n  121  \n  122: receiver_loop(ClientPid, ESocket, StreamRef) ->\n  123:     Socket = get_socket(ESocket),\n  124:     exmpp_internals:gen_setopts(ESocket, [{active, once}]),\n  125      receive\n  126  	stop -> \n  127:             exmpp_internals:gen_close(ESocket),\n  128  	    ok;\n  129  	{compress, From, Ref} -> \n  130:             ZSocket = {exmpp_compress, exmpp_compress:enable_compression(ESocket, [])},\n  131:             From ! {ok, Ref, ZSocket},\n  132: 	    receiver_loop(ClientPid, ZSocket, StreamRef);\n  133  	{starttls, From, Ref, Mode} -> \n  134:             exmpp_internals:gen_setopts(ESocket, [{active, false}]),\n  135:             TSocket = {exmpp_tls, exmpp_tls:handshake(Mode, ESocket, undefined, false, [])},\n  136:             From ! {ok, Ref, TSocket},\n  137: 	    receiver_loop(ClientPid, TSocket, StreamRef);\n  138:         {tcp, Socket, Data} ->\n  139:             case recv_data(ESocket, Data) of\n  140                  {ok, Str} -> \n  141                      {ok, NewStreamRef} = exmpp_xmlstream:parse(StreamRef, Str);\n  ...\n  143                      NewStreamRef = StreamRef\n  144              end,                    \n  145: 	    receiver_loop(ClientPid, ESocket, NewStreamRef);\n  146: 	{ssl, Socket, Data} ->\n  147:             {ok, Str} = recv_data(ESocket, Data),\n  148   %             io:format(\"- RECEIVING:~n~s~n\", [Str]),\n  149  	    {ok, NewStreamRef} = exmpp_xmlstream:parse(StreamRef, Str),\n  150: 	    receiver_loop(ClientPid, ESocket, NewStreamRef);\n  151: 	{tcp_closed, Socket} ->\n  152  	    gen_fsm:send_all_state_event(ClientPid, tcp_closed);\n  153: 	{ssl_closed, Socket} ->\n  154  	    gen_fsm:send_all_state_event(ClientPid, tcp_closed);\n  155: 	{ssl_error,Socket,Reason} ->\n  156: 	    error_logger:warning_msg([ssl_error,{ssl_socket,Socket},Reason]),\n  157  	    gen_fsm:send_all_state_event(ClientPid, tcp_closed);\n  158          reset_parser ->\n  159:             receiver_loop(ClientPid, ESocket, exmpp_xmlstream:reset(StreamRef))\n  160      end.\n  161  \n  162: get_socket(Socket) when is_port(Socket) ->\n  163:     Socket;\n  164: get_socket({sslsocket, _, _} = Socket) ->\n  165:     Socket;\n  166: get_socket({_, Socket, _, _}) ->\n  167:     get_socket(Socket);\n  168: get_socket({_Type, Socket}) ->\n  169:     get_socket(Socket).\n  170  \n  171  %% exmpp_internals:recv_data\n  172: recv_data({gen_tcp, _Socket}, Data) ->\n  173      {ok, Data};\n  174: recv_data({ssl, _Socket}, Data) ->\n  175      {ok, Data};\n  176: recv_data({_, Socket, _, _}, Data) ->\n  177:     recv_data(Socket, Data);\n  178: recv_data({Module, Socket}, EData) ->\n  179:     {ok, Data} = recv_data(Socket, EData),\n  180:     Module:recv_data(Socket, Data).\n  181  \n\n/home/sam/conversant/repos/kazoo/deps/folsom-0.8.0/include/folsom.hrl:\n  173                        ]).\n  174  \n  175: -define(SOCKET_OPTS, [\n  176                        active,\n  177                        broadcast,\n\n/home/sam/conversant/repos/kazoo/deps/folsom-0.8.0/src/folsom_vm_metrics.erl:\n  113      convert_system_info(cpu_topology, [{processor,[{core,{logical,Item}}]}]);\n  114  convert_system_info(dist_ctrl, List) ->\n  115:     lists:map(fun({Node, Socket}) ->\n  116:                       {ok, Stats} = inet:getstat(Socket),\n  117                        {Node, Stats}\n  118                end, List);\n  ...\n  166  \n  167  get_port_info(Port) ->\n  168:     Stat = get_socket_getstat(Port),\n  169:     SockName = get_socket_sockname(Port),\n  170:     Opts = get_socket_opts(Port),\n  171      Info = get_erlang_port_info(Port),\n  172:     Protocol = get_socket_protocol(Port),\n  173:     Status = get_socket_status(Port),\n  174:     Type = get_socket_type(Port),\n  175  \n  176      lists:flatten(lists:append([\n  ...\n  184                                 ])).\n  185  \n  186: get_socket_getstat(Socket) ->\n  187:     case catch inet:getstat(Socket) of\n  188          {ok, Info} ->\n  189              Info;\n  ...\n  192      end.\n  193  \n  194: get_socket_status(Socket) ->\n  195:     case catch prim_inet:getstatus(Socket) of\n  196          {ok, Status} ->\n  197              [{status, Status}];\n  ...\n  204      [convert_port_info(Item) || Item <- Info].\n  205  \n  206: get_socket_type(Socket) ->\n  207:     case catch prim_inet:gettype(Socket) of\n  208          {ok, Type} ->\n  209              [{type, tuple_to_list(Type)}];\n  ...\n  212      end.\n  213  \n  214: get_socket_opts(Socket) ->\n  215:     [get_socket_opts(Socket, Key) || Key <- ?SOCKET_OPTS].\n  216  \n  217: get_socket_opts(Socket, Key) ->\n  218:     case catch inet:getopts(Socket, [Key]) of\n  219          {ok, Opt} ->\n  220              Opt;\n  ...\n  223      end.\n  224  \n  225: get_socket_protocol(Socket) ->\n  226:     case erlang:port_info(Socket, name) of\n  227          {name, \"tcp_inet\"} ->\n  228              [{protocol, tcp}];\n  ...\n  235      end.\n  236  \n  237: get_socket_sockname(Socket) ->\n  238:     case catch inet:sockname(Socket) of\n  239          {ok, {Ip, Port}} ->\n  240              [{ip, ip_to_binary(Ip)}, {port, Port}];\n\n/home/sam/conversant/repos/kazoo/deps/gen_smtp-0.0.1/src/gen_smtp.app.src:\n   13      mimemail,\n   14      smtp_util,\n   15:     socket,\n   16      smtp_server_example\n   17     ]\n\n/home/sam/conversant/repos/kazoo/deps/gen_smtp-0.0.1/src/gen_smtp_client.erl:\n  178  -spec do_smtp_session(Host :: string(), Email :: email(), Options :: list()) -> binary().\n  179  do_smtp_session(Host, Email, Options) ->\n  180: 	{ok, Socket, _Host, _Banner} = connect(Host, Options),\n  181  	%io:format(\"connected to ~s; banner was ~s~n\", [Host, Banner]),\n  182: 	{ok, Extensions} = try_EHLO(Socket, Options),\n  183  	%io:format(\"Extensions are ~p~n\", [Extensions]),\n  184: 	{Socket2, Extensions2} = try_STARTTLS(Socket, Options, Extensions),\n  185  	%io:format(\"Extensions are ~p~n\", [Extensions2]),\n  186: 	_Authed = try_AUTH(Socket2, Options, proplists:get_value(<<\"AUTH\">>, Extensions2)),\n  187  	%io:format(\"Authentication status is ~p~n\", [Authed]),\n  188: 	Receipt = try_sending_it(Email, Socket2, Extensions2),\n  189  	%io:format(\"Mail sending successful~n\"),\n  190: 	quit(Socket2),\n  191  	Receipt.\n  192  \n  193: -spec try_sending_it(Email :: email(), Socket :: socket:socket(), Extensions :: list()) -> binary().\n  194: try_sending_it({From, To, Body}, Socket, Extensions) ->\n  195: 	try_MAIL_FROM(From, Socket, Extensions),\n  196: 	try_RCPT_TO(To, Socket, Extensions),\n  197: 	try_DATA(Body, Socket, Extensions).\n  198  \n  199: -spec try_MAIL_FROM(From :: string() | binary(), Socket :: socket:socket(), Extensions :: list()) -> true.\n  200: try_MAIL_FROM(From, Socket, Extensions) when is_binary(From) ->\n  201: 	try_MAIL_FROM(binary_to_list(From), Socket, Extensions);\n  202: try_MAIL_FROM(\"<\" ++ _ = From, Socket, _Extensions) ->\n  203  	% TODO do we need to bother with SIZE?\n  204: 	socket:send(Socket, [\"MAIL FROM: \", From, \"\\r\\n\"]),\n  205: 	case read_possible_multiline_reply(Socket) of\n  206  		{ok, <<\"250\", _Rest/binary>>} ->\n  207  			true;\n  208  		{ok, <<\"4\", _Rest/binary>> = Msg} ->\n  209: 			quit(Socket),\n  210  			throw({temporary_failure, Msg});\n  211  		{ok, Msg} ->\n  212  			%io:format(\"Mail FROM rejected: ~p~n\", [Msg]),\n  213: 			quit(Socket),\n  214  			throw({permanent_failure, Msg})\n  215  	end;\n  216: try_MAIL_FROM(From, Socket, Extensions) ->\n  217  	% someone was bad and didn't put in the angle brackets\n  218: 	try_MAIL_FROM(\"<\"++From++\">\", Socket, Extensions).\n  219  \n  220: -spec try_RCPT_TO(Tos :: [binary() | string()], Socket :: socket:socket(), Extensions :: list()) -> true.\n  221: try_RCPT_TO([], _Socket, _Extensions) ->\n  222  	true;\n  223: try_RCPT_TO([To | Tail], Socket, Extensions) when is_binary(To) ->\n  224: 	try_RCPT_TO([binary_to_list(To) | Tail], Socket, Extensions);\n  225: try_RCPT_TO([\"<\" ++ _ = To | Tail], Socket, Extensions) ->\n  226: 	socket:send(Socket, [\"RCPT TO: \",To,\"\\r\\n\"]),\n  227: 	case read_possible_multiline_reply(Socket) of\n  228  		{ok, <<\"250\", _Rest/binary>>} ->\n  229: 			try_RCPT_TO(Tail, Socket, Extensions);\n  230  		{ok, <<\"251\", _Rest/binary>>} ->\n  231: 			try_RCPT_TO(Tail, Socket, Extensions);\n  232  		{ok, <<\"4\", _Rest/binary>> = Msg} ->\n  233: 			quit(Socket),\n  234  			throw({temporary_failure, Msg});\n  235  		{ok, Msg} ->\n  236: 			quit(Socket),\n  237  			throw({permanent_failure, Msg})\n  238  	end;\n  239: try_RCPT_TO([To | Tail], Socket, Extensions) ->\n  240  	% someone was bad and didn't put in the angle brackets\n  241: 	try_RCPT_TO([\"<\"++To++\">\" | Tail], Socket, Extensions).\n  242  \n  243: -spec try_DATA(Body :: binary() | function(), Socket :: socket:socket(), Extensions :: list()) -> binary().\n  244: try_DATA(Body, Socket, Extensions) when is_function(Body) ->\n  245:     try_DATA(Body(), Socket, Extensions);\n  246: try_DATA(Body, Socket, _Extensions) ->\n  247: 	socket:send(Socket, \"DATA\\r\\n\"),\n  248: 	case read_possible_multiline_reply(Socket) of\n  249  		{ok, <<\"354\", _Rest/binary>>} ->\n  250: 			socket:send(Socket, [Body, \"\\r\\n.\\r\\n\"]),\n  251: 			case read_possible_multiline_reply(Socket) of\n  252  				{ok, <<\"250 \", Receipt/binary>>} ->\n  253  					Receipt;\n  254  				{ok, <<\"4\", _Rest2/binary>> = Msg} ->\n  255: 					quit(Socket),\n  256  					throw({temporary_failure, Msg});\n  257  				{ok, Msg} ->\n  258: 					quit(Socket),\n  259  					throw({permanent_failure, Msg})\n  260  			end;\n  261  		{ok, <<\"4\", _Rest/binary>> = Msg} ->\n  262: 			quit(Socket),\n  263  			throw({temporary_failure, Msg});\n  264  		{ok, Msg} ->\n  265: 			quit(Socket),\n  266  			throw({permanent_failure, Msg})\n  267  	end.\n  268  \n  269: -spec try_AUTH(Socket :: socket:socket(), Options :: list(), AuthTypes :: [string()]) -> boolean().\n  270: try_AUTH(Socket, Options, []) ->\n  271  	case proplists:get_value(auth, Options) of\n  272  		always ->\n  273: 			quit(Socket),\n  274  			erlang:throw({missing_requirement, auth});\n  275  		_ ->\n  276  			false\n  277  	end;\n  278: try_AUTH(Socket, Options, undefined) ->\n  279  	case proplists:get_value(auth, Options) of\n  280  		always ->\n  281: 			quit(Socket),\n  282  			erlang:throw({missing_requirement, auth});\n  283  		_ ->\n  284  			false\n  285  	end;\n  286: try_AUTH(Socket, Options, AuthTypes) ->\n  287  	case proplists:is_defined(username, Options) and\n  288  		proplists:is_defined(password, Options) and\n  ...\n  291  			case proplists:get_value(auth, Options) of\n  292  				always ->\n  293: 					quit(Socket),\n  294  					erlang:throw({missing_requirement, auth});\n  295  				_ ->\n  ...\n  301  			%io:format(\"Auth types: ~p~n\", [AuthTypes]),\n  302  			Types = re:split(AuthTypes, \" \", [{return, list}, trim]),\n  303: 			case do_AUTH(Socket, Username, Password, Types) of\n  304  				false ->\n  305  					case proplists:get_value(auth, Options) of\n  306  						always ->\n  307: 							quit(Socket),\n  308  							erlang:throw({permanent_failure, auth_failed});\n  309  						_ ->\n  ...\n  315  	end.\n  316  \n  317: -spec do_AUTH(Socket :: socket:socket(), Username :: string(), Password :: string(), Types :: [string()]) -> boolean().\n  318: do_AUTH(Socket, Username, Password, Types) ->\n  319  	FixedTypes = [string:to_upper(X) || X <- Types],\n  320  	%io:format(\"Fixed types: ~p~n\", [FixedTypes]),\n  ...\n  322  	%io:format(\"available authentication types, in order of preference: ~p~n\",\n  323  	%	[AllowedTypes]),\n  324: 	do_AUTH_each(Socket, Username, Password, AllowedTypes).\n  325  \n  326: -spec do_AUTH_each(Socket :: socket:socket(), Username :: string() | binary(), Password :: string() | binary(), AuthTypes :: [string()]) -> boolean().\n  327: do_AUTH_each(_Socket, _Username, _Password, []) ->\n  328  	false;\n  329: do_AUTH_each(Socket, Username, Password, [\"CRAM-MD5\" | Tail]) ->\n  330: 	socket:send(Socket, \"AUTH CRAM-MD5\\r\\n\"),\n  331: 	case read_possible_multiline_reply(Socket) of\n  332  		{ok, <<\"334 \", Rest/binary>>} ->\n  333  			Seed64 = binstr:strip(binstr:strip(Rest, right, $\\n), right, $\\r),\n  ...\n  335  			Digest = smtp_util:compute_cram_digest(Password, Seed),\n  336  			String = base64:encode(list_to_binary([Username, \" \", Digest])),\n  337: 			socket:send(Socket, [String, \"\\r\\n\"]),\n  338: 			case read_possible_multiline_reply(Socket) of\n  339  				{ok, <<\"235\", _Rest/binary>>} ->\n  340  					%io:format(\"authentication accepted~n\"),\n  ...\n  342  				{ok, _Msg} ->\n  343  					%io:format(\"authentication rejected: ~s~n\", [Msg]),\n  344: 					do_AUTH_each(Socket, Username, Password, Tail)\n  345  			end;\n  346  		{ok, _Something} ->\n  347  			%io:format(\"got ~s~n\", [Something]),\n  348: 			do_AUTH_each(Socket, Username, Password, Tail)\n  349  	end;\n  350: do_AUTH_each(Socket, Username, Password, [\"LOGIN\" | Tail]) ->\n  351: 	socket:send(Socket, \"AUTH LOGIN\\r\\n\"),\n  352: 	case read_possible_multiline_reply(Socket) of\n  353  		{ok, <<\"334 VXNlcm5hbWU6\\r\\n\">>} ->\n  354  			%io:format(\"username prompt~n\"),\n  355  			U = base64:encode(Username),\n  356: 			socket:send(Socket, [U,\"\\r\\n\"]),\n  357: 			case read_possible_multiline_reply(Socket) of\n  358  				{ok, <<\"334 UGFzc3dvcmQ6\\r\\n\">>} ->\n  359  					%io:format(\"password prompt~n\"),\n  360  					P = base64:encode(Password),\n  361: 					socket:send(Socket, [P,\"\\r\\n\"]),\n  362: 					case read_possible_multiline_reply(Socket) of\n  363  						{ok, <<\"235 \", _Rest/binary>>} ->\n  364  							%io:format(\"authentication accepted~n\"),\n  ...\n  366  						{ok, _Msg} ->\n  367  							%io:format(\"password rejected: ~s\", [Msg]),\n  368: 							do_AUTH_each(Socket, Username, Password, Tail)\n  369  					end;\n  370  				{ok, _Msg2} ->\n  371  					%io:format(\"username rejected: ~s\", [Msg2]),\n  372: 					do_AUTH_each(Socket, Username, Password, Tail)\n  373  			end;\n  374  		{ok, _Something} ->\n  375  			%io:format(\"got ~s~n\", [Something]),\n  376: 			do_AUTH_each(Socket, Username, Password, Tail)\n  377  	end;\n  378: do_AUTH_each(Socket, Username, Password, [\"PLAIN\" | Tail]) ->\n  379  	AuthString = base64:encode(\"\\0\"++Username++\"\\0\"++Password),\n  380: 	socket:send(Socket, [\"AUTH PLAIN \", AuthString, \"\\r\\n\"]),\n  381: 	case read_possible_multiline_reply(Socket) of\n  382  		{ok, <<\"235\", _Rest/binary>>} ->\n  383  			%io:format(\"authentication accepted~n\"),\n  ...\n  387  			%io:format(\"authentication rejected~n\"),\n  388  			%io:format(\"~p~n\", [Else]),\n  389: 			do_AUTH_each(Socket, Username, Password, Tail)\n  390  	end;\n  391: do_AUTH_each(Socket, Username, Password, [_Type | Tail]) ->\n  392  	%io:format(\"unsupported AUTH type ~s~n\", [Type]),\n  393: 	do_AUTH_each(Socket, Username, Password, Tail).\n  394  \n  395: -spec try_EHLO(Socket :: socket:socket(), Options :: list()) -> {ok, list()}.\n  396: try_EHLO(Socket, Options) ->\n  397: 	ok = socket:send(Socket, [\"EHLO \", proplists:get_value(hostname, Options, smtp_util:guess_FQDN()), \"\\r\\n\"]),\n  398: 	case read_possible_multiline_reply(Socket) of\n  399  		{ok, <<\"500\", _Rest/binary>>} ->\n  400  			% Unrecognized command, fall back to HELO\n  401: 			try_HELO(Socket, Options);\n  402  		{ok, <<\"4\", _Rest/binary>> = Msg} ->\n  403: 			quit(Socket),\n  404  			throw({temporary_failure, Msg});\n  405  		{ok, Reply} ->\n  ...\n  407  	end.\n  408  \n  409: -spec try_HELO(Socket :: socket:socket(), Options :: list()) -> {ok, list()}.\n  410: try_HELO(Socket, Options) ->\n  411: 	ok = socket:send(Socket, [\"HELO \", proplists:get_value(hostname, Options, smtp_util:guess_FQDN()), \"\\r\\n\"]),\n  412: 	case read_possible_multiline_reply(Socket) of\n  413  		{ok, <<\"250\", _Rest/binary>>} ->\n  414  			{ok, []};\n  415  		{ok, <<\"4\", _Rest/binary>> = Msg} ->\n  416: 			quit(Socket),\n  417  			throw({temporary_failure, Msg});\n  418  		{ok, Msg} ->\n  419: 			quit(Socket),\n  420  			throw({permanent_failure, Msg})\n  421  	end.\n  422  \n  423  % check if we should try to do TLS\n  424: -spec try_STARTTLS(Socket :: socket:socket(), Options :: list(), Extensions :: list()) -> {socket:socket(), list()}.\n  425: try_STARTTLS(Socket, Options, Extensions) ->\n  426  		case {proplists:get_value(tls, Options),\n  427  				proplists:get_value(<<\"STARTTLS\">>, Extensions)} of\n  428  			{Atom, true} when Atom =:= always; Atom =:= if_available ->\n  429  			%io:format(\"Starting TLS~n\"),\n  430: 			case {do_STARTTLS(Socket, Options), Atom} of\n  431  				{false, always} ->\n  432  					%io:format(\"TLS failed~n\"),\n  433: 					quit(Socket),\n  434  					erlang:throw({temporary_failure, tls_failed});\n  435  				{false, if_available} ->\n  436  					%io:format(\"TLS failed~n\"),\n  437: 					{Socket, Extensions};\n  438  				{{S, E}, _} ->\n  439  					%io:format(\"TLS started~n\"),\n  ...\n  441  			end;\n  442  		{always, _} ->\n  443: 			quit(Socket),\n  444  			erlang:throw({missing_requirement, tls});\n  445  		_ ->\n  446: 			{Socket, Extensions}\n  447  	end.\n  448  \n  449: %% attempt to upgrade socket to TLS\n  450: -spec do_STARTTLS(Socket :: socket:socket(), Options :: list()) -> {socket:socket(), list()} | false.\n  451: do_STARTTLS(Socket, Options) ->\n  452: 	socket:send(Socket, \"STARTTLS\\r\\n\"),\n  453: 	case read_possible_multiline_reply(Socket) of\n  454  		{ok, <<\"220\", _Rest/binary>>} ->\n  455  			application:start(crypto),\n  456  			application:start(public_key),\n  457  			application:start(ssl),\n  458: 			case socket:to_ssl_client(Socket, [], 5000) of\n  459: 				{ok, NewSocket} ->\n  460: 					%NewSocket;\n  461: 					{ok, Extensions} = try_EHLO(NewSocket, Options),\n  462: 					{NewSocket, Extensions};\n  463  				_Else ->\n  464  					%io:format(\"~p~n\", [Else]),\n  ...\n  466  			end;\n  467  		{ok, <<\"4\", _Rest/binary>> = Msg} ->\n  468: 			quit(Socket),\n  469  			throw({temporary_failure, Msg});\n  470  		{ok, Msg} ->\n  471: 			quit(Socket),\n  472  			throw({permanent_failure, Msg})\n  473  	end.\n  ...\n  495  			25\n  496  	end,\n  497: 	case socket:connect(Proto, Host, Port, SockOpts, 5000) of\n  498: 		{ok, Socket} ->\n  499: 			case read_possible_multiline_reply(Socket) of\n  500  				{ok, <<\"220\", Banner/binary>>} ->\n  501: 					{ok, Socket, Host, Banner};\n  502  				{ok, <<\"4\", _Rest/binary>> = Msg} ->\n  503: 					quit(Socket),\n  504  					throw({temporary_failure, Msg});\n  505  				{ok, Msg} ->\n  506: 					quit(Socket),\n  507  					throw({permanent_failure, Msg})\n  508  			end;\n  ...\n  512  \n  513  %% read a multiline reply (eg. EHLO reply)\n  514: -spec read_possible_multiline_reply(Socket :: socket:socket()) -> {ok, binary()}.\n  515: read_possible_multiline_reply(Socket) ->\n  516: 	case socket:recv(Socket, 0, ?TIMEOUT) of\n  517  		{ok, Packet} ->\n  518  			case binstr:substr(Packet, 4, 1) of\n  519  				<<\"-\">> ->\n  520  					Code = binstr:substr(Packet, 1, 3),\n  521: 					read_multiline_reply(Socket, Code, [Packet]);\n  522  				<<\" \">> ->\n  523  					{ok, Packet}\n  ...\n  527  	end.\n  528  \n  529: -spec read_multiline_reply(Socket :: socket:socket(), Code :: binary(), Acc :: [binary()]) -> {ok, binary()}.\n  530: read_multiline_reply(Socket, Code, Acc) ->\n  531: 	case socket:recv(Socket, 0, ?TIMEOUT) of\n  532  		{ok, Packet} ->\n  533  			case {binstr:substr(Packet, 1, 3), binstr:substr(Packet, 4, 1)} of\n  ...\n  535  					{ok, list_to_binary(lists:reverse([Packet | Acc]))};\n  536  				{Code, <<\"-\">>} ->\n  537: 					read_multiline_reply(Socket, Code, [Packet | Acc]);\n  538  				_ ->\n  539: 					quit(Socket),\n  540  					throw({unexpected_response, lists:reverse([Packet | Acc])})\n  541  			end;\n  ...\n  544  	end.\n  545  \n  546: quit(Socket) ->\n  547: 	socket:send(Socket, \"QUIT\\r\\n\"),\n  548: 	socket:close(Socket),\n  549  	ok.\n  550  \n  ...\n  595  		local,\n  596  		fun() ->\n  597: 				{ok, ListenSock} = socket:listen(tcp, 9876),\n  598  				{ListenSock}\n  599  		end,\n  600  		fun({ListenSock}) ->\n  601: 				socket:close(ListenSock)\n  602  		end,\n  603  		[fun({ListenSock}) ->\n  ...\n  606  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}],\n  607  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  608: 								{ok, X} = socket:accept(ListenSock, 1000),\n  609: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  610: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  611  								ok\n  612  						end\n  ...\n  618  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}, {retries, 2}],\n  619  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  620: 								{ok, X} = socket:accept(ListenSock, 1000),\n  621: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  622: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  623: 								socket:close(X),\n  624: 								{ok, Y} = socket:accept(ListenSock, 1000),\n  625: 								socket:send(Y, \"220 Some banner\\r\\n\"),\n  626: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  627: 								socket:close(Y),\n  628: 								{ok, Z} = socket:accept(ListenSock, 1000),\n  629: 								socket:send(Z, \"220 Some banner\\r\\n\"),\n  630: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(Z, 0, 1000)),\n  631  								ok\n  632  						end\n  ...\n  640  								unlink(Pid),\n  641  								Monitor = erlang:monitor(process, Pid),\n  642: 								{ok, X} = socket:accept(ListenSock, 1000),\n  643: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  644: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  645: 								socket:close(X),\n  646: 								{ok, Y} = socket:accept(ListenSock, 1000),\n  647: 								socket:send(Y, \"220 Some banner\\r\\n\"),\n  648: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  649: 								socket:close(Y),\n  650: 								?assertEqual({error, timeout}, socket:accept(ListenSock, 1000)),\n  651  								receive {'DOWN', Monitor, _, _, Error} -> ?assertMatch({error, retries_exceeded, _}, Error) end,\n  652  								ok\n  ...\n  661  								unlink(Pid),\n  662  								Monitor = erlang:monitor(process, Pid),\n  663: 								{ok, X} = socket:accept(ListenSock, 1000),\n  664: 								socket:send(X, \"554 get lost, kid\\r\\n\"),\n  665: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  666  								receive {'DOWN', Monitor, _, _, Error} -> ?assertMatch({error, no_more_hosts, _}, Error) end,\n  667  								ok\n  ...\n  674  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}],\n  675  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  676: 								{ok, X} = socket:accept(ListenSock, 1000),\n  677: 								socket:send(X, \"421 can't you see I'm busy?\\r\\n\"),\n  678: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  679: 								{ok, Y} = socket:accept(ListenSock, 1000),\n  680: 								socket:send(Y, \"220 Some banner\\r\\n\"),\n  681: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  682  								ok\n  683  						end\n  ...\n  691  								unlink(Pid),\n  692  								Monitor = erlang:monitor(process, Pid),\n  693: 								{ok, X} = socket:accept(ListenSock, 1000),\n  694: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  695: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  696: 								socket:send(X, \"250-server.example.com EHLO\\r\\n250-AUTH LOGIN PLAIN\\r\\n421 too busy\\r\\n\"),\n  697: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  698  								\n  699: 								{ok, Y} = socket:accept(ListenSock, 1000),\n  700: 								socket:send(Y, \"220 Some banner\\r\\n\"),\n  701: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  702: 								socket:send(Y, \"250-server.example.com EHLO\\r\\n250-AUTH LOGIN PLAIN\\r\\n421 too busy\\r\\n\"),\n  703: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  704  								receive {'DOWN', Monitor, _, _, Error} -> ?assertMatch({error, retries_exceeded, _}, Error) end,\n  705  								ok\n  ...\n  712  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}],\n  713  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  714: 								{ok, X} = socket:accept(ListenSock, 1000),\n  715: 								socket:send(X, \"220 \\r\\n\"),\n  716: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  717: 								socket:send(X, \"500 5.3.3 Unrecognized command\\r\\n\"),\n  718: 								?assertMatch({ok, \"HELO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  719: 								socket:send(X, \"250 Some banner\\r\\n\"),\n  720: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  721: 								socket:send(X, \"250 ok\\r\\n\"),\n  722: 								?assertMatch({ok, \"RCPT TO: <foo@bar.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  723: 								socket:send(X, \"250 ok\\r\\n\"),\n  724: 								?assertMatch({ok, \"DATA\\r\\n\"}, socket:recv(X, 0, 1000)),\n  725: 								socket:send(X, \"354 ok\\r\\n\"),\n  726: 								?assertMatch({ok, \"hello world\\r\\n\"}, socket:recv(X, 0, 1000)),\n  727: 								?assertMatch({ok, \".\\r\\n\"}, socket:recv(X, 0, 1000)),\n  728: 								socket:send(X, \"250 ok\\r\\n\"),\n  729: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  730  								ok\n  731  						end\n  ...\n  737  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}],\n  738  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  739: 								{ok, X} = socket:accept(ListenSock, 1000),\n  740: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  741: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  742: 								socket:send(X, \"250 hostname\\r\\n\"),\n  743: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  744: 								socket:send(X, \"250 ok\\r\\n\"),\n  745: 								?assertMatch({ok, \"RCPT TO: <foo@bar.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  746: 								socket:send(X, \"250 ok\\r\\n\"),\n  747: 								?assertMatch({ok, \"DATA\\r\\n\"}, socket:recv(X, 0, 1000)),\n  748: 								socket:send(X, \"354 ok\\r\\n\"),\n  749: 								?assertMatch({ok, \"hello world\\r\\n\"}, socket:recv(X, 0, 1000)),\n  750: 								?assertMatch({ok, \".\\r\\n\"}, socket:recv(X, 0, 1000)),\n  751: 								socket:send(X, \"250 ok\\r\\n\"),\n  752: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  753  								ok\n  754  						end\n  ...\n  760  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}],\n  761  								{ok, _Pid} = send({<<\"test@foo.com\">>, [<<\"foo@bar.com\">>], <<\"hello world\">>}, Options),\n  762: 								{ok, X} = socket:accept(ListenSock, 1000),\n  763: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  764: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  765: 								socket:send(X, \"250 hostname\\r\\n\"),\n  766: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  767: 								socket:send(X, \"250 ok\\r\\n\"),\n  768: 								?assertMatch({ok, \"RCPT TO: <foo@bar.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  769: 								socket:send(X, \"250 ok\\r\\n\"),\n  770: 								?assertMatch({ok, \"DATA\\r\\n\"}, socket:recv(X, 0, 1000)),\n  771: 								socket:send(X, \"354 ok\\r\\n\"),\n  772: 								?assertMatch({ok, \"hello world\\r\\n\"}, socket:recv(X, 0, 1000)),\n  773: 								?assertMatch({ok, \".\\r\\n\"}, socket:recv(X, 0, 1000)),\n  774: 								socket:send(X, \"250 ok\\r\\n\"),\n  775: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  776  								ok\n  777  						end\n  ...\n  783  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, <<\"testing\">>}],\n  784  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  785: 								{ok, X} = socket:accept(ListenSock, 1000),\n  786: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  787: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  788: 								socket:send(X, \"250-hostname\\r\\n250 STARTTLS\\r\\n\"),\n  789: 								?assertMatch({ok, \"STARTTLS\\r\\n\"}, socket:recv(X, 0, 1000)),\n  790  								application:start(crypto),\n  791  								application:start(public_key),\n  792  								application:start(ssl),\n  793: 								socket:send(X, \"220 ok\\r\\n\"),\n  794: 								{ok, Y} = socket:to_ssl_server(X, [{certfile, \"../testdata/server.crt\"}, {keyfile, \"../testdata/server.key\"}], 5000),\n  795: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  796: 								socket:send(Y, \"250-hostname\\r\\n250 STARTTLS\\r\\n\"),\n  797: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  798: 								socket:send(Y, \"250 ok\\r\\n\"),\n  799: 								?assertMatch({ok, \"RCPT TO: <foo@bar.com>\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  800: 								socket:send(Y, \"250 ok\\r\\n\"),\n  801: 								?assertMatch({ok, \"DATA\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  802: 								socket:send(Y, \"354 ok\\r\\n\"),\n  803: 								?assertMatch({ok, \"hello world\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  804: 								?assertMatch({ok, \".\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  805: 								socket:send(Y, \"250 ok\\r\\n\"),\n  806: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  807  								ok\n  808  						end\n  ...\n  814  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, <<\"testing\">>}],\n  815  								{ok, _Pid} = send({<<\"test@foo.com\">>, [<<\"foo@bar.com\">>], <<\"hello world\">>}, Options),\n  816: 								{ok, X} = socket:accept(ListenSock, 1000),\n  817: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  818: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  819: 								socket:send(X, \"250-hostname\\r\\n250 STARTTLS\\r\\n\"),\n  820: 								?assertMatch({ok, \"STARTTLS\\r\\n\"}, socket:recv(X, 0, 1000)),\n  821  								application:start(crypto),\n  822  								application:start(public_key),\n  823  								application:start(ssl),\n  824: 								socket:send(X, \"220 ok\\r\\n\"),\n  825: 								{ok, Y} = socket:to_ssl_server(X, [{certfile, \"../testdata/server.crt\"}, {keyfile, \"../testdata/server.key\"}], 5000),\n  826: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  827: 								socket:send(Y, \"250-hostname\\r\\n250 STARTTLS\\r\\n\"),\n  828: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  829: 								socket:send(Y, \"250 ok\\r\\n\"),\n  830: 								?assertMatch({ok, \"RCPT TO: <foo@bar.com>\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  831: 								socket:send(Y, \"250 ok\\r\\n\"),\n  832: 								?assertMatch({ok, \"DATA\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  833: 								socket:send(Y, \"354 ok\\r\\n\"),\n  834: 								?assertMatch({ok, \"hello world\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  835: 								?assertMatch({ok, \".\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  836: 								socket:send(Y, \"250 ok\\r\\n\"),\n  837: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(Y, 0, 1000)),\n  838  								ok\n  839  						end\n  ...\n  846  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}, {username, \"user\"}, {password, \"pass\"}],\n  847  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  848: 								{ok, X} = socket:accept(ListenSock, 1000),\n  849: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  850: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  851: 								socket:send(X, \"250-hostname\\r\\n250 AUTH PLAIN\\r\\n\"),\n  852  								AuthString = binary_to_list(base64:encode(\"\\0user\\0pass\")),\n  853  								AuthPacket = \"AUTH PLAIN \"++AuthString++\"\\r\\n\",\n  854: 								?assertEqual({ok, AuthPacket}, socket:recv(X, 0, 1000)),\n  855: 								socket:send(X, \"235 ok\\r\\n\"),\n  856: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  857  								ok\n  858  						end\n  ...\n  864  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}, {username, \"user\"}, {password, \"pass\"}],\n  865  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  866: 								{ok, X} = socket:accept(ListenSock, 1000),\n  867: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  868: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  869: 								socket:send(X, \"250-hostname\\r\\n250 AUTH LOGIN\\r\\n\"),\n  870: 								?assertEqual({ok, \"AUTH LOGIN\\r\\n\"}, socket:recv(X, 0, 1000)),\n  871: 								socket:send(X, \"334 VXNlcm5hbWU6\\r\\n\"),\n  872  								UserString = binary_to_list(base64:encode(\"user\")),\n  873: 								?assertEqual({ok, UserString++\"\\r\\n\"}, socket:recv(X, 0, 1000)),\n  874: 								socket:send(X, \"334 UGFzc3dvcmQ6\\r\\n\"),\n  875  								PassString = binary_to_list(base64:encode(\"pass\")),\n  876: 								?assertEqual({ok, PassString++\"\\r\\n\"}, socket:recv(X, 0, 1000)),\n  877: 								socket:send(X, \"235 ok\\r\\n\"),\n  878: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  879  								ok\n  880  						end\n  ...\n  886  								Options = [{relay, \"localhost\"}, {port, 9876}, {hostname, \"testing\"}, {username, \"user\"}, {password, \"pass\"}],\n  887  								{ok, _Pid} = send({\"test@foo.com\", [\"foo@bar.com\"], \"hello world\"}, Options),\n  888: 								{ok, X} = socket:accept(ListenSock, 1000),\n  889: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  890: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  891: 								socket:send(X, \"250-hostname\\r\\n250 AUTH CRAM-MD5\\r\\n\"),\n  892: 								?assertEqual({ok, \"AUTH CRAM-MD5\\r\\n\"}, socket:recv(X, 0, 1000)),\n  893  								Seed = smtp_util:get_cram_string(smtp_util:guess_FQDN()),\n  894  								DecodedSeed = base64:decode_to_string(Seed),\n  895  								Digest = smtp_util:compute_cram_digest(\"pass\", DecodedSeed),\n  896  								String = binary_to_list(base64:encode(list_to_binary([\"user \", Digest]))),\n  897: 								socket:send(X, \"334 \"++Seed++\"\\r\\n\"),\n  898: 								{ok, Packet} = socket:recv(X, 0, 1000),\n  899  								CramDigest = smtp_util:trim_crlf(Packet),\n  900  								?assertEqual(String, CramDigest),\n  901: 								socket:send(X, \"235 ok\\r\\n\"),\n  902: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  903  								ok\n  904  						end\n  ...\n  910  								Options = [{relay, <<\"localhost\">>}, {port, 9876}, {hostname, <<\"testing\">>}, {username, <<\"user\">>}, {password, <<\"pass\">>}],\n  911  								{ok, _Pid} = send({<<\"test@foo.com\">>, [<<\"foo@bar.com\">>, <<\"baz@bar.com\">>], <<\"hello world\">>}, Options),\n  912: 								{ok, X} = socket:accept(ListenSock, 1000),\n  913: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  914: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  915: 								socket:send(X, \"250-hostname\\r\\n250 AUTH CRAM-MD5\\r\\n\"),\n  916: 								?assertEqual({ok, \"AUTH CRAM-MD5\\r\\n\"}, socket:recv(X, 0, 1000)),\n  917  								Seed = smtp_util:get_cram_string(smtp_util:guess_FQDN()),\n  918  								DecodedSeed = base64:decode_to_string(Seed),\n  919  								Digest = smtp_util:compute_cram_digest(\"pass\", DecodedSeed),\n  920  								String = binary_to_list(base64:encode(list_to_binary([\"user \", Digest]))),\n  921: 								socket:send(X, \"334 \"++Seed++\"\\r\\n\"),\n  922: 								{ok, Packet} = socket:recv(X, 0, 1000),\n  923  								CramDigest = smtp_util:trim_crlf(Packet),\n  924  								?assertEqual(String, CramDigest),\n  925: 								socket:send(X, \"235 ok\\r\\n\"),\n  926: 								?assertMatch({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  927  								ok\n  928  						end\n  ...\n  936  								unlink(Pid),\n  937  								Monitor = erlang:monitor(process, Pid),\n  938: 								{ok, X} = socket:accept(ListenSock, 1000),\n  939: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  940: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  941: 								socket:send(X, \"250-hostname\\r\\n250 8BITMIME\\r\\n\"),\n  942: 								?assertEqual({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  943  								receive {'DOWN', Monitor, _, _, Error} -> ?assertMatch({error, retries_exceeded, {missing_requirement, _, auth}}, Error) end,\n  944  								ok\n  ...\n  953  								unlink(Pid),\n  954  								Monitor = erlang:monitor(process, Pid),\n  955: 								{ok, X} = socket:accept(ListenSock, 1000),\n  956: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  957: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  958: 								socket:send(X, \"250-hostname\\r\\n250-AUTH GSSAPI\\r\\n250 8BITMIME\\r\\n\"),\n  959: 								?assertEqual({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  960  								receive {'DOWN', Monitor, _, _, Error} -> ?assertMatch({error, no_more_hosts, {permanent_failure, _, auth_failed}}, Error) end,\n  961  								ok\n  ...\n  964  			end,\n  965  			fun({_ListenSock}) ->\n  966: 					{\"Connecting to a SSL socket directly should work\",\n  967  						fun() ->\n  968  								application:start(crypto),\n  969  								application:start(public_key),\n  970  								application:start(ssl),\n  971: 								{ok, ListenSock} = socket:listen(ssl, 9877, [{certfile, \"../testdata/server.crt\"}, {keyfile, \"../testdata/server.key\"}]),\n  972  								Options = [{relay, <<\"localhost\">>}, {port, 9877}, {hostname, <<\"testing\">>}, {ssl, true}],\n  973  								{ok, _Pid} = send({<<\"test@foo.com\">>, [<<\"<foo@bar.com>\">>, <<\"baz@bar.com\">>], <<\"hello world\">>}, Options),\n  974: 								{ok, X} = socket:accept(ListenSock, 1000),\n  975: 								socket:send(X, \"220 Some banner\\r\\n\"),\n  976: 								?assertMatch({ok, \"EHLO testing\\r\\n\"}, socket:recv(X, 0, 1000)),\n  977: 								socket:send(X, \"250-hostname\\r\\n250 AUTH CRAM-MD5\\r\\n\"),\n  978: 								?assertEqual({ok, \"MAIL FROM: <test@foo.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  979: 								socket:send(X, \"250 ok\\r\\n\"),\n  980: 								?assertMatch({ok, \"RCPT TO: <foo@bar.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  981: 								socket:send(X, \"250 ok\\r\\n\"),\n  982: 								?assertMatch({ok, \"RCPT TO: <baz@bar.com>\\r\\n\"}, socket:recv(X, 0, 1000)),\n  983: 								socket:send(X, \"250 ok\\r\\n\"),\n  984: 								?assertMatch({ok, \"DATA\\r\\n\"}, socket:recv(X, 0, 1000)),\n  985: 								socket:send(X, \"354 ok\\r\\n\"),\n  986: 								?assertMatch({ok, \"hello world\\r\\n\"}, socket:recv(X, 0, 1000)),\n  987: 								?assertMatch({ok, \".\\r\\n\"}, socket:recv(X, 0, 1000)),\n  988: 								socket:send(X, \"250 ok\\r\\n\"),\n  989: 								?assertMatch({ok, \"QUIT\\r\\n\"}, socket:recv(X, 0, 1000)),\n  990: 								socket:close(ListenSock),\n  991  								ok\n  992  						end\n\n/home/sam/conversant/repos/kazoo/deps/gen_smtp-0.0.1/src/gen_smtp_server.erl:\n   45  		port :: port(),\n   46  		sessionoptions = [] :: [tuple()],\n   47: 		socket :: port() | any(),\n   48  		listenoptions = [] :: [tuple()]\n   49  		}).\n   ..\n   51  \n   52  -record(state, {\n   53: 		listeners :: [listener()],  % Listening sockets (tcp or ssl)\n   54  		module :: atom(),\n   55  		sessions = [] :: [pid()]\n   ..\n  143  					process_flag(trap_exit, true),\n  144  					ListenOptions = [binary, {ip, IP}, Family],\n  145: 					case socket:listen(Protocol, Port, ListenOptions) of\n  146: 						{ok, ListenSocket} -> %%Create first accepting process\n  147: 							socket:begin_inet_async(ListenSocket),\n  148: 							#listener{port = socket:extract_port_from_socket(ListenSocket),\n  149  								hostname = Hostname, sessionoptions = SessionOptions,\n  150: 								socket = ListenSocket, listenoptions = ListenOptions};\n  151  						{error, Reason} ->\n  152  							exit({init, Reason})\n  ...\n  176  %% @hidden\n  177  -spec handle_info(Message :: any(), State :: #state{}) -> {'noreply', #state{}} | {'stop', any(), #state{}}.\n  178: handle_info({inet_async, ListenPort,_, {ok, ClientAcceptSocket}},\n  179  	#state{module = Module, listeners = Listeners, sessions = CurSessions} = State) ->\n  180  	try\n  ...\n  184  					_ -> []\n  185  				end || L <- Listeners]),\n  186: 		{ok, ClientSocket} = socket:handle_inet_async(Listener#listener.socket, ClientAcceptSocket, Listener#listener.listenoptions),\n  187  		%% New client connected\n  188: 		Sessions = case gen_smtp_server_session:start(ClientSocket, Module, [{hostname, Listener#listener.hostname}, {sessioncount, length(CurSessions) } | Listener#listener.sessionoptions]) of\n  189  			{ok, Pid} ->\n  190  				link(Pid),\n  191: 				case socket:controlling_process(ClientSocket, Pid) of\n  192                      'ok' ->\n  193                          lager:debug(\"new smtp session on ~s : current sessions ~p\", [Module , length(CurSessions) + 1]),\n  194                          CurSessions ++[Pid];\n  195                      {'error', closed} ->\n  196:                         Pid ! {tcp_closed, ClientSocket},\n  197                          CurSessions;\n  198                      {'error', E} ->\n  199                          lager:debug(\"error [~p] setting controlling process ~s : ~p\", [E, Module, Pid]),\n  200:                         Pid ! {tcp_closed, ClientSocket},\n  201                          CurSessions\n  202                  end;				\n  ...\n  209  		{noreply, State#state{sessions = Sessions}}\n  210  	catch _:Error ->\n  211: 		error_logger:error_msg(\"Error in socket acceptor: ~p.~n\", [Error]),\n  212  		{noreply, State}\n  213  	end;\n  ...\n  220  			{noreply, State}\n  221  	end;\n  222: handle_info({inet_async, ListenSocket, _, {error, econnaborted}}, State) ->\n  223  	lager:debug(\"Client terminated connection with econnaborted~n\"),\n  224: 	socket:begin_inet_async(ListenSocket),\n  225  	{noreply, State};\n  226: handle_info({inet_async, _ListenSocket,_, Error}, State) ->\n  227: 	error_logger:error_msg(\"Error in socket acceptor: ~p.~n\", [Error]),\n  228  	{stop, Error, State};\n  229  \n  230: handle_info({tcp_closed, _Socket}, #state{module = Module, sessions = CurSessions} = State) ->\n  231:     lager:debug(\"tcp_closed ~p on smtp_server module ~s. sessions = ~p\",[_Socket, Module, length(CurSessions)]),\n  232      {noreply, State};\n  233      \n  ...\n  240  terminate(Reason, State) ->\n  241  	lager:debug(\"Terminating due to ~p~n\", [Reason]),\n  242: 	lists:foreach(fun(#listener{socket=S}) -> catch socket:close(S) end, State#state.listeners),\n  243  	ok.\n  244  \n\n/home/sam/conversant/repos/kazoo/deps/gen_smtp-0.0.1/src/gen_smtp_server_session.erl:\n   62  -record(state,\n   63  	{\n   64: 		socket = erlang:error({undefined, socket}) :: port() | tuple(),\n   65  		module = erlang:error({undefined, module}) :: atom(),\n   66  		envelope = undefined :: 'undefined' | #envelope{},\n   ..\n   96  %% @doc Start a SMTP session linked to the calling process.\n   97  %% @see start/3\n   98: -spec(start_link/3 :: (Socket :: port(), Module :: atom(), Options :: [tuple()]) -> {'ok', pid()} | 'ignore' | {'error', any()}).\n   99: start_link(Socket, Module, Options) ->\n  100: 	gen_server:start_link(?MODULE, [Socket, Module, Options], []).\n  101  \n  102: %% @doc Start a SMTP session. Arguments are `Socket' (probably opened via\n  103: %% `gen_smtp_server' or an analogue), which is an abstract socket implemented\n  104: %% via the `socket' module, `Module' is the name of the callback module\n  105  %% implementing the SMTP session behaviour that you'd like to use and `Options'\n  106  %% is the optional arguments provided by the accept server.\n  107: -spec(start/3 :: (Socket :: port(), Module :: atom(), Options :: [tuple()]) -> {'ok', pid()} | 'ignore' | {'error', any()}).\n  108: start(Socket, Module, Options) ->\n  109: 	gen_server:start(?MODULE, [Socket, Module, Options], []).\n  110  \n  111  %% @private\n  112  -spec(init/1 :: (Args :: list()) -> {'ok', #state{}, ?TIMEOUT} | {'stop', any()} | 'ignore').\n  113: init([Socket, Module, Options]) ->\n  114: 	case socket:peername(Socket) of\n  115          {ok, {PeerName, _Port}} ->\n  116              case Module:init(proplists:get_value(hostname, Options, smtp_util:guess_FQDN()), proplists:get_value(sessioncount, Options, 0), PeerName, proplists:get_value(callbackoptions, Options, [])) of\n  117                  {ok, Banner, CallbackState} ->\n  118:                     socket:send(Socket, [\"220 \", Banner, \"\\r\\n\"]),\n  119:                     socket:active_once(Socket),\n  120:                     {ok, #state{socket = Socket, module = Module, options = Options, callbackstate = CallbackState}, ?TIMEOUT};\n  121                  {stop, Reason, Message} ->\n  122:                     socket:send(Socket, [Message, \"\\r\\n\"]),\n  123:                     socket:close(Socket),\n  124                      {stop, Reason};\n  125                  ignore ->\n  126:                     socket:close(Socket),\n  127                      ignore\n  128              end;\n  129          {error,enotconn} ->\n  130:             socket:close(Socket),\n  131              ignore;\n  132          Other ->\n  133:           lager:debug(\"socket:peername ~p.~n\", [Other]),\n  134:           socket:close(Socket),\n  135            ignore\n  136      end.\n  ...\n  151  %% @hidden\n  152  -spec handle_info(Message :: any(), State :: #state{}) -> {'noreply', #state{}} | {'stop', any(), #state{}}.\n  153: handle_info({receive_data, {error, size_exceeded}}, #state{socket = Socket, readmessage = true} = State) ->\n  154: 	socket:send(Socket, \"552 Message too large\\r\\n\"),\n  155: 	socket:active_once(Socket),\n  156  	{noreply, State#state{readmessage = false, envelope = #envelope{}}, ?TIMEOUT};\n  157: handle_info({receive_data, {error, bare_newline}}, #state{socket = Socket, readmessage = true} = State) ->\n  158: 	socket:send(Socket, \"451 Bare newline detected\\r\\n\"),\n  159  	lager:debug(\"bare newline detected: ~p~n\", [self()]),\n  160: 	socket:active_once(Socket),\n  161  	{noreply, State#state{readmessage = false, envelope = #envelope{}}, ?TIMEOUT};\n  162: handle_info({receive_data, Body, Rest}, #state{socket = Socket, readmessage = true, envelope = Env, module=Module,\n  163  		callbackstate = OldCallbackState,  extensions = Extensions} = State) ->\n  164  	% send the remainder of the data...\n  165  	case Rest of\n  166  		<<>> -> ok; % no remaining data\n  167: 		_ -> self() ! {socket:get_proto(Socket), Socket, Rest}\n  168  	end,\n  169: 	socket:setopts(Socket, [{packet, line}]),\n  170  	Envelope = Env#envelope{data = Body},% size = length(Body)},\n  171  	Valid = case has_extension(Extensions, \"SIZE\") of\n  ...\n  173  			case byte_size(Envelope#envelope.data) > list_to_integer(Value) of\n  174  				true ->\n  175: 					socket:send(Socket, \"552 Message too large\\r\\n\"),\n  176: 					socket:active_once(Socket),\n  177  					false;\n  178  				false ->\n  ...\n  186  			case Module:handle_DATA(Envelope#envelope.from, Envelope#envelope.to, Envelope#envelope.data, OldCallbackState) of\n  187  				{ok, Reference, CallbackState} ->\n  188: 					socket:send(Socket, io_lib:format(\"250 queued as ~s\\r\\n\", [Reference])),\n  189: 					socket:active_once(Socket),\n  190  					{noreply, State#state{readmessage = false, envelope = #envelope{}, callbackstate = CallbackState}, ?TIMEOUT};\n  191  				{error, Message, CallbackState} ->\n  192: 					socket:send(Socket, [Message, \"\\r\\n\"]),\n  193: 					socket:active_once(Socket),\n  194  					{noreply, State#state{readmessage = false, envelope = #envelope{}, callbackstate = CallbackState}, ?TIMEOUT}\n  195  			end;\n  ...\n  198  			{noreply, State#state{readmessage = false, envelope = #envelope{}}, ?TIMEOUT}\n  199  	end;\n  200: handle_info({_SocketType, Socket, Packet}, State) ->\n  201  	case handle_request(parse_request(Packet), State) of\n  202  		{ok,  #state{extensions = Extensions,  options = Options, readmessage = true} = NewState} ->\n  ...\n  209  			Session = self(),\n  210  			Size = 0,\n  211: 			socket:setopts(Socket, [{packet, raw}]),\n  212  			spawn_opt(fun() -> receive_data([],\n  213: 							Socket, 0, Size, MaxSize, Session, Options) end,\n  214  				[link, {fullsweep_after, 0}]),\n  215  			{noreply, NewState, ?TIMEOUT};\n  216  		{ok, NewState} ->\n  217: 			socket:active_once(NewState#state.socket),\n  218  			{noreply, NewState, ?TIMEOUT};\n  219  		{stop, Reason, NewState} ->\n  220  			{stop, Reason, NewState}\n  221  	end;\n  222: handle_info({tcp_closed, _Socket}, State) ->\n  223  	{stop, normal, State};\n  224: handle_info({ssl_closed, _Socket}, State) ->\n  225  	{stop, normal, State};\n  226: handle_info(timeout, #state{socket = Socket} = State) ->\n  227: 	socket:send(Socket, \"421 Error: timeout exceeded\\r\\n\"),\n  228: 	socket:close(Socket),\n  229  	{stop, normal, State};\n  230  handle_info(Info, State) ->\n  ...\n  235  -spec(terminate/2 :: (Reason :: any(), State :: #state{}) -> 'ok').\n  236  terminate(Reason, State) ->\n  237: 	socket:close(State#state.socket),\n  238  	(State#state.module):terminate(Reason, State#state.callbackstate).\n  239  \n  ...\n  270  \n  271  -spec(handle_request/2 :: ({Verb :: binary(), Args :: binary()}, State :: #state{}) -> {'ok', #state{}} | {'stop', any(), #state{}}).\n  272: handle_request({<<>>, _Any}, #state{socket = Socket} = State) ->\n  273: 	socket:send(Socket, \"500 Error: bad syntax\\r\\n\"),\n  274  	{ok, State};\n  275: handle_request({<<\"HELO\">>, <<>>}, #state{socket = Socket} = State) ->\n  276: 	socket:send(Socket, \"501 Syntax: HELO hostname\\r\\n\"),\n  277  	{ok, State};\n  278: handle_request({<<\"HELO\">>, Hostname}, #state{socket = Socket, options = Options, module = Module, callbackstate = OldCallbackState} = State) ->\n  279  	case Module:handle_HELO(Hostname, OldCallbackState) of\n  280  		{ok, MaxSize, CallbackState} when is_integer(MaxSize) ->\n  281: 			socket:send(Socket,[\"250 \", proplists:get_value(hostname, Options, smtp_util:guess_FQDN()), \"\\r\\n\"]),\n  282  			{ok, State#state{extensions = [{\"SIZE\", integer_to_list(MaxSize)}], envelope = #envelope{}, callbackstate = CallbackState}};\n  283  		{ok, CallbackState} ->\n  284: 			socket:send(Socket, [\"250 \", proplists:get_value(hostname, Options, smtp_util:guess_FQDN()), \"\\r\\n\"]),\n  285  			{ok, State#state{envelope = #envelope{}, callbackstate = CallbackState}};\n  286  		{error, Message, CallbackState} ->\n  287: 			socket:send(Socket, [Message, \"\\r\\n\"]),\n  288  			{ok, State#state{callbackstate = CallbackState}}\n  289  	end;\n  290: handle_request({<<\"EHLO\">>, <<>>}, #state{socket = Socket} = State) ->\n  291: 	socket:send(Socket, \"501 Syntax: EHLO hostname\\r\\n\"),\n  292  	{ok, State};\n  293: handle_request({<<\"EHLO\">>, Hostname}, #state{socket = Socket, options = Options, module = Module, callbackstate = OldCallbackState, tls = Tls} = State) ->\n  294  	case Module:handle_EHLO(Hostname, ?BUILTIN_EXTENSIONS, OldCallbackState) of\n  295  		{ok, Extensions, CallbackState} ->\n  296  			case Extensions of\n  297  				[] ->\n  298: 					socket:send(Socket, [\"250 \", proplists:get_value(hostname, Options, smtp_util:guess_FQDN()), \"\\r\\n\"]),\n  299  					{ok, State#state{extensions = Extensions, callbackstate = CallbackState}};\n  300  				_Else ->\n  ...\n  317  					{_, _, Response} = lists:foldl(F, {1, length(Extensions2), [[\"250-\", proplists:get_value(hostname, Options, smtp_util:guess_FQDN()), \"\\r\\n\"]]}, Extensions2),\n  318  					%?debugFmt(\"Respponse ~p~n\", [lists:reverse(Response)]),\n  319: 					socket:send(Socket, lists:reverse(Response)),\n  320  					{ok, State#state{extensions = Extensions2, envelope = #envelope{}, callbackstate = CallbackState}}\n  321  			end;\n  322  		{error, Message, CallbackState} ->\n  323: 			socket:send(Socket, [Message, \"\\r\\n\"]),\n  324  			{ok, State#state{callbackstate = CallbackState}}\n  325  	end;\n  326  \n  327: handle_request({<<\"AUTH\">>, _Args}, #state{envelope = undefined, socket = Socket} = State) ->\n  328: 	socket:send(Socket, \"503 Error: send EHLO first\\r\\n\"),\n  329  	{ok, State};\n  330: handle_request({<<\"AUTH\">>, Args}, #state{socket = Socket, extensions = Extensions, envelope = Envelope, options = Options} = State) ->\n  331  	case binstr:strchr(Args, $\\s) of\n  332  		0 ->\n  ...\n  340  	case has_extension(Extensions, \"AUTH\") of\n  341  		false ->\n  342: 			socket:send(Socket, \"502 Error: AUTH not implemented\\r\\n\"),\n  343  			{ok, State};\n  344  		{true, AvailableTypes} ->\n  345  			case lists:member(string:to_upper(binary_to_list(AuthType)), string:tokens(AvailableTypes, \" \")) of\n  346  				false ->\n  347: 					socket:send(Socket, \"504 Unrecognized authentication type\\r\\n\"),\n  348  					{ok, State};\n  349  				true ->\n  350  					case binstr:to_upper(AuthType) of\n  351  						<<\"LOGIN\">> ->\n  352: 							% socket:send(Socket, \"334 \" ++ base64:encode_to_string(\"Username:\")),\n  353: 							socket:send(Socket, \"334 VXNlcm5hbWU6\\r\\n\"),\n  354  							{ok, State#state{waitingauth = 'login', envelope = Envelope#envelope{auth = {<<>>, <<>>}}}};\n  355  						<<\"PLAIN\">> when Parameters =/= false ->\n  ...\n  365  							end;\n  366  						<<\"PLAIN\">> ->\n  367: 							socket:send(Socket, \"334\\r\\n\"),\n  368  							{ok, State#state{waitingauth = 'plain', envelope = Envelope#envelope{auth = {<<>>, <<>>}}}};\n  369  						<<\"CRAM-MD5\">> ->\n  370  							crypto:start(), % ensure crypto is started, we're gonna need it\n  371  							String = smtp_util:get_cram_string(proplists:get_value(hostname, Options, smtp_util:guess_FQDN())),\n  372: 							socket:send(Socket, [\"334 \", String, \"\\r\\n\"]),\n  373  							{ok, State#state{waitingauth = 'cram-md5', authdata=base64:decode(String), envelope = Envelope#envelope{auth = {<<>>, <<>>}}}}\n  374  						%\"DIGEST-MD5\" -> % TODO finish this? (see rfc 2831)\n  ...\n  376  							%Nonce = get_digest_nonce(),\n  377  							%Response = io_lib:format(\"nonce=\\\"~s\\\",realm=\\\"~s\\\",qop=\\\"auth\\\",algorithm=md5-sess,charset=utf-8\", Nonce, State#state.hostname),\n  378: 							%socket:send(Socket, \"334 \"++Response++\"\\r\\n\"),\n  379  							%{ok, State#state{waitingauth = \"DIGEST-MD5\", authdata=base64:decode_to_string(Nonce), envelope = Envelope#envelope{auth = {[], []}}}}\n  380  					end\n  ...\n  405  \n  406  % the client sends a username response to auth-login\n  407: handle_request({Username64, <<>>}, #state{socket = Socket, waitingauth = 'login', envelope = #envelope{auth = {<<>>,<<>>}}} = State) ->\n  408  	Envelope = State#state.envelope,\n  409  	Username = base64:decode(Username64),\n  410: 	% socket:send(Socket, \"334 \" ++ base64:encode_to_string(\"Password:\")),\n  411: 	socket:send(Socket, \"334 UGFzc3dvcmQ6\\r\\n\"),\n  412  	% store the provided username in envelope.auth\n  413  	NewState = State#state{envelope = Envelope#envelope{auth = {Username, <<>>}}},\n  ...\n  419  	try_auth('login', Username, Password, State);\n  420  \n  421: handle_request({<<\"MAIL\">>, _Args}, #state{envelope = undefined, socket = Socket} = State) ->\n  422: 	socket:send(Socket, \"503 Error: send HELO/EHLO first\\r\\n\"),\n  423  	{ok, State};\n  424: handle_request({<<\"MAIL\">>, Args}, #state{socket = Socket, module = Module, envelope = Envelope, callbackstate = OldCallbackState,  extensions = Extensions} = State) ->\n  425  	case Envelope#envelope.from of\n  426  		undefined ->\n  ...\n  430  					case parse_encoded_address(Address) of\n  431  						error ->\n  432: 							socket:send(Socket, \"501 Bad sender address syntax\\r\\n\"),\n  433  							{ok, State};\n  434  						{ParsedAddress, <<>>} ->\n  ...\n  436  							case Module:handle_MAIL(ParsedAddress, OldCallbackState) of\n  437  								{ok, CallbackState} ->\n  438: 									socket:send(Socket, \"250 sender Ok\\r\\n\"),\n  439  									{ok, State#state{envelope = Envelope#envelope{from = ParsedAddress}, callbackstate = CallbackState}};\n  440  								{error, Message, CallbackState} ->\n  441: 									socket:send(Socket, [Message, \"\\r\\n\"]),\n  442  									{ok, State#state{callbackstate = CallbackState}}\n  443  							end;\n  ...\n  478  								{error, Message} ->\n  479  									lager:debug(\"error: ~s~n\", [Message]),\n  480: 									socket:send(Socket, Message),\n  481  									{ok, State};\n  482  								NewState ->\n  ...\n  484  									case Module:handle_MAIL(ParsedAddress, State#state.callbackstate) of\n  485  										{ok, CallbackState} ->\n  486: 											socket:send(Socket, \"250 sender Ok\\r\\n\"),\n  487  											{ok, State#state{envelope = Envelope#envelope{from = ParsedAddress}, callbackstate = CallbackState}};\n  488  										{error, Message, CallbackState} ->\n  489: 											socket:send(Socket, [Message, \"\\r\\n\"]),\n  490  											{ok, NewState#state{callbackstate = CallbackState}}\n  491  									end\n  ...\n  493  					end;\n  494  				_Else ->\n  495: 					socket:send(Socket, \"501 Syntax: MAIL FROM:<address>\\r\\n\"),\n  496  					{ok, State}\n  497  			end;\n  498  		_Other ->\n  499: 			socket:send(Socket, \"503 Error: Nested MAIL command\\r\\n\"),\n  500  			{ok, State}\n  501  	end;\n  502: handle_request({<<\"RCPT\">>, _Args}, #state{envelope = undefined, socket = Socket} = State) ->\n  503: 	socket:send(Socket, \"503 Error: need MAIL command\\r\\n\"),\n  504  	{ok, State};\n  505: handle_request({<<\"RCPT\">>, Args}, #state{socket = Socket, envelope = Envelope, module = Module, callbackstate = OldCallbackState} = State) ->\n  506  	case binstr:strpos(binstr:to_upper(Args), \"TO:\") of\n  507  		1 ->\n  ...\n  509  			case parse_encoded_address(Address) of\n  510  				error ->\n  511: 					socket:send(Socket, \"501 Bad recipient address syntax\\r\\n\"),\n  512  					{ok, State};\n  513  				{<<>>, _} ->\n  514  					% empty rcpt to addresses aren't cool\n  515: 					socket:send(Socket, \"501 Bad recipient address syntax\\r\\n\"),\n  516  					{ok, State};\n  517  				{ParsedAddress, <<>>} ->\n  ...\n  519  					case Module:handle_RCPT(ParsedAddress, OldCallbackState) of\n  520  						{ok, CallbackState} ->\n  521: 							socket:send(Socket, \"250 recipient Ok\\r\\n\"),\n  522  							{ok, State#state{envelope = Envelope#envelope{to = Envelope#envelope.to ++ [ParsedAddress]}, callbackstate = CallbackState}};\n  523  						{error, Message, CallbackState} ->\n  524: 							socket:send(Socket, [Message, \"\\r\\n\"]),\n  525  							{ok, State#state{callbackstate = CallbackState}}\n  526  					end;\n  ...\n  528  					% TODO - are there even any RCPT extensions?\n  529  					lager:debug(\"To address ~s (parsed as ~s) with extra info ~s~n\", [Address, ParsedAddress, ExtraInfo]),\n  530: 					socket:send(Socket, [\"555 Unsupported option: \", ExtraInfo, \"\\r\\n\"]),\n  531  					{ok, State}\n  532  			end;\n  533  		_Else ->\n  534: 			socket:send(Socket, \"501 Syntax: RCPT TO:<address>\\r\\n\"),\n  535  			{ok, State}\n  536  	end;\n  537: handle_request({<<\"DATA\">>, <<>>}, #state{socket = Socket, envelope = undefined} = State) ->\n  538: 	socket:send(Socket, \"503 Error: send HELO/EHLO first\\r\\n\"),\n  539  	{ok, State};\n  540: handle_request({<<\"DATA\">>, <<>>}, #state{socket = Socket, envelope = Envelope} = State) ->\n  541  	case {Envelope#envelope.from, Envelope#envelope.to} of\n  542  		{undefined, _} ->\n  543: 			socket:send(Socket, \"503 Error: need MAIL command\\r\\n\"),\n  544  			{ok, State};\n  545  		{_, []} ->\n  546: 			socket:send(Socket, \"503 Error: need RCPT command\\r\\n\"),\n  547  			{ok, State};\n  548  		_Else ->\n  549: 			socket:send(Socket, \"354 enter mail, end with line containing only '.'\\r\\n\"),\n  550  			lager:debug(\"switching to data read mode~n\", []),\n  551  \n  552  			{ok, State#state{readmessage = true}}\n  553  	end;\n  554: handle_request({<<\"RSET\">>, _Any}, #state{socket = Socket, envelope = Envelope, module = Module, callbackstate = OldCallbackState} = State) ->\n  555: 	socket:send(Socket, \"250 Ok\\r\\n\"),\n  556  	% if the client sends a RSET before a HELO/EHLO don't give them a valid envelope\n  557  	NewEnvelope = case Envelope of\n  ...\n  560  	end,\n  561  	{ok, State#state{envelope = NewEnvelope, callbackstate = Module:handle_RSET(OldCallbackState)}};\n  562: handle_request({<<\"NOOP\">>, _Any}, #state{socket = Socket} = State) ->\n  563: 	socket:send(Socket, \"250 Ok\\r\\n\"),\n  564  	{ok, State};\n  565: handle_request({<<\"QUIT\">>, _Any}, #state{socket = Socket} = State) ->\n  566: 	socket:send(Socket, \"221 Bye\\r\\n\"),\n  567  	{stop, normal, State};\n  568: handle_request({<<\"VRFY\">>, Address}, #state{module= Module, socket = Socket, callbackstate = OldCallbackState} = State) ->\n  569  	case parse_encoded_address(Address) of\n  570  		{ParsedAddress, <<>>} ->\n  571  			case Module:handle_VRFY(ParsedAddress, OldCallbackState) of\n  572  				{ok, Reply, CallbackState} ->\n  573: 					socket:send(Socket, [\"250 \", Reply, \"\\r\\n\"]),\n  574  					{ok, State#state{callbackstate = CallbackState}};\n  575  				{error, Message, CallbackState} ->\n  576: 					socket:send(Socket, [Message, \"\\r\\n\"]),\n  577  					{ok, State#state{callbackstate = CallbackState}}\n  578  			end;\n  579  		_Other ->\n  580: 			socket:send(Socket, \"501 Syntax: VRFY username/address\\r\\n\"),\n  581  			{ok, State}\n  582  	end;\n  583: handle_request({<<\"STARTTLS\">>, <<>>}, #state{socket = Socket, module = Module, tls=false, extensions = Extensions, callbackstate = OldCallbackState, options = Options} = State) ->\n  584  	case has_extension(Extensions, \"STARTTLS\") of\n  585  		{true, _} ->\n  586: 			socket:send(Socket, \"220 OK\\r\\n\"),\n  587  			crypto:start(),\n  588  			application:start(public_key),\n  ...\n  601  			end,\n  602  			% TODO: certfile and keyfile should be at configurable locations\n  603: 			case socket:to_ssl_server(Socket, Options2, 5000) of\n  604: 				{ok, NewSocket} ->\n  605  					lager:debug(\"SSL negotiation sucessful~n\"),\n  606: 					{ok, State#state{socket = NewSocket, envelope=undefined,\n  607  							authdata=undefined, waitingauth=false, readmessage=false,\n  608  							tls=true, callbackstate = Module:handle_STARTTLS(OldCallbackState)}};\n  609  				{error, Reason} ->\n  610  					lager:debug(\"SSL handshake failed : ~p~n\", [Reason]),\n  611: 					socket:send(Socket, \"454 TLS negotiation failed\\r\\n\"),\n  612  					{ok, State}\n  613  			end;\n  614  		false ->\n  615: 			socket:send(Socket, \"500 Command unrecognized\\r\\n\"),\n  616  			{ok, State}\n  617  	end;\n  618: handle_request({<<\"STARTTLS\">>, <<>>}, #state{socket = Socket} = State) ->\n  619: 	socket:send(Socket, \"500 TLS already negotiated\\r\\n\"),\n  620  	{ok, State};\n  621: handle_request({<<\"STARTTLS\">>, _Args}, #state{socket = Socket} = State) ->\n  622: 	socket:send(Socket, \"501 Syntax error (no parameters allowed)\\r\\n\"),\n  623  	{ok, State};\n  624: handle_request({Verb, Args}, #state{socket = Socket, module = Module, callbackstate = OldCallbackState} = State) ->\n  625      case Module:handle_other(Verb, Args, OldCallbackState) of\n  626          {Message, CallbackState} ->\n  627:             socket:send(Socket, [Message, \"\\r\\n\"]);\n  628          {CallbackState} -> ok\n  629      end,\n  ...\n  701  \n  702  -spec(try_auth/4 :: (AuthType :: 'login' | 'plain' | 'cram-md5', Username :: binary(), Credential :: binary() | {binary(), binary()}, State :: #state{}) -> {'ok', #state{}}).\n  703: try_auth(AuthType, Username, Credential, #state{module = Module, socket = Socket, envelope = Envelope, callbackstate = OldCallbackState} = State) ->\n  704  	% clear out waiting auth\n  705  	NewState = State#state{waitingauth = false, envelope = Envelope#envelope{auth = {<<>>, <<>>}}},\n  ...\n  708  			case Module:handle_AUTH(AuthType, Username, Credential, OldCallbackState) of\n  709  				{ok, CallbackState} ->\n  710: 					socket:send(Socket, \"235 Authentication successful.\\r\\n\"),\n  711  					{ok, NewState#state{callbackstate = CallbackState,\n  712  					                    envelope = Envelope#envelope{auth = {Username, Credential}}}};\n  713  				_Other ->\n  714: 					socket:send(Socket, \"535 Authentication failed.\\r\\n\"),\n  715  					{ok, NewState}\n  716  				end;\n  717  		false ->\n  718  			lager:debug(\"Please define handle_AUTH/4 in your server module or remove AUTH from your module extensions~n\"),\n  719: 			socket:send(Socket, \"535 authentication failed (#5.7.1)\\r\\n\"),\n  720  			{ok, NewState}\n  721  	end.\n  ...\n  728  \n  729  %% @doc a tight loop to receive the message body\n  730: receive_data(_Acc, _Socket, _, Size, MaxSize, Session, _Options) when MaxSize > 0, Size > MaxSize ->\n  731  	lager:debug(\"message body size ~B exceeded maximum allowed ~B~n\", [Size, MaxSize]),\n  732  	Session ! {receive_data, {error, size_exceeded}};\n  733: receive_data(Acc, Socket, RecvSize, Size, MaxSize, Session, Options) ->\n  734: 	case socket:recv(Socket, RecvSize, 1000) of\n  735  		{ok, Packet} when Acc == [] ->\n  736  			case check_bare_crlf(Packet, <<>>, proplists:get_value(allow_bare_newlines, Options, false), 0) of\n  ...\n  742  							lager:debug(\"received ~B bytes; size is now ~p~n\", [RecvSize, Size + size(Packet)]),\n  743  							lager:debug(\"memory usage: ~p~n\", [erlang:process_info(self(), memory)]),\n  744: 							receive_data([FixedPacket | Acc], Socket, RecvSize, Size + byte_size(FixedPacket), MaxSize, Session, Options);\n  745  						Index ->\n  746  							String = binstr:substr(FixedPacket, 1, Index - 1),\n  ...\n  762  							lager:debug(\"received ~B bytes; size is now ~p~n\", [RecvSize, Size + size(Packet)]),\n  763  							lager:debug(\"memory usage: ~p~n\", [erlang:process_info(self(), memory)]),\n  764: 							receive_data([FixedPacket | Acc], Socket, RecvSize, Size + byte_size(FixedPacket), MaxSize, Session, Options);\n  765  						Index ->\n  766  							String = binstr:substr(FixedPacket, 1, Index - 1),\n  ...\n  779  				0 ->\n  780  					% uh-oh\n  781: 					lager:debug(\"no data on socket, and no DATA terminator, retrying ~p~n\", [Session]),\n  782  					% eventually we'll either get data or a different error, just keep retrying\n  783: 					receive_data(Acc, Socket, 0, Size, MaxSize, Session, Options);\n  784  				Index ->\n  785  					String = binstr:substr(Packet, 1, Index - 1),\n  ...\n  791  			end;\n  792  		{error, timeout} ->\n  793: 			receive_data(Acc, Socket, 0, Size, MaxSize, Session, Options);\n  794  		{error, Reason} ->\n  795  			lager:debug(\"receive error: ~p~n\", [Reason]),\n  ...\n  959  				Self = self(),\n  960  				spawn(fun() ->\n  961: 							{ok, ListenSock} = socket:listen(tcp, 9876, [binary]),\n  962: 							{ok, X} = socket:accept(ListenSock),\n  963: 							socket:controlling_process(X, Self),\n  964  							Self ! X\n  965  					end),\n  966: 				{ok, CSock} = socket:connect(tcp, \"localhost\", 9876),\n  967  				receive\n  968  					SSock when is_port(SSock) ->\n  ...\n  970  				end,\n  971  				{ok, Pid} = gen_smtp_server_session:start(SSock, smtp_server_example, [{hostname, \"localhost\"}, {sessioncount, 1}]),\n  972: 				socket:controlling_process(SSock, Pid),\n  973  				{CSock, Pid}\n  974  		end,\n  975  		fun({CSock, _Pid}) ->\n  976: 				socket:close(CSock)\n  977  		end,\n  978  		[fun({CSock, _Pid}) ->\n  979  					{\"A new connection should get a banner\",\n  980  						fun() ->\n  981: 								socket:active_once(CSock),\n  982  								receive {tcp, CSock, Packet} -> ok end,\n  983  								?assertMatch(\"220 localhost\"++_Stuff,  Packet)\n  ...\n  988  					{\"A correct response to HELO\",\n  989  						fun() ->\n  990: 								socket:active_once(CSock),\n  991: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n  992  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n  993: 								socket:send(CSock, \"HELO somehost.com\\r\\n\"),\n  994: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n  995  								?assertMatch(\"250 localhost\\r\\n\",  Packet2)\n  996  						end\n  ...\n 1000  					{\"An error in response to an invalid HELO\",\n 1001  						fun() ->\n 1002: 								socket:active_once(CSock),\n 1003: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1004  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1005: 								socket:send(CSock, \"HELO\\r\\n\"),\n 1006: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1007  								?assertMatch(\"501 Syntax: HELO hostname\\r\\n\",  Packet2)\n 1008  						end\n ....\n 1012  					{\"A rejected HELO\",\n 1013  						fun() ->\n 1014: 								socket:active_once(CSock),\n 1015: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1016  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1017: 								socket:send(CSock, \"HELO invalid\\r\\n\"),\n 1018: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1019  								?assertMatch(\"554 invalid hostname\\r\\n\",  Packet2)\n 1020  						end\n ....\n 1024  					{\"A rejected EHLO\",\n 1025  						fun() ->\n 1026: 								socket:active_once(CSock),\n 1027: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1028  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1029: 								socket:send(CSock, \"EHLO invalid\\r\\n\"),\n 1030: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1031  								?assertMatch(\"554 invalid hostname\\r\\n\",  Packet2)\n 1032  						end\n ....\n 1036  					{\"EHLO response\",\n 1037  						fun() ->\n 1038: 								socket:active_once(CSock),\n 1039: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1040  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1041: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1042: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1043  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1044  								Foo = fun(F) ->\n 1045  										receive\n 1046  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1047: 												socket:active_once(CSock),\n 1048  												F(F);\n 1049  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1050: 												socket:active_once(CSock),\n 1051  												ok;\n 1052  											{tcp, CSock, _R} ->\n 1053: 												socket:active_once(CSock),\n 1054  												error\n 1055  										end\n ....\n 1062  					{\"Unsupported AUTH PLAIN\",\n 1063  						fun() ->\n 1064: 								socket:active_once(CSock),\n 1065: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1066  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1067: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1068: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1069  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1070  								Foo = fun(F) ->\n 1071  										receive\n 1072  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1073: 												socket:active_once(CSock),\n 1074  												F(F);\n 1075  											{tcp, CSock, \"250\"++_Packet3} ->\n 1076: 												socket:active_once(CSock),\n 1077  												ok;\n 1078  											{tcp, CSock, _R} ->\n 1079: 												socket:active_once(CSock),\n 1080  												error\n 1081  										end\n 1082  								end,\n 1083  								?assertEqual(ok, Foo(Foo)),\n 1084: 								socket:send(CSock, \"AUTH PLAIN\\r\\n\"),\n 1085: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1086  								?assertMatch(\"502 Error: AUTH not implemented\\r\\n\",  Packet4)\n 1087  						end\n ....\n 1091  					{\"Sending DATA\",\n 1092  						fun() ->\n 1093: 								socket:active_once(CSock),\n 1094: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1095  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1096: 								socket:send(CSock, \"HELO somehost.com\\r\\n\"),\n 1097: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1098  								?assertMatch(\"250 localhost\\r\\n\",  Packet2),\n 1099: 								socket:send(CSock, \"MAIL FROM: <user@somehost.com>\\r\\n\"),\n 1100: 								receive {tcp, CSock, Packet3} -> socket:active_once(CSock) end,\n 1101  								?assertMatch(\"250 \"++_, Packet3),\n 1102: 								socket:send(CSock, \"RCPT TO: <user@otherhost.com>\\r\\n\"),\n 1103: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1104  								?assertMatch(\"250 \"++_, Packet4),\n 1105: 								socket:send(CSock, \"DATA\\r\\n\"),\n 1106: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1107  								?assertMatch(\"354 \"++_, Packet5),\n 1108: 								socket:send(CSock, \"Subject: tls message\\r\\n\"),\n 1109: 								socket:send(CSock, \"To: <user@otherhost>\\r\\n\"),\n 1110: 								socket:send(CSock, \"From: <user@somehost.com>\\r\\n\"),\n 1111: 								socket:send(CSock, \"\\r\\n\"),\n 1112: 								socket:send(CSock, \"message body\"),\n 1113: 								socket:send(CSock, \"\\r\\n.\\r\\n\"),\n 1114: 								receive {tcp, CSock, Packet6} -> socket:active_once(CSock) end,\n 1115  								?assertMatch(\"250 queued as\"++_, Packet6)\n 1116  						end\n ....\n 1120  %					{\"Sending DATA with a bare newline\",\n 1121  %						fun() ->\n 1122: %								socket:active_once(CSock),\n 1123: %								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1124  %								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1125: %								socket:send(CSock, \"HELO somehost.com\\r\\n\"),\n 1126: %								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1127  %								?assertMatch(\"250 localhost\\r\\n\",  Packet2),\n 1128: %								socket:send(CSock, \"MAIL FROM: <user@somehost.com>\\r\\n\"),\n 1129: %								receive {tcp, CSock, Packet3} -> socket:active_once(CSock) end,\n 1130  %								?assertMatch(\"250 \"++_, Packet3),\n 1131: %								socket:send(CSock, \"RCPT TO: <user@otherhost.com>\\r\\n\"),\n 1132: %								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1133  %								?assertMatch(\"250 \"++_, Packet4),\n 1134: %								socket:send(CSock, \"DATA\\r\\n\"),\n 1135: %								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1136  %								?assertMatch(\"354 \"++_, Packet5),\n 1137: %								socket:send(CSock, \"Subject: tls message\\r\\n\"),\n 1138: %								socket:send(CSock, \"To: <user@otherhost>\\r\\n\"),\n 1139: %								socket:send(CSock, \"From: <user@somehost.com>\\r\\n\"),\n 1140: %								socket:send(CSock, \"\\r\\n\"),\n 1141: %								socket:send(CSock, \"this\\r\\n\"),\n 1142: %								socket:send(CSock, \"body\\r\\n\"),\n 1143: %								socket:send(CSock, \"has\\r\\n\"),\n 1144: %								socket:send(CSock, \"a\\r\\n\"),\n 1145: %								socket:send(CSock, \"bare\\n\"),\n 1146: %								socket:send(CSock, \"newline\\r\\n\"),\n 1147: %								socket:send(CSock, \"\\r\\n.\\r\\n\"),\n 1148: %								receive {tcp, CSock, Packet6} -> socket:active_once(CSock) end,\n 1149  %								?assertMatch(\"451 \"++_, Packet6),\n 1150  %						end\n ....\n 1154  %					{\"Sending DATA with a bare CR\",\n 1155  %						fun() ->\n 1156: %								socket:active_once(CSock),\n 1157: %								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1158  %								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1159: %								socket:send(CSock, \"HELO somehost.com\\r\\n\"),\n 1160: %								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1161  %								?assertMatch(\"250 localhost\\r\\n\",  Packet2),\n 1162: %								socket:send(CSock, \"MAIL FROM: <user@somehost.com>\\r\\n\"),\n 1163: %								receive {tcp, CSock, Packet3} -> socket:active_once(CSock) end,\n 1164  %								?assertMatch(\"250 \"++_, Packet3),\n 1165: %								socket:send(CSock, \"RCPT TO: <user@otherhost.com>\\r\\n\"),\n 1166: %								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1167  %								?assertMatch(\"250 \"++_, Packet4),\n 1168: %								socket:send(CSock, \"DATA\\r\\n\"),\n 1169: %								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1170  %								?assertMatch(\"354 \"++_, Packet5),\n 1171: %								socket:send(CSock, \"Subject: tls message\\r\\n\"),\n 1172: %								socket:send(CSock, \"To: <user@otherhost>\\r\\n\"),\n 1173: %								socket:send(CSock, \"From: <user@somehost.com>\\r\\n\"),\n 1174: %								socket:send(CSock, \"\\r\\n\"),\n 1175: %								socket:send(CSock, \"this\\r\\n\"),\n 1176: %								socket:send(CSock, \"\\rbody\\r\\n\"),\n 1177: %								socket:send(CSock, \"has\\r\\n\"),\n 1178: %								socket:send(CSock, \"a\\r\\n\"),\n 1179: %								socket:send(CSock, \"bare\\r\"),\n 1180: %								socket:send(CSock, \"CR\\r\\n\"),\n 1181: %								socket:send(CSock, \"\\r\\n.\\r\\n\"),\n 1182: %								receive {tcp, CSock, Packet6} -> socket:active_once(CSock) end,\n 1183  %								?assertMatch(\"451 \"++_, Packet6),\n 1184  %						end\n ....\n 1189  %					{\"Sending DATA with a bare newline in the headers\",\n 1190  %						fun() ->\n 1191: %								socket:active_once(CSock),\n 1192: %								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1193  %								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1194: %								socket:send(CSock, \"HELO somehost.com\\r\\n\"),\n 1195: %								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1196  %								?assertMatch(\"250 localhost\\r\\n\",  Packet2),\n 1197: %								socket:send(CSock, \"MAIL FROM: <user@somehost.com>\\r\\n\"),\n 1198: %								receive {tcp, CSock, Packet3} -> socket:active_once(CSock) end,\n 1199  %								?assertMatch(\"250 \"++_, Packet3),\n 1200: %								socket:send(CSock, \"RCPT TO: <user@otherhost.com>\\r\\n\"),\n 1201: %								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1202  %								?assertMatch(\"250 \"++_, Packet4),\n 1203: %								socket:send(CSock, \"DATA\\r\\n\"),\n 1204: %								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1205  %								?assertMatch(\"354 \"++_, Packet5),\n 1206: %								socket:send(CSock, \"Subject: tls message\\r\\n\"),\n 1207: %								socket:send(CSock, \"To: <user@otherhost>\\n\"),\n 1208: %								socket:send(CSock, \"From: <user@somehost.com>\\r\\n\"),\n 1209: %								socket:send(CSock, \"\\r\\n\"),\n 1210: %								socket:send(CSock, \"this\\r\\n\"),\n 1211: %								socket:send(CSock, \"body\\r\\n\"),\n 1212: %								socket:send(CSock, \"has\\r\\n\"),\n 1213: %								socket:send(CSock, \"no\\r\\n\"),\n 1214: %								socket:send(CSock, \"bare\\r\\n\"),\n 1215: %								socket:send(CSock, \"newlines\\r\\n\"),\n 1216: %								socket:send(CSock, \"\\r\\n.\\r\\n\"),\n 1217: %								receive {tcp, CSock, Packet6} -> socket:active_once(CSock) end,\n 1218  %								?assertMatch(\"451 \"++_, Packet6),\n 1219  %						end\n ....\n 1223  					{\"Sending DATA with bare newline on first line of body\",\n 1224  						fun() ->\n 1225: 								socket:active_once(CSock),\n 1226: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1227  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1228: 								socket:send(CSock, \"HELO somehost.com\\r\\n\"),\n 1229: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1230  								?assertMatch(\"250 localhost\\r\\n\",  Packet2),\n 1231: 								socket:send(CSock, \"MAIL FROM: <user@somehost.com>\\r\\n\"),\n 1232: 								receive {tcp, CSock, Packet3} -> socket:active_once(CSock) end,\n 1233  								?assertMatch(\"250 \"++_, Packet3),\n 1234: 								socket:send(CSock, \"RCPT TO: <user@otherhost.com>\\r\\n\"),\n 1235: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1236  								?assertMatch(\"250 \"++_, Packet4),\n 1237: 								socket:send(CSock, \"DATA\\r\\n\"),\n 1238: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1239  								?assertMatch(\"354 \"++_, Packet5),\n 1240: 								socket:send(CSock, \"Subject: tls message\\r\\n\"),\n 1241: 								socket:send(CSock, \"To: <user@otherhost>\\n\"),\n 1242: 								socket:send(CSock, \"From: <user@somehost.com>\\r\\n\"),\n 1243: 								socket:send(CSock, \"\\r\\n\"),\n 1244: 								socket:send(CSock, \"this\\n\"),\n 1245: 								socket:send(CSock, \"body\\r\\n\"),\n 1246: 								socket:send(CSock, \"has\\r\\n\"),\n 1247: 								socket:send(CSock, \"no\\r\\n\"),\n 1248: 								socket:send(CSock, \"bare\\r\\n\"),\n 1249: 								socket:send(CSock, \"newlines\\r\\n\"),\n 1250: 								socket:send(CSock, \"\\r\\n.\\r\\n\"),\n 1251: 								receive {tcp, CSock, Packet6} -> socket:active_once(CSock) end,\n 1252  								?assertMatch(\"451 \"++_, Packet6)\n 1253  						end\n ....\n 1264  				Self = self(),\n 1265  				spawn(fun() ->\n 1266: 							{ok, ListenSock} = socket:listen(tcp, 9876, [binary]),\n 1267: 							{ok, X} = socket:accept(ListenSock),\n 1268: 							socket:controlling_process(X, Self),\n 1269  							Self ! X\n 1270  					end),\n 1271: 				{ok, CSock} = socket:connect(tcp, \"localhost\", 9876),\n 1272  				receive\n 1273  					SSock when is_port(SSock) ->\n ....\n 1275  				end,\n 1276  				{ok, Pid} = gen_smtp_server_session:start(SSock, smtp_server_example, [{hostname, \"localhost\"}, {sessioncount, 1}, {callbackoptions, [{auth, true}]}]),\n 1277: 				socket:controlling_process(SSock, Pid),\n 1278  				{CSock, Pid}\n 1279  		end,\n 1280  		fun({CSock, _Pid}) ->\n 1281: 				socket:close(CSock)\n 1282  		end,\n 1283  		[fun({CSock, _Pid}) ->\n 1284  					{\"EHLO response includes AUTH\",\n 1285  						fun() ->\n 1286: 								socket:active_once(CSock),\n 1287: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1288  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1289: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1290: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1291  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1292  								Foo = fun(F, Acc) ->\n 1293  										receive\n 1294  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1295: 												socket:active_once(CSock),\n 1296  												F(F, true);\n 1297  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1298: 												socket:active_once(CSock),\n 1299  												F(F, Acc);\n 1300  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1301: 												socket:active_once(CSock),\n 1302  												true;\n 1303  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1304: 												socket:active_once(CSock),\n 1305  												Acc;\n 1306  											{tcp, CSock, _} ->\n 1307: 												socket:active_once(CSock),\n 1308  												error\n 1309  										end\n ....\n 1316  					{\"AUTH before EHLO is error\",\n 1317  						fun() ->\n 1318: 								socket:active_once(CSock),\n 1319: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1320  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1321: 								socket:send(CSock, \"AUTH CRAZY\\r\\n\"),\n 1322: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1323  								?assertMatch(\"503 \"++_,  Packet4)\n 1324  						end\n ....\n 1328  					{\"Unknown authentication type\",\n 1329  						fun() ->\n 1330: 								socket:active_once(CSock),\n 1331: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1332  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1333: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1334: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1335  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1336  								Foo = fun(F, Acc) ->\n 1337  										receive\n 1338  											{tcp, CSock, \"250-AUTH\"++_} ->\n 1339: 												socket:active_once(CSock),\n 1340  												F(F, true);\n 1341  											{tcp, CSock, \"250-\"++_} ->\n 1342: 												socket:active_once(CSock),\n 1343  												F(F, Acc);\n 1344  											{tcp, CSock, \"250 AUTH\"++_} ->\n 1345: 												socket:active_once(CSock),\n 1346  												true;\n 1347  											{tcp, CSock, \"250 \"++_} ->\n 1348: 												socket:active_once(CSock),\n 1349  												Acc;\n 1350  											{tcp, CSock, _} ->\n 1351: 												socket:active_once(CSock),\n 1352  												error\n 1353  										end\n 1354  								end,\n 1355  								?assertEqual(true, Foo(Foo, false)),\n 1356: 								socket:send(CSock, \"AUTH CRAZY\\r\\n\"),\n 1357: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1358  								?assertMatch(\"504 Unrecognized authentication type\\r\\n\",  Packet4)\n 1359  						end\n ....\n 1364  					{\"A successful AUTH PLAIN\",\n 1365  						fun() ->\n 1366: 								socket:active_once(CSock),\n 1367: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1368  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1369: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1370: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1371  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1372  								Foo = fun(F, Acc) ->\n 1373  										receive\n 1374  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1375: 												socket:active_once(CSock),\n 1376  												F(F, true);\n 1377  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1378: 												socket:active_once(CSock),\n 1379  												F(F, Acc);\n 1380  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1381: 												socket:active_once(CSock),\n 1382  												true;\n 1383  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1384: 												socket:active_once(CSock),\n 1385  												Acc;\n 1386  											{tcp, CSock, _} ->\n 1387: 												socket:active_once(CSock),\n 1388  												error\n 1389  										end\n 1390  								end,\n 1391  								?assertEqual(true, Foo(Foo, false)),\n 1392: 								socket:send(CSock, \"AUTH PLAIN\\r\\n\"),\n 1393: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1394  								?assertMatch(\"334\\r\\n\",  Packet4),\n 1395  								String = binary_to_list(base64:encode(\"\\0username\\0PaSSw0rd\")),\n 1396: 								socket:send(CSock, String++\"\\r\\n\"),\n 1397: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1398  								?assertMatch(\"235 Authentication successful.\\r\\n\",  Packet5)\n 1399  						end\n ....\n 1403  					{\"A successful AUTH PLAIN with an identity\",\n 1404  						fun() ->\n 1405: 								socket:active_once(CSock),\n 1406: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1407  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1408: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1409: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1410  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1411  								Foo = fun(F, Acc) ->\n 1412  										receive\n 1413  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1414: 												socket:active_once(CSock),\n 1415  												F(F, true);\n 1416  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1417: 												socket:active_once(CSock),\n 1418  												F(F, Acc);\n 1419  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1420: 												socket:active_once(CSock),\n 1421  												true;\n 1422  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1423: 												socket:active_once(CSock),\n 1424  												Acc;\n 1425  											{tcp, CSock, _} ->\n 1426: 												socket:active_once(CSock),\n 1427  												error\n 1428  										end\n 1429  								end,\n 1430  								?assertEqual(true, Foo(Foo, false)),\n 1431: 								socket:send(CSock, \"AUTH PLAIN\\r\\n\"),\n 1432: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1433  								?assertMatch(\"334\\r\\n\",  Packet4),\n 1434  								String = binary_to_list(base64:encode(\"username\\0username\\0PaSSw0rd\")),\n 1435: 								socket:send(CSock, String++\"\\r\\n\"),\n 1436: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1437  								?assertMatch(\"235 Authentication successful.\\r\\n\",  Packet5)\n 1438  						end\n ....\n 1442  					{\"A successful immediate AUTH PLAIN\",\n 1443  						fun() ->\n 1444: 								socket:active_once(CSock),\n 1445: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1446  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1447: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1448: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1449  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1450  								Foo = fun(F, Acc) ->\n 1451  										receive\n 1452  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1453: 												socket:active_once(CSock),\n 1454  												F(F, true);\n 1455  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1456: 												socket:active_once(CSock),\n 1457  												F(F, Acc);\n 1458  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1459: 												socket:active_once(CSock),\n 1460  												true;\n 1461  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1462: 												socket:active_once(CSock),\n 1463  												Acc;\n 1464  											{tcp, CSock, _} ->\n 1465: 												socket:active_once(CSock),\n 1466  												error\n 1467  										end\n ....\n 1469  								?assertEqual(true, Foo(Foo, false)),\n 1470  								String = binary_to_list(base64:encode(\"\\0username\\0PaSSw0rd\")),\n 1471: 								socket:send(CSock, \"AUTH PLAIN \"++String++\"\\r\\n\"),\n 1472: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1473  								?assertMatch(\"235 Authentication successful.\\r\\n\",  Packet5)\n 1474  						end\n ....\n 1478  					{\"A successful immediate AUTH PLAIN with an identity\",\n 1479  						fun() ->\n 1480: 								socket:active_once(CSock),\n 1481: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1482  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1483: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1484: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1485  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1486  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n ....\n 1488  										receive\n 1489  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1490: 												socket:active_once(CSock),\n 1491  												F(F, true);\n 1492  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1493: 												socket:active_once(CSock),\n 1494  												F(F, Acc);\n 1495  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1496: 												socket:active_once(CSock),\n 1497  												true;\n 1498  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1499: 												socket:active_once(CSock),\n 1500  												Acc;\n 1501  											{tcp, CSock, _R} ->\n 1502: 												socket:active_once(CSock),\n 1503  												error\n 1504  										end\n ....\n 1506  								?assertEqual(true, Foo(Foo, false)),\n 1507  								String = binary_to_list(base64:encode(\"username\\0username\\0PaSSw0rd\")),\n 1508: 								socket:send(CSock, \"AUTH PLAIN \"++String++\"\\r\\n\"),\n 1509: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1510  								?assertMatch(\"235 Authentication successful.\\r\\n\",  Packet5)\n 1511  						end\n ....\n 1515  					{\"An unsuccessful immediate AUTH PLAIN\",\n 1516  						fun() ->\n 1517: 								socket:active_once(CSock),\n 1518: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1519  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1520: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1521: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1522  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1523  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n ....\n 1525  										receive\n 1526  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1527: 												socket:active_once(CSock),\n 1528  												F(F, true);\n 1529  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1530: 												socket:active_once(CSock),\n 1531  												F(F, Acc);\n 1532  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1533: 												socket:active_once(CSock),\n 1534  												true;\n 1535  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1536: 												socket:active_once(CSock),\n 1537  												Acc;\n 1538  											{tcp, CSock, _} ->\n 1539: 												socket:active_once(CSock),\n 1540  												error\n 1541  										end\n ....\n 1543  								?assertEqual(true, Foo(Foo, false)),\n 1544  								String = binary_to_list(base64:encode(\"username\\0username\\0PaSSw0rd2\")),\n 1545: 								socket:send(CSock, \"AUTH PLAIN \"++String++\"\\r\\n\"),\n 1546: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1547  								?assertMatch(\"535 Authentication failed.\\r\\n\",  Packet5)\n 1548  						end\n ....\n 1552  					{\"An unsuccessful AUTH PLAIN\",\n 1553  						fun() ->\n 1554: 								socket:active_once(CSock),\n 1555: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1556  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1557: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1558: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1559  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1560  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n ....\n 1562  										receive\n 1563  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1564: 												socket:active_once(CSock),\n 1565  												F(F, true);\n 1566  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1567: 												socket:active_once(CSock),\n 1568  												F(F, Acc);\n 1569  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1570: 												socket:active_once(CSock),\n 1571  												true;\n 1572  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1573: 												socket:active_once(CSock),\n 1574  												Acc;\n 1575  											{tcp, CSock, _} ->\n 1576: 												socket:active_once(CSock),\n 1577  												error\n 1578  										end\n 1579  								end,\n 1580  								?assertEqual(true, Foo(Foo, false)),\n 1581: 								socket:send(CSock, \"AUTH PLAIN\\r\\n\"),\n 1582: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1583  								?assertMatch(\"334\\r\\n\",  Packet4),\n 1584  								String = binary_to_list(base64:encode(\"\\0username\\0NotThePassword\")),\n 1585: 								socket:send(CSock, String++\"\\r\\n\"),\n 1586: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1587  								?assertMatch(\"535 Authentication failed.\\r\\n\",  Packet5)\n 1588  						end\n ....\n 1592  					{\"A successful AUTH LOGIN\",\n 1593  						fun() ->\n 1594: 								socket:active_once(CSock),\n 1595: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1596  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1597: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1598: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1599  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1600  								Foo = fun(F, Acc) ->\n 1601  										receive\n 1602  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1603: 												socket:active_once(CSock),\n 1604  												F(F, true);\n 1605  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1606: 												socket:active_once(CSock),\n 1607  												F(F, Acc);\n 1608  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1609: 												socket:active_once(CSock),\n 1610  												true;\n 1611  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1612: 												socket:active_once(CSock),\n 1613  												Acc;\n 1614  											{tcp, CSock, _} ->\n 1615: 												socket:active_once(CSock),\n 1616  												error\n 1617  										end\n 1618  								end,\n 1619  								?assertEqual(true, Foo(Foo, false)),\n 1620: 								socket:send(CSock, \"AUTH LOGIN\\r\\n\"),\n 1621: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1622  								?assertMatch(\"334 VXNlcm5hbWU6\\r\\n\",  Packet4),\n 1623  								String = binary_to_list(base64:encode(\"username\")),\n 1624: 								socket:send(CSock, String++\"\\r\\n\"),\n 1625: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1626  								?assertMatch(\"334 UGFzc3dvcmQ6\\r\\n\",  Packet5),\n 1627  								PString = binary_to_list(base64:encode(\"PaSSw0rd\")),\n 1628: 								socket:send(CSock, PString++\"\\r\\n\"),\n 1629: 								receive {tcp, CSock, Packet6} -> socket:active_once(CSock) end,\n 1630  								?assertMatch(\"235 Authentication successful.\\r\\n\",  Packet6)\n 1631  						end\n ....\n 1635  					{\"An unsuccessful AUTH LOGIN\",\n 1636  						fun() ->\n 1637: 								socket:active_once(CSock),\n 1638: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1639  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1640: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1641: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1642  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1643  								Foo = fun(F, Acc) ->\n 1644  										receive\n 1645  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1646: 												socket:active_once(CSock),\n 1647  												F(F, true);\n 1648  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1649: 												socket:active_once(CSock),\n 1650  												F(F, Acc);\n 1651  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1652: 												socket:active_once(CSock),\n 1653  												true;\n 1654  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1655: 												socket:active_once(CSock),\n 1656  												Acc;\n 1657  											{tcp, CSock, _} ->\n 1658: 												socket:active_once(CSock),\n 1659  												error\n 1660  										end\n 1661  								end,\n 1662  								?assertEqual(true, Foo(Foo, false)),\n 1663: 								socket:send(CSock, \"AUTH LOGIN\\r\\n\"),\n 1664: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1665  								?assertMatch(\"334 VXNlcm5hbWU6\\r\\n\",  Packet4),\n 1666  								String = binary_to_list(base64:encode(\"username2\")),\n 1667: 								socket:send(CSock, String++\"\\r\\n\"),\n 1668: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1669  								?assertMatch(\"334 UGFzc3dvcmQ6\\r\\n\",  Packet5),\n 1670  								PString = binary_to_list(base64:encode(\"PaSSw0rd\")),\n 1671: 								socket:send(CSock, PString++\"\\r\\n\"),\n 1672: 								receive {tcp, CSock, Packet6} -> socket:active_once(CSock) end,\n 1673  								?assertMatch(\"535 Authentication failed.\\r\\n\",  Packet6)\n 1674  						end\n ....\n 1678  					{\"A successful AUTH CRAM-MD5\",\n 1679  						fun() ->\n 1680: 								socket:active_once(CSock),\n 1681: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1682  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1683: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1684: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1685  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1686  								Foo = fun(F, Acc) ->\n 1687  										receive\n 1688  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1689: 												socket:active_once(CSock),\n 1690  												F(F, true);\n 1691  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1692: 												socket:active_once(CSock),\n 1693  												F(F, Acc);\n 1694  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1695: 												socket:active_once(CSock),\n 1696  												true;\n 1697  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1698: 												socket:active_once(CSock),\n 1699  												Acc;\n 1700  											{tcp, CSock, _} ->\n 1701: 												socket:active_once(CSock),\n 1702  												error\n 1703  										end\n 1704  								end,\n 1705  								?assertEqual(true, Foo(Foo, false)),\n 1706: 								socket:send(CSock, \"AUTH CRAM-MD5\\r\\n\"),\n 1707: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1708  								?assertMatch(\"334 \"++_,  Packet4),\n 1709  \n ....\n 1712  								Digest = smtp_util:compute_cram_digest(\"PaSSw0rd\", Seed),\n 1713  								String = binary_to_list(base64:encode(list_to_binary([\"username \", Digest]))),\n 1714: 								socket:send(CSock, String++\"\\r\\n\"),\n 1715: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1716  								?assertMatch(\"235 Authentication successful.\\r\\n\",  Packet5)\n 1717  						end\n ....\n 1721  					{\"An unsuccessful AUTH CRAM-MD5\",\n 1722  						fun() ->\n 1723: 								socket:active_once(CSock),\n 1724: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1725  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1726: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1727: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1728  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1729  								Foo = fun(F, Acc) ->\n 1730  										receive\n 1731  											{tcp, CSock, \"250-AUTH\"++_Packet3} ->\n 1732: 												socket:active_once(CSock),\n 1733  												F(F, true);\n 1734  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1735: 												socket:active_once(CSock),\n 1736  												F(F, Acc);\n 1737  											{tcp, CSock, \"250 AUTH\"++_Packet3} ->\n 1738: 												socket:active_once(CSock),\n 1739  												true;\n 1740  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1741: 												socket:active_once(CSock),\n 1742  												Acc;\n 1743  											{tcp, CSock, _} ->\n 1744: 												socket:active_once(CSock),\n 1745  												error\n 1746  										end\n 1747  								end,\n 1748  								?assertEqual(true, Foo(Foo, false)),\n 1749: 								socket:send(CSock, \"AUTH CRAM-MD5\\r\\n\"),\n 1750: 								receive {tcp, CSock, Packet4} -> socket:active_once(CSock) end,\n 1751  								?assertMatch(\"334 \"++_,  Packet4),\n 1752  \n ....\n 1755  								Digest = smtp_util:compute_cram_digest(\"Passw0rd\", Seed),\n 1756  								String = binary_to_list(base64:encode(list_to_binary([\"username \", Digest]))),\n 1757: 								socket:send(CSock, String++\"\\r\\n\"),\n 1758: 								receive {tcp, CSock, Packet5} -> socket:active_once(CSock) end,\n 1759  								?assertMatch(\"535 Authentication failed.\\r\\n\",  Packet5)\n 1760  						end\n ....\n 1773  				Self = self(),\n 1774  				spawn(fun() ->\n 1775: 							{ok, ListenSock} = socket:listen(tcp, 9876, [binary]),\n 1776: 							{ok, X} = socket:accept(ListenSock),\n 1777: 							socket:controlling_process(X, Self),\n 1778  							Self ! X\n 1779  					end),\n 1780: 				{ok, CSock} = socket:connect(tcp, \"localhost\", 9876),\n 1781  				receive\n 1782  					SSock when is_port(SSock) ->\n ....\n 1784  				end,\n 1785  				{ok, Pid} = gen_smtp_server_session:start(SSock, smtp_server_example, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}, {hostname, \"localhost\"}, {sessioncount, 1}, {callbackoptions, [{auth, true}]}]),\n 1786: 				socket:controlling_process(SSock, Pid),\n 1787  				{CSock, Pid}\n 1788  		end,\n 1789  		fun({CSock, _Pid}) ->\n 1790: 				socket:close(CSock)\n 1791  		end,\n 1792  		[fun({CSock, _Pid}) ->\n 1793  					{\"EHLO response includes STARTTLS\",\n 1794  						fun() ->\n 1795: 								socket:active_once(CSock),\n 1796: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1797  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1798: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1799: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1800  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1801  								Foo = fun(F, Acc) ->\n 1802  										receive\n 1803  											{tcp, CSock, \"250-STARTTLS\"++_} ->\n 1804: 												socket:active_once(CSock),\n 1805  												F(F, true);\n 1806  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1807: 												socket:active_once(CSock),\n 1808  												F(F, Acc);\n 1809  											{tcp, CSock, \"250 STARTTLS\"++_} ->\n 1810: 												socket:active_once(CSock),\n 1811  												true;\n 1812  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1813: 												socket:active_once(CSock),\n 1814  												Acc;\n 1815  											{tcp, CSock, _} ->\n 1816: 												socket:active_once(CSock),\n 1817  												error\n 1818  										end\n ....\n 1825  					{\"STARTTLS does a SSL handshake\",\n 1826  						fun() ->\n 1827: 								socket:active_once(CSock),\n 1828: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1829  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1830: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1831: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1832  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1833  								Foo = fun(F, Acc) ->\n 1834  										receive\n 1835  											{tcp, CSock, \"250-STARTTLS\"++_} ->\n 1836: 												socket:active_once(CSock),\n 1837  												F(F, true);\n 1838  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1839: 												socket:active_once(CSock),\n 1840  												F(F, Acc);\n 1841  											{tcp, CSock, \"250 STARTTLS\"++_} ->\n 1842: 												socket:active_once(CSock),\n 1843  												true;\n 1844  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1845: 												socket:active_once(CSock),\n 1846  												Acc;\n 1847  											{tcp, CSock, _} ->\n 1848: 												socket:active_once(CSock),\n 1849  												error\n 1850  										end\n 1851  								end,\n 1852  								?assertEqual(true, Foo(Foo, false)),\n 1853: 								socket:send(CSock, \"STARTTLS\\r\\n\"),\n 1854  								receive {tcp, CSock, Packet4} -> ok end,\n 1855  								?assertMatch(\"220 \"++_,  Packet4),\n 1856: 								Result = socket:to_ssl_client(CSock),\n 1857: 								?assertMatch({ok, _Socket}, Result),\n 1858: 								{ok, _Socket} = Result\n 1859: 								%socket:active_once(Socket),\n 1860: 								%ssl:send(Socket, \"EHLO somehost.com\\r\\n\"),\n 1861: 								%receive {ssl, Socket, Packet5} -> socket:active_once(Socket) end,\n 1862  								%?assertEqual(\"Foo\", Packet5),\n 1863  						end\n ....\n 1867  					{\"After STARTTLS, EHLO doesn't report STARTTLS\",\n 1868  						fun() ->\n 1869: 								socket:active_once(CSock),\n 1870: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1871  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1872: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1873: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1874  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1875  								Foo = fun(F, Acc) ->\n 1876  										receive\n 1877  											{tcp, CSock, \"250-STARTTLS\"++_} ->\n 1878: 												socket:active_once(CSock),\n 1879  												F(F, true);\n 1880  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1881: 												socket:active_once(CSock),\n 1882  												F(F, Acc);\n 1883  											{tcp, CSock, \"250 STARTTLS\"++_} ->\n 1884: 												socket:active_once(CSock),\n 1885  												true;\n 1886  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1887: 												socket:active_once(CSock),\n 1888  												Acc;\n 1889  											{tcp, CSock, _} ->\n 1890: 												socket:active_once(CSock),\n 1891  												error\n 1892  										end\n 1893  								end,\n 1894  								?assertEqual(true, Foo(Foo, false)),\n 1895: 								socket:send(CSock, \"STARTTLS\\r\\n\"),\n 1896  								receive {tcp, CSock, Packet4} -> ok end,\n 1897  								?assertMatch(\"220 \"++_,  Packet4),\n 1898: 								Result = socket:to_ssl_client(CSock),\n 1899: 								?assertMatch({ok, _Socket}, Result),\n 1900: 								{ok, Socket} = Result,\n 1901: 								socket:active_once(Socket),\n 1902: 								socket:send(Socket, \"EHLO somehost.com\\r\\n\"),\n 1903: 								receive {ssl, Socket, Packet5} -> socket:active_once(Socket) end,\n 1904  								?assertMatch(\"250-localhost\\r\\n\",  Packet5),\n 1905  								Bar = fun(F, Acc) ->\n 1906  										receive\n 1907: 											{ssl, Socket, \"250-STARTTLS\"++_} ->\n 1908: 												socket:active_once(Socket),\n 1909  												F(F, true);\n 1910: 											{ssl, Socket, \"250-\"++_} ->\n 1911: 												socket:active_once(Socket),\n 1912  												F(F, Acc);\n 1913: 											{ssl, Socket, \"250 STARTTLS\"++_} ->\n 1914: 												socket:active_once(Socket),\n 1915  												true;\n 1916: 											{ssl, Socket, \"250 \"++_} ->\n 1917: 												socket:active_once(Socket),\n 1918  												Acc;\n 1919: 											{ssl, Socket, _} ->\n 1920: 												socket:active_once(Socket),\n 1921  												error\n 1922  										end\n ....\n 1929  					{\"After STARTTLS, re-negotiating STARTTLS is an error\",\n 1930  						fun() ->\n 1931: 								socket:active_once(CSock),\n 1932: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1933  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1934: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 1935: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 1936  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 1937  								Foo = fun(F, Acc) ->\n 1938  										receive\n 1939  											{tcp, CSock, \"250-STARTTLS\"++_} ->\n 1940: 												socket:active_once(CSock),\n 1941  												F(F, true);\n 1942  											{tcp, CSock, \"250-\"++_Packet3} ->\n 1943: 												socket:active_once(CSock),\n 1944  												F(F, Acc);\n 1945  											{tcp, CSock, \"250 STARTTLS\"++_} ->\n 1946: 												socket:active_once(CSock),\n 1947  												true;\n 1948  											{tcp, CSock, \"250 \"++_Packet3} ->\n 1949: 												socket:active_once(CSock),\n 1950  												Acc;\n 1951  											{tcp, CSock, _} ->\n 1952: 												socket:active_once(CSock),\n 1953  												error\n 1954  										end\n 1955  								end,\n 1956  								?assertEqual(true, Foo(Foo, false)),\n 1957: 								socket:send(CSock, \"STARTTLS\\r\\n\"),\n 1958  								receive {tcp, CSock, Packet4} -> ok end,\n 1959  								?assertMatch(\"220 \"++_,  Packet4),\n 1960: 								Result = socket:to_ssl_client(CSock),\n 1961: 								?assertMatch({ok, _Socket}, Result),\n 1962: 								{ok, Socket} = Result,\n 1963: 								socket:active_once(Socket),\n 1964: 								socket:send(Socket, \"EHLO somehost.com\\r\\n\"),\n 1965: 								receive {ssl, Socket, Packet5} -> socket:active_once(Socket) end,\n 1966  								?assertMatch(\"250-localhost\\r\\n\",  Packet5),\n 1967  								Bar = fun(F, Acc) ->\n 1968  										receive\n 1969: 											{ssl, Socket, \"250-STARTTLS\"++_} ->\n 1970: 												socket:active_once(Socket),\n 1971  												F(F, true);\n 1972: 											{ssl, Socket, \"250-\"++_} ->\n 1973: 												socket:active_once(Socket),\n 1974  												F(F, Acc);\n 1975: 											{ssl, Socket, \"250 STARTTLS\"++_} ->\n 1976: 												socket:active_once(Socket),\n 1977  												true;\n 1978: 											{ssl, Socket, \"250 \"++_} ->\n 1979: 												socket:active_once(Socket),\n 1980  												Acc;\n 1981: 											{ssl, Socket, _} ->\n 1982: 												socket:active_once(Socket),\n 1983  												error\n 1984  										end\n 1985  								end,\n 1986  								?assertEqual(false, Bar(Bar, false)),\n 1987: 								socket:send(Socket, \"STARTTLS\\r\\n\"),\n 1988: 								receive {ssl, Socket, Packet6} -> socket:active_once(Socket) end,\n 1989  								?assertMatch(\"500 \"++_, Packet6)\n 1990  						end\n ....\n 1994  					{\"STARTTLS can't take any parameters\",\n 1995  						fun() ->\n 1996: 								socket:active_once(CSock),\n 1997: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 1998  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 1999: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 2000: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 2001  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 2002  								Foo = fun(F, Acc) ->\n 2003  										receive\n 2004  											{tcp, CSock, \"250-STARTTLS\"++_} ->\n 2005: 												socket:active_once(CSock),\n 2006  												F(F, true);\n 2007  											{tcp, CSock, \"250-\"++_Packet3} ->\n 2008: 												socket:active_once(CSock),\n 2009  												F(F, Acc);\n 2010  											{tcp, CSock, \"250 STARTTLS\"++_} ->\n 2011: 												socket:active_once(CSock),\n 2012  												true;\n 2013  											{tcp, CSock, \"250 \"++_Packet3} ->\n 2014: 												socket:active_once(CSock),\n 2015  												Acc;\n 2016  											{tcp, CSock, _} ->\n 2017: 												socket:active_once(CSock),\n 2018  												error\n 2019  										end\n 2020  								end,\n 2021  								?assertEqual(true, Foo(Foo, false)),\n 2022: 								socket:send(CSock, \"STARTTLS foo\\r\\n\"),\n 2023  								receive {tcp, CSock, Packet4} -> ok end,\n 2024  								?assertMatch(\"501 \"++_,  Packet4)\n ....\n 2029  					{\"Negotiating STARTTLS twice is an error\",\n 2030  						fun() ->\n 2031: 								socket:active_once(CSock),\n 2032: 								receive {tcp, CSock, _Packet} -> socket:active_once(CSock) end,\n 2033: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 2034: 								receive {tcp, CSock, _Packet2} -> socket:active_once(CSock) end,\n 2035  								ReadExtensions = fun(F, Acc) ->\n 2036  										receive\n 2037  											{tcp, CSock, \"250-STARTTLS\"++_} ->\n 2038: 												socket:active_once(CSock),\n 2039  												F(F, true);\n 2040  											{tcp, CSock, \"250-\"++_Packet3} ->\n 2041: 												socket:active_once(CSock),\n 2042  												F(F, Acc);\n 2043  											{tcp, CSock, \"250 STARTTLS\"++_} ->\n 2044: 												socket:active_once(CSock),\n 2045  												true;\n 2046  											{tcp, CSock, \"250 \"++_Packet3} ->\n 2047: 												socket:active_once(CSock),\n 2048  												Acc;\n 2049  											{tcp, CSock, _} ->\n 2050: 												socket:active_once(CSock),\n 2051  												error\n 2052  										end\n 2053  								end,\n 2054  								?assertEqual(true, ReadExtensions(ReadExtensions, false)),\n 2055: 								socket:send(CSock, \"STARTTLS\\r\\n\"),\n 2056  								receive {tcp, CSock, _} -> ok end,\n 2057: 								{ok, Socket} = socket:to_ssl_client(CSock),\n 2058: 								socket:active_once(Socket),\n 2059: 								socket:send(Socket, \"EHLO somehost.com\\r\\n\"),\n 2060: 								receive {ssl, Socket, PacketN} -> socket:active_once(Socket) end,\n 2061  								?assertMatch(\"250-localhost\\r\\n\",  PacketN),\n 2062  								Bar = fun(F, Acc) ->\n 2063  										receive\n 2064: 											{ssl, Socket, \"250-STARTTLS\"++_} ->\n 2065: 												socket:active_once(Socket),\n 2066  												F(F, true);\n 2067: 											{ssl, Socket, \"250-\"++_} ->\n 2068: 												socket:active_once(Socket),\n 2069  												F(F, Acc);\n 2070: 											{ssl, Socket, \"250 STARTTLS\"++_} ->\n 2071: 												socket:active_once(Socket),\n 2072  												true;\n 2073: 											{ssl, Socket, \"250 \"++_} ->\n 2074: 												socket:active_once(Socket),\n 2075  												Acc;\n 2076: 											{tcp, Socket, _} ->\n 2077: 												socket:active_once(Socket),\n 2078  												error\n 2079  										end\n 2080  								end,\n 2081  								?assertEqual(false, Bar(Bar, false)),\n 2082: 								socket:send(Socket, \"STARTTLS\\r\\n\"),\n 2083: 								receive {ssl, Socket, Packet6} -> socket:active_once(Socket) end,\n 2084  								?assertMatch(\"500 \"++_,  Packet6)\n 2085  						end\n ....\n 2089  					{\"STARTTLS can't take any parameters\",\n 2090  						fun() ->\n 2091: 								socket:active_once(CSock),\n 2092: 								receive {tcp, CSock, Packet} -> socket:active_once(CSock) end,\n 2093  								?assertMatch(\"220 localhost\"++_Stuff,  Packet),\n 2094: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 2095: 								receive {tcp, CSock, Packet2} -> socket:active_once(CSock) end,\n 2096  								?assertMatch(\"250-localhost\\r\\n\",  Packet2),\n 2097  								Foo = fun(F, Acc) ->\n 2098  										receive\n 2099  											{tcp, CSock, \"250-STARTTLS\"++_} ->\n 2100: 												socket:active_once(CSock),\n 2101  												F(F, true);\n 2102  											{tcp, CSock, \"250-\"++_Packet3} ->\n 2103: 												socket:active_once(CSock),\n 2104  												F(F, Acc);\n 2105  											{tcp, CSock, \"250 STARTTLS\"++_} ->\n 2106: 												socket:active_once(CSock),\n 2107  												true;\n 2108  											{tcp, CSock, \"250 \"++_Packet3} ->\n 2109: 												socket:active_once(CSock),\n 2110  												Acc;\n 2111  											{tcp, CSock, _} ->\n 2112: 												socket:active_once(CSock),\n 2113  												error\n 2114  										end\n 2115  								end,\n 2116  								?assertEqual(true, Foo(Foo, false)),\n 2117: 								socket:send(CSock, \"STARTTLS foo\\r\\n\"),\n 2118  								receive {tcp, CSock, Packet4} -> ok end,\n 2119  								?assertMatch(\"501 \"++_,  Packet4)\n ....\n 2124  					{\"After STARTTLS, message is received by server\",\n 2125  						fun() ->\n 2126: 								socket:active_once(CSock),\n 2127: 								receive {tcp, CSock, _Packet} -> socket:active_once(CSock) end,\n 2128: 								socket:send(CSock, \"EHLO somehost.com\\r\\n\"),\n 2129: 								receive {tcp, CSock, _Packet2} -> socket:active_once(CSock) end,\n 2130  								ReadExtensions = fun(F, Acc) ->\n 2131  										receive\n 2132  											{tcp, CSock, \"250-STARTTLS\"++_} ->\n 2133: 												socket:active_once(CSock),\n 2134  												F(F, true);\n 2135  											{tcp, CSock, \"250-\"++_Packet3} ->\n 2136: 												socket:active_once(CSock),\n 2137  												F(F, Acc);\n 2138  											{tcp, CSock, \"250 STARTTLS\"++_} ->\n 2139: 												socket:active_once(CSock),\n 2140  												true;\n 2141  											{tcp, CSock, \"250 \"++_Packet3} ->\n 2142: 												socket:active_once(CSock),\n 2143  												Acc;\n 2144  											{tcp, CSock, _} ->\n 2145: 												socket:active_once(CSock),\n 2146  												error\n 2147  										end\n 2148  								end,\n 2149  								?assertEqual(true, ReadExtensions(ReadExtensions, false)),\n 2150: 								socket:send(CSock, \"STARTTLS\\r\\n\"),\n 2151  								receive {tcp, CSock, _} -> ok end,\n 2152: 								{ok, Socket} = socket:to_ssl_client(CSock),\n 2153: 								socket:active_once(Socket),\n 2154: 								socket:send(Socket, \"EHLO somehost.com\\r\\n\"),\n 2155  								ReadSSLExtensions = fun(F, Acc) ->\n 2156  										receive\n 2157: 											{ssl, Socket, \"250-\"++_Rest} ->\n 2158: 												socket:active_once(Socket),\n 2159  												F(F, Acc);\n 2160: 											{ssl, Socket, \"250 \"++_} ->\n 2161: 												socket:active_once(Socket),\n 2162  												true;\n 2163: 											{ssl, Socket, _R} ->\n 2164: 												socket:active_once(Socket),\n 2165  												error\n 2166  										end\n 2167  								end,\n 2168  								?assertEqual(true, ReadSSLExtensions(ReadSSLExtensions, false)),\n 2169: 								socket:send(Socket, \"MAIL FROM: <user@somehost.com>\\r\\n\"),\n 2170: 								receive {ssl, Socket, Packet4} -> socket:active_once(Socket) end,\n 2171  								?assertMatch(\"250 \"++_, Packet4),\n 2172: 								socket:send(Socket, \"RCPT TO: <user@otherhost.com>\\r\\n\"),\n 2173: 								receive {ssl, Socket, Packet5} -> socket:active_once(Socket) end,\n 2174  								?assertMatch(\"250 \"++_, Packet5),\n 2175: 								socket:send(Socket, \"DATA\\r\\n\"),\n 2176: 								receive {ssl, Socket, Packet6} -> socket:active_once(Socket) end,\n 2177  								?assertMatch(\"354 \"++_, Packet6),\n 2178: 								socket:send(Socket, \"Subject: tls message\\r\\n\"),\n 2179: 								socket:send(Socket, \"To: <user@otherhost>\\r\\n\"),\n 2180: 								socket:send(Socket, \"From: <user@somehost.com>\\r\\n\"),\n 2181: 								socket:send(Socket, \"\\r\\n\"),\n 2182: 								socket:send(Socket, \"message body\"),\n 2183: 								socket:send(Socket, \"\\r\\n.\\r\\n\"),\n 2184: 								receive {ssl, Socket, Packet7} -> socket:active_once(Socket) end,\n 2185  								?assertMatch(\"250 \"++_, Packet7)\n 2186  						end\n\n/home/sam/conversant/repos/kazoo/deps/gen_smtp-0.0.1/src/socket.erl:\n   20  %%% WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n   21  \n   22: %% @doc Facilitates transparent gen_tcp/ssl socket handling\n   23: -module(socket).\n   24  \n   25  \n   ..\n   63  -export([begin_inet_async/1]).\n   64  -export([handle_inet_async/1, handle_inet_async/2, handle_inet_async/3]).\n   65: -export([extract_port_from_socket/1]).\n   66  -export([to_ssl_server/1,to_ssl_server/2,to_ssl_server/3]).\n   67  -export([to_ssl_client/1,to_ssl_client/2,to_ssl_client/3]).\n   ..\n   70  -type protocol() :: 'tcp' | 'ssl'.\n   71  -type address() :: inet:ip_address() | string() | binary().\n   72: -type socket() :: ssl:sslsocket() | gen_tcp:socket().\n   73  \n   74  %%%-----------------------------------------------------------------\n   75  %%% API\n   76  %%%-----------------------------------------------------------------\n   77: -spec connect(Protocol :: protocol(), Address :: address(), Port :: pos_integer()) -> socket().\n   78  connect(Protocol, Address, Port) ->\n   79  	connect(Protocol, Address, Port, [], infinity).\n   80  \n   81: -spec connect(Protocol :: protocol(), Address :: address(), Port :: pos_integer(), Options :: list()) -> socket().\n   82  connect(Protocol, Address, Port, Opts) ->\n   83  	connect(Protocol, Address, Port, Opts, infinity).\n   84  \n   85: -spec connect(Protocol :: protocol(), Address :: address(), Port :: pos_integer(), Options :: list(), Time :: non_neg_integer() | 'infinity') -> socket().\n   86  connect(tcp, Address, Port, Opts, Time) ->\n   87  	gen_tcp:connect(Address, Port, tcp_connect_options(Opts), Time);\n   ..\n   93  \n   94  \n   95: -spec listen(Protocol :: protocol(), Port :: pos_integer()) -> socket().\n   96  listen(Protocol, Port) ->\n   97  	listen(Protocol, Port, []).\n   98  \n   99: -spec listen(Protocol :: protocol(), Port :: pos_integer(), Options :: list()) -> socket().\n  100  listen(ssl, Port, Options) ->\n  101  	application:start(crypto),\n  ...\n  107  \n  108  \n  109: -spec accept(Socket :: socket()) -> {'ok', socket()} | {'error', any()}.\n  110: accept(Socket) ->\n  111: 	accept(Socket, infinity).\n  112  \n  113: -spec accept(Socket :: socket(), Timeout :: pos_integer() | 'infinity') -> {'ok', socket()} | {'error', any()}.\n  114: accept(Socket, Timeout) when is_port(Socket) ->\n  115: 	case gen_tcp:accept(Socket, Timeout) of\n  116: 		{ok, NewSocket} ->\n  117: 			{ok, Opts} = inet:getopts(Socket, [active,keepalive,packet,reuseaddr]),\n  118: 			inet:setopts(NewSocket, Opts),\n  119: 			{ok, NewSocket};\n  120  		Error ->\n  121  			Error\n  122  	end;\n  123: accept(Socket, Timeout) ->\n  124: 	case ssl:transport_accept(Socket, Timeout) of\n  125: 		{ok, NewSocket} ->\n  126: 			ssl:ssl_accept(NewSocket),\n  127: 			{ok, NewSocket};\n  128  		Error -> Error\n  129  	end.\n  130  \n  131: -spec send(Socket :: socket(), Data :: binary() | string() | iolist()) -> 'ok' | {'error', any()}.\n  132: send(Socket, Data) when is_port(Socket) ->\n  133: 	gen_tcp:send(Socket, Data);\n  134: send(Socket, Data) ->\n  135: 	ssl:send(Socket, Data).\n  136  \n  137: -spec recv(Socket :: socket(), Length :: non_neg_integer()) -> {'ok', any()} | {'error', any()}.\n  138: recv(Socket, Length) ->\n  139: 	recv(Socket, Length, infinity).\n  140  \n  141: -spec recv(Socket :: socket(), Length :: non_neg_integer(), Timeout :: non_neg_integer() | 'infinity') -> {'ok', any()} | {'error', any()}.\n  142: recv(Socket, Length, Timeout) when is_port(Socket) ->\n  143: 	gen_tcp:recv(Socket, Length, Timeout);\n  144: recv(Socket, Length, Timeout) ->\n  145: 	ssl:recv(Socket, Length, Timeout).\n  146  \n  147: -spec controlling_process(Socket :: socket(), NewOwner :: pid()) -> 'ok' | {'error', any()}.\n  148: controlling_process(Socket, NewOwner) when is_port(Socket) ->\n  149: 	gen_tcp:controlling_process(Socket, NewOwner);\n  150: controlling_process(Socket, NewOwner) ->\n  151: 	ssl:controlling_process(Socket, NewOwner).\n  152  \n  153: -spec peername(Socket :: socket()) -> {ok, {inet:ip_address(), non_neg_integer()}} | {'error', any()}.\n  154: peername(Socket) when is_port(Socket) ->\n  155: 	inet:peername(Socket);\n  156: peername(Socket) ->\n  157: 	ssl:peername(Socket).\n  158  \n  159: -spec close(Socket :: socket()) -> 'ok'.\n  160: close(Socket) when is_port(Socket) ->\n  161: 	gen_tcp:close(Socket);\n  162: close(Socket) ->\n  163: 	ssl:close(Socket).\n  164  \n  165: -spec shutdown(Socket :: socket(), How :: 'read' | 'write' | 'read_write') -> 'ok' | {'error', any()}.\n  166: shutdown(Socket, How) when is_port(Socket) ->\n  167: 	gen_tcp:shutdown(Socket, How);\n  168: shutdown(Socket, How) ->\n  169: 	ssl:shutdown(Socket, How).\n  170  \n  171: -spec active_once(Socket :: socket()) -> 'ok' | {'error', any()}.\n  172: active_once(Socket) when is_port(Socket) ->\n  173: 	inet:setopts(Socket, [{active, once}]);\n  174: active_once(Socket) ->\n  175: 	ssl:setopts(Socket, [{active, once}]).\n  176  \n  177: -spec setopts(Socket :: socket(), Options :: list()) -> 'ok' | {'error', any()}.\n  178: setopts(Socket, Options) when is_port(Socket) ->\n  179: 	inet:setopts(Socket, Options);\n  180: setopts(Socket, Options) ->\n  181: 	ssl:setopts(Socket, Options).\n  182  \n  183: -spec(get_proto/1 :: (Socket :: any()) -> 'tcp' | 'ssl').\n  184: get_proto(Socket) when is_port(Socket) ->\n  185  	tcp;\n  186: get_proto(_Socket) ->\n  187  	ssl.\n  188  \n  189  %% @doc {inet_async,...} will be sent to current process when a client connects\n  190: -spec begin_inet_async(Socket :: socket()) -> any().\n  191: begin_inet_async(Socket) when is_port(Socket) ->\n  192: 	prim_inet:async_accept(Socket, -1);\n  193: begin_inet_async(Socket) ->\n  194: 	Port = extract_port_from_socket(Socket),\n  195  	begin_inet_async(Port).\n  196  \n  197  %% @doc handle the {inet_async,...} message\n  198: -spec handle_inet_async(Message :: {'inet_async', socket(), any(), {'ok', socket()}}) -> {'ok', socket()}.\n  199: handle_inet_async({inet_async, ListenSocket, _, {ok,ClientSocket}}) ->\n  200: 	handle_inet_async(ListenSocket, ClientSocket, []).\n  201  \n  202: -spec handle_inet_async(ListenSocket :: socket(), ClientSocket :: socket()) -> {'ok', socket()}.\n  203: handle_inet_async(ListenObject, ClientSocket) ->\n  204: 	handle_inet_async(ListenObject, ClientSocket, []).\n  205  \n  206: -spec handle_inet_async(ListenSocket :: socket(), ClientSocket :: socket(), Options :: list()) -> {'ok', socket()}.\n  207: handle_inet_async(ListenObject, ClientSocket, Options) ->\n  208: 	ListenSocket = extract_port_from_socket(ListenObject),\n  209: 	case set_sockopt(ListenSocket, ClientSocket) of\n  210  		ok -> ok;\n  211  		Error -> erlang:error(set_sockopt, Error)\n  212  	end,\n  213  	%% Signal the network driver that we are ready to accept another connection\n  214: 	begin_inet_async(ListenSocket),\n  215: 	%% If the listening socket is SSL then negotiate the client socket\n  216  	case is_port(ListenObject) of\n  217  		true ->\n  218: 			{ok, ClientSocket};\n  219  		false ->\n  220: 			{ok, UpgradedClientSocket} = to_ssl_server(ClientSocket, Options),\n  221: 			{ok, UpgradedClientSocket}\n  222  	end.\n  223  \n  224  %% @doc Upgrade a TCP connection to SSL\n  225: -spec to_ssl_server(Socket :: socket()) -> {'ok', ssl:socket()} | {'error', any()}.\n  226: to_ssl_server(Socket) ->\n  227: 	to_ssl_server(Socket, []).\n  228  \n  229: -spec to_ssl_server(Socket :: socket(), Options :: list()) -> {'ok', ssl:socket()} | {'error', any()}.\n  230: to_ssl_server(Socket, Options) ->\n  231: 	to_ssl_server(Socket, Options, infinity).\n  232  \n  233: -spec to_ssl_server(Socket :: socket(), Options :: list(), Timeout :: non_neg_integer() | 'infinity') -> {'ok', ssl:socket()} | {'error', any()}.\n  234: to_ssl_server(Socket, Options, Timeout) when is_port(Socket) ->\n  235: 	ssl:ssl_accept(Socket, ssl_listen_options(Options), Timeout);\n  236: to_ssl_server(_Socket, _Options, _Timeout) ->\n  237  	{error, already_ssl}.\n  238  \n  239: -spec to_ssl_client(Socket :: socket()) -> {'ok', ssl:sslsocket()} | {'error', 'already_ssl'}.\n  240: to_ssl_client(Socket) ->\n  241: 	to_ssl_client(Socket, []).\n  242  \n  243: -spec to_ssl_client(Socket :: socket(), Options :: list()) -> {'ok', ssl:sslsocket()} | {'error', 'already_ssl'}.\n  244: to_ssl_client(Socket, Options) ->\n  245: 	to_ssl_client(Socket, Options, infinity).\n  246  \n  247: -spec to_ssl_client(Socket :: socket(), Options :: list(), Timeout :: non_neg_integer() | 'infinity') -> {'ok', ssl:sslsocket()} | {'error', 'already_ssl'}.\n  248: to_ssl_client(Socket, Options, Timeout) when is_port(Socket) ->\n  249: 	ssl:connect(Socket, ssl_connect_options(Options), Timeout);\n  250: to_ssl_client(_Socket, _Options, _Timeout) ->\n  251  	{error, already_ssl}.\n  252  \n  253: -spec type(Socket :: socket()) -> protocol().\n  254: type(Socket) when is_port(Socket) ->\n  255  	tcp;\n  256: type(_Socket) ->\n  257  	ssl.\n  258  \n  ...\n  316  	end.\n  317  \n  318: -spec extract_port_from_socket(Socket :: socket()) -> port().\n  319: extract_port_from_socket({sslsocket,_,{SSLPort,_}}) ->\n  320  	SSLPort;\n  321: extract_port_from_socket(Socket) ->\n  322: 	Socket.\n  323  \n  324: -spec(set_sockopt/2 :: (ListSock :: port(), CliSocket :: port()) -> 'ok' | any()).\n  325: set_sockopt(ListenObject, ClientSocket) ->\n  326: 	ListenSocket = extract_port_from_socket(ListenObject),\n  327: 	true = inet_db:register_socket(ClientSocket, inet_tcp),\n  328: 	case prim_inet:getopts(ListenSocket, [active, nodelay, keepalive, delay_send, priority, tos]) of\n  329  		{ok, Opts} ->\n  330: 			case prim_inet:setopts(ClientSocket, Opts) of\n  331  				ok -> ok;\n  332: 				Error -> socket:close(ClientSocket), Error\n  333  			end;\n  334: 		Error -> socket:close(ClientSocket), Error\n  335  	end.\n  336  \n  ...\n  344  			Self = self(),\n  345  			spawn(fun() ->\n  346: 						{ok, ListenSocket} = listen(tcp, ?TEST_PORT),\n  347: 						?assert(is_port(ListenSocket)),\n  348: 						{ok, ServerSocket} = accept(ListenSocket),\n  349: 						controlling_process(ServerSocket, Self),\n  350: 						Self ! ListenSocket\n  351  				end),\n  352: 			{ok, ClientSocket} = connect(tcp, \"localhost\", ?TEST_PORT),\n  353: 			receive ListenSocket when is_port(ListenSocket) -> ok end,\n  354: 			?assert(is_port(ClientSocket)),\n  355: 			close(ListenSocket)\n  356  		end\n  357  		},\n  ...\n  363  			application:start(ssl),\n  364  			spawn(fun() ->\n  365: 						{ok, ListenSocket} = listen(ssl, ?TEST_PORT, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}]),\n  366: 						?assertMatch([sslsocket|_], tuple_to_list(ListenSocket)),\n  367: 						{ok, ServerSocket} = accept(ListenSocket),\n  368: 						controlling_process(ServerSocket, Self),\n  369: 						Self ! ListenSocket\n  370  				end),\n  371: 			{ok, ClientSocket} = connect(ssl, \"localhost\", ?TEST_PORT,  []),\n  372: 			receive {sslsocket,_,_} = ListenSocket -> ok end,\n  373: 			?assertMatch([sslsocket|_], tuple_to_list(ClientSocket)),\n  374: 			close(ListenSocket)\n  375  		end\n  376  		}\n  ...\n  379  evented_connections_test_() ->\n  380  	[\n  381: 		{\"current process receives connection to TCP listen sockets\",\n  382  		fun() ->\n  383: 			{ok, ListenSocket} = listen(tcp, ?TEST_PORT),\n  384: 			begin_inet_async(ListenSocket),\n  385  			spawn(fun()-> connect(tcp, \"localhost\", ?TEST_PORT) end),\n  386  			receive\n  387: 				{inet_async, ListenSocket, _, {ok,ServerSocket}} -> ok\n  388  			end,\n  389: 			{ok, NewServerSocket} = handle_inet_async(ListenSocket, ServerSocket),\n  390: 			?assert(is_port(ServerSocket)),\n  391: 			?assertEqual(ServerSocket, NewServerSocket), %% only true for TCP\n  392: 			?assert(is_port(ListenSocket)),\n  393  			% Stop the async\n  394  			spawn(fun()-> connect(tcp, \"localhost\", ?TEST_PORT) end),\n  395  			receive _Ignored -> ok end,\n  396: 			close(NewServerSocket),\n  397: 			close(ListenSocket)\n  398  		end\n  399  		},\n  400: 		{\"current process receives connection to SSL listen sockets\",\n  401  		fun() ->\n  402  			application:start(crypto),\n  403  			application:start(public_key),\n  404  			application:start(ssl),\n  405: 			{ok, ListenSocket} = listen(ssl, ?TEST_PORT, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}]),\n  406: 			begin_inet_async(ListenSocket),\n  407  			spawn(fun()-> connect(ssl, \"localhost\", ?TEST_PORT) end),\n  408  			receive\n  409: 				{inet_async, _ListenPort, _, {ok,ServerSocket}} -> ok\n  410  			end,\n  411: 			{ok, NewServerSocket} = handle_inet_async(ListenSocket, ServerSocket, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}]),\n  412: 			?assert(is_port(ServerSocket)),\n  413: 			?assertMatch([sslsocket|_], tuple_to_list(NewServerSocket)),\n  414: 			?assertMatch([sslsocket|_], tuple_to_list(ListenSocket)),\n  415  			 %Stop the async\n  416  			spawn(fun()-> connect(ssl, \"localhost\", ?TEST_PORT) end),\n  417  			receive _Ignored -> ok end,\n  418: 			close(ListenSocket),\n  419: 			close(NewServerSocket),\n  420  			ok\n  421  		end\n  ...\n  430  			application:start(public_key),\n  431  			application:start(ssl),\n  432: 			{ok, ListenSocket} = listen(tcp, ?TEST_PORT),\n  433: 			begin_inet_async(ListenSocket),\n  434  			spawn(fun()-> connect(ssl, \"localhost\", ?TEST_PORT) end),\n  435  			receive\n  436: 				{inet_async, _ListenPort, _, {ok,ServerSocket}} -> ok\n  437  			end,\n  438: 			{ok, ServerSocket} = handle_inet_async(ListenSocket, ServerSocket),\n  439: 			?assert(is_port(ListenSocket)),\n  440: 			?assert(is_port(ServerSocket)),\n  441: 			{ok, NewServerSocket} = to_ssl_server(ServerSocket, [{certfile, \"../testdata/server.crt\"}, {keyfile, \"../testdata/server.key\"}]),\n  442: 			?assertMatch([sslsocket|_], tuple_to_list(NewServerSocket)),\n  443  			% Stop the async\n  444  			spawn(fun()-> connect(ssl, \"localhost\", ?TEST_PORT) end),\n  445  			receive _Ignored -> ok end,\n  446: 			close(ListenSocket),\n  447: 			close(NewServerSocket)\n  448  		end\n  449  		}\n  ...\n  454  		{\"Accept via tcp\",\n  455  		fun() ->\n  456: 			{ok, ListenSocket} = listen(tcp, ?TEST_PORT, tcp_listen_options([])),\n  457: 			?assert(is_port(ListenSocket)),\n  458  			spawn(fun()-> connect(ssl, \"localhost\", ?TEST_PORT, tcp_connect_options([])) end),\n  459: 			{ok, ServerSocket} = accept(ListenSocket),\n  460: 			?assert(is_port(ListenSocket)),\n  461:  			close(ServerSocket),\n  462: 			close(ListenSocket)\n  463  		end\n  464  		},\n  ...\n  468  			application:start(public_key),\n  469  			application:start(ssl),\n  470: 			{ok, ListenSocket} = listen(ssl, ?TEST_PORT, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}]),\n  471: 			?assertMatch([sslsocket|_], tuple_to_list(ListenSocket)),\n  472  			spawn(fun()->connect(ssl, \"localhost\", ?TEST_PORT) end),\n  473: 			accept(ListenSocket),\n  474: 			close(ListenSocket)\n  475  		end\n  476  		}\n  ...\n  479  type_test_() ->\n  480  	[\n  481: 		{\"a tcp socket returns 'tcp'\",\n  482  		fun() ->\n  483: 			{ok, ListenSocket} = listen(tcp, ?TEST_PORT),\n  484: 			?assertMatch(tcp, type(ListenSocket)),\n  485: 			close(ListenSocket)\n  486  		end\n  487  		},\n  488: 		{\"an ssl socket returns 'ssl'\",\n  489  		fun() ->\n  490  			application:start(crypto),\n  491  			application:start(public_key),\n  492  			application:start(ssl),\n  493: 			{ok, ListenSocket} = listen(ssl, ?TEST_PORT, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}]),\n  494: 			?assertMatch(ssl, type(ListenSocket)),\n  495: 			close(ListenSocket)\n  496  		end\n  497  		}\n  ...\n  500  active_once_test_() ->\n  501  	[\n  502: 		{\"socket is set to active:once on tcp\",\n  503  		fun() ->\n  504: 			{ok, ListenSocket} = listen(tcp, ?TEST_PORT, tcp_listen_options([])),\n  505: 			?assertEqual({ok, [{active,false}]}, inet:getopts(ListenSocket, [active])),\n  506: 			active_once(ListenSocket),\n  507: 			?assertEqual({ok, [{active,once}]}, inet:getopts(ListenSocket, [active])),\n  508: 			close(ListenSocket)\n  509  		end\n  510  		},\n  511: 		{\"socket is set to active:once on ssl\",\n  512  		fun() ->\n  513: 			{ok, ListenSocket} = listen(ssl, ?TEST_PORT, ssl_listen_options([{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}])),\n  514: 			?assertEqual({ok, [{active,false}]}, ssl:getopts(ListenSocket, [active])),\n  515: 			active_once(ListenSocket),\n  516: 			?assertEqual({ok, [{active,once}]}, ssl:getopts(ListenSocket, [active])),\n  517: 			close(ListenSocket)\n  518  		end\n  519  		}\n  ...\n  635  			application:start(ssl),\n  636  			spawn(fun() ->\n  637: 			      	{ok, ListenSocket} = listen(tcp, ?TEST_PORT),\n  638: 			      	{ok, ServerSocket} = accept(ListenSocket),\n  639: 							{ok, NewServerSocket} = socket:to_ssl_server(ServerSocket, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}]),\n  640: 			      	Self ! NewServerSocket\n  641  			      end),\n  642: 			{ok, ClientSocket} = connect(tcp, \"localhost\", ?TEST_PORT),\n  643: 			?assert(is_port(ClientSocket)),\n  644: 			{ok, NewClientSocket} = to_ssl_client(ClientSocket),\n  645: 			?assertMatch([sslsocket|_], tuple_to_list(NewClientSocket)),\n  646: 			receive NewServerSocket -> ok end,\n  647: 			?assertMatch({sslsocket, _, _}, NewServerSocket),\n  648: 			close(NewClientSocket),\n  649: 			close(NewServerSocket)\n  650  		end\n  651  		},\n  ...\n  656  			application:start(ssl),\n  657  			spawn(fun() ->\n  658: 						{ok, ListenSocket} = listen(ssl, ?TEST_PORT, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}]),\n  659: 						{ok, ServerSocket} = accept(ListenSocket),\n  660: 						?assertMatch({error, already_ssl}, to_ssl_server(ServerSocket)),\n  661: 						close(ServerSocket)\n  662  				end),\n  663: 			{ok, ClientSocket} = connect(tcp, \"localhost\", ?TEST_PORT),\n  664: 			close(ClientSocket)\n  665  		end\n  666  		},\n  ...\n  672  			application:start(ssl),\n  673  			spawn(fun() ->\n  674: 						{ok, ListenSocket} = listen(ssl, ?TEST_PORT, [{keyfile, \"../testdata/server.key\"}, {certfile, \"../testdata/server.crt\"}]),\n  675: 						{ok, ServerSocket} = accept(ListenSocket),\n  676: 						Self ! ServerSocket\n  677  				end),\n  678: 			{ok, ClientSocket} = connect(ssl, \"localhost\", ?TEST_PORT),\n  679: 			receive ServerSocket -> ok end,\n  680: 			?assertMatch({error, already_ssl}, to_ssl_client(ClientSocket)),\n  681: 			close(ClientSocket),\n  682: 			close(ServerSocket)\n  683  		end\n  684  		}\n\n/home/sam/conversant/repos/kazoo/deps/gproc-0.2.12/doc/gproc_ps.md:\n   96  \n   97  \n   98: Single-shot subscriptions behave similarly to the `{active,once}` property of sockets.\n   99  Once a message has been published, the subscription is disabled, and no more messages\n  100  will be delivered to the subscriber unless the subscription is re-enabled using\n\n/home/sam/conversant/repos/kazoo/deps/gproc-0.2.12/src/gproc_ps.erl:\n  104  %% @doc Creates a single-shot subscription entry for Event\n  105  %%\n  106: %% Single-shot subscriptions behave similarly to the `{active,once}' property of sockets.\n  107  %% Once a message has been published, the subscription is disabled, and no more messages\n  108  %% will be delivered to the subscriber unless the subscription is re-enabled using\n\n/home/sam/conversant/repos/kazoo/deps/ibrowse-4.0.1/CHANGELOG:\n   42  16-01-2011 - v2.1.3\n   43               * Fixed issues with streaming and chunked responses when using\n   44:                the 'caller controls socket' feature. See following links for\n   45                 details. Contributed by Filipe David Manana.\n   46                 https://github.com/cmullaparthi/ibrowse/pull/24\n   ..\n  130               values are now of the form {error, {conn_failed, Err}}\n  131               and {error, {send_failed, Err}}. This is so that the\n  132:              specific socket error can be returned to the caller. I\n  133               think it looks a bit ugly, but that is the best\n  134               compromise I could come up with.\n  ...\n  177                 Adam Kocoloski\n  178  \n  179: 05-09-2009 - * Introduced option to allow caller to set socket options.\n  180  \n  181  29-07-2009 - * The ETS table created for load balancing of requests was not\n  ...\n  237                 any where. This is useful when trying to upload a large file\n  238                 to a webserver.\n  239:              * Use the TCP_NODELAY option on every socket by default\n  240               * Rudimentary support for load testing of ibrowse. Undocumented,\n  241                 but see ibrowse_test:load_test/3. Use the source, Luke!\n\n/home/sam/conversant/repos/kazoo/deps/ibrowse-4.0.1/doc/ibrowse.html:\n  207  <p><tt>send_req(Url::string(), Headers::<a href=\"#type-headerList\">headerList()</a>, Method::<a href=\"#type-method\">method()</a>, Body::<a href=\"#type-body\">body()</a>, Options::<a href=\"#type-optionList\">optionList()</a>) -&gt; <a href=\"#type-response\">response()</a></tt>\n  208  <ul class=\"definitions\"><li><tt><a name=\"type-optionList\">optionList()</a> = [<a href=\"#type-option\">option()</a>]</tt></li>\n  209: <li><tt><a name=\"type-option\">option()</a> = {max_sessions, integer()} | {response_format, <a href=\"#type-response_format\">response_format()</a>} | {stream_chunk_size, integer()} | {max_pipeline_size, integer()} | {trace, <a href=\"#type-boolean\">boolean()</a>} | {is_ssl, <a href=\"#type-boolean\">boolean()</a>} | {ssl_options, [SSLOpt]} | {pool_name, atom()} | {proxy_host, string()} | {proxy_port, integer()} | {proxy_user, string()} | {proxy_password, string()} | {use_absolute_uri, <a href=\"#type-boolean\">boolean()</a>} | {basic_auth, {<a href=\"#type-username\">username()</a>, <a href=\"#type-password\">password()</a>}} | {cookie, string()} | {content_length, integer()} | {content_type, string()} | {save_response_to_file, <a href=\"#type-srtf\">srtf()</a>} | {stream_to, <a href=\"#type-stream_to\">stream_to()</a>} | {http_vsn, {MajorVsn, MinorVsn}} | {host_header, string()} | {inactivity_timeout, integer()} | {connect_timeout, integer()} | {socket_options, Sock_opts} | {transfer_encoding, {chunked, ChunkSize}} | {headers_as_is, <a href=\"#type-boolean\">boolean()</a>} | {give_raw_headers, <a href=\"#type-boolean\">boolean()</a>} | {preserve_chunked_encoding, <a href=\"#type-boolean\">boolean()</a>}</tt></li>\n  210  <li><tt><a name=\"type-stream_to\">stream_to()</a> = <a href=\"#type-process\">process()</a> | {<a href=\"#type-process\">process()</a>, once}</tt></li>\n  211  <li><tt><a name=\"type-process\">process()</a> = pid() | atom()</tt></li>\n  ...\n  234    <li>The <code>stream_to</code> option can be used to have the HTTP\n  235    response streamed to a process as messages as data arrives on the\n  236:   socket. If the calling process wishes to control the rate at which\n  237    data is received from the server, the option <code>{stream_to,\n  238    {process(), once}}</code> can be specified. The calling process\n  ...\n  281    </li>\n  282   \n  283:   <li> The <code>socket_options</code> option can be used to set\n  284:   specific options on the socket. The <code>{active, true | false | once}</code>\n  285    and <code>{packet_type, Packet_type}</code> will be filtered out by ibrowse.  </li>\n  286   \n\n/home/sam/conversant/repos/kazoo/deps/ibrowse-4.0.1/src/ibrowse.erl:\n  191  %% <li>The <code>stream_to</code> option can be used to have the HTTP\n  192  %% response streamed to a process as messages as data arrives on the\n  193: %% socket. If the calling process wishes to control the rate at which\n  194  %% data is received from the server, the option <code>{stream_to,\n  195  %% {process(), once}}</code> can be specified. The calling process\n  ...\n  238  %% </li>\n  239  %% \n  240: %% <li> The <code>socket_options</code> option can be used to set\n  241: %% specific options on the socket. The <code>{active, true | false | once}</code> \n  242  %% and <code>{packet_type, Packet_type}</code> will be filtered out by ibrowse.  </li>\n  243  %%\n  ...\n  282  %%          {inactivity_timeout, integer()}    |\n  283  %%          {connect_timeout, integer()}       |\n  284: %%          {socket_options, Sock_opts}        |\n  285  %%          {transfer_encoding, {chunked, ChunkSize}} | \n  286  %%          {headers_as_is, boolean()}         |\n\n/home/sam/conversant/repos/kazoo/deps/ibrowse-4.0.1/src/ibrowse_http_client.erl:\n   42                  inactivity_timer_ref,\n   43                  use_proxy = false, proxy_auth_digest,\n   44:                 ssl_options = [], is_ssl = false, socket,\n   45                  proxy_tunnel_setup = false,\n   46                  tunnel_setup_queue = [],\n   ..\n   57  \n   58  -record(request, {url, method, options, from,\n   59:                   stream_to, caller_controls_socket = false,\n   60:                   caller_socket_options = [],\n   61                    req_id,\n   62                    stream_chunk_size,\n   ..\n  186      handle_sock_data(Data, State);\n  187  \n  188: handle_info({stream_next, Req_id}, #state{socket = Socket,\n  189                                            cur_req = #request{req_id = Req_id}} = State) ->\n  190:     do_setopts(Socket, [{active, once}], State),\n  191      {noreply, set_inac_timer(State)};\n  192  \n  ...\n  274  \n  275  %%--------------------------------------------------------------------\n  276: %% Handles data recvd on the socket\n  277  %%--------------------------------------------------------------------\n  278  handle_sock_data(Data, #state{status=idle}=State) ->\n  279:     do_trace(\"Data recvd on socket in state idle!. ~1000.p~n\", [Data]),\n  280      shutting_down(State),\n  281      do_error_reply(State, data_in_status_idle),\n  ...\n  288              shutting_down(State),\n  289              {stop, normal, State};\n  290:         #state{socket = Socket, status = Status, cur_req = CurReq} = State_1 ->\n  291              case {Status, CurReq} of\n  292:                 {get_header, #request{caller_controls_socket = true}} ->\n  293:                     do_setopts(Socket, [{active, once}], State_1);\n  294                  _ ->\n  295                      active_once(State_1)\n  ...\n  299  \n  300  handle_sock_data(Data, #state{status           = get_body,\n  301:                               socket           = Socket,\n  302                                content_length   = CL,\n  303                                http_status_code = StatCode,\n  ...\n  324                                              {error, {Reason, {stat_code, StatCode}, Headers}}),\n  325                      {stop, normal, State};\n  326:                 #state{cur_req = #request{caller_controls_socket = Ccs},\n  327                         interim_reply_sent = Irs} = State_1 ->\n  328                      case Irs of\n  ...\n  330                              active_once(State_1);\n  331                          false when Ccs == true ->\n  332:                             do_setopts(Socket, [{active, once}], State);\n  333                          false ->\n  334                              active_once(State_1)\n  ...\n  396               stream_chunk_size         = Stream_chunk_size,\n  397               response_format           = Response_format,\n  398:              caller_controls_socket    = Caller_controls_socket} = CurReq,\n  399      RepBuf_1 = <<RepBuf/binary, Data/binary>>,\n  400      New_data_size = RepBufSize - Streamed_size,\n  ...\n  402          undefined ->\n  403              State#state{reply_buffer = RepBuf_1};\n  404:         _ when Caller_controls_socket == true ->\n  405              do_interim_reply(StreamTo, Response_format, ReqId, RepBuf_1),\n  406              State#state{reply_buffer = <<>>,\n  ...\n  442  \n  443  %%--------------------------------------------------------------------\n  444: %% Handles the case when the server closes the socket\n  445  %%--------------------------------------------------------------------\n  446  handle_sock_closed(#state{status=get_header} = State) ->\n  ...\n  452  \n  453  %% We check for IsClosing because this the server could have sent a\n  454: %% Connection-Close header and has closed the socket to indicate end\n  455  %% of response. There maybe requests pipelined which need a response.\n  456  handle_sock_closed(#state{reply_buffer = Buf, reqs = Reqs, http_status_code = SC,\n  ...\n  499  \n  500  get_sock_options(Host, Options, SSLOptions) ->\n  501:     Caller_socket_options = get_value(socket_options, Options, []),\n  502      Ipv6Options = case is_ipv6_host(Host) of\n  503          true ->\n  ...\n  506              []\n  507      end,\n  508:     Other_sock_options = filter_sock_options(SSLOptions ++ Caller_socket_options ++ Ipv6Options),\n  509      case lists:keysearch(nodelay, 1, Other_sock_options) of\n  510          false ->\n  ...\n  541                   end, Opts).\n  542  \n  543: do_send(Req, #state{socket = Sock,\n  544                      is_ssl = true,\n  545                      use_proxy = true,\n  546                      proxy_tunnel_setup = Pts}) when Pts /= done ->  gen_tcp:send(Sock, Req);\n  547: do_send(Req, #state{socket = Sock, is_ssl = true})  ->  ssl:send(Sock, Req);\n  548: do_send(Req, #state{socket = Sock, is_ssl = false}) ->  gen_tcp:send(Sock, Req).\n  549  \n  550: %% @spec do_send_body(Sock::socket_descriptor(), Source::source_descriptor(), IsSSL::boolean()) -> ok | error()\n  551  %% source_descriptor() = fun_arity_0           |\n  552  %%                       {fun_arity_0}         |\n  ...\n  588      [?dec2hex(iolist_size(Data)), \"\\r\\n\", Data, \"\\r\\n\"].\n  589  \n  590: do_close(#state{socket = undefined})            ->  ok;\n  591: do_close(#state{socket = Sock,\n  592                  is_ssl = true,\n  593                  use_proxy = true,\n  594                  proxy_tunnel_setup = Pts\n  595                 }) when Pts /= done ->  catch gen_tcp:close(Sock);\n  596: do_close(#state{socket = Sock, is_ssl = true})  ->  catch ssl:close(Sock);\n  597: do_close(#state{socket = Sock, is_ssl = false}) ->  catch gen_tcp:close(Sock).\n  598  \n  599: active_once(#state{cur_req = #request{caller_controls_socket = true}}) ->\n  600      ok;\n  601: active_once(#state{socket = Socket} = State) ->\n  602:     do_setopts(Socket, [{active, once}], State).\n  603  \n  604  do_setopts(_Sock, [],   _)    ->  ok;\n  ...\n  622                  port = Port} = Url,\n  623             Headers, Method, Body, Options, Timeout,\n  624:            #state{socket = undefined} = State) ->\n  625      {Host_1, Port_1, State_1} =\n  626          case get_value(proxy_host, Options, false) of\n  ...\n  640      case do_connect(Host_1, Port_1, Options, State_2, Conn_timeout) of\n  641          {ok, Sock} ->\n  642:             do_trace(\"Connected! Socket: ~1000.p~n\", [Sock]),\n  643:             State_3 = State_2#state{socket = Sock,\n  644                                      connect_timeout = Conn_timeout},\n  645              send_req_1(From, Url, Headers, Method, Body, Options, Timeout, State_3);\n  ...\n  726             Headers, Method, Body, Options, Timeout,\n  727             #state{status    = Status,\n  728:                   socket    = Socket} = State) ->\n  729      cancel_timer(State#state.inactivity_timer_ref, {eat_message, timeout}),\n  730      ReqId = make_req_id(),\n  731      Resp_format = get_value(response_format, Options, list),\n  732:     Caller_socket_options = get_value(socket_options, Options, []),\n  733:     {StreamTo, Caller_controls_socket} =\n  734          case get_value(stream_to, Options, undefined) of\n  735              {Caller, once} when is_pid(Caller) or\n  ...\n  756                        method                 = Method,\n  757                        stream_to              = StreamTo,\n  758:                       caller_controls_socket = Caller_controls_socket,\n  759:                       caller_socket_options  = Caller_socket_options,\n  760                        options                = Options,\n  761                        req_id                 = ReqId,\n  ...\n  774                                   ReqId),\n  775      trace_request(Req),\n  776:     do_setopts(Socket, Caller_socket_options, State_1),\n  777      TE = is_chunked_encoding_specified(Options),\n  778      case do_send(Req, State_1) of\n  ...\n 1146      end.\n 1147  \n 1148: upgrade_to_ssl(#state{socket = Socket,\n 1149                        connect_timeout = Conn_timeout,\n 1150                        ssl_options = Ssl_options,\n 1151                        tunnel_setup_queue = Q} = State) ->\n 1152:     case ssl:connect(Socket, Ssl_options, Conn_timeout) of\n 1153:         {ok, Ssl_socket} ->\n 1154:             do_trace(\"Upgraded to SSL socket!!~n\", []),\n 1155:             State_1 = State#state{socket = Ssl_socket,\n 1156                                    proxy_tunnel_setup = done},\n 1157              send_queued_requests(lists:reverse(Q), State_1);\n 1158          Err ->\n 1159:             do_trace(\"Upgrade to SSL socket failed. Reson: ~p~n\", [Err]),\n 1160              do_error_reply(State, {error, {send_failed, Err}}),\n 1161              {error, send_failed}\n ....\n 1380                 }.\n 1381  \n 1382: set_cur_request(#state{reqs = Reqs, socket = Socket} = State) ->\n 1383      case queue:peek(Reqs) of\n 1384          empty ->\n 1385              State#state{cur_req = undefined};\n 1386:         {value, #request{caller_controls_socket = Ccs} = NextReq} ->\n 1387              case Ccs of\n 1388                  true ->\n 1389:                     do_setopts(Socket, [{active, once}], State);\n 1390                  _ ->\n 1391                      ok\n\n/home/sam/conversant/repos/kazoo/deps/ibrowse-4.0.1/src/ibrowse_test.erl:\n  513                                   Url,\n  514                                   [], get, [],\n  515:                                  [{socket_options,[{keepalive,true}]},\n  516                                    {inactivity_timeout,180000},\n  517                                    {connect_timeout,180000}], Req_timeout),\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/CHANGES.md:\n   31  * Fix mochiweb_html handling of invalid charref sequences (unescaped &) (#69).\n   32  * Add a manual garbage collection between requests to avoid worst case behavior\n   33:   on keep-alive sockets.\n   34  * Fix dst cookie bug (#73)\n   35  * Removed unnecessary template_dir option, see\n   ..\n   52  \n   53  * Added new `mochiweb_http:start_link/1` and\n   54:   `mochiweb_socket_server:start_link/1` APIs to explicitly start linked\n   55    servers. Also added `{link, false}` option to the `start/1` variants\n   56    to explicitly start unlinked. This is in expectation that we will\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/examples/keepalive/keepalive.erl:\n   11  %% process hibernates, the handler would usually terminate after your response\n   12  %% code runs.  this means http keep alives wouldn't work; the handler process\n   13: %% would terminate after each response and close its socket rather than\n   14  %% returning to the big @mochiweb_http@ loop and processing another request.\n   15  %%\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb.erl:\n   34  \n   35  \n   36: %% @spec new_request({Socket, Request, Headers}) -> MochiWebRequest\n   37  %% @doc Return a mochiweb_request data structure.\n   38: new_request({Socket, {Method, {abs_path, Uri}, Version}, Headers}) ->\n   39:     mochiweb_request:new(Socket,\n   40                           Method,\n   41                           Uri,\n   ..\n   43                           mochiweb_headers:make(Headers));\n   44  % this case probably doesn't \"exist\".\n   45: new_request({Socket, {Method, {absoluteURI, _Protocol, _Host, _Port, Uri},\n   46                        Version}, Headers}) ->\n   47:     mochiweb_request:new(Socket,\n   48                           Method,\n   49                           Uri,\n   ..\n   52  %% Request-URI is \"*\"\n   53  %% From http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n   54: new_request({Socket, {Method, '*'=Uri, Version}, Headers}) ->\n   55:     mochiweb_request:new(Socket,\n   56                           Method,\n   57                           Uri,\n   ..\n  100      end,\n  101      {ok, Server} = mochiweb_http:start_link(ServerOpts),\n  102:     Port = mochiweb_socket_server:get(Server, port),\n  103      Res = (catch ClientFun(Transport, Port)),\n  104      mochiweb_http:stop(Server),\n  ...\n  204      SockFun = case Transport of\n  205          plain ->\n  206:             {ok, Socket} = gen_tcp:connect(\"127.0.0.1\", Port, Opts),\n  207              fun (recv) ->\n  208:                     gen_tcp:recv(Socket, 0);\n  209                  ({recv, Length}) ->\n  210:                     gen_tcp:recv(Socket, Length);\n  211                  ({send, Data}) ->\n  212:                     gen_tcp:send(Socket, Data);\n  213                  ({setopts, L}) ->\n  214:                     inet:setopts(Socket, L)\n  215              end;\n  216          ssl ->\n  217:             {ok, Socket} = ssl:connect(\"127.0.0.1\", Port, [{ssl_imp, new} | Opts]),\n  218              fun (recv) ->\n  219:                     ssl:recv(Socket, 0);\n  220                  ({recv, Length}) ->\n  221:                     ssl:recv(Socket, Length);\n  222                  ({send, Data}) ->\n  223:                     ssl:send(Socket, Data);\n  224                  ({setopts, L}) ->\n  225:                     ssl:setopts(Socket, L)\n  226              end\n  227      end,\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb_acceptor.erl:\n   16  init(Server, Listen, Loop) ->\n   17      T1 = now(),\n   18:     case catch mochiweb_socket:accept(Listen) of\n   19:         {ok, Socket} ->\n   20              gen_server:cast(Server, {accepted, self(), timer:now_diff(now(), T1)}),\n   21:             call_loop(Loop, Socket);\n   22          {error, closed} ->\n   23              exit(normal);\n   ..\n   34      end.\n   35  \n   36: call_loop({M, F}, Socket) ->\n   37:     M:F(Socket);\n   38: call_loop({M, F, [A1]}, Socket) ->\n   39:     M:F(Socket, A1);\n   40: call_loop({M, F, A}, Socket) ->\n   41:     erlang:apply(M, F, [Socket | A]);\n   42: call_loop(Loop, Socket) ->\n   43:     Loop(Socket).\n   44  \n   45  %%\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb_echo.erl:\n    2  %% @copyright 2007 Mochi Media, Inc.\n    3  \n    4: %% @doc Simple and stupid echo server to demo mochiweb_socket_server.\n    5  \n    6  -module(mochiweb_echo).\n    .\n    9  \n   10  stop() ->\n   11:     mochiweb_socket_server:stop(?MODULE).\n   12  \n   13  start() ->\n   14:     mochiweb_socket_server:start([{link, false} | options()]).\n   15  \n   16  options() ->\n   ..\n   21       {loop, {?MODULE, loop}}].\n   22  \n   23: loop(Socket) ->\n   24:     case mochiweb_socket:recv(Socket, 0, 30000) of\n   25          {ok, Data} ->\n   26:             case mochiweb_socket:send(Socket, Data) of\n   27                  ok ->\n   28:                     loop(Socket);\n   29                  _ ->\n   30                      exit(normal)\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb_http.erl:\n   25  \n   26  stop() ->\n   27:     mochiweb_socket_server:stop(?MODULE).\n   28  \n   29  stop(Name) ->\n   30:     mochiweb_socket_server:stop(Name).\n   31  \n   32  %% @spec start(Options) -> ServerRet\n   ..\n   38  %% @doc Start a mochiweb server.\n   39  %%      profile_fun is used to profile accept timing.\n   40: %%      After each accept, if defined, profile_fun is called with a proplist of a subset of the mochiweb_socket_server state and timing information.\n   41: %%      The proplist is as follows: [{name, Name}, {port, Port}, {active_sockets, ActiveSockets}, {timing, Timing}].\n   42  %% @end\n   43  start(Options) ->\n   44:     mochiweb_socket_server:start(parse_options(Options)).\n   45  \n   46  start_link(Options) ->\n   47:     mochiweb_socket_server:start_link(parse_options(Options)).\n   48  \n   49: loop(Socket, Body) ->\n   50:     ok = mochiweb_socket:setopts(Socket, [{packet, http}]),\n   51:     request(Socket, Body).\n   52  \n   53: request(Socket, Body) ->\n   54:     ok = mochiweb_socket:setopts(Socket, [{active, once}]),\n   55      receive\n   56          {Protocol, _, {http_request, Method, Path, Version}} when Protocol == http orelse Protocol == ssl ->\n   57:             ok = mochiweb_socket:setopts(Socket, [{packet, httph}]),\n   58:             headers(Socket, {Method, Path, Version}, [], Body, 0);\n   59          {Protocol, _, {http_error, \"\\r\\n\"}} when Protocol == http orelse Protocol == ssl ->\n   60:             request(Socket, Body);\n   61          {Protocol, _, {http_error, \"\\n\"}} when Protocol == http orelse Protocol == ssl ->\n   62:             request(Socket, Body);\n   63          {tcp_closed, _} ->\n   64:             mochiweb_socket:close(Socket),\n   65              exit(normal);\n   66          {ssl_closed, _} ->\n   67:             mochiweb_socket:close(Socket),\n   68              exit(normal);\n   69          {tcp_error,_,emsgsize} ->\n   70:             % R15B02 returns this then closes the socket, so close and exit\n   71:             mochiweb_socket:close(Socket),\n   72              exit(normal);\n   73          _Other ->\n   74:             handle_invalid_request(Socket)\n   75      after ?REQUEST_RECV_TIMEOUT ->\n   76:         mochiweb_socket:close(Socket),\n   77          exit(normal)\n   78      end.\n   ..\n   83      end.\n   84  \n   85: headers(Socket, Request, Headers, _Body, ?MAX_HEADERS) ->\n   86      %% Too many headers sent, bad request.\n   87:     ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n   88:     handle_invalid_request(Socket, Request, Headers);\n   89: headers(Socket, Request, Headers, Body, HeaderCount) ->\n   90:     ok = mochiweb_socket:setopts(Socket, [{active, once}]),\n   91      receive\n   92          {Protocol, _, http_eoh} when Protocol == http orelse Protocol == ssl ->\n   93:             Req = new_request(Socket, Request, Headers),\n   94              call_body(Body, Req),\n   95              ?MODULE:after_response(Body, Req);\n   96          {Protocol, _, {http_header, _, Name, _, Value}} when Protocol == http orelse Protocol == ssl ->\n   97:             headers(Socket, Request, [{Name, Value} | Headers], Body,\n   98                      1 + HeaderCount);\n   99          {tcp_closed, _} ->\n  100:             mochiweb_socket:close(Socket),\n  101              exit(normal);\n  102          {tcp_error,_,emsgsize} ->\n  103:             % R15B02 returns this then closes the socket, so close and exit\n  104:             mochiweb_socket:close(Socket),\n  105              exit(normal);\n  106          _Other ->\n  107:             handle_invalid_request(Socket, Request, Headers)\n  108      after ?HEADERS_RECV_TIMEOUT ->\n  109:         mochiweb_socket:close(Socket),\n  110          exit(normal)\n  111      end.\n  ...\n  119  \n  120  -spec handle_invalid_request(term()) -> no_return().\n  121: handle_invalid_request(Socket) ->\n  122:     handle_invalid_request(Socket, {'GET', {abs_path, \"/\"}, {0,9}}, []),\n  123      exit(normal).\n  124  \n  125  -spec handle_invalid_request(term(), term(), term()) -> no_return().\n  126: handle_invalid_request(Socket, Request, RevHeaders) ->\n  127:     Req = new_request(Socket, Request, RevHeaders),\n  128      Req:respond({400, [], []}),\n  129:     mochiweb_socket:close(Socket),\n  130      exit(normal).\n  131  \n  132: new_request(Socket, Request, RevHeaders) ->\n  133:     ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  134:     mochiweb:new_request({Socket, Request, lists:reverse(RevHeaders)}).\n  135  \n  136  after_response(Body, Req) ->\n  137:     Socket = Req:get(socket),\n  138      case Req:should_close() of\n  139          true ->\n  140:             mochiweb_socket:close(Socket),\n  141              exit(normal);\n  142          false ->\n  143              Req:cleanup(),\n  144              erlang:garbage_collect(),\n  145:             ?MODULE:loop(Socket, Body)\n  146      end.\n  147  \n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb_multipart.erl:\n  304      [{certfile, CertFile}, {keyfile, KeyFile}].\n  305  \n  306: with_socket_server(Transport, ServerFun, ClientFun) ->\n  307      ServerOpts0 = [{ip, \"127.0.0.1\"}, {port, 0}, {loop, ServerFun}],\n  308      ServerOpts = case Transport of\n  ...\n  312              ServerOpts0 ++ [{ssl, true}, {ssl_opts, ssl_cert_opts()}]\n  313      end,\n  314:     {ok, Server} = mochiweb_socket_server:start_link(ServerOpts),\n  315:     Port = mochiweb_socket_server:get(Server, port),\n  316      ClientOpts = [binary, {active, false}],\n  317      {ok, Client} = case Transport of\n  ...\n  320          ssl ->\n  321              ClientOpts1 = [{ssl_imp, new} | ClientOpts],\n  322:             {ok, SslSocket} = ssl:connect(\"127.0.0.1\", Port, ClientOpts1),\n  323:             {ok, {ssl, SslSocket}}\n  324      end,\n  325      Res = (catch ClientFun(Client)),\n  326:     mochiweb_socket_server:stop(Server),\n  327      Res.\n  328  \n  329: fake_request(Socket, ContentType, Length) ->\n  330:     mochiweb_request:new(Socket,\n  331                           'POST',\n  332                           \"/multipart\",\n  ...\n  375                eof],\n  376      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  377:     ServerFun = fun (Socket) ->\n  378:                         ok = mochiweb_socket:send(Socket, BinContent),\n  379                          exit(normal)\n  380                  end,\n  381:     ClientFun = fun (Socket) ->\n  382:                         Req = fake_request(Socket, ContentType,\n  383                                             byte_size(BinContent)),\n  384                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  386                          ok\n  387                  end,\n  388:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  389      ok.\n  390  \n  ...\n  411                eof],\n  412      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  413:     ServerFun = fun (Socket) ->\n  414:                         ok = mochiweb_socket:send(Socket, BinContent),\n  415                          exit(normal)\n  416                  end,\n  417:     ClientFun = fun (Socket) ->\n  418:                         Req = fake_request(Socket, ContentType,\n  419                                             byte_size(BinContent)),\n  420                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  422                          ok\n  423                  end,\n  424:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  425      ok.\n  426  \n  ...\n  448                   \"\"], \"\\r\\n\"),\n  449      BinContent = iolist_to_binary(Content),\n  450:     ServerFun = fun (Socket) ->\n  451:                         ok = mochiweb_socket:send(Socket, BinContent),\n  452                          exit(normal)\n  453                  end,\n  454:     ClientFun = fun (Socket) ->\n  455:                         Req = fake_request(Socket, ContentType,\n  456                                             byte_size(BinContent)),\n  457                          Res = parse_form(Req),\n  ...\n  462                          ok\n  463                  end,\n  464:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  465      ok.\n  466  \n  ...\n  501                eof],\n  502      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  503:     ServerFun = fun (Socket) ->\n  504:                         ok = mochiweb_socket:send(Socket, BinContent),\n  505                          exit(normal)\n  506                  end,\n  507:     ClientFun = fun (Socket) ->\n  508:                         Req = fake_request(Socket, ContentType,\n  509                                             byte_size(BinContent)),\n  510                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  512                          ok\n  513                  end,\n  514:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  515      ok.\n  516  \n  ...\n  553                eof],\n  554      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  555:     ServerFun = fun (Socket) ->\n  556:                         ok = mochiweb_socket:send(Socket, BinContent),\n  557                          exit(normal)\n  558                  end,\n  559:     ClientFun = fun (Socket) ->\n  560:                         Req = fake_request(Socket, ContentType,\n  561                                             byte_size(BinContent)),\n  562                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  564                          ok\n  565                  end,\n  566:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  567      ok.\n  568  \n  ...\n  606                eof],\n  607      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  608:     ServerFun = fun (Socket) ->\n  609:                         ok = mochiweb_socket:send(Socket, BinContent),\n  610                          exit(normal)\n  611                  end,\n  612:     ClientFun = fun (Socket) ->\n  613:                         Req = fake_request(Socket, ContentType,\n  614                                             byte_size(BinContent)),\n  615                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  617                          ok\n  618                  end,\n  619:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  620      ok.\n  621  \n  ...\n  682                eof],\n  683      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  684:     ServerFun = fun (Socket) ->\n  685:                         ok = mochiweb_socket:send(Socket, BinContent),\n  686                          exit(normal)\n  687                  end,\n  688:     ClientFun = fun (Socket) ->\n  689:                         Req = fake_request(Socket, ContentType,\n  690                                             byte_size(BinContent)),\n  691                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  693                          ok\n  694                  end,\n  695:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  696      ok.\n  697  \n  ...\n  730                eof],\n  731      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  732:     ServerFun = fun (Socket) ->\n  733:                         ok = mochiweb_socket:send(Socket, BinContent),\n  734                          exit(normal)\n  735                  end,\n  736:     ClientFun = fun (Socket) ->\n  737:                         Req = fake_request(Socket, ContentType,\n  738                                             byte_size(BinContent)),\n  739                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  741                          ok\n  742                  end,\n  743:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  744      ok.\n  745  \n  ...\n  857                eof],\n  858      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  859:     ServerFun = fun (Socket) ->\n  860:                         ok = mochiweb_socket:send(Socket, BinContent),\n  861                          exit(normal)\n  862                  end,\n  863:     ClientFun = fun (Socket) ->\n  864:                         Req = fake_request(Socket, ContentType,\n  865                                             byte_size(BinContent)),\n  866                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  868                          ok\n  869                  end,\n  870:     ok = with_socket_server(plain, ServerFun, ClientFun),\n  871      ok.\n  872  -endif.\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb_request.erl:\n   37  %% @type value() = atom() | string() | binary() | integer()\n   38  %% @type headers(). A mochiweb_headers structure.\n   39: %% @type request() = {mochiweb_request,[_Socket,_Method,_RawPath,_Version,_Headers]}\n   40  %% @type response(). A mochiweb_response parameterized module instance.\n   41  %% @type ioheaders() = headers() | [{key(), value()}].\n   ..\n   47  -define(MAX_RECV_BODY, (1024*1024)).\n   48  \n   49: %% @spec new(Socket, Method, RawPath, Version, headers()) -> request()\n   50  %% @doc Create a new request instance.\n   51: new(Socket, Method, RawPath, Version, Headers) ->\n   52:     {?MODULE, [Socket, Method, RawPath, Version, Headers]}.\n   53  \n   54  %% @spec get_header_value(K, request()) -> undefined | Value\n   55  %% @doc Get the value of a given request header.\n   56: get_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   57      mochiweb_headers:get_value(K, Headers).\n   58  \n   59: get_primary_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   60      mochiweb_headers:get_primary_value(K, Headers).\n   61  \n   62: get_combined_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   63      mochiweb_headers:get_combined_value(K, Headers).\n   64  \n   65: %% @type field() = socket | scheme | method | raw_path | version | headers | peer | path | body_length | range\n   66  \n   67  %% @spec get(field(), request()) -> term()\n   68  %% @doc Return the internal representation of the given field. If\n   69: %%      <code>socket</code> is requested on a HTTPS connection, then\n   70: %%      an ssl socket will be returned as <code>{ssl, SslSocket}</code>.\n   71: %%      You can use <code>SslSocket</code> with the <code>ssl</code>\n   72: %%      application, eg: <code>ssl:peercert(SslSocket)</code>.\n   73: get(socket, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n   74:     Socket;\n   75: get(scheme, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n   76:     case mochiweb_socket:type(Socket) of\n   77          plain ->\n   78              http;\n   ..\n   80              https\n   81      end;\n   82: get(method, {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}) ->\n   83      Method;\n   84: get(raw_path, {?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n   85      RawPath;\n   86: get(version, {?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}) ->\n   87      Version;\n   88: get(headers, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   89      Headers;\n   90: get(peer, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n   91:     case mochiweb_socket:peername(Socket) of\n   92          {ok, {Addr={10, _, _, _}, _Port}} ->\n   93              case get_header_value(\"x-forwarded-for\", THIS) of\n   ..\n  109              exit(normal)\n  110      end;\n  111: get(path, {?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n  112      case erlang:get(?SAVE_PATH) of\n  113          undefined ->\n  ...\n  119              Cached\n  120      end;\n  121: get(body_length, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  122      case erlang:get(?SAVE_BODY_LENGTH) of\n  123          undefined ->\n  ...\n  128              Cached\n  129      end;\n  130: get(range, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  131      case get_header_value(range, THIS) of\n  132          undefined ->\n  ...\n  139  %% @doc Dump the internal representation to a \"human readable\" set of terms\n  140  %%      for debugging/inspection purposes.\n  141: dump({?MODULE, [_Socket, Method, RawPath, Version, Headers]}) ->\n  142      {?MODULE, [{method, Method},\n  143                 {version, Version},\n  ...\n  146  \n  147  %% @spec send(iodata(), request()) -> ok\n  148: %% @doc Send data over the socket.\n  149: send(Data, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  150:     case mochiweb_socket:send(Socket, Data) of\n  151          ok ->\n  152              ok;\n  ...\n  158  %% @doc Receive Length bytes from the client as a binary, with the default\n  159  %%      idle timeout.\n  160: recv(Length, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  161      recv(Length, ?IDLE_TIMEOUT, THIS).\n  162  \n  ...\n  164  %% @doc Receive Length bytes from the client as a binary, with the given\n  165  %%      Timeout in msec.\n  166: recv(Length, Timeout, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  167:     case mochiweb_socket:recv(Socket, Length, Timeout) of\n  168          {ok, Data} ->\n  169              put(?SAVE_RECV, true),\n  ...\n  175  %% @spec body_length(request()) -> undefined | chunked | unknown_transfer_encoding | integer()\n  176  %% @doc  Infer body length from transfer-encoding and content-length headers.\n  177: body_length({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  178      case get_header_value(\"transfer-encoding\", THIS) of\n  179          undefined ->\n  ...\n  194  %% @doc Receive the body of the HTTP request (defined by Content-Length).\n  195  %%      Will only receive up to the default max-body length of 1MB.\n  196: recv_body({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  197      recv_body(?MAX_RECV_BODY, THIS).\n  198  \n  ...\n  200  %% @doc Receive the body of the HTTP request (defined by Content-Length).\n  201  %%      Will receive up to MaxBody bytes.\n  202: recv_body(MaxBody, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  203      case erlang:get(?SAVE_BODY) of\n  204          undefined ->\n  ...\n  220      end.\n  221  \n  222: stream_body(MaxChunkSize, ChunkFun, FunState, {?MODULE,[_Socket,_Method,_RawPath,_Version,_Headers]}=THIS) ->\n  223      stream_body(MaxChunkSize, ChunkFun, FunState, undefined, THIS).\n  224  \n  225  stream_body(MaxChunkSize, ChunkFun, FunState, MaxBodyLength,\n  226:             {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  227      Expect = case get_header_value(\"expect\", THIS) of\n  228                   undefined ->\n  ...\n  264  %%      ResponseHeaders. The server will set header defaults such as Server\n  265  %%      and Date if not present in ResponseHeaders.\n  266: start_response({Code, ResponseHeaders}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  267      HResponse = mochiweb_headers:make(ResponseHeaders),\n  268      HResponse1 = mochiweb_headers:default_from_list(server_headers(),\n  ...\n  273  %% @doc Start the HTTP response by sending the Code HTTP response and\n  274  %%      ResponseHeaders.\n  275: start_raw_response({Code, ResponseHeaders}, {?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}=THIS) ->\n  276      F = fun ({K, V}, Acc) ->\n  277                  [mochiweb_util:make_io(K), <<\": \">>, V, <<\"\\r\\n\">> | Acc]\n  ...\n  289  %%      and Date if not present in ResponseHeaders.\n  290  start_response_length({Code, ResponseHeaders, Length},\n  291:                       {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  292      HResponse = mochiweb_headers:make(ResponseHeaders),\n  293      HResponse1 = mochiweb_headers:enter(\"Content-Length\", Length, HResponse),\n  ...\n  300  %%      defaults.\n  301  respond({Code, ResponseHeaders, {file, IoDevice}},\n  302:         {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}=THIS) ->\n  303      Length = mochiweb_io:iodevice_size(IoDevice),\n  304      Response = start_response_length({Code, ResponseHeaders, Length}, THIS),\n  ...\n  312      end,\n  313      Response;\n  314: respond({Code, ResponseHeaders, chunked}, {?MODULE, [_Socket, Method, _RawPath, Version, _Headers]}=THIS) ->\n  315      HResponse = mochiweb_headers:make(ResponseHeaders),\n  316      HResponse1 = case Method of\n  ...\n  334                   end,\n  335      start_response({Code, HResponse1}, THIS);\n  336: respond({Code, ResponseHeaders, Body}, {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}=THIS) ->\n  337      Response = start_response_length({Code, ResponseHeaders, iolist_size(Body)}, THIS),\n  338      case Method of\n  ...\n  346  %% @spec not_found(request()) -> response()\n  347  %% @doc Alias for <code>not_found([])</code>.\n  348: not_found({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  349      not_found([], THIS).\n  350  \n  ...\n  352  %% @doc Alias for <code>respond({404, [{\"Content-Type\", \"text/plain\"}\n  353  %% | ExtraHeaders], &lt;&lt;\"Not found.\"&gt;&gt;})</code>.\n  354: not_found(ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  355      respond({404, [{\"Content-Type\", \"text/plain\"} | ExtraHeaders],\n  356               <<\"Not found.\">>}, THIS).\n  ...\n  359  %%           response()\n  360  %% @doc respond({200, [{\"Content-Type\", ContentType} | Headers], Body}).\n  361: ok({ContentType, Body}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  362      ok({ContentType, [], Body}, THIS);\n  363: ok({ContentType, ResponseHeaders, Body}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  364      HResponse = mochiweb_headers:make(ResponseHeaders),\n  365      case THIS:get(range) of\n  ...\n  394  %% @doc Return true if the connection must be closed. If false, using\n  395  %%      Keep-Alive should be safe.\n  396: should_close({?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}=THIS) ->\n  397      ForceClose = erlang:get(?SAVE_FORCE_CLOSE) =/= undefined,\n  398      DidNotRecv = erlang:get(?SAVE_RECV) =:= undefined,\n  ...\n  403          orelse (Version =:= {1, 0}\n  404                  andalso get_header_value(\"connection\", THIS) =/= \"Keep-Alive\")\n  405:         %% unread data left on the socket, can't safely continue\n  406          orelse (DidNotRecv\n  407                  andalso get_combined_header_value(\"content-length\", THIS) =/= undefined\n  ...\n  420  %% @doc Clean up any junk in the process dictionary, required before continuing\n  421  %%      a Keep-Alive request.\n  422: cleanup({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  423      L = [?SAVE_QS, ?SAVE_PATH, ?SAVE_RECV, ?SAVE_BODY, ?SAVE_BODY_LENGTH,\n  424           ?SAVE_POST, ?SAVE_COOKIE, ?SAVE_FORCE_CLOSE],\n  ...\n  430  %% @spec parse_qs(request()) -> [{Key::string(), Value::string()}]\n  431  %% @doc Parse the query string of the URL.\n  432: parse_qs({?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n  433      case erlang:get(?SAVE_QS) of\n  434          undefined ->\n  ...\n  443  %% @spec get_cookie_value(Key::string, request()) -> string() | undefined\n  444  %% @doc Get the value of the given cookie.\n  445: get_cookie_value(Key, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  446      proplists:get_value(Key, parse_cookie(THIS)).\n  447  \n  448  %% @spec parse_cookie(request()) -> [{Key::string(), Value::string()}]\n  449  %% @doc Parse the cookie header.\n  450: parse_cookie({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  451      case erlang:get(?SAVE_COOKIE) of\n  452          undefined ->\n  ...\n  466  %% @doc Parse an application/x-www-form-urlencoded form POST. This\n  467  %%      has the side-effect of calling recv_body().\n  468: parse_post({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  469      case erlang:get(?SAVE_POST) of\n  470          undefined ->\n  ...\n  490  %%      Used internally by read_chunked_body.\n  491  stream_chunked_body(MaxChunkSize, Fun, FunState,\n  492:                     {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  493      case read_chunk_length(THIS) of\n  494          0 ->\n  ...\n  502      end.\n  503  \n  504: stream_unchunked_body(0, Fun, FunState, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  505      Fun({0, <<>>}, FunState);\n  506  stream_unchunked_body(Length, Fun, FunState,\n  507:                       {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) when Length > 0 ->\n  508      PktSize = case Length > ?RECBUF_SIZE of\n  509          true ->\n  ...\n  518  %% @spec read_chunk_length(request()) -> integer()\n  519  %% @doc Read the length of the next HTTP chunk.\n  520: read_chunk_length({?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  521:     ok = mochiweb_socket:setopts(Socket, [{packet, line}]),\n  522:     case mochiweb_socket:recv(Socket, 0, ?IDLE_TIMEOUT) of\n  523          {ok, Header} ->\n  524:             ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  525              Splitter = fun (C) ->\n  526                                 C =/= $\\r andalso C =/= $\\n andalso C =/= $\n  ...\n  535  %% @doc Read in a HTTP chunk of the given length. If Length is 0, then read the\n  536  %%      HTTP footers (as a list of binaries, since they're nominal).\n  537: read_chunk(0, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  538:     ok = mochiweb_socket:setopts(Socket, [{packet, line}]),\n  539      F = fun (F1, Acc) ->\n  540:                 case mochiweb_socket:recv(Socket, 0, ?IDLE_TIMEOUT) of\n  541                      {ok, <<\"\\r\\n\">>} ->\n  542                          Acc;\n  ...\n  548          end,\n  549      Footers = F(F, []),\n  550:     ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  551      put(?SAVE_RECV, true),\n  552      Footers;\n  553: read_chunk(Length, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  554:     case mochiweb_socket:recv(Socket, 2 + Length, ?IDLE_TIMEOUT) of\n  555          {ok, <<Chunk:Length/binary, \"\\r\\n\">>} ->\n  556              Chunk;\n  ...\n  560  \n  561  read_sub_chunks(Length, MaxChunkSize, Fun, FunState,\n  562:                 {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) when Length > MaxChunkSize ->\n  563      Bin = recv(MaxChunkSize, THIS),\n  564      NewState = Fun({size(Bin), Bin}, FunState),\n  ...\n  566  \n  567  read_sub_chunks(Length, _MaxChunkSize, Fun, FunState,\n  568:                 {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  569      Fun({Length, read_chunk(Length, THIS)}, FunState).\n  570  \n  571  %% @spec serve_file(Path, DocRoot, request()) -> Response\n  572  %% @doc Serve a file relative to DocRoot.\n  573: serve_file(Path, DocRoot, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  574      serve_file(Path, DocRoot, [], THIS).\n  575  \n  576  %% @spec serve_file(Path, DocRoot, ExtraHeaders, request()) -> Response\n  577  %% @doc Serve a file relative to DocRoot.\n  578: serve_file(Path, DocRoot, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  579      case mochiweb_util:safe_relative_path(Path) of\n  580          undefined ->\n  ...\n  596      filename:join([FullPath, \"index.html\"]).\n  597  \n  598: maybe_redirect([], FullPath, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  599      maybe_serve_file(directory_index(FullPath), ExtraHeaders, THIS);\n  600  \n  601  maybe_redirect(RelPath, FullPath, ExtraHeaders,\n  602:                {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}=THIS) ->\n  603      case string:right(RelPath, 1) of\n  604          \"/\" ->\n  ...\n  621      end.\n  622  \n  623: maybe_serve_file(File, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  624      case file:read_file_info(File) of\n  625          {ok, FileInfo} ->\n  ...\n  715  %%            [\"deflate\", \"gzip\", \"identity\"]\n  716  %%\n  717: accepted_encodings(SupportedEncodings, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  718      AcceptEncodingHeader = case get_header_value(\"Accept-Encoding\", THIS) of\n  719          undefined ->\n  ...\n  753  %%         accepts_content_type(\"text/plain\") -> false\n  754  %%\n  755: accepts_content_type(ContentType1, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  756      ContentType = re:replace(ContentType1, \"\\\\s\", \"\", [global, {return, list}]),\n  757      AcceptHeader = accept_header(THIS),\n  ...\n  802  %%             [\"text/html\", \"application/json\"]\n  803  %%\n  804: accepted_content_types(Types1, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  805      Types = lists:map(\n  806          fun(T) -> re:replace(T, \"\\\\s\", \"\", [global, {return, list}]) end,\n  ...\n  842      end.\n  843  \n  844: accept_header({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  845      case get_header_value(\"Accept\", THIS) of\n  846          undefined ->\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb_response.erl:\n   43  \n   44  %% @spec send(iodata(), response()) -> ok\n   45: %% @doc Send data over the socket if the method is not HEAD.\n   46  send(Data, {?MODULE, [Request, _Code, _Headers]}) ->\n   47      case Request:get(method) of\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb_socket.erl:\n    1  %% @copyright 2010 Mochi Media, Inc.\n    2  \n    3: %% @doc MochiWeb socket - wrapper for plain and ssl sockets.\n    4  \n    5: -module(mochiweb_socket).\n    6  \n    7  -export([listen/4, accept/1, recv/3, send/2, close/1, port/1, peername/1,\n    .\n   14          true ->\n   15              case ssl:listen(Port, Opts ++ SslOpts) of\n   16:                 {ok, ListenSocket} ->\n   17:                     {ok, {ssl, ListenSocket}};\n   18                  {error, _} = Err ->\n   19                      Err\n   ..\n   23      end.\n   24  \n   25: accept({ssl, ListenSocket}) ->\n   26      % There's a bug in ssl:transport_accept/2 at the moment, which is the\n   27      % reason for the try...catch block. Should be fixed in OTP R14.\n   28:     try ssl:transport_accept(ListenSocket) of\n   29:         {ok, Socket} ->\n   30:             case ssl:ssl_accept(Socket) of\n   31                  ok ->\n   32:                     {ok, {ssl, Socket}};\n   33                  {error, _} = Err ->\n   34                      Err\n   ..\n   40              {error, Reason}\n   41      end;\n   42: accept(ListenSocket) ->\n   43:     gen_tcp:accept(ListenSocket, ?ACCEPT_TIMEOUT).\n   44  \n   45: recv({ssl, Socket}, Length, Timeout) ->\n   46:     ssl:recv(Socket, Length, Timeout);\n   47: recv(Socket, Length, Timeout) ->\n   48:     gen_tcp:recv(Socket, Length, Timeout).\n   49  \n   50: send({ssl, Socket}, Data) ->\n   51:     ssl:send(Socket, Data);\n   52: send(Socket, Data) ->\n   53:     gen_tcp:send(Socket, Data).\n   54  \n   55: close({ssl, Socket}) ->\n   56:     ssl:close(Socket);\n   57: close(Socket) ->\n   58:     gen_tcp:close(Socket).\n   59  \n   60: port({ssl, Socket}) ->\n   61:     case ssl:sockname(Socket) of\n   62          {ok, {_, Port}} ->\n   63              {ok, Port};\n   ..\n   65              Err\n   66      end;\n   67: port(Socket) ->\n   68:     inet:port(Socket).\n   69  \n   70: peername({ssl, Socket}) ->\n   71:     ssl:peername(Socket);\n   72: peername(Socket) ->\n   73:     inet:peername(Socket).\n   74  \n   75: setopts({ssl, Socket}, Opts) ->\n   76:     ssl:setopts(Socket, Opts);\n   77: setopts(Socket, Opts) ->\n   78:     inet:setopts(Socket, Opts).\n   79  \n   80  type({ssl, _}) ->\n\n/home/sam/conversant/repos/kazoo/deps/mochiweb-2.4.2/src/mochiweb_socket_server.erl:\n    2  %% @copyright 2007 Mochi Media, Inc.\n    3  \n    4: %% @doc MochiWeb socket server.\n    5  \n    6: -module(mochiweb_socket_server).\n    7  -author('bob@mochimedia.com').\n    8  -behaviour(gen_server).\n    .\n   15  -export([get/2, set/3]).\n   16  \n   17: -record(mochiweb_socket_server,\n   18          {port,\n   19           loop,\n   ..\n   25           nodelay=false,\n   26           backlog=128,\n   27:          active_sockets=0,\n   28           acceptor_pool_size=16,\n   29           ssl=false,\n   ..\n   32           profile_fun=undefined}).\n   33  \n   34: -define(is_old_state(State), not is_record(State, mochiweb_socket_server)).\n   35  \n   36  start_link(Options) ->\n   ..\n   70  stop(Options) ->\n   71      State = parse_options(Options),\n   72:     stop(State#mochiweb_socket_server.name).\n   73  \n   74  %% Internal API\n   75  \n   76: parse_options(State=#mochiweb_socket_server{}) ->\n   77      State;\n   78  parse_options(Options) ->\n   79:     parse_options(Options, #mochiweb_socket_server{}).\n   80  \n   81  parse_options([], State) ->\n   ..\n   83  parse_options([{name, L} | Rest], State) when is_list(L) ->\n   84      Name = {local, list_to_atom(L)},\n   85:     parse_options(Rest, State#mochiweb_socket_server{name=Name});\n   86  parse_options([{name, A} | Rest], State) when A =:= undefined ->\n   87:     parse_options(Rest, State#mochiweb_socket_server{name=A});\n   88  parse_options([{name, A} | Rest], State) when is_atom(A) ->\n   89      Name = {local, A},\n   90:     parse_options(Rest, State#mochiweb_socket_server{name=Name});\n   91  parse_options([{name, Name} | Rest], State) ->\n   92:     parse_options(Rest, State#mochiweb_socket_server{name=Name});\n   93  parse_options([{port, L} | Rest], State) when is_list(L) ->\n   94      Port = list_to_integer(L),\n   95:     parse_options(Rest, State#mochiweb_socket_server{port=Port});\n   96  parse_options([{port, Port} | Rest], State) ->\n   97:     parse_options(Rest, State#mochiweb_socket_server{port=Port});\n   98  parse_options([{ip, Ip} | Rest], State) ->\n   99      ParsedIp = case Ip of\n  ...\n  106                         IpTuple\n  107                 end,\n  108:     parse_options(Rest, State#mochiweb_socket_server{ip=ParsedIp});\n  109  parse_options([{loop, Loop} | Rest], State) ->\n  110:     parse_options(Rest, State#mochiweb_socket_server{loop=Loop});\n  111  parse_options([{backlog, Backlog} | Rest], State) ->\n  112:     parse_options(Rest, State#mochiweb_socket_server{backlog=Backlog});\n  113  parse_options([{nodelay, NoDelay} | Rest], State) ->\n  114:     parse_options(Rest, State#mochiweb_socket_server{nodelay=NoDelay});\n  115  parse_options([{acceptor_pool_size, Max} | Rest], State) ->\n  116      MaxInt = ensure_int(Max),\n  117      parse_options(Rest,\n  118:                   State#mochiweb_socket_server{acceptor_pool_size=MaxInt});\n  119  parse_options([{max, Max} | Rest], State) ->\n  120      error_logger:info_report([{warning, \"TODO: max is currently unsupported\"},\n  121                                {max, Max}]),\n  122      MaxInt = ensure_int(Max),\n  123:     parse_options(Rest, State#mochiweb_socket_server{max=MaxInt});\n  124  parse_options([{ssl, Ssl} | Rest], State) when is_boolean(Ssl) ->\n  125:     parse_options(Rest, State#mochiweb_socket_server{ssl=Ssl});\n  126  parse_options([{ssl_opts, SslOpts} | Rest], State) when is_list(SslOpts) ->\n  127      SslOpts1 = [{ssl_imp, new} | proplists:delete(ssl_imp, SslOpts)],\n  128:     parse_options(Rest, State#mochiweb_socket_server{ssl_opts=SslOpts1});\n  129  parse_options([{profile_fun, ProfileFun} | Rest], State) when is_function(ProfileFun) ->\n  130:     parse_options(Rest, State#mochiweb_socket_server{profile_fun=ProfileFun}).\n  131  \n  132  \n  133: start_server(F, State=#mochiweb_socket_server{ssl=Ssl, name=Name}) ->\n  134      ok = prep_ssl(Ssl),\n  135      case Name of\n  ...\n  160      end.\n  161  \n  162: init(State=#mochiweb_socket_server{ip=Ip, port=Port, backlog=Backlog, nodelay=NoDelay}) ->\n  163      process_flag(trap_exit, true),\n  164      BaseOpts = [binary,\n  ...\n  183  \n  184  new_acceptor_pool(Listen,\n  185:                   State=#mochiweb_socket_server{acceptor_pool=Pool,\n  186                                                  acceptor_pool_size=Size,\n  187                                                  loop=Loop}) ->\n  ...\n  191          end,\n  192      Pool1 = lists:foldl(F, Pool, lists:seq(1, Size)),\n  193:     State#mochiweb_socket_server{acceptor_pool=Pool1}.\n  194  \n  195: listen(Port, Opts, State=#mochiweb_socket_server{ssl=Ssl, ssl_opts=SslOpts}) ->\n  196:     case mochiweb_socket:listen(Ssl, Port, Opts, SslOpts) of\n  197          {ok, Listen} ->\n  198:             {ok, ListenPort} = mochiweb_socket:port(Listen),\n  199              {ok, new_acceptor_pool(\n  200                     Listen,\n  201:                    State#mochiweb_socket_server{listen=Listen,\n  202                                                  port=ListenPort})};\n  203          {error, Reason} ->\n  ...\n  205      end.\n  206  \n  207: do_get(port, #mochiweb_socket_server{port=Port}) ->\n  208      Port;\n  209: do_get(active_sockets, #mochiweb_socket_server{active_sockets=ActiveSockets}) ->\n  210:     ActiveSockets.\n  211  \n  212  \n  213: state_to_proplist(#mochiweb_socket_server{name=Name,\n  214                                            port=Port,\n  215:                                           active_sockets=ActiveSockets}) ->\n  216:     [{name, Name}, {port, Port}, {active_sockets, ActiveSockets}].\n  217  \n  218: upgrade_state(State = #mochiweb_socket_server{}) ->\n  219      State;\n  220: upgrade_state({mochiweb_socket_server, Port, Loop, Name,\n  221:              Max, IP, Listen, NoDelay, Backlog, ActiveSockets,\n  222               AcceptorPoolSize, SSL, SSL_opts,\n  223               AcceptorPool}) ->\n  224:     #mochiweb_socket_server{port=Port, loop=Loop, name=Name, max=Max, ip=IP,\n  225                              listen=Listen, nodelay=NoDelay, backlog=Backlog,\n  226:                             active_sockets=ActiveSockets,\n  227                              acceptor_pool_size=AcceptorPoolSize,\n  228                              ssl=SSL,\n  ...\n  243      handle_cast(Req, upgrade_state(State));\n  244  handle_cast({accepted, Pid, Timing},\n  245:             State=#mochiweb_socket_server{active_sockets=ActiveSockets}) ->\n  246:     State1 = State#mochiweb_socket_server{active_sockets=1 + ActiveSockets},\n  247:     case State#mochiweb_socket_server.profile_fun of\n  248          undefined ->\n  249              undefined;\n  ...\n  255      State1 = case ProfileFun of\n  256                   ProfileFun when is_function(ProfileFun); ProfileFun =:= undefined ->\n  257:                      State#mochiweb_socket_server{profile_fun=ProfileFun};\n  258                   _ ->\n  259                       State\n  ...\n  266  terminate(Reason, State) when ?is_old_state(State) ->\n  267      terminate(Reason, upgrade_state(State));\n  268: terminate(_Reason, #mochiweb_socket_server{listen=Listen}) ->\n  269:     mochiweb_socket:close(Listen).\n  270  \n  271  code_change(_OldVsn, State, _Extra) ->\n  272      State.\n  273  \n  274: recycle_acceptor(Pid, State=#mochiweb_socket_server{\n  275                          acceptor_pool=Pool,\n  276                          listen=Listen,\n  277                          loop=Loop,\n  278:                         active_sockets=ActiveSockets}) ->\n  279      case sets:is_element(Pid, Pool) of\n  280          true ->\n  281              Acceptor = mochiweb_acceptor:start_link(self(), Listen, Loop),\n  282              Pool1 = sets:add_element(Acceptor, sets:del_element(Pid, Pool)),\n  283:             State#mochiweb_socket_server{acceptor_pool=Pool1};\n  284          false ->\n  285:             State#mochiweb_socket_server{active_sockets=ActiveSockets - 1}\n  286      end.\n  287  \n  ...\n  291      {noreply, recycle_acceptor(Pid, State)};\n  292  handle_info({'EXIT', Pid, Reason},\n  293:             State=#mochiweb_socket_server{acceptor_pool=Pool}) ->\n  294      case sets:is_element(Pid, Pool) of\n  295          true ->\n  ...\n  306  % since our supervisor modules list is set to 'dynamic'\n  307  % see sasl-2.1.9.2/src/release_handler_1.erl get_dynamic_mods\n  308: handle_info({From, Tag, get_modules}, State = #mochiweb_socket_server{name={local,Mod}}) ->\n  309      From ! {element(2,Tag), [Mod]},\n  310      {noreply, State};\n  ...\n  312  % If for some reason we can't get the module name, send empty list to avoid release_handler timeout:\n  313  handle_info({From, Tag, get_modules}, State) ->\n  314:     error_logger:info_msg(\"mochiweb_socket_server replying to dynamic modules request as '[]'~n\",[]),\n  315      From ! {element(2,Tag), []},\n  316      {noreply, State};\n  ...\n  329  \n  330  upgrade_state_test() ->\n  331:     OldState = {mochiweb_socket_server,\n  332                  port, loop, name,\n  333                  max, ip, listen,\n  334                  nodelay, backlog,\n  335:                 active_sockets,\n  336                  acceptor_pool_size,\n  337                  ssl, ssl_opts, acceptor_pool},\n  338      State = upgrade_state(OldState),\n  339:     CmpState = #mochiweb_socket_server{port=port, loop=loop,\n  340                                         name=name, max=max, ip=ip,\n  341                                         listen=listen, nodelay=nodelay,\n  342                                         backlog=backlog,\n  343:                                        active_sockets=active_sockets,\n  344                                         acceptor_pool_size=acceptor_pool_size,\n  345                                         ssl=ssl, ssl_opts=ssl_opts,\n\n/home/sam/conversant/repos/kazoo/deps/nksip-0.4/src/nksip_connection.erl:\n  231  \n  232  %% @private\n  233: start_link(AppId, Transport, SocketOrPid, Timeout) -> \n  234:     gen_server:start_link(?MODULE, [AppId, Transport, SocketOrPid, Timeout], []).\n  235  \n  236  -record(state, {\n  ...\n  238      proto :: nksip:protocol(),\n  239      transport :: nksip_transport:transport(),\n  240:     socket :: port() | ssl:sslsocket(),\n  241      timeout :: non_neg_integer(),\n  242      nat_ip :: inet:ip_address(),\n  ...\n  257      gen_server_init(#state{}).\n  258  \n  259: init([AppId, Transport, SocketOrPid, Timeout]) ->\n  260      #transport{proto=Proto, remote_ip=Ip, remote_port=Port, resource=Res} = Transport,\n  261      nksip_proc:put({nksip_connection, {AppId, Proto, Ip, Port, Res}}, Transport), \n  262      nksip_proc:put(nksip_transports, {AppId, Transport}),\n  263      nksip_counters:async([nksip_connections]),\n  264:     case is_pid(SocketOrPid) of\n  265          true ->\n  266:             Socket = undefined,\n  267:             Pid = SocketOrPid,\n  268              link(Pid);\n  269          false ->\n  270:             Socket = SocketOrPid,\n  271              Pid = undefined\n  272      end,\n  ...\n  277          proto = Proto,\n  278          transport = Transport, \n  279:         socket = Socket, \n  280          timeout = Timeout,\n  281          in_refresh = false,\n  ...\n  406  \n  407  %% @private\n  408: handle_info({tcp, Socket, Packet}, #state{proto=Proto, socket=Socket}=State) ->\n  409:     inet:setopts(Socket, [{active, once}]),\n  410      case Proto of\n  411          tcp -> parse(Packet, State);\n  ...\n  413      end;\n  414  \n  415: handle_info({ssl, Socket, Packet}, #state{proto=Proto, socket=Socket}=State) ->\n  416:     ssl:setopts(Socket, [{active, once}]),\n  417      case Proto of\n  418          tls -> parse(Packet, State);\n  ...\n  420      end;\n  421  \n  422: handle_info({tcp_closed, Socket}, #state{socket=Socket}=State) ->\n  423      do_stop(normal, State);\n  424  \n  425: handle_info({ssl_closed, Socket}, #state{socket=Socket}=State) ->\n  426      do_stop(normal, State);\n  427  \n  428  % Received from Ranch when the listener is ready\n  429: handle_info({shoot, _ListenerPid}, #state{proto=tcp, socket=Socket}=State) ->\n  430:     inet:setopts(Socket, [{active, once}]),\n  431      do_noreply(State);\n  432  \n  433: handle_info({shoot, _ListenerPid}, #state{proto=tls, socket=Socket}=State) ->\n  434:     ssl:setopts(Socket, [{active, once}]),\n  435      do_noreply(State);\n  436  \n  ...\n  485  \n  486  terminate(_Reason, State) ->\n  487:     #state{app_id=AppId, socket=Socket, transport=Transp} = State,\n  488      #transport{proto=Proto, sctp_id=AssocId} = Transp,\n  489      ?debug(AppId, <<>>, \"~p connection process stopped (~p)\", [Proto, self()]),\n  490      case Proto of\n  491          udp -> ok;\n  492:         tcp -> gen_tcp:close(Socket);\n  493:         tls -> ssl:close(Socket);\n  494:         sctp -> gen_sctp:eof(Socket, #sctp_assoc_change{assoc_id=AssocId});\n  495:         ws -> gen_tcp:close(Socket);\n  496:         wss -> ssl:close(Socket);\n  497          _ -> ok\n  498      end.\n  ...\n  513  \n  514  do_send(Packet, State) ->\n  515:     #state{app_id=AppId, socket=Socket, transport=Transp} = State,\n  516      #transport{proto=Proto, remote_ip=Ip, remote_port=Port, sctp_id=AssocId} = Transp,\n  517      case\n  518          case Proto of\n  519:             udp -> gen_udp:send(Socket, Ip, Port, Packet);\n  520:             tcp -> gen_tcp:send(Socket, Packet);\n  521:             tls -> ssl:send(Socket, Packet);\n  522:             sctp -> gen_sctp:send(Socket, AssocId, 0, Packet);\n  523:             ws ->  gen_tcp:send(Socket, wsock_message:encode(Packet, [mask, text]));\n  524:             wss ->  ssl:send(Socket, wsock_message:encode(Packet, [mask, text]))\n  525          end\n  526      of\n  ...\n  664                      do_noreply(State2);\n  665                  {error, Error} -> \n  666:                     ?warning(AppId, <<>>, \"websocket parsing error: ~p\", [Error]),\n  667                      do_stop(Error, State)\n  668              end;\n  669          {error, Error} ->\n  670:             ?notice(AppId, <<>>, \"websocket parsing error: ~p\", [Error]),\n  671              do_stop(ws_error, State1)\n  672      end.\n\n/home/sam/conversant/repos/kazoo/deps/nksip-0.4/src/nksip_stun.erl:\n  198  client_test() ->\n  199      ServerIp = {216,93,246,18}, % stun.counterpath.net\n  200:     {ok, Socket} = gen_udp:open(0, [binary, {active, false}]),\n  201:     {ok, {_LocalIp, LocalPort}} = inet:sockname(Socket),\n  202      {Id, Request} = binding_request(),\n  203      ?debugFmt(\"Sending STUN binding request to ~s\", [inet_parse:ntoa(ServerIp)]),\n  204:     ok = gen_udp:send(Socket, ServerIp, 3478, Request),\n  205:     case gen_udp:recv(Socket, 0, 5000) of\n  206          {ok, {_, _, Raw}} ->\n  207              case decode(Raw) of\n  ...\n  220              ?debugMsg(\"STUN: Timeout\\n\")\n  221      end,\n  222:     gen_udp:close(Socket).\n  223  \n  224  -endif.\n\n/home/sam/conversant/repos/kazoo/deps/nksip-0.4/src/nksip_transport_sctp.erl:\n   80      app_id :: nksip:app_id(),\n   81      transport :: nksip_transport:transport(),\n   82:     socket :: port(),\n   83      pending :: [{inet:ip_address(), inet:port_number(), from()}],\n   84      timeout :: integer()\n   ..\n  101      ],\n  102      case gen_sctp:open(Port, Opts1) of\n  103:         {ok, Socket}  ->\n  104              process_flag(priority, high),\n  105:             {ok, Port1} = inet:port(Socket),\n  106              Transp1 = Transp#transport{local_port=Port1, listen_port=Port1},\n  107:             ok = gen_sctp:listen(Socket, true),\n  108              nksip_proc:put(nksip_transports, {AppId, Transp1}),\n  109              nksip_proc:put({nksip_listen, AppId}, Transp1),\n  ...\n  111                  app_id = AppId, \n  112                  transport = Transp1, \n  113:                 socket = Socket,\n  114                  pending = [],\n  115                  timeout = 2000*Autoclose\n  ...\n  128  \n  129  handle_call({connect, Ip, Port}, From, State) ->\n  130:     #state{socket=Socket, pending=Pending} = State,\n  131      Self = self(),\n  132      Fun = fun() ->\n  133:         case gen_sctp:connect_init(Socket, Ip, Port, []) of\n  134              ok -> ok;\n  135              {error, Error} -> gen_server:cast(Self, {connection_error, Error, From})\n  ...\n  165      gen_server_info(#state{}).\n  166  \n  167: handle_info({sctp, Socket, Ip, Port, {Anc, SAC}}, State) ->\n  168:     #state{app_id=AppId, socket=Socket} = State,\n  169      State1 = case SAC of\n  170          #sctp_assoc_change{state=comm_up, assoc_id=AssocId} ->\n  ...\n  201              State\n  202      end,\n  203:     ok = inet:setopts(Socket, [{active, once}]),\n  204      {noreply, State1};\n  205  \n  ...\n  221      gen_server_terminate().\n  222  \n  223: terminate(_Reason, #state{app_id=AppId, socket=Socket}) ->  \n  224      ?debug(AppId, <<>>, \"SCTP server process stopped\", []),\n  225:     gen_sctp:close(Socket).\n  226  \n  227  \n  ...\n  239              {Pid, Transp};\n  240          [] -> \n  241:             #state{socket=Socket, transport=Transp, timeout=Timeout} = State,\n  242              Transp1 = Transp#transport{remote_ip=Ip, remote_port=Port, sctp_id=AssocId},\n  243:             {ok, Pid} = nksip_connection:start_link(AppId, Transp1, Socket, Timeout),\n  244              {Pid, Transp1}\n  245      end.\n\n/home/sam/conversant/repos/kazoo/deps/nksip-0.4/src/nksip_transport_tcp.erl:\n   67  connect(AppId, Transp, Opts) ->\n   68      #transport{proto=Proto, remote_ip=Ip, remote_port=Port} = Transp,\n   69:     SocketOpts = outbound_opts(Proto, Opts),\n   70      {InetMod, TranspMod} = case Proto of\n   71          tcp -> {inet, gen_tcp};\n   72          tls -> {ssl, ssl}\n   73      end,\n   74:     case TranspMod:connect(Ip, Port, SocketOpts) of\n   75:         {ok, Socket} -> \n   76:             {ok, {LocalIp, LocalPort}} = InetMod:sockname(Socket),\n   77              Transp1 = Transp#transport{\n   78                  local_ip = LocalIp,\n   ..\n   85                  {AppId, Proto, Ip, Port, make_ref()},\n   86                  {nksip_connection, start_link, \n   87:                     [AppId, Transp1, Socket, Timeout]},\n   88                  temporary,\n   89                  5000,\n   ..\n   92              },\n   93              {ok, Pid} = nksip_transport_sup:add_transport(AppId, Spec),\n   94:             TranspMod:controlling_process(Socket, Pid),\n   95:             InetMod:setopts(Socket, [{active, once}]),\n   96              ?debug(AppId, <<>>, \"~p connected to ~p\", [Proto, {Ip, Port}]),\n   97              {ok, Pid, Transp1};\n   ..\n  106  \n  107  \n  108: %% @private Gets socket options for outbound connections\n  109  -spec outbound_opts(nksip:protocol(), nksip_lib:optslist()) ->\n  110      nksip_lib:optslist().\n  ...\n  115  \n  116  \n  117: %% @private Gets socket options for listening connections\n  118  -spec listen_opts(nksip:protocol(), inet:ip_address(), inet:port_number(), \n  119                      nksip_lib:optslist()) ->\n  ...\n  178      {ok, pid()}.\n  179  \n  180: start_link(_ListenerPid, Socket, Module, [AppId, Transp, Opts]) ->\n  181:     {ok, {LocalIp, LocalPort}} = Module:sockname(Socket),\n  182:     {ok, {RemoteIp, RemotePort}} = Module:peername(Socket),\n  183      Transp1 = Transp#transport{\n  184          local_ip = LocalIp,\n  ...\n  189          listen_port = LocalPort\n  190      },\n  191:     Module:setopts(Socket, [{nodelay, true}, {keepalive, true}]),\n  192      Timeout = 1000*nksip_lib:get_value(tcp_timeout, Opts),\n  193:     nksip_connection:start_link(AppId, Transp1, Socket, Timeout).\n  194  \n  195  \n\n/home/sam/conversant/repos/kazoo/deps/nksip-0.4/src/nksip_transport_udp.erl:\n  114      app_id :: nksip:app_id(),\n  115      transport :: nksip_transport:transport(),\n  116:     socket :: port(),\n  117      tcp_pid :: pid(),\n  118      stuns :: [#stun{}],\n  ...\n  128  init([AppId, #transport{listen_ip=Ip, listen_port=Port}=Transp, Opts]) ->\n  129      case open_port(AppId, Ip, Port, 5) of\n  130:         {ok, Socket}  ->\n  131              process_flag(priority, high),\n  132:             {ok, Port1} = inet:port(Socket),\n  133              Self = self(),\n  134              spawn(fun() -> start_tcp(AppId, Ip, Port1, Opts, Self) end),\n  ...\n  139                  app_id = AppId, \n  140                  transport = Transp1, \n  141:                 socket = Socket,\n  142                  tcp_pid = undefined,\n  143                  stuns = [],\n  ...\n  162  \n  163  % It should not be used normally, use the nksip_connection version\n  164: handle_call({send, Ip, Port, Packet}, _From, #state{socket=Socket}=State) ->\n  165:     {reply, gen_udp:send(Socket, Ip, Port, Packet), State};\n  166  \n  167  handle_call({send_stun, Ip, Port}, From, #state{app_id=AppId}=State) ->\n  ...\n  198      gen_server_info(#state{}).\n  199  \n  200: handle_info({udp, Socket, _Ip, _Port, <<_, _>>}, #state{socket=Socket}=State) ->\n  201:     ok = inet:setopts(Socket, [{active, once}]),\n  202      {noreply, State};\n  203  \n  204: handle_info({udp, Socket, Ip, Port, <<0:2, _Header:158, _Msg/binary>>=Packet}, State) ->\n  205:     #state{app_id=AppId, socket=Socket} = State,\n  206:     ok = inet:setopts(Socket, [{active, once}]),\n  207      case nksip_stun:decode(Packet) of\n  208          {request, binding, TransId, _} ->\n  ...\n  219      end;\n  220  \n  221: handle_info({udp, Socket, Ip, Port, Packet}, #state{socket=Socket}=State) ->\n  222      read_packets(Ip, Port, Packet, State, 100),\n  223:     ok = inet:setopts(Socket, [{active, once}]),\n  224      {noreply, State};\n  225  \n  ...\n  254  %% @private\n  255  do_send_stun(AppId, Ip, Port, From, State) ->\n  256:     #state{timer_t1=T1, stuns=Stuns, socket=Socket} = State,\n  257      {Id, Packet} = nksip_stun:binding_request(),\n  258:     case gen_udp:send(Socket, Ip, Port, Packet) of\n  259          ok -> \n  260              ?debug(AppId, <<>>, \"sent STUN request to ~p\", [{Ip, Port}]),\n  ...\n  282  do_stun_retrans(Stun, State) ->\n  283      #stun{dest={Ip, Port}, packet=Packet, next_retrans=Next} = Stun,\n  284:     #state{app_id=AppId, stuns=Stuns, timer_t1=T1, socket=Socket} = State,\n  285      case Next =< (16*T1) of\n  286          true ->\n  287:             case gen_udp:send(Socket, Ip, Port, Packet) of\n  288                  ok -> \n  289                      ?info(AppId, <<>>, \"sent STUN refresh\", []),\n  ...\n  361      Opts = [binary, {reuseaddr, true}, {ip, Ip}, {active, once}],\n  362      case gen_udp:open(Port, Opts) of\n  363:         {ok, Socket} ->\n  364:             {ok, Socket};\n  365          {error, eaddrinuse} when Iter > 0 ->\n  366              ?warning(AppId, <<>>, \"UDP port ~p is in use, waiting (~p)\", [Port, Iter]),\n  ...\n  373  \n  374  %% @private \n  375: read_packets(Ip, Port, Packet, #state{socket=Socket}=State, N) ->\n  376      {Pid, _} = do_connect(Ip, Port, State),\n  377      nksip_connection:incoming(Pid, Packet),\n  378:     case N>0 andalso gen_udp:recv(Socket, 0, 0) of\n  379          {ok, {Ip1, Port1, Packet1}} -> \n  380              read_packets(Ip1, Port1, Packet1, State, N-1);\n  ...\n  386  %% @private\n  387  do_connect(Ip, Port, State) ->\n  388:     #state{app_id=AppId, transport=Transp, socket=Socket, timeout=Timeout}= State,\n  389      case nksip_transport:get_connected(AppId, udp, Ip, Port, <<>>) of\n  390          [{Transp1, Pid}|_] -> \n  ...\n  392          [] ->\n  393              Transp1 = Transp#transport{remote_ip=Ip, remote_port=Port},\n  394:             {ok, Pid} = nksip_connection:start_link(AppId, Transp1, Socket, Timeout),\n  395              {Pid, Transp1}\n  396      end.\n\n/home/sam/conversant/repos/kazoo/deps/nksip-0.4/src/nksip_transport_ws.erl:\n   19  %% -------------------------------------------------------------------\n   20  \n   21: %% @private Websocket (WS/WSS) Transport.\n   22  %%\n   23  %% For listening, we try to start a new webserver (ranch using cowboy_protocol), \n   24  %% that can be shared with other instances. We use this module as callback.\n   25  %% We a new connection arrives, init/3 will be called, and we start a new\n   26: %% nksip_connection process in websocket_init/3.\n   27  %%\n   28  %% For outbound connections, we start a normal tcp/ssl connection and let it be\n   ..\n   32  -author('Carlos Gonzalez <carlosj.gf@gmail.com>').\n   33  \n   34: % -behaviour(cowboy_websocket_handler).\n   35  \n   36  -export([get_listener/3]).\n   37  -export([start_link/4, init/1, terminate/2, code_change/3, handle_call/3, handle_cast/2, \n   38           handle_info/2]).\n   39: -export([init/3, websocket_init/3, websocket_handle/3, websocket_info/3, \n   40:          websocket_terminate/3]).\n   41  \n   42  -include(\"nksip.hrl\").\n   ..\n   88      end,\n   89      Res1 = case Res of <<>> -> <<\"/\">>; _ -> Res end,\n   90:     SocketOpts = outbound_opts(Proto, Opts),\n   91      try\n   92:         Socket = case TranspMod:connect(Ip, Port, SocketOpts) of\n   93:             {ok, Socket0} -> Socket0;\n   94              {error, Error1} -> throw(Error1) \n   95          end,\n   96          {Data1, HandshakeReq} = handshake_req(Ip, Port, Res1, Opts),\n   97:         case TranspMod:send(Socket, Data1) of\n   98              ok -> ok;\n   99              {error, Error2} -> throw(Error2)\n  100          end,\n  101          ?debug(AppId, <<>>, \"Sent ws hanshake: ~s\", [print_headers(Data1)]),\n  102:         case TranspMod:recv(Socket, 0, 5000) of\n  103              {ok, Data2} ->\n  104                  ?debug(AppId, <<>>, \"received ws reply: ~s\", [print_headers(Data2)]),\n  ...\n  110                  throw(Error4)\n  111          end,\n  112:         {ok, {LocalIp, LocalPort}} = InetMod:sockname(Socket),\n  113          Transp1 = Transp#transport{\n  114              local_ip = LocalIp,\n  ...\n  122              {AppId, Proto, Ip, Port, make_ref()},\n  123              {nksip_connection, start_link, \n  124:                 [AppId, Transp1, Socket, Timeout]},\n  125              temporary,\n  126              5000,\n  ...\n  129          },\n  130          {ok, Pid} = nksip_transport_sup:add_transport(AppId, Spec),\n  131:         TranspMod:controlling_process(Socket, Pid),\n  132:         InetMod:setopts(Socket, [{active, once}]),\n  133          ?debug(AppId, <<>>, \"~p connected to ~p\", [Proto, {Ip, Port}]),\n  134          {ok, Pid, Transp1}\n  ...\n  239  %% @private\n  240  init({Transp, http}, _Req, _Opts) when Transp==tcp; Transp==ssl ->\n  241:     {upgrade, protocol, cowboy_websocket}.\n  242  \n  243  %% @private\n  244: websocket_init(_TransportName, Req, [AppId, Transp, Opts]) ->\n  245:     WsProtos = case cowboy_req:parse_header(<<\"sec-websocket-protocol\">>, Req) of\n  246          {ok, ProtList, Req2} when is_list(ProtList) -> ProtList;\n  247          {ok, _, Req2} -> []\n  ...\n  249      case lists:member(<<\"sip\">>, WsProtos) of\n  250          true ->\n  251:             Req3 = cowboy_req:set_resp_header(<<\"sec-websocket-protocol\">>, \n  252                                                <<\"sip\">>, Req2),\n  253              Timeout = nksip_lib:get_value(timeout, Opts),\n  ...\n  267  \n  268  %% @private\n  269: websocket_handle({text, Msg}, Req, #ws_state{conn_pid=Pid}=State) ->\n  270      nksip_connection:incoming(Pid, Msg),\n  271      {ok, Req, State};\n  272  \n  273: websocket_handle({binary, Msg}, Req, #ws_state{conn_pid=Pid}=State) ->\n  274      nksip_connection:incoming(Pid, Msg),\n  275      {ok, Req, State};\n  276  \n  277: websocket_handle(_Data, Req, State) ->\n  278      {ok, Req, State}.\n  279  \n  280  \n  281  %% @private\n  282: websocket_info({send, Frames}, Req, State) ->\n  283      {reply, Frames, Req, State};\n  284  \n  285: websocket_info(Info, Req, #ws_state{conn_pid=Pid}=State) ->\n  286      Pid ! Info,\n  287      {ok, Req, State}.\n  ...\n  289  \n  290  %% @private\n  291: websocket_terminate(Reason, _Req, #ws_state{conn_pid=Pid}) ->\n  292      nksip_connection:stop(Pid, Reason),\n  293      ok.\n  ...\n  334  \n  335  \n  336: %% @private Gets socket options for outbound connections\n  337  -spec outbound_opts(nksip:protocol(), nksip_lib:optslist()) ->\n  338      nksip_lib:optslist().\n  ...\n  371      {ok, #handshake{message=Msg1}=HS1} = wsock_handshake:open(Res1, Host, Port),\n  372      #http_message{headers=Headers1} = Msg1,\n  373:     Headers2 = [{\"Sec-Websocket-Protocol\", \"sip\"}|Headers1],\n  374      Msg2 = Msg1#http_message{headers=Headers2},\n  375      HS2 = HS1#handshake{message=Msg2},\n  ...\n  386              case wsock_handshake:handle_response(Resp, Req) of\n  387                  {ok, #handshake{message=#http_message{headers=Headers}}} -> \n  388:                     case nksip_lib:get_value(\"Sec-Websocket-Protocol\", Headers) of\n  389                          \"sip\" -> \n  390                              ok;\n  391                          Other ->\n  392                              ?warning(AppId, <<>>, \n  393:                                      \"websocket server did not send protocol: ~p\", \n  394                                       [Other]),\n  395                              ok\n\n/home/sam/conversant/repos/kazoo/deps/nksip-0.4/src/nksip_webserver.erl:\n  345  \n  346  \n  347: %% @private Gets socket options for listening connections\n  348  -spec listen_opts(nksip:protocol(), inet:ip_address(), inet:port_number(), \n  349                      nksip_lib:optslist()) ->\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/docs/rabbitmq.config.example:\n  139     %% {frame_max, 131072},\n  140  \n  141:    %% Customising Socket Options.\n  142     %%\n  143     %% See (http://www.erlang.org/doc/man/inet.html#setopts-2) for\n  ...\n  434     %% {ssl_listeners, []},\n  435  \n  436:    %% TCP/Socket options (as per the broker configuration).\n  437     %%\n  438     %% {tcp_listen_options, [binary,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/include/rabbit.hrl:\n   70                          is_persistent}).\n   71  \n   72: -record(ssl_socket, {tcp, ssl}).\n   73  -record(delivery, {mandatory, sender, message, msg_seq_no}).\n   74  -record(amqp_error, {name, explanation = \"\", method = none}).\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/0002-R12-drop-all-references-to-boolean-type.patch:\n   10   src/cowboy_http_req.erl       |    2 --\n   11   src/cowboy_http_static.erl    |    5 -----\n   12:  src/cowboy_http_websocket.erl |    2 +-\n   13   6 files changed, 2 insertions(+), 19 deletions(-)\n   14  \n   ..\n  148   	{true, Req, State};\n  149   forbidden(Req, #state{fileinfo={error, eacces}}=State) ->\n  150: diff --git a/src/cowboy_http_websocket.erl b/src/cowboy_http_websocket.erl\n  151  index 0f0204c..5f59891 100644\n  152: --- a/src/cowboy_http_websocket.erl\n  153: +++ b/src/cowboy_http_websocket.erl\n  154  @@ -54,7 +54,7 @@\n  155   	timeout = infinity :: timeout(),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/0003-R12-drop-all-references-to-reference-type.patch:\n    6  ---\n    7   src/cowboy_http_protocol.erl  |    2 +-\n    8:  src/cowboy_http_websocket.erl |    2 +-\n    9   src/cowboy_listener.erl       |    2 +-\n   10   3 files changed, 3 insertions(+), 3 deletions(-)\n   ..\n   23   \n   24   %% API.\n   25: diff --git a/src/cowboy_http_websocket.erl b/src/cowboy_http_websocket.erl\n   26  index 5f59891..5100213 100644\n   27: --- a/src/cowboy_http_websocket.erl\n   28: +++ b/src/cowboy_http_websocket.erl\n   29  @@ -52,7 +52,7 @@\n   30   	opts :: any(),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/0004-R12-drop-references-to-iodata-type.patch:\n   35  --spec reply(cowboy_http:status(), cowboy_http:headers(), iodata(), #http_req{})\n   36  -	-> {ok, #http_req{}}.\n   37:  reply(Status, Headers, Body, Req=#http_req{socket=Socket,\n   38   		transport=Transport, connection=Connection, pid=ReqPid,\n   39   		method=Method, resp_state=waiting, resp_headers=RespHeaders}) ->\n   40: @@ -586,7 +581,6 @@ chunked_reply(Status, Headers, Req=#http_req{socket=Socket,\n   41   %% @doc Send a chunk of data.\n   42   %%\n   43   %% A chunked reply must have been initiated before calling this function.\n   44  --spec chunk(iodata(), #http_req{}) -> ok | {error, atom()}.\n   45:  chunk(_Data, #http_req{socket=_Socket, transport=_Transport, method='HEAD'}) ->\n   46   	ok;\n   47:  chunk(Data, #http_req{socket=Socket, transport=Transport, resp_state=chunks}) ->\n   48  -- \n   49  1.7.0.4\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/0006-Use-erlang-integer_to_list-and-lists-max-instead-of-.patch:\n   14  --- a/src/cowboy_http_req.erl\n   15  +++ b/src/cowboy_http_req.erl\n   16: @@ -576,7 +576,7 @@ chunked_reply(Status, Headers, Req=#http_req{socket=Socket,\n   17:  chunk(_Data, #http_req{socket=_Socket, transport=_Transport, method='HEAD'}) ->\n   18   	ok;\n   19:  chunk(Data, #http_req{socket=Socket, transport=Transport, resp_state=chunks}) ->\n   20: -	Transport:send(Socket, [integer_to_list(iolist_size(Data), 16),\n   21: +	Transport:send(Socket, [erlang:integer_to_list(iolist_size(Data), 16),\n   22   		<<\"\\r\\n\">>, Data, <<\"\\r\\n\">>]).\n   23   \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/CHANGELOG.md:\n   98      using the given fun. The size of the response must be known beforehand.\n   99  \n  100: *   Add transport/1 to obtain the transport and socket for the request\n  101  \n  102:     This allows handlers to have low-level socket access in those cases\n  103      where they do need it, like when streaming a response body with\n  104      set_resp_body_fun/3.\n  ...\n  111  *   Add meta/2 and meta/3 to save useful protocol information\n  112  \n  113:     Currently used to save the Websocket protocol version currently used,\n  114      and to save request information in the REST protocol handler.\n  115  \n  ...\n  179  *   Improve the error message for HTTP handlers\n  180  \n  181: ### cowboy_http_websocket\n  182  \n  183: *   Add websocket support for all versions up to RFC 6455\n  184  \n  185      Support isn't perfect yet according to the specifications, but\n  186      is working against all currently known client implementations.\n  187  \n  188: *   Allow websocket_init/3 to return with the hibernate option set\n  189  \n  190: *   Add {shutdown, Req} return value to websocket_init/3 to fail an upgrade\n  191  \n  192: *   Fix websocket timeout handling\n  193  \n  194  *   Fix error messages: wrong callback name was reported on error\n  195  \n  196: *   Fix byte-by-byte websocket handling\n  197  \n  198  *   Fix an issue when using hixie-76 with certain proxies\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/README.md:\n    4  Cowboy is a small, fast and modular HTTP server written in Erlang.\n    5  \n    6: Cowboy is also a socket acceptor pool, able to accept connections\n    7  for any kind of TCP protocol.\n    8  \n    .\n  205  See the cowboy_http_req module for more information.\n  206  \n  207: Websockets\n  208  ----------\n  209  \n  210: The Websocket protocol is built upon the HTTP protocol. It first sends\n  211  an HTTP request for an handshake, performs it and then switches\n  212: to Websocket. Therefore you need to write a standard HTTP handler to\n  213: confirm the handshake should be completed and then the Websocket-specific\n  214  callbacks.\n  215  \n  216  A simple handler doing nothing but sending a repetitive message using\n  217: Websocket would look like this:\n  218  \n  219  ``` erlang\n  220  -module(my_ws_handler).\n  221  -export([init/3]).\n  222: -export([websocket_init/3, websocket_handle/3,\n  223:     websocket_info/3, websocket_terminate/3]).\n  224  \n  225  init({tcp, http}, Req, Opts) ->\n  226:     {upgrade, protocol, cowboy_http_websocket}.\n  227  \n  228: websocket_init(TransportName, Req, _Opts) ->\n  229      erlang:start_timer(1000, self(), <<\"Hello!\">>),\n  230      {ok, Req, undefined_state}.\n  231  \n  232: websocket_handle({text, Msg}, Req, State) ->\n  233      {reply, {text, << \"That's what she said! \", Msg/binary >>}, Req, State};\n  234: websocket_handle(_Data, Req, State) ->\n  235      {ok, Req, State}.\n  236  \n  237: websocket_info({timeout, _Ref, Msg}, Req, State) ->\n  238      erlang:start_timer(1000, self(), <<\"How' you doin'?\">>),\n  239      {reply, {text, Msg}, Req, State};\n  240: websocket_info(_Info, Req, State) ->\n  241      {ok, Req, State}.\n  242  \n  243: websocket_terminate(_Reason, _Req, _State) ->\n  244      ok.\n  245  ```\n  246  \n  247: Of course you can have an HTTP handler doing both HTTP and Websocket\n  248  handling, but for the sake of this example we're ignoring the HTTP\n  249  part entirely.\n  250  \n  251: As the Websocket protocol is still a draft the API is subject to change\n  252  regularly when support to the most recent drafts gets added. Features may\n  253  be added, changed or removed before the protocol gets finalized. Cowboy\n  ...\n  263  \n  264  The only exported function a protocol handler needs is the start_link/4\n  265: function, with arguments ListenerPid, Socket, Transport and Opts. ListenerPid\n  266: is the pid to the listener's gen_server, managing the connections. Socket is of\n  267: course the client socket; Transport is the module name of the chosen transport\n  268  handler and Opts is protocol options defined when starting the listener.\n  269  \n  270  After initializing your protocol, it is recommended to call the\n  271  function cowboy:accept_ack/1 with the ListenerPid as argument,\n  272: as it will ensure Cowboy has been able to fully initialize the socket.\n  273  Anything you do past this point is up to you!\n  274  \n  275: If you need to change some socket options, like enabling raw mode for example,\n  276  you can call the <em>Transport:setopts/2</em> function. It is the protocol's\n  277: responsability to manage the socket usage, there should be no need for an user\n  278  to specify that kind of options while starting a listener.\n  279  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/include/http.hrl:\n   16  -record(http_req, {\n   17  	%% Transport.\n   18: 	socket     = undefined :: undefined | inet:socket(),\n   19  	transport  = undefined :: undefined | module(),\n   20  	connection = keepalive :: keepalive | close,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy.erl:\n   79  %% @doc Acknowledge the accepted connection.\n   80  %%\n   81: %% Effectively used to make sure the socket control has been given to\n   82  %% the protocol process before starting to use it.\n   83  -spec accept_ack(pid()) -> ok.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_acceptor.erl:\n   21  %% API.\n   22  \n   23: -spec start_link(inet:socket(), module(), module(), any(),\n   24  	non_neg_integer(), pid(), pid()) -> {ok, pid()}.\n   25: start_link(LSocket, Transport, Protocol, Opts,\n   26  		MaxConns, ListenerPid, ReqsSup) ->\n   27  	Pid = spawn_link(?MODULE, acceptor,\n   28: 		[LSocket, Transport, Protocol, Opts, MaxConns, ListenerPid, ReqsSup]),\n   29  	{ok, Pid}.\n   30  \n   31  %% Internal.\n   32  \n   33: -spec acceptor(inet:socket(), module(), module(), any(),\n   34  	non_neg_integer(), pid(), pid()) -> no_return().\n   35: acceptor(LSocket, Transport, Protocol, Opts, MaxConns, ListenerPid, ReqsSup) ->\n   36: 	case Transport:accept(LSocket, 2000) of\n   37: 		{ok, CSocket} ->\n   38  			{ok, Pid} = supervisor:start_child(ReqsSup,\n   39: 				[ListenerPid, CSocket, Transport, Protocol, Opts]),\n   40: 			Transport:controlling_process(CSocket, Pid),\n   41  			{ok, NbConns} = cowboy_listener:add_connection(ListenerPid,\n   42  				default, Pid),\n   ..\n   46  			ignore;\n   47  		{error, _Reason} ->\n   48: 			%% @todo Probably do something here. If the socket was closed,\n   49  			%%       we may want to try and listen again on the port?\n   50  			ignore\n   51  	end,\n   52: 	?MODULE:acceptor(LSocket, Transport, Protocol, Opts,\n   53  		MaxConns, ListenerPid, ReqsSup).\n   54  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_acceptors_sup.erl:\n   34  init([NbAcceptors, Transport, TransOpts,\n   35  		Protocol, ProtoOpts, ListenerPid, ReqsPid]) ->\n   36: 	{ok, LSocket} = Transport:listen(TransOpts),\n   37  	MaxConns = proplists:get_value(max_connections, TransOpts, 1024),\n   38  	Procs = [{{acceptor, self(), N}, {cowboy_acceptor, start_link, [\n   39: 				LSocket, Transport, Protocol, ProtoOpts,\n   40  				MaxConns, ListenerPid, ReqsPid\n   41        ]}, permanent, brutal_kill, worker, []}\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_http_handler.erl:\n   34  %% In doubt it'll simply close the connection.\n   35  %%\n   36: %% Note that when upgrading the connection to WebSocket you do not need to\n   37  %% define the <em>handle/2</em> and <em>terminate/2</em> callbacks.\n   38  -module(cowboy_http_handler).\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_http_protocol.erl:\n   44  -record(state, {\n   45  	listener :: pid(),\n   46: 	socket :: inet:socket(),\n   47  	transport :: module(),\n   48  	dispatch :: cowboy_dispatcher:dispatch_rules(),\n   ..\n   64  \n   65  %% @doc Start an HTTP protocol process.\n   66: -spec start_link(pid(), inet:socket(), module(), any()) -> {ok, pid()}.\n   67: start_link(ListenerPid, Socket, Transport, Opts) ->\n   68: 	Pid = spawn_link(?MODULE, init, [ListenerPid, Socket, Transport, Opts]),\n   69  	{ok, Pid}.\n   70  \n   ..\n   72  \n   73  %% @private\n   74: -spec init(pid(), inet:socket(), module(), any()) -> ok | none().\n   75: init(ListenerPid, Socket, Transport, Opts) ->\n   76  	Dispatch = proplists:get_value(dispatch, Opts, []),\n   77  	MaxEmptyLines = proplists:get_value(max_empty_lines, Opts, 5),\n   ..\n   82  	URLDec = proplists:get_value(urldecode, Opts, URLDecDefault),\n   83  	ok = cowboy:accept_ack(ListenerPid),\n   84: 	wait_request(#state{listener=ListenerPid, socket=Socket, transport=Transport,\n   85  		dispatch=Dispatch, max_empty_lines=MaxEmptyLines,\n   86  		max_keepalive=MaxKeepalive, max_line_length=MaxLineLength,\n   ..\n   90  -spec parse_request(#state{}) -> ok | none().\n   91  %% We limit the length of the Request-line to MaxLength to avoid endlessly\n   92: %% reading from the socket and eventually crashing.\n   93  parse_request(State=#state{buffer=Buffer, max_line_length=MaxLength}) ->\n   94  	case erlang:decode_packet(http_bin, Buffer, []) of\n   ..\n  101  \n  102  -spec wait_request(#state{}) -> ok | none().\n  103: wait_request(State=#state{socket=Socket, transport=Transport,\n  104  		timeout=T, buffer=Buffer}) ->\n  105: 	case Transport:recv(Socket, 0, T) of\n  106  		{ok, Data} -> parse_request(State#state{\n  107  			buffer= << Buffer/binary, Data/binary >>});\n  ...\n  115  	error_terminate(505, State);\n  116  request({http_request, Method, {abs_path, AbsPath}, Version},\n  117: 		State=#state{socket=Socket, transport=Transport,\n  118  		urldecode={URLDecFun, URLDecArg}=URLDec}) ->\n  119  	URLDecode = fun(Bin) -> URLDecFun(Bin, URLDecArg) end,\n  120  	{Path, RawPath, Qs} = cowboy_dispatcher:split_path(AbsPath, URLDecode),\n  121  	ConnAtom = version_to_connection(Version),\n  122: 	parse_header(#http_req{socket=Socket, transport=Transport,\n  123  		connection=ConnAtom, pid=self(), method=Method, version=Version,\n  124  		path=Path, raw_path=RawPath, raw_qs=Qs, urldecode=URLDec}, State);\n  125  request({http_request, Method, '*', Version},\n  126: 		State=#state{socket=Socket, transport=Transport, urldecode=URLDec}) ->\n  127  	ConnAtom = version_to_connection(Version),\n  128: 	parse_header(#http_req{socket=Socket, transport=Transport,\n  129  		connection=ConnAtom, pid=self(), method=Method, version=Version,\n  130  		path='*', raw_path= <<\"*\">>, raw_qs= <<>>, urldecode=URLDec}, State);\n  ...\n  150  \n  151  -spec wait_header(#http_req{}, #state{}) -> ok | none().\n  152: wait_header(Req, State=#state{socket=Socket,\n  153  		transport=Transport, timeout=T, buffer=Buffer}) ->\n  154: 	case Transport:recv(Socket, 0, T) of\n  155  		{ok, Data} -> parse_header(Req, State#state{\n  156  			buffer= << Buffer/binary, Data/binary >>});\n  ...\n  291  	handler_loop(HandlerState, Req, State2).\n  292  \n  293: %% Almost the same code can be found in cowboy_http_websocket.\n  294  -spec handler_loop_timeout(#state{}) -> #state{}.\n  295  handler_loop_timeout(State=#state{loop_timeout=infinity}) ->\n  ...\n  398  ensure_response(#http_req{method='HEAD', resp_state=chunks}) ->\n  399  	close;\n  400: ensure_response(#http_req{socket=Socket, transport=Transport,\n  401  		resp_state=chunks}) ->\n  402: 	Transport:send(Socket, <<\"0\\r\\n\\r\\n\">>),\n  403  	close.\n  404  \n  405  %% Only send an error reply if there is no resp_sent message.\n  406  -spec error_terminate(cowboy_http:status(), #state{}) -> ok.\n  407: error_terminate(Code, State=#state{socket=Socket, transport=Transport}) ->\n  408  	receive\n  409  		{cowboy_http_req, resp_sent} -> ok\n  410  	after 0 ->\n  411  		_ = cowboy_http_req:reply(Code, #http_req{\n  412: 			socket=Socket, transport=Transport,\n  413  			connection=close, pid=self(), resp_state=waiting}),\n  414  		ok\n  ...\n  417  \n  418  -spec terminate(#state{}) -> ok.\n  419: terminate(#state{socket=Socket, transport=Transport}) ->\n  420: 	Transport:close(Socket),\n  421  	ok.\n  422  \n  ...\n  459  	%% {Header, Result}\n  460  	Tests = [\n  461: 		{<<\"Sec-Websocket-Version\">>, <<\"Sec-Websocket-Version\">>},\n  462: 		{<<\"Sec-WebSocket-Version\">>, <<\"Sec-Websocket-Version\">>},\n  463: 		{<<\"sec-websocket-version\">>, <<\"Sec-Websocket-Version\">>},\n  464: 		{<<\"SEC-WEBSOCKET-VERSION\">>, <<\"Sec-Websocket-Version\">>},\n  465  		%% These last tests ensures we're formatting headers exactly like OTP.\n  466  		%% Even though it's dumb, it's better for compatibility reasons.\n  467: 		{<<\"Sec-WebSocket--Version\">>, <<\"Sec-Websocket--version\">>},\n  468: 		{<<\"Sec-WebSocket---Version\">>, <<\"Sec-Websocket---Version\">>}\n  469  	],\n  470  	[{H, fun() -> R = format_header(H) end} || {H, R} <- Tests].\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_http_req.erl:\n   68  %% @doc Return the peer address and port number of the remote host.\n   69  -spec peer(#http_req{}) -> {{inet:ip_address(), inet:ip_port()}, #http_req{}}.\n   70: peer(Req=#http_req{socket=Socket, transport=Transport, peer=undefined}) ->\n   71: 	{ok, Peer} = Transport:peername(Socket),\n   72  	{Peer, Req#http_req{peer=Peer}};\n   73  peer(Req) ->\n   ..\n  342  %% @doc Return metadata information about the request.\n  343  %%\n  344: %% Metadata information varies from one protocol to another. Websockets\n  345  %% would define the protocol version here, while REST would use it to\n  346  %% indicate which media type, language and charset were retained.\n  ...\n  372  %% You probably shouldn't be calling this function directly, as it expects the\n  373  %% <em>Length</em> argument to be the full size of the body, and will consider\n  374: %% the body to be fully read from the socket.\n  375  %% @todo We probably want to configure the timeout.\n  376  -spec body(non_neg_integer(), #http_req{})\n  ...\n  380  	<< Body:Length/binary, Rest/bits >> = Buffer,\n  381  	{ok, Body, Req#http_req{body_state=done, buffer=Rest}};\n  382: body(Length, Req=#http_req{socket=Socket, transport=Transport,\n  383  		body_state=waiting, buffer=Buffer}) ->\n  384: 	case Transport:recv(Socket, Length - byte_size(Buffer), 5000) of\n  385  		{ok, Body} -> {ok, << Buffer/binary, Body/binary >>,\n  386  			Req#http_req{body_state=done, buffer= <<>>}};\n  ...\n  437  multipart_data(Req, 0, eof) ->\n  438  	{eof, Req#http_req{body_state=done}};\n  439: multipart_data(Req=#http_req{socket=Socket, transport=Transport},\n  440  		Length, eof) ->\n  441: 	{ok, _Data} = Transport:recv(Socket, Length, 5000),\n  442  	{eof, Req#http_req{body_state=done}};\n  443: multipart_data(Req=#http_req{socket=Socket, transport=Transport},\n  444  		Length, {more, Parser}) when Length > 0 ->\n  445: 	case Transport:recv(Socket, 0, 5000) of\n  446  		{ok, << Data:Length/binary, Buffer/binary >>} ->\n  447  			multipart_data(Req#http_req{buffer=Buffer}, 0, Parser(Data));\n  ...\n  490  %% After the response headers has been sent the body function is applied.\n  491  %% The body function is expected to write the response body directly to the\n  492: %% socket using the transport module.\n  493  %%\n  494  %% If the body function crashes while writing the response body or writes fewer\n  ...\n  527  \n  528  %% @doc Send a reply to the client.\n  529: reply(Status, Headers, Body, Req=#http_req{socket=Socket,\n  530  		transport=Transport, connection=Connection, pid=ReqPid,\n  531  		method=Method, resp_state=waiting, resp_headers=RespHeaders}) ->\n  ...\n  539  	]),\n  540  	case {Method, Body} of\n  541: 		{'HEAD', _} -> Transport:send(Socket, Head);\n  542: 		{_, {_, StreamFun}} -> Transport:send(Socket, Head), StreamFun();\n  543: 		{_, _} -> Transport:send(Socket, [Head, Body])\n  544  	end,\n  545  	ReqPid ! {?MODULE, resp_sent},\n  ...\n  556  -spec chunked_reply(cowboy_http:status(), cowboy_http:headers(), #http_req{})\n  557  	-> {ok, #http_req{}}.\n  558: chunked_reply(Status, Headers, Req=#http_req{socket=Socket,\n  559  		transport=Transport, connection=Connection, pid=ReqPid,\n  560  		resp_state=waiting, resp_headers=RespHeaders}) ->\n  ...\n  566  		{<<\"Server\">>, <<\"Cowboy\">>}\n  567  	]),\n  568: 	Transport:send(Socket, Head),\n  569  	ReqPid ! {?MODULE, resp_sent},\n  570  	{ok, Req#http_req{connection=RespConn, resp_state=chunks,\n  ...\n  574  %%\n  575  %% A chunked reply must have been initiated before calling this function.\n  576: chunk(_Data, #http_req{socket=_Socket, transport=_Transport, method='HEAD'}) ->\n  577  	ok;\n  578: chunk(Data, #http_req{socket=Socket, transport=Transport, resp_state=chunks}) ->\n  579: 	Transport:send(Socket, [erlang:integer_to_list(iolist_size(Data), 16),\n  580  		<<\"\\r\\n\">>, Data, <<\"\\r\\n\">>]).\n  581  \n  ...\n  584  -spec upgrade_reply(cowboy_http:status(), cowboy_http:headers(), #http_req{})\n  585  	-> {ok, #http_req{}}.\n  586: upgrade_reply(Status, Headers, Req=#http_req{socket=Socket, transport=Transport,\n  587  		pid=ReqPid, resp_state=waiting, resp_headers=RespHeaders}) ->\n  588  	Head = response_head(Status, Headers, RespHeaders, [\n  589  		{<<\"Connection\">>, <<\"Upgrade\">>}\n  590  	]),\n  591: 	Transport:send(Socket, Head),\n  592  	ReqPid ! {?MODULE, resp_sent},\n  593  	{ok, Req#http_req{resp_state=done, resp_headers=[], resp_body= <<>>}}.\n  ...\n  607  		p_headers=[], cookies=[]}.\n  608  \n  609: %% @doc Return the transport module and socket associated with a request.\n  610  %%\n  611: %% This exposes the same socket interface used internally by the HTTP protocol\n  612: %% implementation to developers that needs low level access to the socket.\n  613  %%\n  614  %% It is preferred to use this in conjuction with the stream function support\n  615  %% in `set_resp_body_fun/3' if this is used to write a response body directly\n  616: %% to the socket. This ensures that the response headers are set correctly.\n  617: -spec transport(#http_req{}) -> {ok, module(), inet:socket()}.\n  618: transport(#http_req{transport=Transport, socket=Socket}) ->\n  619: 	{ok, Transport, Socket}.\n  620  \n  621  %% Internal.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_http_static.erl:\n  266  \n  267  \n  268: %% @private Return a function that writes a file directly to the socket.\n  269  -spec file_contents(#http_req{}, #state{}) -> tuple().\n  270  file_contents(Req, #state{filepath=Filepath,\n  271  		fileinfo={ok, #file_info{size=Filesize}}}=State) ->\n  272: 	{ok, Transport, Socket} = cowboy_http_req:transport(Req),\n  273: 	Writefile = content_function(Transport, Socket, Filepath),\n  274  	{{stream, Filesize, Writefile}, Req, State}.\n  275  \n  276  \n  277: %% @private Return a function writing the contents of a file to a socket.\n  278: %% The function returns the number of bytes written to the socket to enable\n  279  %% the calling function to determine if the expected number of bytes were\n  280: %% written to the socket.\n  281: -spec content_function(module(), inet:socket(), binary()) ->\n  282  	fun(() -> {sent, non_neg_integer()}).\n  283: content_function(Transport, Socket, Filepath) ->\n  284  	%% `file:sendfile/2' will only work with the `cowboy_tcp_transport'\n  285  	%% transport module. SSL or future SPDY transports that require the\n  ...\n  287  	case erlang:function_exported(file, sendfile, 2) of\n  288  		false ->\n  289: 			fun() -> sfallback(Transport, Socket, Filepath) end;\n  290  		_ when Transport =/= cowboy_tcp_transport ->\n  291: 			fun() -> sfallback(Transport, Socket, Filepath) end;\n  292  		true ->\n  293: 			fun() -> sendfile(Socket, Filepath) end\n  294  	end.\n  295  \n  296  \n  297  %% @private Sendfile fallback function.\n  298: -spec sfallback(module(), inet:socket(), binary()) -> {sent, non_neg_integer()}.\n  299: sfallback(Transport, Socket, Filepath) ->\n  300  	{ok, File} = file:open(Filepath, [read,binary,raw]),\n  301: 	sfallback(Transport, Socket, File, 0).\n  302  \n  303: -spec sfallback(module(), inet:socket(), file:io_device(),\n  304  		non_neg_integer()) -> {sent, non_neg_integer()}.\n  305: sfallback(Transport, Socket, File, Sent) ->\n  306  	case file:read(File, 16#1FFF) of\n  307  		eof ->\n  ...\n  309  			{sent, Sent};\n  310  		{ok, Bin} ->\n  311: 			ok = Transport:send(Socket, Bin),\n  312: 			sfallback(Transport, Socket, File, Sent + byte_size(Bin))\n  313  	end.\n  314  \n  315  \n  316  %% @private Wrapper for sendfile function.\n  317: -spec sendfile(inet:socket(), binary()) -> {sent, non_neg_integer()}.\n  318: sendfile(Socket, Filepath) ->\n  319: 	{ok, Sent} = file:sendfile(Filepath, Socket),\n  320  	{sent, Sent}.\n  321  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_http_websocket.erl:\n   13  %% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n   14  \n   15: %% @doc WebSocket protocol implementation.\n   16  %%\n   17  %% Supports the protocol version 0 (hixie-76), version 7 (hybi-7)\n   ..\n   36  %%  <li>Chrome 14+</li>\n   37  %% </ul>\n   38: -module(cowboy_http_websocket).\n   39  \n   40  -export([upgrade/4]). %% API.\n   ..\n   60  }).\n   61  \n   62: %% @doc Upgrade a HTTP request to the WebSocket protocol.\n   63  %%\n   64: %% You do not need to call this function manually. To upgrade to the WebSocket\n   65  %% protocol, you simply need to return <em>{upgrade, protocol, {@module}}</em>\n   66  %% in your <em>cowboy_http_handler:init/3</em> handler function.\n   67  -spec upgrade(pid(), module(), any(), #http_req{}) -> closed | none().\n   68  upgrade(ListenerPid, Handler, Opts, Req) ->\n   69: 	cowboy_listener:move_connection(ListenerPid, websocket, self()),\n   70: 	case catch websocket_upgrade(#state{handler=Handler, opts=Opts}, Req) of\n   71  		{ok, State, Req2} -> handler_init(State, Req2);\n   72  		{'EXIT', _Reason} -> upgrade_error(Req)\n   73  	end.\n   74  \n   75: -spec websocket_upgrade(#state{}, #http_req{}) -> {ok, #state{}, #http_req{}}.\n   76: websocket_upgrade(State, Req) ->\n   77  	{ConnTokens, Req2}\n   78  		= cowboy_http_req:parse_header('Connection', Req),\n   79  	true = lists:member(<<\"upgrade\">>, ConnTokens),\n   80  	%% @todo Should probably send a 426 if the Upgrade header is missing.\n   81: 	{[<<\"websocket\">>], Req3} = cowboy_http_req:parse_header('Upgrade', Req2),\n   82: 	{Version, Req4} = cowboy_http_req:header(<<\"Sec-Websocket-Version\">>, Req3),\n   83: 	websocket_upgrade(Version, State, Req4).\n   84  \n   85: %% @todo Handle the Sec-Websocket-Protocol header.\n   86  %% @todo Reply a proper error, don't die, if a required header is undefined.\n   87: -spec websocket_upgrade(undefined | <<_:8>>, #state{}, #http_req{})\n   88  	-> {ok, #state{}, #http_req{}}.\n   89  %% No version given. Assuming hixie-76 draft.\n   ..\n   92  %% third part of the challenge key, because proxies will wait for\n   93  %% a reply before sending it. Therefore we calculate the challenge\n   94: %% key only in websocket_handshake/3.\n   95: websocket_upgrade(undefined, State, Req=#http_req{meta=Meta}) ->\n   96  	{Origin, Req2} = cowboy_http_req:header(<<\"Origin\">>, Req),\n   97: 	{Key1, Req3} = cowboy_http_req:header(<<\"Sec-Websocket-Key1\">>, Req2),\n   98: 	{Key2, Req4} = cowboy_http_req:header(<<\"Sec-Websocket-Key2\">>, Req3),\n   99  	false = lists:member(undefined, [Origin, Key1, Key2]),\n  100  	EOP = binary:compile_pattern(<< 255 >>),\n  101  	{ok, State#state{version=0, origin=Origin, challenge={Key1, Key2},\n  102: 		eop=EOP}, Req4#http_req{meta=[{websocket_version, 0}|Meta]}};\n  103  %% Versions 7 and 8. Implementation follows the hybi 7 through 17 drafts.\n  104: websocket_upgrade(Version, State, Req=#http_req{meta=Meta})\n  105  		when Version =:= <<\"7\">>; Version =:= <<\"8\">>;\n  106  			Version =:= <<\"13\">> ->\n  107: 	{Key, Req2} = cowboy_http_req:header(<<\"Sec-Websocket-Key\">>, Req),\n  108  	false = Key =:= undefined,\n  109  	Challenge = hybi_challenge(Key),\n  110  	IntVersion = list_to_integer(binary_to_list(Version)),\n  111  	{ok, State#state{version=IntVersion, challenge=Challenge},\n  112: 		Req2#http_req{meta=[{websocket_version, IntVersion}|Meta]}}.\n  113  \n  114  -spec handler_init(#state{}, #http_req{}) -> closed | none().\n  115  handler_init(State=#state{handler=Handler, opts=Opts},\n  116  		Req=#http_req{transport=Transport}) ->\n  117: 	try Handler:websocket_init(Transport:name(), Req, Opts) of\n  118  		{ok, Req2, HandlerState} ->\n  119: 			websocket_handshake(State, Req2, HandlerState);\n  120  		{ok, Req2, HandlerState, hibernate} ->\n  121: 			websocket_handshake(State#state{hibernate=true},\n  122  				Req2, HandlerState);\n  123  		{ok, Req2, HandlerState, Timeout} ->\n  124: 			websocket_handshake(State#state{timeout=Timeout},\n  125  				Req2, HandlerState);\n  126  		{ok, Req2, HandlerState, Timeout, hibernate} ->\n  127: 			websocket_handshake(State#state{timeout=Timeout,\n  128  				hibernate=true}, Req2, HandlerState);\n  129  		{shutdown, Req2} ->\n  ...\n  132  		upgrade_error(Req),\n  133  		error_logger:error_msg(\n  134: 			\"** Handler ~p terminating in websocket_init/3~n\"\n  135  			\"   for the reason ~p:~p~n** Options were ~p~n\"\n  136  			\"** Request was ~p~n** Stacktrace: ~p~n~n\",\n  ...\n  153  upgrade_denied(#http_req{method='HEAD', resp_state=chunks}) ->\n  154  	closed;\n  155: upgrade_denied(#http_req{socket=Socket, transport=Transport,\n  156  		resp_state=chunks}) ->\n  157: 	Transport:send(Socket, <<\"0\\r\\n\\r\\n\">>),\n  158  	closed.\n  159  \n  160: -spec websocket_handshake(#state{}, #http_req{}, any()) -> closed | none().\n  161: websocket_handshake(State=#state{version=0, origin=Origin,\n  162: 		challenge={Key1, Key2}}, Req=#http_req{socket=Socket,\n  163  		transport=Transport, raw_host=Host, port=Port,\n  164  		raw_path=Path, raw_qs=QS}, HandlerState) ->\n  165  	Location = hixie76_location(Transport:name(), Host, Port, Path, QS),\n  166  	{ok, Req2} = cowboy_http_req:upgrade_reply(\n  167: 		<<\"101 WebSocket Protocol Handshake\">>,\n  168: 		[{<<\"Upgrade\">>, <<\"WebSocket\">>},\n  169: 		 {<<\"Sec-Websocket-Location\">>, Location},\n  170: 		 {<<\"Sec-Websocket-Origin\">>, Origin}],\n  171  		Req#http_req{resp_state=waiting}),\n  172  	%% Flush the resp_sent message before moving on.\n  ...\n  174  	%% We replied with a proper response. Proxies should be happy enough,\n  175  	%% we can now read the 8 last bytes of the challenge keys and send\n  176: 	%% the challenge response directly to the socket.\n  177  	case cowboy_http_req:body(8, Req2) of\n  178  		{ok, Key3, Req3} ->\n  179  			Challenge = hixie76_challenge(Key1, Key2, Key3),\n  180: 			Transport:send(Socket, Challenge),\n  181  			handler_before_loop(State#state{messages=Transport:messages()},\n  182  				Req3, HandlerState, <<>>);\n  ...\n  184  			closed %% If an error happened reading the body, stop there.\n  185  	end;\n  186: websocket_handshake(State=#state{challenge=Challenge},\n  187  		Req=#http_req{transport=Transport}, HandlerState) ->\n  188  	{ok, Req2} = cowboy_http_req:upgrade_reply(\n  189  		101,\n  190: 		[{<<\"Upgrade\">>, <<\"websocket\">>},\n  191: 		 {<<\"Sec-Websocket-Accept\">>, Challenge}],\n  192  		Req#http_req{resp_state=waiting}),\n  193  	%% Flush the resp_sent message before moving on.\n  ...\n  198  -spec handler_before_loop(#state{}, #http_req{}, any(), binary()) -> closed | none().\n  199  handler_before_loop(State=#state{hibernate=true},\n  200: 		Req=#http_req{socket=Socket, transport=Transport},\n  201  		HandlerState, SoFar) ->\n  202: 	Transport:setopts(Socket, [{active, once}]),\n  203  	State2 = handler_loop_timeout(State),\n  204  	erlang:hibernate(?MODULE, handler_loop, [State2#state{hibernate=false},\n  205  		Req, HandlerState, SoFar]);\n  206: handler_before_loop(State, Req=#http_req{socket=Socket, transport=Transport},\n  207  		HandlerState, SoFar) ->\n  208: 	Transport:setopts(Socket, [{active, once}]),\n  209  	State2 = handler_loop_timeout(State),\n  210  	handler_loop(State2, Req, HandlerState, SoFar).\n  ...\n  223  -spec handler_loop(#state{}, #http_req{}, any(), binary()) -> closed | none().\n  224  handler_loop(State=#state{messages={OK, Closed, Error}, timeout_ref=TRef},\n  225: 		Req=#http_req{socket=Socket}, HandlerState, SoFar) ->\n  226  	receive\n  227: 		{OK, Socket, Data} ->\n  228: 			websocket_data(State, Req, HandlerState,\n  229  				<< SoFar/binary, Data/binary >>);\n  230: 		{Closed, Socket} ->\n  231  			handler_terminate(State, Req, HandlerState, {error, closed});\n  232: 		{Error, Socket, Reason} ->\n  233  			handler_terminate(State, Req, HandlerState, {error, Reason});\n  234  		{?MODULE, timeout, TRef} ->\n  235: 			websocket_close(State, Req, HandlerState, {normal, timeout});\n  236  		{?MODULE, timeout, OlderTRef} when is_reference(OlderTRef) ->\n  237  			handler_loop(State, Req, HandlerState, SoFar);\n  238  		Message ->\n  239  			handler_call(State, Req, HandlerState,\n  240: 				SoFar, websocket_info, Message, fun handler_before_loop/4)\n  241  	end.\n  242  \n  243: -spec websocket_data(#state{}, #http_req{}, any(), binary()) -> closed | none().\n  244  %% No more data.\n  245: websocket_data(State, Req, HandlerState, <<>>) ->\n  246  	handler_before_loop(State, Req, HandlerState, <<>>);\n  247  %% hixie-76 close frame.\n  248: websocket_data(State=#state{version=0}, Req, HandlerState,\n  249  		<< 255, 0, _Rest/binary >>) ->\n  250: 	websocket_close(State, Req, HandlerState, {normal, closed});\n  251  %% hixie-76 data frame. We only support the frame type 0, same as the specs.\n  252: websocket_data(State=#state{version=0, eop=EOP}, Req, HandlerState,\n  253  		Data = << 0, _/binary >>) ->\n  254  	case binary:match(Data, EOP) of\n  ...\n  257  			<< 0, Payload:Pos2/binary, 255, Rest/bits >> = Data,\n  258  			handler_call(State, Req, HandlerState,\n  259: 				Rest, websocket_handle, {text, Payload}, fun websocket_data/4);\n  260  		nomatch ->\n  261  			%% @todo We probably should allow limiting frame length.\n  ...\n  263  	end;\n  264  %% incomplete hybi data frame.\n  265: websocket_data(State=#state{version=Version}, Req, HandlerState, Data)\n  266  		when Version =/= 0, byte_size(Data) =:= 1 ->\n  267  	handler_before_loop(State, Req, HandlerState, Data);\n  268  %% hybi data frame.\n  269  %% @todo Handle Fin.\n  270: websocket_data(State=#state{version=Version}, Req, HandlerState, Data)\n  271  		when Version =/= 0 ->\n  272  	<< 1:1, 0:3, Opcode:4, Mask:1, PayloadLen:7, Rest/bits >> = Data,\n  273  	case {PayloadLen, Rest} of\n  274: 		{126, _} when Opcode >= 8 -> websocket_close(\n  275  			State, Req, HandlerState, {error, protocol});\n  276: 		{127, _} when Opcode >= 8 -> websocket_close(\n  277  			State, Req, HandlerState, {error, protocol});\n  278: 		{126, << L:16, R/bits >>}  -> websocket_before_unmask(\n  279  			State, Req, HandlerState, Data, R, Opcode, Mask, L);\n  280: 		{126, Rest} -> websocket_before_unmask(\n  281  			State, Req, HandlerState, Data, Rest, Opcode, Mask, undefined);\n  282: 		{127, << 0:1, L:63, R/bits >>} -> websocket_before_unmask(\n  283  			State, Req, HandlerState, Data, R, Opcode, Mask, L);\n  284: 		{127, Rest} -> websocket_before_unmask(\n  285  			State, Req, HandlerState, Data, Rest, Opcode, Mask, undefined);\n  286: 		{PayloadLen, Rest} -> websocket_before_unmask(\n  287  			State, Req, HandlerState, Data, Rest, Opcode, Mask, PayloadLen)\n  288  	end;\n  289  %% Something was wrong with the frame. Close the connection.\n  290: websocket_data(State, Req, HandlerState, _Bad) ->\n  291: 	websocket_close(State, Req, HandlerState, {error, badframe}).\n  292  \n  293  %% hybi routing depending on whether unmasking is needed.\n  294: -spec websocket_before_unmask(#state{}, #http_req{}, any(), binary(),\n  295  	binary(), opcode(), 0 | 1, non_neg_integer() | undefined)\n  296  	-> closed | none().\n  297: websocket_before_unmask(State, Req, HandlerState, Data,\n  298  		Rest, Opcode, Mask, PayloadLen) ->\n  299  	case {Mask, PayloadLen} of\n  300  		{0, 0} ->\n  301: 			websocket_dispatch(State, Req, HandlerState, Rest, Opcode, <<>>);\n  302  		{1, N} when N + 4 > byte_size(Rest); N =:= undefined ->\n  303  			%% @todo We probably should allow limiting frame length.\n  ...\n  305  		{1, _N} ->\n  306  			<< MaskKey:32, Payload:PayloadLen/binary, Rest2/bits >> = Rest,\n  307: 			websocket_unmask(State, Req, HandlerState, Rest2,\n  308  				Opcode, Payload, MaskKey)\n  309  	end.\n  310  \n  311  %% hybi unmasking.\n  312: -spec websocket_unmask(#state{}, #http_req{}, any(), binary(),\n  313  	opcode(), binary(), mask_key()) -> closed | none().\n  314: websocket_unmask(State, Req, HandlerState, RemainingData,\n  315  		Opcode, Payload, MaskKey) ->\n  316: 	websocket_unmask(State, Req, HandlerState, RemainingData,\n  317  		Opcode, Payload, MaskKey, <<>>).\n  318  \n  319: -spec websocket_unmask(#state{}, #http_req{}, any(), binary(),\n  320  	opcode(), binary(), mask_key(), binary()) -> closed | none().\n  321: websocket_unmask(State, Req, HandlerState, RemainingData,\n  322  		Opcode, << O:32, Rest/bits >>, MaskKey, Acc) ->\n  323  	T = O bxor MaskKey,\n  324: 	websocket_unmask(State, Req, HandlerState, RemainingData,\n  325  		Opcode, Rest, MaskKey, << Acc/binary, T:32 >>);\n  326: websocket_unmask(State, Req, HandlerState, RemainingData,\n  327  		Opcode, << O:24 >>, MaskKey, Acc) ->\n  328  	<< MaskKey2:24, _:8 >> = << MaskKey:32 >>,\n  329  	T = O bxor MaskKey2,\n  330: 	websocket_dispatch(State, Req, HandlerState, RemainingData,\n  331  		Opcode, << Acc/binary, T:24 >>);\n  332: websocket_unmask(State, Req, HandlerState, RemainingData,\n  333  		Opcode, << O:16 >>, MaskKey, Acc) ->\n  334  	<< MaskKey2:16, _:16 >> = << MaskKey:32 >>,\n  335  	T = O bxor MaskKey2,\n  336: 	websocket_dispatch(State, Req, HandlerState, RemainingData,\n  337  		Opcode, << Acc/binary, T:16 >>);\n  338: websocket_unmask(State, Req, HandlerState, RemainingData,\n  339  		Opcode, << O:8 >>, MaskKey, Acc) ->\n  340  	<< MaskKey2:8, _:24 >> = << MaskKey:32 >>,\n  341  	T = O bxor MaskKey2,\n  342: 	websocket_dispatch(State, Req, HandlerState, RemainingData,\n  343  		Opcode, << Acc/binary, T:8 >>);\n  344: websocket_unmask(State, Req, HandlerState, RemainingData,\n  345  		Opcode, <<>>, _MaskKey, Acc) ->\n  346: 	websocket_dispatch(State, Req, HandlerState, RemainingData,\n  347  		Opcode, Acc).\n  348  \n  349  %% hybi dispatching.\n  350: -spec websocket_dispatch(#state{}, #http_req{}, any(), binary(),\n  351  	opcode(), binary()) -> closed | none().\n  352  %% @todo Fragmentation.\n  353: %~ websocket_dispatch(State, Req, HandlerState, RemainingData, 0, Payload) ->\n  354  %% Text frame.\n  355: websocket_dispatch(State, Req, HandlerState, RemainingData, 1, Payload) ->\n  356  	handler_call(State, Req, HandlerState, RemainingData,\n  357: 		websocket_handle, {text, Payload}, fun websocket_data/4);\n  358  %% Binary frame.\n  359: websocket_dispatch(State, Req, HandlerState, RemainingData, 2, Payload) ->\n  360  	handler_call(State, Req, HandlerState, RemainingData,\n  361: 		websocket_handle, {binary, Payload}, fun websocket_data/4);\n  362  %% Close control frame.\n  363  %% @todo Handle the optional Payload.\n  364: websocket_dispatch(State, Req, HandlerState, _RemainingData, 8, _Payload) ->\n  365: 	websocket_close(State, Req, HandlerState, {normal, closed});\n  366  %% Ping control frame. Send a pong back and forward the ping to the handler.\n  367: websocket_dispatch(State, Req=#http_req{socket=Socket, transport=Transport},\n  368  		HandlerState, RemainingData, 9, Payload) ->\n  369  	Len = hybi_payload_length(byte_size(Payload)),\n  370: 	Transport:send(Socket, << 1:1, 0:3, 10:4, 0:1, Len/bits, Payload/binary >>),\n  371  	handler_call(State, Req, HandlerState, RemainingData,\n  372: 		websocket_handle, {ping, Payload}, fun websocket_data/4);\n  373  %% Pong control frame.\n  374: websocket_dispatch(State, Req, HandlerState, RemainingData, 10, Payload) ->\n  375  	handler_call(State, Req, HandlerState, RemainingData,\n  376: 		websocket_handle, {pong, Payload}, fun websocket_data/4).\n  377  \n  378  -spec handler_call(#state{}, #http_req{}, any(), binary(),\n  ...\n  387  				Req2, HandlerState2, RemainingData);\n  388  		{reply, Payload, Req2, HandlerState2} ->\n  389: 			websocket_send(Payload, State, Req2),\n  390  			NextState(State, Req2, HandlerState2, RemainingData);\n  391  		{reply, Payload, Req2, HandlerState2, hibernate} ->\n  392: 			websocket_send(Payload, State, Req2),\n  393  			NextState(State#state{hibernate=true},\n  394  				Req2, HandlerState2, RemainingData);\n  395  		{shutdown, Req2, HandlerState2} ->\n  396: 			websocket_close(State, Req2, HandlerState2, {normal, shutdown})\n  397  	catch Class:Reason ->\n  398  		error_logger:error_msg(\n  ...\n  403  			[Handler, Callback, Class, Reason, Message, Opts,\n  404  			 HandlerState, Req, erlang:get_stacktrace()]),\n  405: 		websocket_close(State, Req, HandlerState, {error, handler})\n  406  	end.\n  407  \n  408: -spec websocket_send(binary(), #state{}, #http_req{}) -> closed | ignore.\n  409  %% hixie-76 text frame.\n  410: websocket_send({text, Payload}, #state{version=0},\n  411: 		#http_req{socket=Socket, transport=Transport}) ->\n  412: 	Transport:send(Socket, [0, Payload, 255]);\n  413  %% Ignore all unknown frame types for compatibility with hixie 76.\n  414: websocket_send(_Any, #state{version=0}, _Req) ->\n  415  	ignore;\n  416: websocket_send({Type, Payload}, _State,\n  417: 		#http_req{socket=Socket, transport=Transport}) ->\n  418  	Opcode = case Type of\n  419  		text -> 1;\n  ...\n  423  	end,\n  424  	Len = hybi_payload_length(iolist_size(Payload)),\n  425: 	Transport:send(Socket, [<< 1:1, 0:3, Opcode:4, 0:1, Len/bits >>,\n  426  		Payload]).\n  427  \n  428: -spec websocket_close(#state{}, #http_req{}, any(), {atom(), atom()}) -> closed.\n  429: websocket_close(State=#state{version=0}, Req=#http_req{socket=Socket,\n  430  		transport=Transport}, HandlerState, Reason) ->\n  431: 	Transport:send(Socket, << 255, 0 >>),\n  432  	handler_terminate(State, Req, HandlerState, Reason);\n  433  %% @todo Send a Payload? Using Reason is usually good but we're quite careless.\n  434: websocket_close(State, Req=#http_req{socket=Socket,\n  435  		transport=Transport}, HandlerState, Reason) ->\n  436: 	Transport:send(Socket, << 1:1, 0:3, 8:4, 0:8 >>),\n  437  	handler_terminate(State, Req, HandlerState, Reason).\n  438  \n  ...\n  442  		Req, HandlerState, TerminateReason) ->\n  443  	try\n  444: 		Handler:websocket_terminate(TerminateReason, Req, HandlerState)\n  445  	catch Class:Reason ->\n  446  		error_logger:error_msg(\n  447: 			\"** Handler ~p terminating in websocket_terminate/3~n\"\n  448  			\"   for the reason ~p:~p~n** Initial reason was ~p~n\"\n  449  			\"** Options were ~p~n** Handler state was ~p~n\"\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_http_websocket_handler.erl:\n   13  %% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n   14  \n   15: %% @doc Handler for HTTP WebSocket requests.\n   16  %%\n   17: %% WebSocket handlers must implement four callbacks: <em>websocket_init/3</em>,\n   18: %% <em>websocket_handle/3</em>, <em>websocket_info/3</em> and\n   19: %% <em>websocket_terminate/3</em>. These callbacks will only be called if the\n   20: %% connection is upgraded to WebSocket in the HTTP handler's <em>init/3</em>\n   21  %% callback. They are then called in that order, although\n   22: %% <em>websocket_handle/3</em> will be called for each packet received,\n   23: %% and <em>websocket_info</em> for each message received.\n   24  %%\n   25: %% <em>websocket_init/3</em> is meant for initialization. It receives\n   26  %% information about the transport and protocol used, along with the handler\n   27  %% options from the dispatch list. You can define a request-wide state here.\n   ..\n   29  %% here.\n   30  %%\n   31: %% <em>websocket_handle/3</em> receives the data from the socket. It can reply\n   32  %% something, do nothing or close the connection.\n   33  %%\n   34: %% <em>websocket_info/3</em> receives messages sent to the process. It has\n   35: %% the same reply format as <em>websocket_handle/3</em> described above. Note\n   36: %% that unlike in a <em>gen_server</em>, when <em>websocket_info/3</em>\n   37: %% replies something, it is always to the socket, not to the process that\n   38  %% originated the message.\n   39  %%\n   40: %% <em>websocket_terminate/3</em> is meant for cleaning up. It also receives\n   41  %% the request and the state previously defined, along with a reason for\n   42  %% termination.\n   43  %%\n   44: %% All of <em>websocket_init/3</em>, <em>websocket_handle/3</em> and\n   45: %% <em>websocket_info/3</em> can decide to hibernate the process by adding\n   46  %% an extra element to the returned tuple, containing the atom\n   47  %% <em>hibernate</em>. Doing so helps save memory and improve CPU usage.\n   48: -module(cowboy_http_websocket_handler).\n   49  \n   50  -export([behaviour_info/1]).\n   ..\n   52  %% @private\n   53  -spec behaviour_info(_)\n   54: 	-> undefined | [{websocket_handle, 3} | {websocket_info, 3}\n   55: 		| {websocket_init, 3} | {websocket_terminate, 3}, ...].\n   56  behaviour_info(callbacks) ->\n   57: 	[{websocket_init, 3}, {websocket_handle, 3},\n   58: 	 {websocket_info, 3}, {websocket_terminate, 3}];\n   59  behaviour_info(_Other) ->\n   60  	undefined.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_listener.erl:\n   54  %%\n   55  %% When a process managing a connection dies, the process is removed from the\n   56: %% pool. If the socket has been sent to another process, it is up to the\n   57  %% protocol code to inform the listener of the new <em>ConnPid</em> by removing\n   58  %% the previous and adding the new one.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_protocol.erl:\n   20  %% <em>start_link/4</em> is meant for the initialization of the\n   21  %% protocol process.\n   22: %% It receives the pid to the listener's gen_server, the client socket,\n   23  %% the module name of the chosen transport and the options defined when\n   24  %% starting the listener. The <em>start_link/4</em> function must follow\n   ..\n   27  %% After initializing your protocol, it is recommended to call the\n   28  %% function cowboy:accept_ack/1 with the ListenerPid as argument,\n   29: %% as it will ensure Cowboy has been able to fully initialize the socket.\n   30  %% Anything you do past this point is up to you!\n   31  %%\n   32: %% If you need to change some socket options, like enabling raw mode\n   33  %% for example, you can call the <em>Transport:setopts/2</em> function.\n   34: %% It is the protocol's responsability to manage the socket usage,\n   35  %% there should be no need for an user to specify that kind of options\n   36  %% while starting a listener.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_requests_sup.erl:\n   26  	supervisor:start_link(?MODULE, []).\n   27  \n   28: -spec start_request(pid(), inet:socket(), module(), module(), any())\n   29  	-> {ok, pid()}.\n   30: start_request(ListenerPid, Socket, Transport, Protocol, Opts) ->\n   31: 	Protocol:start_link(ListenerPid, Socket, Transport, Opts).\n   32  \n   33  %% supervisor.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_ssl_transport.erl:\n   20  %% and <em>ssl</em> applications to be started. If they aren't started,\n   21  %% it will try to start them itself before opening a port to listen.\n   22: %% Applications aren't stopped when the listening socket is closed, though.\n   23  %%\n   24  %% @see ssl\n   ..\n   38  messages() -> {ssl, ssl_closed, ssl_error}.\n   39  \n   40: %% @doc Setup a socket to listen on the given port on the local host.\n   41  %%\n   42  %% The available options are:\n   ..\n   63  	| {keyfile, string()} | {password, string()}\n   64  	| {cacertfile, string()} | {ip, inet:ip_address()}])\n   65: 	-> {ok, ssl:sslsocket()} | {error, atom()}.\n   66  listen(Opts) ->\n   67  	require([crypto, public_key, ssl]),\n   ..\n   86  	ssl:listen(Port, ListenOpts).\n   87  \n   88: %% @doc Accept an incoming connection on a listen socket.\n   89  %%\n   90  %% Note that this function does both the transport accept and\n   ..\n   93  %% @see ssl:transport_accept/2\n   94  %% @see ssl:ssl_accept/2\n   95: -spec accept(ssl:sslsocket(), timeout())\n   96: 	-> {ok, ssl:sslsocket()} | {error, closed | timeout | atom()}.\n   97: accept(LSocket, Timeout) ->\n   98: 	case ssl:transport_accept(LSocket, Timeout) of\n   99: 		{ok, CSocket} ->\n  100: 			ssl_accept(CSocket, Timeout);\n  101  		{error, Reason} ->\n  102  			{error, Reason}\n  103  	end.\n  104  \n  105: %% @doc Receive a packet from a socket in passive mode.\n  106  %% @see ssl:recv/3\n  107: -spec recv(ssl:sslsocket(), non_neg_integer(), timeout())\n  108  	-> {ok, any()} | {error, closed | atom()}.\n  109: recv(Socket, Length, Timeout) ->\n  110: 	ssl:recv(Socket, Length, Timeout).\n  111  \n  112: %% @doc Send a packet on a socket.\n  113  %% @see ssl:send/2\n  114: -spec send(ssl:sslsocket(), iolist()) -> ok | {error, atom()}.\n  115: send(Socket, Packet) ->\n  116: 	ssl:send(Socket, Packet).\n  117  \n  118: %% @doc Set one or more options for a socket.\n  119  %% @see ssl:setopts/2\n  120: -spec setopts(ssl:sslsocket(), list()) -> ok | {error, atom()}.\n  121: setopts(Socket, Opts) ->\n  122: 	ssl:setopts(Socket, Opts).\n  123  \n  124: %% @doc Assign a new controlling process <em>Pid</em> to <em>Socket</em>.\n  125  %% @see ssl:controlling_process/2\n  126: -spec controlling_process(ssl:sslsocket(), pid())\n  127  	-> ok | {error, closed | not_owner | atom()}.\n  128: controlling_process(Socket, Pid) ->\n  129: 	ssl:controlling_process(Socket, Pid).\n  130  \n  131  %% @doc Return the address and port for the other end of a connection.\n  132  %% @see ssl:peername/1\n  133: -spec peername(ssl:sslsocket())\n  134  	-> {ok, {inet:ip_address(), inet:ip_port()}} | {error, atom()}.\n  135: peername(Socket) ->\n  136: 	ssl:peername(Socket).\n  137  \n  138: %% @doc Close a TCP socket.\n  139  %% @see ssl:close/1\n  140: -spec close(ssl:sslsocket()) -> ok.\n  141: close(Socket) ->\n  142: 	ssl:close(Socket).\n  143  \n  144  %% Internal.\n  ...\n  154  	require(Tail).\n  155  \n  156: -spec ssl_accept(ssl:sslsocket(), timeout())\n  157: 	-> {ok, ssl:sslsocket()} | {error, closed | timeout | atom()}.\n  158: ssl_accept(Socket, Timeout) ->\n  159: 	case ssl:ssl_accept(Socket, Timeout) of\n  160  		ok ->\n  161: 			{ok, Socket};\n  162  		{error, Reason} ->\n  163  			{error, Reason}\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/src/cowboy_tcp_transport.erl:\n   34  messages() -> {tcp, tcp_closed, tcp_error}.\n   35  \n   36: %% @doc Setup a socket to listen on the given port on the local host.\n   37  %%\n   38  %% The available options are:\n   ..\n   47  %% @see gen_tcp:listen/2\n   48  -spec listen([{port, inet:ip_port()} | {ip, inet:ip_address()}])\n   49: 	-> {ok, inet:socket()} | {error, atom()}.\n   50  listen(Opts) ->\n   51  	{port, Port} = lists:keyfind(port, 1, Opts),\n   ..\n   60  	gen_tcp:listen(Port, ListenOpts).\n   61  \n   62: %% @doc Accept an incoming connection on a listen socket.\n   63  %% @see gen_tcp:accept/2\n   64: -spec accept(inet:socket(), timeout())\n   65: 	-> {ok, inet:socket()} | {error, closed | timeout | atom()}.\n   66: accept(LSocket, Timeout) ->\n   67: 	gen_tcp:accept(LSocket, Timeout).\n   68  \n   69: %% @doc Receive a packet from a socket in passive mode.\n   70  %% @see gen_tcp:recv/3\n   71: -spec recv(inet:socket(), non_neg_integer(), timeout())\n   72  	-> {ok, any()} | {error, closed | atom()}.\n   73: recv(Socket, Length, Timeout) ->\n   74: 	gen_tcp:recv(Socket, Length, Timeout).\n   75  \n   76: %% @doc Send a packet on a socket.\n   77  %% @see gen_tcp:send/2\n   78: -spec send(inet:socket(), iolist()) -> ok | {error, atom()}.\n   79: send(Socket, Packet) ->\n   80: 	gen_tcp:send(Socket, Packet).\n   81  \n   82: %% @doc Set one or more options for a socket.\n   83  %% @see inet:setopts/2\n   84: -spec setopts(inet:socket(), list()) -> ok | {error, atom()}.\n   85: setopts(Socket, Opts) ->\n   86: 	inet:setopts(Socket, Opts).\n   87  \n   88: %% @doc Assign a new controlling process <em>Pid</em> to <em>Socket</em>.\n   89  %% @see gen_tcp:controlling_process/2\n   90: -spec controlling_process(inet:socket(), pid())\n   91  	-> ok | {error, closed | not_owner | atom()}.\n   92: controlling_process(Socket, Pid) ->\n   93: 	gen_tcp:controlling_process(Socket, Pid).\n   94  \n   95  %% @doc Return the address and port for the other end of a connection.\n   96  %% @see inet:peername/1\n   97: -spec peername(inet:socket())\n   98  	-> {ok, {inet:ip_address(), inet:ip_port()}} | {error, atom()}.\n   99: peername(Socket) ->\n  100: 	inet:peername(Socket).\n  101  \n  102: %% @doc Close a TCP socket.\n  103  %% @see gen_tcp:close/1\n  104: -spec close(inet:socket()) -> ok.\n  105: close(Socket) ->\n  106: 	gen_tcp:close(Socket).\n  107  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/test/http_SUITE.erl:\n  188  headers_dupe(Config) ->\n  189  	{port, Port} = lists:keyfind(port, 1, Config),\n  190: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  191  		[binary, {active, false}, {packet, raw}]),\n  192: 	ok = gen_tcp:send(Socket, \"GET /headers/dupe HTTP/1.1\\r\\n\"\n  193  		\"Host: localhost\\r\\nConnection: keep-alive\\r\\n\\r\\n\"),\n  194: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  195  	{_Start, _Length} = binary:match(Data, <<\"Connection: close\">>),\n  196  	nomatch = binary:match(Data, <<\"Connection: keep-alive\">>),\n  197: 	{error, closed} = gen_tcp:recv(Socket, 0, 1000).\n  198  \n  199  headers_huge(Config) ->\n  ...\n  205  keepalive_nl(Config) ->\n  206  	{port, Port} = lists:keyfind(port, 1, Config),\n  207: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  208  		[binary, {active, false}, {packet, raw}]),\n  209: 	ok = keepalive_nl_loop(Socket, 10),\n  210: 	ok = gen_tcp:close(Socket).\n  211  \n  212: keepalive_nl_loop(_Socket, 0) ->\n  213  	ok;\n  214: keepalive_nl_loop(Socket, N) ->\n  215: 	ok = gen_tcp:send(Socket, \"GET / HTTP/1.1\\r\\n\"\n  216  		\"Host: localhost\\r\\nConnection: keep-alive\\r\\n\\r\\n\"),\n  217: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  218  	{0, 12} = binary:match(Data, <<\"HTTP/1.1 200\">>),\n  219  	nomatch = binary:match(Data, <<\"Connection: close\">>),\n  220: 	ok = gen_tcp:send(Socket, \"\\r\\n\"), %% extra nl\n  221: 	keepalive_nl_loop(Socket, N - 1).\n  222  \n  223  max_keepalive(Config) ->\n  224  	{port, Port} = lists:keyfind(port, 1, Config),\n  225: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  226  		[binary, {active, false}, {packet, raw}]),\n  227: 	ok = max_keepalive_loop(Socket, 50),\n  228: 	{error, closed} = gen_tcp:recv(Socket, 0, 1000).\n  229  \n  230: max_keepalive_loop(_Socket, 0) ->\n  231  	ok;\n  232: max_keepalive_loop(Socket, N) ->\n  233: 	ok = gen_tcp:send(Socket, \"GET / HTTP/1.1\\r\\n\"\n  234  		\"Host: localhost\\r\\nConnection: keep-alive\\r\\n\\r\\n\"),\n  235: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  236  	{0, 12} = binary:match(Data, <<\"HTTP/1.1 200\">>),\n  237  	case N of\n  ...\n  239  		N -> nomatch = binary:match(Data, <<\"Connection: close\">>)\n  240  	end,\n  241: 	keepalive_nl_loop(Socket, N - 1).\n  242  \n  243  multipart(Config) ->\n  ...\n  286  pipeline(Config) ->\n  287  	{port, Port} = lists:keyfind(port, 1, Config),\n  288: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  289  		[binary, {active, false}, {packet, raw}]),\n  290: 	ok = gen_tcp:send(Socket,\n  291  		\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: keep-alive\\r\\n\\r\\n\"\n  292  		\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: keep-alive\\r\\n\\r\\n\"\n  ...\n  294  		\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: keep-alive\\r\\n\\r\\n\"\n  295  		\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n\"),\n  296: 	Data = pipeline_recv(Socket, <<>>),\n  297  	Reqs = binary:split(Data, << \"\\r\\n\\r\\nhttp_handler\" >>, [global, trim]),\n  298  	5 = length(Reqs),\n  ...\n  305  	pipeline_check(Tail).\n  306  \n  307: pipeline_recv(Socket, SoFar) ->\n  308: 	case gen_tcp:recv(Socket, 0, 6000) of\n  309  		{ok, Data} ->\n  310: 			pipeline_recv(Socket, << SoFar/binary, Data/binary >>);\n  311  		{error, closed} ->\n  312: 			ok = gen_tcp:close(Socket),\n  313  			SoFar\n  314  	end.\n  ...\n  316  raw_req(Packet, Config) ->\n  317  	{port, Port} = lists:keyfind(port, 1, Config),\n  318: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  319  		[binary, {active, false}, {packet, raw}]),\n  320: 	ok = gen_tcp:send(Socket, Packet),\n  321: 	Res = case gen_tcp:recv(Socket, 0, 6000) of\n  322  		{ok, << \"HTTP/1.1 \", Str:24/bits, _Rest/bits >>} ->\n  323  			list_to_integer(binary_to_list(Str));\n  ...\n  325  			Reason\n  326  	end,\n  327: 	gen_tcp:close(Socket),\n  328  	{Packet, Res}.\n  329  \n  ...\n  335  		\"https\" -> ssl\n  336  	end,\n  337: 	{ok, Socket} = Transport:connect(\"localhost\", Port,\n  338  		[binary, {active, false}, {packet, raw}]),\n  339: 	ok = Transport:send(Socket, Request),\n  340: 	{StatusCode,  Response} = case recv_loop(Transport, Socket, <<>>) of\n  341  		{ok, << \"HTTP/1.1 \", Str:24/bits, _Rest/bits >> = Bin} ->\n  342  			{list_to_integer(binary_to_list(Str)), Bin};\n  ...\n  346  			{Reason, <<>>}\n  347  	end,\n  348: 	Transport:close(Socket),\n  349  	{Response, StatusCode}.\n  350  \n  351: recv_loop(Transport, Socket, Acc) ->\n  352: 	case Transport:recv(Socket, 0, 6000) of\n  353  		{ok, Data} ->\n  354: 			recv_loop(Transport, Socket, <<Acc/binary, Data/binary>>);\n  355  		{error, closed} ->\n  356: 			ok = Transport:close(Socket),\n  357  			{ok, Acc};\n  358  		{error, Reason} ->\n  ...\n  390  set_resp_header(Config) ->\n  391  	{port, Port} = lists:keyfind(port, 1, Config),\n  392: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  393  		[binary, {active, false}, {packet, raw}]),\n  394: 	ok = gen_tcp:send(Socket, \"GET /set_resp/header HTTP/1.1\\r\\n\"\n  395  		\"Host: localhost\\r\\nConnection: close\\r\\n\\r\\n\"),\n  396: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  397  	{_, _} = binary:match(Data, <<\"Vary: Accept\">>),\n  398  	{_, _} = binary:match(Data, <<\"Set-Cookie: \">>).\n  ...\n  400  set_resp_overwrite(Config) ->\n  401  	{port, Port} = lists:keyfind(port, 1, Config),\n  402: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  403  		[binary, {active, false}, {packet, raw}]),\n  404: 	ok = gen_tcp:send(Socket, \"GET /set_resp/overwrite HTTP/1.1\\r\\n\"\n  405  		\"Host: localhost\\r\\nConnection: close\\r\\n\\r\\n\"),\n  406: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  407  	{_Start, _Length} = binary:match(Data, <<\"Server: DesireDrive/1.0\">>).\n  408  \n  409  set_resp_body(Config) ->\n  410  	{port, Port} = lists:keyfind(port, 1, Config),\n  411: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  412  		[binary, {active, false}, {packet, raw}]),\n  413: 	ok = gen_tcp:send(Socket, \"GET /set_resp/body HTTP/1.1\\r\\n\"\n  414  		\"Host: localhost\\r\\nConnection: close\\r\\n\\r\\n\"),\n  415: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  416  	{_Start, _Length} = binary:match(Data, <<\"\\r\\n\\r\\n\"\n  417  		\"A flameless dance does not equal a cycle\">>).\n  ...\n  572  rest_keepalive(Config) ->\n  573  	{port, Port} = lists:keyfind(port, 1, Config),\n  574: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  575  		[binary, {active, false}, {packet, raw}]),\n  576: 	ok = rest_keepalive_loop(Socket, 100),\n  577: 	ok = gen_tcp:close(Socket).\n  578  \n  579: rest_keepalive_loop(_Socket, 0) ->\n  580  	ok;\n  581: rest_keepalive_loop(Socket, N) ->\n  582: 	ok = gen_tcp:send(Socket, \"GET /simple HTTP/1.1\\r\\n\"\n  583  		\"Host: localhost\\r\\nConnection: keep-alive\\r\\n\\r\\n\"),\n  584: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  585  	{0, 12} = binary:match(Data, <<\"HTTP/1.1 200\">>),\n  586  	nomatch = binary:match(Data, <<\"Connection: close\">>),\n  587: 	rest_keepalive_loop(Socket, N - 1).\n  588  \n  589  rest_keepalive_post(Config) ->\n  590  	{port, Port} = lists:keyfind(port, 1, Config),\n  591: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  592  		[binary, {active, false}, {packet, raw}]),\n  593: 	ok = rest_keepalive_post_loop(Socket, 10, forbidden_post),\n  594: 	ok = gen_tcp:close(Socket).\n  595  \n  596: rest_keepalive_post_loop(_Socket, 0, _) ->\n  597  	ok;\n  598: rest_keepalive_post_loop(Socket, N, simple_post) ->\n  599: 	ok = gen_tcp:send(Socket, \"POST /simple_post HTTP/1.1\\r\\n\"\n  600  		\"Host: localhost\\r\\nConnection: keep-alive\\r\\n\"\n  601  		\"Content-Length: 5\\r\\nContent-Type: text/plain\\r\\n\\r\\n12345\"),\n  602: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  603  	{0, 12} = binary:match(Data, <<\"HTTP/1.1 303\">>),\n  604  	nomatch = binary:match(Data, <<\"Connection: close\">>),\n  605: 	rest_keepalive_post_loop(Socket, N - 1, forbidden_post);\n  606: rest_keepalive_post_loop(Socket, N, forbidden_post) ->\n  607: 	ok = gen_tcp:send(Socket, \"POST /forbidden_post HTTP/1.1\\r\\n\"\n  608  		\"Host: localhost\\r\\nConnection: keep-alive\\r\\n\"\n  609  		\"Content-Length: 5\\r\\nContent-Type: text/plain\\r\\n\\r\\n12345\"),\n  610: 	{ok, Data} = gen_tcp:recv(Socket, 0, 6000),\n  611  	{0, 12} = binary:match(Data, <<\"HTTP/1.1 403\">>),\n  612  	nomatch = binary:match(Data, <<\"Connection: close\">>),\n  613: 	rest_keepalive_post_loop(Socket, N - 1, simple_post).\n  614  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/test/http_handler_stream_body.erl:\n   14  \n   15  handle(Req, State=#state{headers=_Headers, body=Body, reply=set_resp}) ->\n   16: 	{ok, Transport, Socket} = cowboy_http_req:transport(Req),\n   17: 	SFun = fun() -> Transport:send(Socket, Body), sent end,\n   18  	SLen = iolist_size(Body),\n   19  	{ok, Req2} = cowboy_http_req:set_resp_body_fun(SLen, SFun, Req),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/test/websocket_handler.erl:\n    1  %% Feel free to use, reuse and abuse the code in this file.\n    2  \n    3: -module(websocket_handler).\n    4  -behaviour(cowboy_http_handler).\n    5: -behaviour(cowboy_http_websocket_handler).\n    6  -export([init/3, handle/2, terminate/2]).\n    7: -export([websocket_init/3, websocket_handle/3,\n    8: 	websocket_info/3, websocket_terminate/3]).\n    9  \n   10  init(_Any, _Req, _Opts) ->\n   11: 	{upgrade, protocol, cowboy_http_websocket}.\n   12  \n   13  handle(_Req, _State) ->\n   ..\n   17  	exit(badarg).\n   18  \n   19: websocket_init(_TransportName, Req, _Opts) ->\n   20: 	erlang:start_timer(1000, self(), <<\"websocket_init\">>),\n   21  	Req2 = cowboy_http_req:compact(Req),\n   22  	{ok, Req2, undefined}.\n   23  \n   24: websocket_handle({text, Data}, Req, State) ->\n   25  	{reply, {text, Data}, Req, State};\n   26: websocket_handle({binary, Data}, Req, State) ->\n   27  	{reply, {binary, Data}, Req, State};\n   28: websocket_handle(_Frame, Req, State) ->\n   29  	{ok, Req, State}.\n   30  \n   31: websocket_info({timeout, _Ref, Msg}, Req, State) ->\n   32: 	erlang:start_timer(1000, self(), <<\"websocket_handle\">>),\n   33  	{reply, {text, Msg}, Req, State};\n   34: websocket_info(_Info, Req, State) ->\n   35  	{ok, Req, State}.\n   36  \n   37: websocket_terminate(_Reason, _Req, _State) ->\n   38  	ok.\n   39  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/test/websocket_handler_init_shutdown.erl:\n    1  %% Feel free to use, reuse and abuse the code in this file.\n    2  \n    3: -module(websocket_handler_init_shutdown).\n    4  -behaviour(cowboy_http_handler).\n    5: -behaviour(cowboy_http_websocket_handler).\n    6  -export([init/3, handle/2, terminate/2]).\n    7: -export([websocket_init/3, websocket_handle/3,\n    8: 	websocket_info/3, websocket_terminate/3]).\n    9  \n   10  init(_Any, _Req, _Opts) ->\n   11: 	{upgrade, protocol, cowboy_http_websocket}.\n   12  \n   13  handle(_Req, _State) ->\n   ..\n   17  	exit(badarg).\n   18  \n   19: websocket_init(_TransportName, Req, _Opts) ->\n   20  	{ok, Req2} = cowboy_http_req:reply(403, Req),\n   21  	{shutdown, Req2}.\n   22  \n   23: websocket_handle(_Frame, _Req, _State) ->\n   24  	exit(badarg).\n   25  \n   26: websocket_info(_Info, _Req, _State) ->\n   27  	exit(badarg).\n   28  \n   29: websocket_terminate(_Reason, _Req, _State) ->\n   30  	exit(badarg).\n   31  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/test/ws_SUITE.erl:\n   59  	[\n   60  		{[<<\"localhost\">>], [\n   61: 			{[<<\"websocket\">>], websocket_handler, []},\n   62  			{[<<\"ws_timeout_hibernate\">>], ws_timeout_hibernate_handler, []},\n   63: 			{[<<\"ws_init_shutdown\">>], websocket_handler_init_shutdown, []}\n   64  		]}\n   65  	].\n   ..\n   73  ws0(Config) ->\n   74  	{port, Port} = lists:keyfind(port, 1, Config),\n   75: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n   76  		[binary, {active, false}, {packet, raw}]),\n   77: 	ok = gen_tcp:send(Socket,\n   78: 		\"GET /websocket HTTP/1.1\\r\\n\"\n   79  		\"Host: localhost\\r\\n\"\n   80  		\"Connection: Upgrade\\r\\n\"\n   81: 		\"Upgrade: WebSocket\\r\\n\"\n   82  		\"Origin: http://localhost\\r\\n\"\n   83: 		\"Sec-Websocket-Key1: Y\\\" 4 1Lj!957b8@0H756!i\\r\\n\"\n   84: 		\"Sec-Websocket-Key2: 1711 M;4\\\\74  80<6\\r\\n\"\n   85  		\"\\r\\n\"),\n   86: 	{ok, Handshake} = gen_tcp:recv(Socket, 0, 6000),\n   87: 	{ok, {http_response, {1, 1}, 101, \"WebSocket Protocol Handshake\"}, Rest}\n   88  		= erlang:decode_packet(http, Handshake, []),\n   89: 	[Headers, <<>>] = websocket_headers(\n   90  		erlang:decode_packet(httph, Rest, []), []),\n   91  	{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),\n   92: 	{'Upgrade', \"WebSocket\"} = lists:keyfind('Upgrade', 1, Headers),\n   93: 	{\"sec-websocket-location\", \"ws://localhost/websocket\"}\n   94: 		= lists:keyfind(\"sec-websocket-location\", 1, Headers),\n   95: 	{\"sec-websocket-origin\", \"http://localhost\"}\n   96: 		= lists:keyfind(\"sec-websocket-origin\", 1, Headers),\n   97: 	ok = gen_tcp:send(Socket, <<15,245,8,18,2,204,133,33>>),\n   98: 	{ok, Body} = gen_tcp:recv(Socket, 0, 6000),\n   99  	<<169,244,191,103,146,33,149,59,74,104,67,5,99,118,171,236>> = Body,\n  100: 	ok = gen_tcp:send(Socket, << 0, \"client_msg\", 255 >>),\n  101: 	{ok, << 0, \"client_msg\", 255 >>} = gen_tcp:recv(Socket, 0, 6000),\n  102: 	{ok, << 0, \"websocket_init\", 255 >>} = gen_tcp:recv(Socket, 0, 6000),\n  103: 	{ok, << 0, \"websocket_handle\", 255 >>} = gen_tcp:recv(Socket, 0, 6000),\n  104: 	{ok, << 0, \"websocket_handle\", 255 >>} = gen_tcp:recv(Socket, 0, 6000),\n  105: 	{ok, << 0, \"websocket_handle\", 255 >>} = gen_tcp:recv(Socket, 0, 6000),\n  106  	%% We try to send another HTTP request to make sure\n  107  	%% the server closed the request.\n  108: 	ok = gen_tcp:send(Socket, [\n  109: 		<< 255, 0 >>, %% Close websocket command.\n  110  		\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\" %% Server should ignore it.\n  111  	]),\n  112: 	{ok, << 255, 0 >>} = gen_tcp:recv(Socket, 0, 6000),\n  113: 	{error, closed} = gen_tcp:recv(Socket, 0, 6000),\n  114  	ok.\n  115  \n  116  ws8(Config) ->\n  117  	{port, Port} = lists:keyfind(port, 1, Config),\n  118: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  119  		[binary, {active, false}, {packet, raw}]),\n  120: 	ok = gen_tcp:send(Socket, [\n  121: 		\"GET /websocket HTTP/1.1\\r\\n\"\n  122  		\"Host: localhost\\r\\n\"\n  123  		\"Connection: Upgrade\\r\\n\"\n  124: 		\"Upgrade: websocket\\r\\n\"\n  125: 		\"Sec-WebSocket-Origin: http://localhost\\r\\n\"\n  126: 		\"Sec-WebSocket-Version: 8\\r\\n\"\n  127: 		\"Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\r\\n\"\n  128  		\"\\r\\n\"]),\n  129: 	{ok, Handshake} = gen_tcp:recv(Socket, 0, 6000),\n  130  	{ok, {http_response, {1, 1}, 101, \"Switching Protocols\"}, Rest}\n  131  		= erlang:decode_packet(http, Handshake, []),\n  132: 	[Headers, <<>>] = websocket_headers(\n  133  		erlang:decode_packet(httph, Rest, []), []),\n  134  	{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),\n  135: 	{'Upgrade', \"websocket\"} = lists:keyfind('Upgrade', 1, Headers),\n  136: 	{\"sec-websocket-accept\", \"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\"}\n  137: 		= lists:keyfind(\"sec-websocket-accept\", 1, Headers),\n  138: 	ok = gen_tcp:send(Socket, << 16#81, 16#85, 16#37, 16#fa, 16#21, 16#3d,\n  139  		16#7f, 16#9f, 16#4d, 16#51, 16#58 >>),\n  140  	{ok, << 1:1, 0:3, 1:4, 0:1, 5:7, \"Hello\" >>}\n  141: 		= gen_tcp:recv(Socket, 0, 6000),\n  142: 	{ok, << 1:1, 0:3, 1:4, 0:1, 14:7, \"websocket_init\" >>}\n  143: 		= gen_tcp:recv(Socket, 0, 6000),\n  144: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  145: 		= gen_tcp:recv(Socket, 0, 6000),\n  146: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  147: 		= gen_tcp:recv(Socket, 0, 6000),\n  148: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  149: 		= gen_tcp:recv(Socket, 0, 6000),\n  150: 	ok = gen_tcp:send(Socket, << 1:1, 0:3, 9:4, 0:8 >>), %% ping\n  151: 	{ok, << 1:1, 0:3, 10:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000), %% pong\n  152: 	ok = gen_tcp:send(Socket, << 1:1, 0:3, 8:4, 0:8 >>), %% close\n  153: 	{ok, << 1:1, 0:3, 8:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000),\n  154: 	{error, closed} = gen_tcp:recv(Socket, 0, 6000),\n  155  	ok.\n  156  \n  157  ws8_single_bytes(Config) ->\n  158  	{port, Port} = lists:keyfind(port, 1, Config),\n  159: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  160  		[binary, {active, false}, {packet, raw}]),\n  161: 	ok = gen_tcp:send(Socket, [\n  162: 		\"GET /websocket HTTP/1.1\\r\\n\"\n  163  		\"Host: localhost\\r\\n\"\n  164  		\"Connection: Upgrade\\r\\n\"\n  165: 		\"Upgrade: websocket\\r\\n\"\n  166: 		\"Sec-WebSocket-Origin: http://localhost\\r\\n\"\n  167: 		\"Sec-WebSocket-Version: 8\\r\\n\"\n  168: 		\"Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\r\\n\"\n  169  		\"\\r\\n\"]),\n  170: 	{ok, Handshake} = gen_tcp:recv(Socket, 0, 6000),\n  171  	{ok, {http_response, {1, 1}, 101, \"Switching Protocols\"}, Rest}\n  172  		= erlang:decode_packet(http, Handshake, []),\n  173: 	[Headers, <<>>] = websocket_headers(\n  174  		erlang:decode_packet(httph, Rest, []), []),\n  175  	{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),\n  176: 	{'Upgrade', \"websocket\"} = lists:keyfind('Upgrade', 1, Headers),\n  177: 	{\"sec-websocket-accept\", \"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\"}\n  178: 		= lists:keyfind(\"sec-websocket-accept\", 1, Headers),\n  179: 	ok = gen_tcp:send(Socket, << 16#81 >>), %% send one byte\n  180  	ok = timer:sleep(100), %% sleep for a period\n  181: 	ok = gen_tcp:send(Socket, << 16#85 >>), %% send another and so on\n  182          ok = timer:sleep(100),\n  183: 	ok = gen_tcp:send(Socket, << 16#37 >>),\n  184  	ok = timer:sleep(100),\n  185: 	ok = gen_tcp:send(Socket, << 16#fa >>),\n  186  	ok = timer:sleep(100),\n  187: 	ok = gen_tcp:send(Socket, << 16#21 >>),\n  188  	ok = timer:sleep(100),\n  189: 	ok = gen_tcp:send(Socket, << 16#3d >>),\n  190  	ok = timer:sleep(100),\n  191: 	ok = gen_tcp:send(Socket, << 16#7f >>),\n  192  	ok = timer:sleep(100),\n  193: 	ok = gen_tcp:send(Socket, << 16#9f >>),\n  194  	ok = timer:sleep(100),\n  195: 	ok = gen_tcp:send(Socket, << 16#4d >>),\n  196  	ok = timer:sleep(100),\n  197: 	ok = gen_tcp:send(Socket, << 16#51 >>),\n  198  	ok = timer:sleep(100),\n  199: 	ok = gen_tcp:send(Socket, << 16#58 >>),\n  200: 	{ok, << 1:1, 0:3, 1:4, 0:1, 14:7, \"websocket_init\" >>}\n  201: 		= gen_tcp:recv(Socket, 0, 6000),\n  202  	{ok, << 1:1, 0:3, 1:4, 0:1, 5:7, \"Hello\" >>}\n  203: 		= gen_tcp:recv(Socket, 0, 6000),\n  204: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  205: 		= gen_tcp:recv(Socket, 0, 6000),\n  206: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  207: 		= gen_tcp:recv(Socket, 0, 6000),\n  208: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  209: 		= gen_tcp:recv(Socket, 0, 6000),\n  210: 	ok = gen_tcp:send(Socket, << 1:1, 0:3, 9:4, 0:8 >>), %% ping\n  211: 	{ok, << 1:1, 0:3, 10:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000), %% pong\n  212: 	ok = gen_tcp:send(Socket, << 1:1, 0:3, 8:4, 0:8 >>), %% close\n  213: 	{ok, << 1:1, 0:3, 8:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000),\n  214: 	{error, closed} = gen_tcp:recv(Socket, 0, 6000),\n  215  	ok.\n  216  \n  217  ws_timeout_hibernate(Config) ->\n  218  	{port, Port} = lists:keyfind(port, 1, Config),\n  219: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  220  		[binary, {active, false}, {packet, raw}]),\n  221: 	ok = gen_tcp:send(Socket, [\n  222  		\"GET /ws_timeout_hibernate HTTP/1.1\\r\\n\"\n  223  		\"Host: localhost\\r\\n\"\n  224  		\"Connection: Upgrade\\r\\n\"\n  225: 		\"Upgrade: websocket\\r\\n\"\n  226: 		\"Sec-WebSocket-Origin: http://localhost\\r\\n\"\n  227: 		\"Sec-WebSocket-Version: 8\\r\\n\"\n  228: 		\"Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\r\\n\"\n  229  		\"\\r\\n\"]),\n  230: 	{ok, Handshake} = gen_tcp:recv(Socket, 0, 6000),\n  231  	{ok, {http_response, {1, 1}, 101, \"Switching Protocols\"}, Rest}\n  232  		= erlang:decode_packet(http, Handshake, []),\n  233: 	[Headers, <<>>] = websocket_headers(\n  234  		erlang:decode_packet(httph, Rest, []), []),\n  235  	{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),\n  236: 	{'Upgrade', \"websocket\"} = lists:keyfind('Upgrade', 1, Headers),\n  237: 	{\"sec-websocket-accept\", \"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\"}\n  238: 		= lists:keyfind(\"sec-websocket-accept\", 1, Headers),\n  239: 	{ok, << 1:1, 0:3, 8:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000),\n  240: 	{error, closed} = gen_tcp:recv(Socket, 0, 6000),\n  241  	ok.\n  242  \n  243  ws8_init_shutdown(Config) ->\n  244  	{port, Port} = lists:keyfind(port, 1, Config),\n  245: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  246  		[binary, {active, false}, {packet, raw}]),\n  247: 	ok = gen_tcp:send(Socket, [\n  248  		\"GET /ws_init_shutdown HTTP/1.1\\r\\n\"\n  249  		\"Host: localhost\\r\\n\"\n  250  		\"Connection: Upgrade\\r\\n\"\n  251: 		\"Upgrade: websocket\\r\\n\"\n  252: 		\"Sec-WebSocket-Origin: http://localhost\\r\\n\"\n  253: 		\"Sec-WebSocket-Version: 8\\r\\n\"\n  254: 		\"Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\r\\n\"\n  255  		\"\\r\\n\"]),\n  256: 	{ok, Handshake} = gen_tcp:recv(Socket, 0, 6000),\n  257  	{ok, {http_response, {1, 1}, 403, \"Forbidden\"}, _Rest}\n  258  		= erlang:decode_packet(http, Handshake, []),\n  259: 	{error, closed} = gen_tcp:recv(Socket, 0, 6000),\n  260  	ok.\n  261  \n  262  ws13(Config) ->\n  263  	{port, Port} = lists:keyfind(port, 1, Config),\n  264: 	{ok, Socket} = gen_tcp:connect(\"localhost\", Port,\n  265  		[binary, {active, false}, {packet, raw}]),\n  266: 	ok = gen_tcp:send(Socket, [\n  267: 		\"GET /websocket HTTP/1.1\\r\\n\"\n  268  		\"Host: localhost\\r\\n\"\n  269  		\"Connection: Upgrade\\r\\n\"\n  270  		\"Origin: http://localhost\\r\\n\"\n  271: 		\"Sec-WebSocket-Version: 13\\r\\n\"\n  272: 		\"Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\\r\\n\"\n  273: 		\"Upgrade: websocket\\r\\n\"\n  274  		\"\\r\\n\"]),\n  275: 	{ok, Handshake} = gen_tcp:recv(Socket, 0, 6000),\n  276  	{ok, {http_response, {1, 1}, 101, \"Switching Protocols\"}, Rest}\n  277  		= erlang:decode_packet(http, Handshake, []),\n  278: 	[Headers, <<>>] = websocket_headers(\n  279  		erlang:decode_packet(httph, Rest, []), []),\n  280  	{'Connection', \"Upgrade\"} = lists:keyfind('Connection', 1, Headers),\n  281: 	{'Upgrade', \"websocket\"} = lists:keyfind('Upgrade', 1, Headers),\n  282: 	{\"sec-websocket-accept\", \"s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\"}\n  283: 		= lists:keyfind(\"sec-websocket-accept\", 1, Headers),\n  284  	%% text\n  285: 	ok = gen_tcp:send(Socket, << 16#81, 16#85, 16#37, 16#fa, 16#21, 16#3d,\n  286  		16#7f, 16#9f, 16#4d, 16#51, 16#58 >>),\n  287  	{ok, << 1:1, 0:3, 1:4, 0:1, 5:7, \"Hello\" >>}\n  288: 		= gen_tcp:recv(Socket, 0, 6000),\n  289  	%% binary (empty)\n  290: 	ok = gen_tcp:send(Socket, << 1:1, 0:3, 2:4, 0:8 >>),\n  291: 	{ok, << 1:1, 0:3, 2:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000),\n  292  	%% binary\n  293: 	ok = gen_tcp:send(Socket, << 16#82, 16#85, 16#37, 16#fa, 16#21, 16#3d,\n  294  		16#7f, 16#9f, 16#4d, 16#51, 16#58 >>),\n  295  	{ok, << 1:1, 0:3, 2:4, 0:1, 5:7, \"Hello\" >>}\n  296: 		= gen_tcp:recv(Socket, 0, 6000),\n  297  	%% Receives.\n  298: 	{ok, << 1:1, 0:3, 1:4, 0:1, 14:7, \"websocket_init\" >>}\n  299: 		= gen_tcp:recv(Socket, 0, 6000),\n  300: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  301: 		= gen_tcp:recv(Socket, 0, 6000),\n  302: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  303: 		= gen_tcp:recv(Socket, 0, 6000),\n  304: 	{ok, << 1:1, 0:3, 1:4, 0:1, 16:7, \"websocket_handle\" >>}\n  305: 		= gen_tcp:recv(Socket, 0, 6000),\n  306: 	ok = gen_tcp:send(Socket, << 1:1, 0:3, 9:4, 0:8 >>), %% ping\n  307: 	{ok, << 1:1, 0:3, 10:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000), %% pong\n  308: 	ok = gen_tcp:send(Socket, << 1:1, 0:3, 8:4, 0:8 >>), %% close\n  309: 	{ok, << 1:1, 0:3, 8:4, 0:8 >>} = gen_tcp:recv(Socket, 0, 6000),\n  310: 	{error, closed} = gen_tcp:recv(Socket, 0, 6000),\n  311  	ok.\n  312  \n  313: websocket_headers({ok, http_eoh, Rest}, Acc) ->\n  314  	[Acc, Rest];\n  315: websocket_headers({ok, {http_header, _I, Key, _R, Value}, Rest}, Acc) ->\n  316  	F = fun(S) when is_atom(S) -> S; (S) -> string:to_lower(S) end,\n  317: 	websocket_headers(erlang:decode_packet(httph, Rest, []),\n  318  		[{F(Key), Value}|Acc]).\n  319  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/cowboy-wrapper/cowboy-git/test/ws_timeout_hibernate_handler.erl:\n    3  -module(ws_timeout_hibernate_handler).\n    4  -behaviour(cowboy_http_handler).\n    5: -behaviour(cowboy_http_websocket_handler).\n    6  -export([init/3, handle/2, terminate/2]).\n    7: -export([websocket_init/3, websocket_handle/3,\n    8: 	websocket_info/3, websocket_terminate/3]).\n    9  \n   10  init(_Any, _Req, _Opts) ->\n   11: 	{upgrade, protocol, cowboy_http_websocket}.\n   12  \n   13  handle(_Req, _State) ->\n   ..\n   17  	exit(badarg).\n   18  \n   19: websocket_init(_TransportName, Req, _Opts) ->\n   20  	{ok, Req, undefined, 1000, hibernate}.\n   21  \n   22: websocket_handle(_Frame, Req, State) ->\n   23  	{ok, Req, State, hibernate}.\n   24  \n   25: websocket_info(_Info, Req, State) ->\n   26  	{ok, Req, State, hibernate}.\n   27  \n   28: websocket_terminate(_Reason, _Req, _State) ->\n   29  	ok.\n   30  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/eldap-wrapper/remove-eldap-fsm.patch:\n   71  -		host = null,  % Connected Host LDAP server\n   72  -		port = 389 ,  % The LDAP server port\n   73: -		fd = null,    % Socket filedescriptor.\n   74  -		rootdn = \"\",  % Name of the entry to bind as\n   75  -		passwd,       % Password for (above) entry\n   ..\n  444  -%% Packets arriving in various states\n  445  -%%\n  446: -handle_info({tcp, Socket, Data}, connecting, S) ->\n  447  -    log1(\"eldap. tcp packet received when disconnected!~n~p~n\", [Data], S),\n  448  -    {next_state, connecting, S};\n  449  -\n  450: -handle_info({tcp, Socket, Data}, wait_bind_response, S) ->\n  451  -    cancel_timer(S#eldap.bind_timer),\n  452  -    case catch recvd_wait_bind_response(Data, S) of\n  ...\n  460  -    end;\n  461  -\n  462: -handle_info({tcp, Socket, Data}, active, S) ->\n  463  -    case catch recvd_packet(Data, S) of\n  464  -	{reply, Reply, To, NewS} -> gen_fsm:reply(To, Reply),\n  ...\n  469  -    end;\n  470  -\n  471: -handle_info({tcp_closed, Socket}, All_fsm_states, S) ->\n  472  -    F = fun(Id, [{Timer, From, Name}|Res]) ->\n  473  -		gen_fsm:reply(From, {error, tcp_closed}),\n  ...\n  479  -				     dict = dict:new()}};\n  480  -\n  481: -handle_info({tcp_error, Socket, Reason}, Fsm_state, S) ->\n  482  -    log1(\"eldap received tcp_error: ~p~nIn State: ~p~n\", [Reason, Fsm_state], S),\n  483  -    {next_state, Fsm_state, S};\n  ...\n  768  -    TcpOpts = [{packet, asn1}, {active, true}],\n  769  -    case gen_tcp:connect(Host, S#eldap.port, TcpOpts) of\n  770: -	{ok, Socket} ->\n  771: -	    case bind_request(Socket, S) of\n  772  -		{ok, NewS} ->\n  773  -		    Timer = erlang:start_timer(?BIND_TIMEOUT, self(),\n  774  -					       {timeout, bind_timeout}),\n  775: -		    {ok, wait_bind_response, NewS#eldap{fd = Socket,\n  776  -							host = Host,\n  777  -							bind_timer = Timer}};\n  778  -		{error, Reason} ->\n  779: -		    gen_tcp:close(Socket),\n  780  -		    erlang:send_after(?RETRY_TIMEOUT, self(),\n  781  -				      {timeout, retry_connect}),\n  ...\n  788  -    end.\n  789  -\n  790: -bind_request(Socket, S) ->\n  791  -    Id = bump_id(S),\n  792  -    Req = #'BindRequest'{version        = S#eldap.version,\n  ...\n  797  -    log2(\"Message:~p~n\",[Message], S),\n  798  -    {ok, Bytes} = asn1rt:encode('ELDAPv3', 'LDAPMessage', Message),\n  799: -    ok = gen_tcp:send(Socket, Bytes),\n  800  -    {ok, S#eldap{id = Id}}.\n  801  -\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/eldap-wrapper/remove-ietf-doc.patch:\n  423  -\n  424  -   LDAP_OPT_DESC (0x01) int *\n  425: -          The underlying socket descriptor corresponding to the default\n  426  -          LDAP connection.\n  427  -\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/eldap-wrapper/eldap-git/src/eldap.erl:\n   30  		host,                % Host running LDAP server\n   31  		port = ?LDAP_PORT,   % The LDAP server port\n   32: 		fd,                  % Socket filedescriptor.\n   33  		binddn = \"\",         % Name of the entry to bind as\n   34  		passwd,              % Password for (above) entry\n   ..\n  775  \n  776  ldap_closed_p(Data, Emsg) when Data#eldap.use_tls == true ->\n  777:     %% Check if the SSL socket seems to be alive or not\n  778      case catch ssl:sockname(Data#eldap.fd) of\n  779  	{error, _} ->\n  ...\n  783  	    {error, Emsg};\n  784  	_ ->\n  785: 	    %% sockname crashes if the socket pid is not alive\n  786  	    {error, ldap_closed}\n  787      end;\n  788  ldap_closed_p(Data, Emsg) ->\n  789:     %% non-SSL socket\n  790      case inet:port(Data#eldap.fd) of\n  791  	{error,_} -> {error, ldap_closed};\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/erlang-rfc4627-wrapper/erlang-rfc4627-git/src/rfc4627_jsonrpc_inets.erl:\n  124  do_rpc(#mod{init_data = #init_data{peername = {PeerPort, PeerName}},\n  125  	    config_db = ConfigDb,\n  126: 	    socket_type = SocketType,\n  127  	    method = HttpMethod,\n  128  	    request_uri = PathAndQuery,\n  ...\n  140  		       end,\n  141      HeaderObj = {obj, [{K, list_to_binary(V)} || {K,V} <- InetsHeaders]},\n  142:     SchemeFields = case SocketType of\n  143  		       ip_comm -> [{\"scheme\", <<\"http\">>}];\n  144  		       ssl -> [{\"scheme\", <<\"https\">>}];\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/10-build-on-R12B-5.patch:\n  192  --spec handle_invalid_request(term()) -> no_return().\n  193  +%% -spec handle_invalid_request(term()) -> no_return().\n  194:  handle_invalid_request(Socket) ->\n  195:      handle_invalid_request(Socket, {'GET', {abs_path, \"/\"}, {0,9}}, []),\n  196       exit(normal).\n  197   \n  198  --spec handle_invalid_request(term(), term(), term()) -> no_return().\n  199  +%% -spec handle_invalid_request(term(), term(), term()) -> no_return().\n  200:  handle_invalid_request(Socket, Request, RevHeaders) ->\n  201:      Req = new_request(Socket, Request, RevHeaders),\n  202       Req:respond({400, [], []}),\n  203  diff --git a/src/mochiweb_session.erl b/src/mochiweb_session.erl\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/CHANGES.md:\n    1  Version 2.7.0 released XXXX-XX-XX\n    2  \n    3: * `mochiweb_socket_server:stop/1` is now a synchronous\n    4    call instead of an asynchronous cast\n    5  * `mochiweb_html:parse_tokens/1` (and `parse/1`) will now create a\n    .\n   57  * Fix mochiweb_html handling of invalid charref sequences (unescaped &) (#69).\n   58  * Add a manual garbage collection between requests to avoid worst case behavior\n   59:   on keep-alive sockets.\n   60  * Fix dst cookie bug (#73)\n   61  * Removed unnecessary template_dir option, see\n   ..\n   78  \n   79  * Added new `mochiweb_http:start_link/1` and\n   80:   `mochiweb_socket_server:start_link/1` APIs to explicitly start linked\n   81    servers. Also added `{link, false}` option to the `start/1` variants\n   82    to explicitly start unlinked. This is in expectation that we will\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/examples/keepalive/keepalive.erl:\n   11  %% process hibernates, the handler would usually terminate after your response\n   12  %% code runs.  this means http keep alives wouldn't work; the handler process\n   13: %% would terminate after each response and close its socket rather than\n   14  %% returning to the big @mochiweb_http@ loop and processing another request.\n   15  %%\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb.erl:\n   34  \n   35  \n   36: %% @spec new_request({Socket, Request, Headers}) -> MochiWebRequest\n   37  %% @doc Return a mochiweb_request data structure.\n   38: new_request({Socket, {Method, {abs_path, Uri}, Version}, Headers}) ->\n   39:     mochiweb_request:new(Socket,\n   40                           Method,\n   41                           Uri,\n   ..\n   43                           mochiweb_headers:make(Headers));\n   44  % this case probably doesn't \"exist\".\n   45: new_request({Socket, {Method, {absoluteURI, _Protocol, _Host, _Port, Uri},\n   46                        Version}, Headers}) ->\n   47:     mochiweb_request:new(Socket,\n   48                           Method,\n   49                           Uri,\n   ..\n   52  %% Request-URI is \"*\"\n   53  %% From http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n   54: new_request({Socket, {Method, '*'=Uri, Version}, Headers}) ->\n   55:     mochiweb_request:new(Socket,\n   56                           Method,\n   57                           Uri,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_acceptor.erl:\n   16  init(Server, Listen, Loop) ->\n   17      T1 = os:timestamp(),\n   18:     case catch mochiweb_socket:accept(Listen) of\n   19:         {ok, Socket} ->\n   20              gen_server:cast(Server, {accepted, self(), timer:now_diff(os:timestamp(), T1)}),\n   21:             call_loop(Loop, Socket);\n   22          {error, closed} ->\n   23              exit(normal);\n   ..\n   34      end.\n   35  \n   36: call_loop({M, F}, Socket) ->\n   37:     M:F(Socket);\n   38: call_loop({M, F, [A1]}, Socket) ->\n   39:     M:F(Socket, A1);\n   40: call_loop({M, F, A}, Socket) ->\n   41:     erlang:apply(M, F, [Socket | A]);\n   42: call_loop(Loop, Socket) ->\n   43:     Loop(Socket).\n   44  \n   45  %%\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_echo.erl:\n    2  %% @copyright 2007 Mochi Media, Inc.\n    3  \n    4: %% @doc Simple and stupid echo server to demo mochiweb_socket_server.\n    5  \n    6  -module(mochiweb_echo).\n    .\n    9  \n   10  stop() ->\n   11:     mochiweb_socket_server:stop(?MODULE).\n   12  \n   13  start() ->\n   14:     mochiweb_socket_server:start([{link, false} | options()]).\n   15  \n   16  options() ->\n   ..\n   21       {loop, {?MODULE, loop}}].\n   22  \n   23: loop(Socket) ->\n   24:     case mochiweb_socket:recv(Socket, 0, 30000) of\n   25          {ok, Data} ->\n   26:             case mochiweb_socket:send(Socket, Data) of\n   27                  ok ->\n   28:                     loop(Socket);\n   29                  _ ->\n   30                      exit(normal)\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_http.erl:\n   25  \n   26  stop() ->\n   27:     mochiweb_socket_server:stop(?MODULE).\n   28  \n   29  stop(Name) ->\n   30:     mochiweb_socket_server:stop(Name).\n   31  \n   32  %% @spec start(Options) -> ServerRet\n   ..\n   38  %% @doc Start a mochiweb server.\n   39  %%      profile_fun is used to profile accept timing.\n   40: %%      After each accept, if defined, profile_fun is called with a proplist of a subset of the mochiweb_socket_server state and timing information.\n   41: %%      The proplist is as follows: [{name, Name}, {port, Port}, {active_sockets, ActiveSockets}, {timing, Timing}].\n   42  %% @end\n   43  start(Options) ->\n   44:     mochiweb_socket_server:start(parse_options(Options)).\n   45  \n   46  start_link(Options) ->\n   47:     mochiweb_socket_server:start_link(parse_options(Options)).\n   48  \n   49: loop(Socket, Body) ->\n   50:     ok = mochiweb_socket:setopts(Socket, [{packet, http}]),\n   51:     request(Socket, Body).\n   52  \n   53  -ifdef(gen_tcp_r15b_workaround).\n   54  -define(R15B_GEN_TCP_FIX, {tcp_error,_,emsgsize} ->\n   55:                  % R15B02 returns this then closes the socket, so close and exit\n   56:                  mochiweb_socket:close(Socket),\n   57                   exit(normal);\n   58         ).\n   ..\n   61  -endif.\n   62  \n   63: request(Socket, Body) ->\n   64:     ok = mochiweb_socket:setopts(Socket, [{active, once}]),\n   65      receive\n   66          {Protocol, _, {http_request, Method, Path, Version}} when Protocol == http orelse Protocol == ssl ->\n   67:             ok = mochiweb_socket:setopts(Socket, [{packet, httph}]),\n   68:             headers(Socket, {Method, Path, Version}, [], Body, 0);\n   69          {Protocol, _, {http_error, \"\\r\\n\"}} when Protocol == http orelse Protocol == ssl ->\n   70:             request(Socket, Body);\n   71          {Protocol, _, {http_error, \"\\n\"}} when Protocol == http orelse Protocol == ssl ->\n   72:             request(Socket, Body);\n   73          {tcp_closed, _} ->\n   74:             mochiweb_socket:close(Socket),\n   75              exit(normal);\n   76          {ssl_closed, _} ->\n   77:             mochiweb_socket:close(Socket),\n   78              exit(normal);\n   79          ?R15B_GEN_TCP_FIX\n   80          _Other ->\n   81:             handle_invalid_request(Socket)\n   82      after ?REQUEST_RECV_TIMEOUT ->\n   83:         mochiweb_socket:close(Socket),\n   84          exit(normal)\n   85      end.\n   ..\n   90      end.\n   91  \n   92: headers(Socket, Request, Headers, _Body, ?MAX_HEADERS) ->\n   93      %% Too many headers sent, bad request.\n   94:     ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n   95:     handle_invalid_request(Socket, Request, Headers);\n   96: headers(Socket, Request, Headers, Body, HeaderCount) ->\n   97:     ok = mochiweb_socket:setopts(Socket, [{active, once}]),\n   98      receive\n   99          {Protocol, _, http_eoh} when Protocol == http orelse Protocol == ssl ->\n  100:             Req = new_request(Socket, Request, Headers),\n  101              call_body(Body, Req),\n  102              ?MODULE:after_response(Body, Req);\n  103          {Protocol, _, {http_header, _, Name, _, Value}} when Protocol == http orelse Protocol == ssl ->\n  104:             headers(Socket, Request, [{Name, Value} | Headers], Body,\n  105                      1 + HeaderCount);\n  106          {tcp_closed, _} ->\n  107:             mochiweb_socket:close(Socket),\n  108              exit(normal);\n  109          ?R15B_GEN_TCP_FIX\n  110          _Other ->\n  111:             handle_invalid_request(Socket, Request, Headers)\n  112      after ?HEADERS_RECV_TIMEOUT ->\n  113:         mochiweb_socket:close(Socket),\n  114          exit(normal)\n  115      end.\n  ...\n  123  \n  124  %% -spec handle_invalid_request(term()) -> no_return().\n  125: handle_invalid_request(Socket) ->\n  126:     handle_invalid_request(Socket, {'GET', {abs_path, \"/\"}, {0,9}}, []),\n  127      exit(normal).\n  128  \n  129  %% -spec handle_invalid_request(term(), term(), term()) -> no_return().\n  130: handle_invalid_request(Socket, Request, RevHeaders) ->\n  131:     Req = new_request(Socket, Request, RevHeaders),\n  132      Req:respond({400, [], []}),\n  133:     mochiweb_socket:close(Socket),\n  134      exit(normal).\n  135  \n  136: new_request(Socket, Request, RevHeaders) ->\n  137:     ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  138:     mochiweb:new_request({Socket, Request, lists:reverse(RevHeaders)}).\n  139  \n  140  after_response(Body, Req) ->\n  141:     Socket = Req:get(socket),\n  142      case Req:should_close() of\n  143          true ->\n  144:             mochiweb_socket:close(Socket),\n  145              exit(normal);\n  146          false ->\n  147              Req:cleanup(),\n  148              erlang:garbage_collect(),\n  149:             ?MODULE:loop(Socket, Body)\n  150      end.\n  151  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_multipart.erl:\n  304      [{certfile, CertFile}, {keyfile, KeyFile}].\n  305  \n  306: with_socket_server(Transport, ServerFun, ClientFun) ->\n  307      ServerOpts0 = [{ip, \"127.0.0.1\"}, {port, 0}, {loop, ServerFun}],\n  308      ServerOpts = case Transport of\n  ...\n  312              ServerOpts0 ++ [{ssl, true}, {ssl_opts, ssl_cert_opts()}]\n  313      end,\n  314:     {ok, Server} = mochiweb_socket_server:start_link(ServerOpts),\n  315:     Port = mochiweb_socket_server:get(Server, port),\n  316      ClientOpts = [binary, {active, false}],\n  317      {ok, Client} = case Transport of\n  ...\n  320          ssl ->\n  321              ClientOpts1 = [{ssl_imp, new} | ClientOpts],\n  322:             {ok, SslSocket} = ssl:connect(\"127.0.0.1\", Port, ClientOpts1),\n  323:             {ok, {ssl, SslSocket}}\n  324      end,\n  325      Res = (catch ClientFun(Client)),\n  326:     mochiweb_socket_server:stop(Server),\n  327      Res.\n  328  \n  329: fake_request(Socket, ContentType, Length) ->\n  330:     mochiweb_request:new(Socket,\n  331                           'POST',\n  332                           \"/multipart\",\n  ...\n  375                eof],\n  376      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  377:     ServerFun = fun (Socket) ->\n  378:                         ok = mochiweb_socket:send(Socket, BinContent),\n  379                          exit(normal)\n  380                  end,\n  381:     ClientFun = fun (Socket) ->\n  382:                         Req = fake_request(Socket, ContentType,\n  383                                             byte_size(BinContent)),\n  384                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  386                          ok\n  387                  end,\n  388:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  389      ok.\n  390  \n  ...\n  411                eof],\n  412      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  413:     ServerFun = fun (Socket) ->\n  414:                         ok = mochiweb_socket:send(Socket, BinContent),\n  415                          exit(normal)\n  416                  end,\n  417:     ClientFun = fun (Socket) ->\n  418:                         Req = fake_request(Socket, ContentType,\n  419                                             byte_size(BinContent)),\n  420                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  422                          ok\n  423                  end,\n  424:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  425      ok.\n  426  \n  ...\n  448                   \"\"], \"\\r\\n\"),\n  449      BinContent = iolist_to_binary(Content),\n  450:     ServerFun = fun (Socket) ->\n  451:                         ok = mochiweb_socket:send(Socket, BinContent),\n  452                          exit(normal)\n  453                  end,\n  454:     ClientFun = fun (Socket) ->\n  455:                         Req = fake_request(Socket, ContentType,\n  456                                             byte_size(BinContent)),\n  457                          Res = parse_form(Req),\n  ...\n  462                          ok\n  463                  end,\n  464:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  465      ok.\n  466  \n  ...\n  501                eof],\n  502      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  503:     ServerFun = fun (Socket) ->\n  504:                         ok = mochiweb_socket:send(Socket, BinContent),\n  505                          exit(normal)\n  506                  end,\n  507:     ClientFun = fun (Socket) ->\n  508:                         Req = fake_request(Socket, ContentType,\n  509                                             byte_size(BinContent)),\n  510                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  512                          ok\n  513                  end,\n  514:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  515      ok.\n  516  \n  ...\n  553                eof],\n  554      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  555:     ServerFun = fun (Socket) ->\n  556:                         ok = mochiweb_socket:send(Socket, BinContent),\n  557                          exit(normal)\n  558                  end,\n  559:     ClientFun = fun (Socket) ->\n  560:                         Req = fake_request(Socket, ContentType,\n  561                                             byte_size(BinContent)),\n  562                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  564                          ok\n  565                  end,\n  566:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  567      ok.\n  568  \n  ...\n  606                eof],\n  607      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  608:     ServerFun = fun (Socket) ->\n  609:                         ok = mochiweb_socket:send(Socket, BinContent),\n  610                          exit(normal)\n  611                  end,\n  612:     ClientFun = fun (Socket) ->\n  613:                         Req = fake_request(Socket, ContentType,\n  614                                             byte_size(BinContent)),\n  615                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  617                          ok\n  618                  end,\n  619:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  620      ok.\n  621  \n  ...\n  682                eof],\n  683      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  684:     ServerFun = fun (Socket) ->\n  685:                         ok = mochiweb_socket:send(Socket, BinContent),\n  686                          exit(normal)\n  687                  end,\n  688:     ClientFun = fun (Socket) ->\n  689:                         Req = fake_request(Socket, ContentType,\n  690                                             byte_size(BinContent)),\n  691                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  693                          ok\n  694                  end,\n  695:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  696      ok.\n  697  \n  ...\n  730                eof],\n  731      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  732:     ServerFun = fun (Socket) ->\n  733:                         ok = mochiweb_socket:send(Socket, BinContent),\n  734                          exit(normal)\n  735                  end,\n  736:     ClientFun = fun (Socket) ->\n  737:                         Req = fake_request(Socket, ContentType,\n  738                                             byte_size(BinContent)),\n  739                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  741                          ok\n  742                  end,\n  743:     ok = with_socket_server(Transport, ServerFun, ClientFun),\n  744      ok.\n  745  \n  ...\n  857                eof],\n  858      TestCallback = fun (Next) -> test_callback(Next, Expect) end,\n  859:     ServerFun = fun (Socket) ->\n  860:                         ok = mochiweb_socket:send(Socket, BinContent),\n  861                          exit(normal)\n  862                  end,\n  863:     ClientFun = fun (Socket) ->\n  864:                         Req = fake_request(Socket, ContentType,\n  865                                             byte_size(BinContent)),\n  866                          Res = parse_multipart_request(Req, TestCallback),\n  ...\n  868                          ok\n  869                  end,\n  870:     ok = with_socket_server(plain, ServerFun, ClientFun),\n  871      ok.\n  872  -endif.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_request.erl:\n   47  -define(MAX_RECV_BODY, 104857600).\n   48  \n   49: %% @spec new(Socket, Method, RawPath, Version, headers()) -> request()\n   50  %% @doc Create a new request instance.\n   51: new(Socket, Method, RawPath, Version, Headers) ->\n   52:     {?MODULE, [Socket, Method, RawPath, Version, Headers]}.\n   53  \n   54  %% @spec get_header_value(K, request()) -> undefined | Value\n   55  %% @doc Get the value of a given request header.\n   56: get_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   57      mochiweb_headers:get_value(K, Headers).\n   58  \n   59: get_primary_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   60      mochiweb_headers:get_primary_value(K, Headers).\n   61  \n   62: get_combined_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   63      mochiweb_headers:get_combined_value(K, Headers).\n   64  \n   65: %% @type field() = socket | scheme | method | raw_path | version | headers | peer | path | body_length | range\n   66  \n   67  %% @spec get(field(), request()) -> term()\n   68  %% @doc Return the internal representation of the given field. If\n   69: %%      <code>socket</code> is requested on a HTTPS connection, then\n   70: %%      an ssl socket will be returned as <code>{ssl, SslSocket}</code>.\n   71: %%      You can use <code>SslSocket</code> with the <code>ssl</code>\n   72: %%      application, eg: <code>ssl:peercert(SslSocket)</code>.\n   73: get(socket, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n   74:     Socket;\n   75: get(scheme, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n   76:     case mochiweb_socket:type(Socket) of\n   77          plain ->\n   78              http;\n   ..\n   80              https\n   81      end;\n   82: get(method, {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}) ->\n   83      Method;\n   84: get(raw_path, {?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n   85      RawPath;\n   86: get(version, {?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}) ->\n   87      Version;\n   88: get(headers, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   89      Headers;\n   90: get(peer, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n   91:     case mochiweb_socket:peername(Socket) of\n   92          {ok, {Addr={10, _, _, _}, _Port}} ->\n   93              case get_header_value(\"x-forwarded-for\", THIS) of\n   ..\n  109              exit(normal)\n  110      end;\n  111: get(path, {?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n  112      case erlang:get(?SAVE_PATH) of\n  113          undefined ->\n  ...\n  119              Cached\n  120      end;\n  121: get(body_length, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  122      case erlang:get(?SAVE_BODY_LENGTH) of\n  123          undefined ->\n  ...\n  128              Cached\n  129      end;\n  130: get(range, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  131      case get_header_value(range, THIS) of\n  132          undefined ->\n  ...\n  139  %% @doc Dump the internal representation to a \"human readable\" set of terms\n  140  %%      for debugging/inspection purposes.\n  141: dump({?MODULE, [_Socket, Method, RawPath, Version, Headers]}) ->\n  142      {?MODULE, [{method, Method},\n  143                 {version, Version},\n  ...\n  146  \n  147  %% @spec send(iodata(), request()) -> ok\n  148: %% @doc Send data over the socket.\n  149: send(Data, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  150:     case mochiweb_socket:send(Socket, Data) of\n  151          ok ->\n  152              ok;\n  ...\n  158  %% @doc Receive Length bytes from the client as a binary, with the default\n  159  %%      idle timeout.\n  160: recv(Length, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  161      recv(Length, ?IDLE_TIMEOUT, THIS).\n  162  \n  ...\n  164  %% @doc Receive Length bytes from the client as a binary, with the given\n  165  %%      Timeout in msec.\n  166: recv(Length, Timeout, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  167:     case mochiweb_socket:recv(Socket, Length, Timeout) of\n  168          {ok, Data} ->\n  169              put(?SAVE_RECV, true),\n  ...\n  175  %% @spec body_length(request()) -> undefined | chunked | unknown_transfer_encoding | integer()\n  176  %% @doc  Infer body length from transfer-encoding and content-length headers.\n  177: body_length({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  178      case get_header_value(\"transfer-encoding\", THIS) of\n  179          undefined ->\n  ...\n  194  %% @doc Receive the body of the HTTP request (defined by Content-Length).\n  195  %%      Will only receive up to the default max-body length of 1MB.\n  196: recv_body({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  197      recv_body(?MAX_RECV_BODY, THIS).\n  198  \n  ...\n  200  %% @doc Receive the body of the HTTP request (defined by Content-Length).\n  201  %%      Will receive up to MaxBody bytes.\n  202: recv_body(MaxBody, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  203      case erlang:get(?SAVE_BODY) of\n  204          undefined ->\n  ...\n  220      end.\n  221  \n  222: stream_body(MaxChunkSize, ChunkFun, FunState, {?MODULE,[_Socket,_Method,_RawPath,_Version,_Headers]}=THIS) ->\n  223      stream_body(MaxChunkSize, ChunkFun, FunState, undefined, THIS).\n  224  \n  225  stream_body(MaxChunkSize, ChunkFun, FunState, MaxBodyLength,\n  226:             {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  227      Expect = case get_header_value(\"expect\", THIS) of\n  228                   undefined ->\n  ...\n  264  %%      ResponseHeaders. The server will set header defaults such as Server\n  265  %%      and Date if not present in ResponseHeaders.\n  266: start_response({Code, ResponseHeaders}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  267      HResponse = mochiweb_headers:make(ResponseHeaders),\n  268      HResponse1 = mochiweb_headers:default_from_list(server_headers(),\n  ...\n  273  %% @doc Start the HTTP response by sending the Code HTTP response and\n  274  %%      ResponseHeaders.\n  275: start_raw_response({Code, ResponseHeaders}, {?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}=THIS) ->\n  276      F = fun ({K, V}, Acc) ->\n  277                  [mochiweb_util:make_io(K), <<\": \">>, V, <<\"\\r\\n\">> | Acc]\n  ...\n  289  %%      and Date if not present in ResponseHeaders.\n  290  start_response_length({Code, ResponseHeaders, Length},\n  291:                       {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  292      HResponse = mochiweb_headers:make(ResponseHeaders),\n  293      HResponse1 = mochiweb_headers:enter(\"Content-Length\", Length, HResponse),\n  ...\n  300  %%      defaults.\n  301  respond({Code, ResponseHeaders, {file, IoDevice}},\n  302:         {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}=THIS) ->\n  303      Length = mochiweb_io:iodevice_size(IoDevice),\n  304      Response = start_response_length({Code, ResponseHeaders, Length}, THIS),\n  ...\n  312      end,\n  313      Response;\n  314: respond({Code, ResponseHeaders, chunked}, {?MODULE, [_Socket, Method, _RawPath, Version, _Headers]}=THIS) ->\n  315      HResponse = mochiweb_headers:make(ResponseHeaders),\n  316      HResponse1 = case Method of\n  ...\n  334                   end,\n  335      start_response({Code, HResponse1}, THIS);\n  336: respond({Code, ResponseHeaders, Body}, {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}=THIS) ->\n  337      Response = start_response_length({Code, ResponseHeaders, iolist_size(Body)}, THIS),\n  338      case Method of\n  ...\n  346  %% @spec not_found(request()) -> response()\n  347  %% @doc Alias for <code>not_found([])</code>.\n  348: not_found({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  349      not_found([], THIS).\n  350  \n  ...\n  352  %% @doc Alias for <code>respond({404, [{\"Content-Type\", \"text/plain\"}\n  353  %% | ExtraHeaders], &lt;&lt;\"Not found.\"&gt;&gt;})</code>.\n  354: not_found(ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  355      respond({404, [{\"Content-Type\", \"text/plain\"} | ExtraHeaders],\n  356               <<\"Not found.\">>}, THIS).\n  ...\n  359  %%           response()\n  360  %% @doc respond({200, [{\"Content-Type\", ContentType} | Headers], Body}).\n  361: ok({ContentType, Body}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  362      ok({ContentType, [], Body}, THIS);\n  363: ok({ContentType, ResponseHeaders, Body}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  364      HResponse = mochiweb_headers:make(ResponseHeaders),\n  365      case THIS:get(range) of\n  ...\n  394  %% @doc Return true if the connection must be closed. If false, using\n  395  %%      Keep-Alive should be safe.\n  396: should_close({?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}=THIS) ->\n  397      ForceClose = erlang:get(?SAVE_FORCE_CLOSE) =/= undefined,\n  398      DidNotRecv = erlang:get(?SAVE_RECV) =:= undefined,\n  ...\n  403          orelse (Version =:= {1, 0}\n  404                  andalso get_header_value(\"connection\", THIS) =/= \"Keep-Alive\")\n  405:         %% unread data left on the socket, can't safely continue\n  406          orelse (DidNotRecv\n  407                  andalso get_combined_header_value(\"content-length\", THIS) =/= undefined\n  ...\n  420  %% @doc Clean up any junk in the process dictionary, required before continuing\n  421  %%      a Keep-Alive request.\n  422: cleanup({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  423      L = [?SAVE_QS, ?SAVE_PATH, ?SAVE_RECV, ?SAVE_BODY, ?SAVE_BODY_LENGTH,\n  424           ?SAVE_POST, ?SAVE_COOKIE, ?SAVE_FORCE_CLOSE],\n  ...\n  430  %% @spec parse_qs(request()) -> [{Key::string(), Value::string()}]\n  431  %% @doc Parse the query string of the URL.\n  432: parse_qs({?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n  433      case erlang:get(?SAVE_QS) of\n  434          undefined ->\n  ...\n  443  %% @spec get_cookie_value(Key::string, request()) -> string() | undefined\n  444  %% @doc Get the value of the given cookie.\n  445: get_cookie_value(Key, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  446      proplists:get_value(Key, parse_cookie(THIS)).\n  447  \n  448  %% @spec parse_cookie(request()) -> [{Key::string(), Value::string()}]\n  449  %% @doc Parse the cookie header.\n  450: parse_cookie({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  451      case erlang:get(?SAVE_COOKIE) of\n  452          undefined ->\n  ...\n  466  %% @doc Parse an application/x-www-form-urlencoded form POST. This\n  467  %%      has the side-effect of calling recv_body().\n  468: parse_post({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  469      case erlang:get(?SAVE_POST) of\n  470          undefined ->\n  ...\n  490  %%      Used internally by read_chunked_body.\n  491  stream_chunked_body(MaxChunkSize, Fun, FunState,\n  492:                     {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  493      case read_chunk_length(THIS) of\n  494          0 ->\n  ...\n  502      end.\n  503  \n  504: stream_unchunked_body(0, Fun, FunState, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  505      Fun({0, <<>>}, FunState);\n  506  stream_unchunked_body(Length, Fun, FunState,\n  507:                       {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) when Length > 0 ->\n  508      PktSize = case Length > ?RECBUF_SIZE of\n  509          true ->\n  ...\n  518  %% @spec read_chunk_length(request()) -> integer()\n  519  %% @doc Read the length of the next HTTP chunk.\n  520: read_chunk_length({?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  521:     ok = mochiweb_socket:setopts(Socket, [{packet, line}]),\n  522:     case mochiweb_socket:recv(Socket, 0, ?IDLE_TIMEOUT) of\n  523          {ok, Header} ->\n  524:             ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  525              Splitter = fun (C) ->\n  526                                 C =/= $\\r andalso C =/= $\\n andalso C =/= $\n  ...\n  535  %% @doc Read in a HTTP chunk of the given length. If Length is 0, then read the\n  536  %%      HTTP footers (as a list of binaries, since they're nominal).\n  537: read_chunk(0, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  538:     ok = mochiweb_socket:setopts(Socket, [{packet, line}]),\n  539      F = fun (F1, Acc) ->\n  540:                 case mochiweb_socket:recv(Socket, 0, ?IDLE_TIMEOUT) of\n  541                      {ok, <<\"\\r\\n\">>} ->\n  542                          Acc;\n  ...\n  548          end,\n  549      Footers = F(F, []),\n  550:     ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  551      put(?SAVE_RECV, true),\n  552      Footers;\n  553: read_chunk(Length, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  554:     case mochiweb_socket:recv(Socket, 2 + Length, ?IDLE_TIMEOUT) of\n  555          {ok, <<Chunk:Length/binary, \"\\r\\n\">>} ->\n  556              Chunk;\n  ...\n  560  \n  561  read_sub_chunks(Length, MaxChunkSize, Fun, FunState,\n  562:                 {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) when Length > MaxChunkSize ->\n  563      Bin = recv(MaxChunkSize, THIS),\n  564      NewState = Fun({size(Bin), Bin}, FunState),\n  ...\n  566  \n  567  read_sub_chunks(Length, _MaxChunkSize, Fun, FunState,\n  568:                 {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  569      Fun({Length, read_chunk(Length, THIS)}, FunState).\n  570  \n  571  %% @spec serve_file(Path, DocRoot, request()) -> Response\n  572  %% @doc Serve a file relative to DocRoot.\n  573: serve_file(Path, DocRoot, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  574      serve_file(Path, DocRoot, [], THIS).\n  575  \n  576  %% @spec serve_file(Path, DocRoot, ExtraHeaders, request()) -> Response\n  577  %% @doc Serve a file relative to DocRoot.\n  578: serve_file(Path, DocRoot, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  579      case mochiweb_util:safe_relative_path(Path) of\n  580          undefined ->\n  ...\n  596      filename:join([FullPath, \"index.html\"]).\n  597  \n  598: maybe_redirect([], FullPath, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  599      maybe_serve_file(directory_index(FullPath), ExtraHeaders, THIS);\n  600  \n  601  maybe_redirect(RelPath, FullPath, ExtraHeaders,\n  602:                {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}=THIS) ->\n  603      case string:right(RelPath, 1) of\n  604          \"/\" ->\n  ...\n  621      end.\n  622  \n  623: maybe_serve_file(File, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  624      case file:read_file_info(File) of\n  625          {ok, FileInfo} ->\n  ...\n  715  %%            [\"deflate\", \"gzip\", \"identity\"]\n  716  %%\n  717: accepted_encodings(SupportedEncodings, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  718      AcceptEncodingHeader = case get_header_value(\"Accept-Encoding\", THIS) of\n  719          undefined ->\n  ...\n  753  %%         accepts_content_type(\"text/plain\") -> false\n  754  %%\n  755: accepts_content_type(ContentType1, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  756      ContentType = re:replace(ContentType1, \"\\\\s\", \"\", [global, {return, list}]),\n  757      AcceptHeader = accept_header(THIS),\n  ...\n  802  %%             [\"text/html\", \"application/json\"]\n  803  %%\n  804: accepted_content_types(Types1, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  805      Types = lists:map(\n  806          fun(T) -> re:replace(T, \"\\\\s\", \"\", [global, {return, list}]) end,\n  ...\n  842      end.\n  843  \n  844: accept_header({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  845      case get_header_value(\"Accept\", THIS) of\n  846          undefined ->\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_request.erl.orig:\n   47  -define(MAX_RECV_BODY, (1024*1024)).\n   48  \n   49: %% @spec new(Socket, Method, RawPath, Version, headers()) -> request()\n   50  %% @doc Create a new request instance.\n   51: new(Socket, Method, RawPath, Version, Headers) ->\n   52:     {?MODULE, [Socket, Method, RawPath, Version, Headers]}.\n   53  \n   54  %% @spec get_header_value(K, request()) -> undefined | Value\n   55  %% @doc Get the value of a given request header.\n   56: get_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   57      mochiweb_headers:get_value(K, Headers).\n   58  \n   59: get_primary_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   60      mochiweb_headers:get_primary_value(K, Headers).\n   61  \n   62: get_combined_header_value(K, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   63      mochiweb_headers:get_combined_value(K, Headers).\n   64  \n   65: %% @type field() = socket | scheme | method | raw_path | version | headers | peer | path | body_length | range\n   66  \n   67  %% @spec get(field(), request()) -> term()\n   68  %% @doc Return the internal representation of the given field. If\n   69: %%      <code>socket</code> is requested on a HTTPS connection, then\n   70: %%      an ssl socket will be returned as <code>{ssl, SslSocket}</code>.\n   71: %%      You can use <code>SslSocket</code> with the <code>ssl</code>\n   72: %%      application, eg: <code>ssl:peercert(SslSocket)</code>.\n   73: get(socket, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n   74:     Socket;\n   75: get(scheme, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n   76:     case mochiweb_socket:type(Socket) of\n   77          plain ->\n   78              http;\n   ..\n   80              https\n   81      end;\n   82: get(method, {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}) ->\n   83      Method;\n   84: get(raw_path, {?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n   85      RawPath;\n   86: get(version, {?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}) ->\n   87      Version;\n   88: get(headers, {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}) ->\n   89      Headers;\n   90: get(peer, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n   91:     case mochiweb_socket:peername(Socket) of\n   92          {ok, {Addr={10, _, _, _}, _Port}} ->\n   93              case get_header_value(\"x-forwarded-for\", THIS) of\n   ..\n  109              exit(normal)\n  110      end;\n  111: get(path, {?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n  112      case erlang:get(?SAVE_PATH) of\n  113          undefined ->\n  ...\n  119              Cached\n  120      end;\n  121: get(body_length, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  122      case erlang:get(?SAVE_BODY_LENGTH) of\n  123          undefined ->\n  ...\n  128              Cached\n  129      end;\n  130: get(range, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  131      case get_header_value(range, THIS) of\n  132          undefined ->\n  ...\n  139  %% @doc Dump the internal representation to a \"human readable\" set of terms\n  140  %%      for debugging/inspection purposes.\n  141: dump({?MODULE, [_Socket, Method, RawPath, Version, Headers]}) ->\n  142      {?MODULE, [{method, Method},\n  143                 {version, Version},\n  ...\n  146  \n  147  %% @spec send(iodata(), request()) -> ok\n  148: %% @doc Send data over the socket.\n  149: send(Data, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  150:     case mochiweb_socket:send(Socket, Data) of\n  151          ok ->\n  152              ok;\n  ...\n  158  %% @doc Receive Length bytes from the client as a binary, with the default\n  159  %%      idle timeout.\n  160: recv(Length, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  161      recv(Length, ?IDLE_TIMEOUT, THIS).\n  162  \n  ...\n  164  %% @doc Receive Length bytes from the client as a binary, with the given\n  165  %%      Timeout in msec.\n  166: recv(Length, Timeout, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  167:     case mochiweb_socket:recv(Socket, Length, Timeout) of\n  168          {ok, Data} ->\n  169              put(?SAVE_RECV, true),\n  ...\n  175  %% @spec body_length(request()) -> undefined | chunked | unknown_transfer_encoding | integer()\n  176  %% @doc  Infer body length from transfer-encoding and content-length headers.\n  177: body_length({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  178      case get_header_value(\"transfer-encoding\", THIS) of\n  179          undefined ->\n  ...\n  194  %% @doc Receive the body of the HTTP request (defined by Content-Length).\n  195  %%      Will only receive up to the default max-body length of 1MB.\n  196: recv_body({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  197      recv_body(?MAX_RECV_BODY, THIS).\n  198  \n  ...\n  200  %% @doc Receive the body of the HTTP request (defined by Content-Length).\n  201  %%      Will receive up to MaxBody bytes.\n  202: recv_body(MaxBody, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  203      case erlang:get(?SAVE_BODY) of\n  204          undefined ->\n  ...\n  220      end.\n  221  \n  222: stream_body(MaxChunkSize, ChunkFun, FunState, {?MODULE,[_Socket,_Method,_RawPath,_Version,_Headers]}=THIS) ->\n  223      stream_body(MaxChunkSize, ChunkFun, FunState, undefined, THIS).\n  224  \n  225  stream_body(MaxChunkSize, ChunkFun, FunState, MaxBodyLength,\n  226:             {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  227      Expect = case get_header_value(\"expect\", THIS) of\n  228                   undefined ->\n  ...\n  264  %%      ResponseHeaders. The server will set header defaults such as Server\n  265  %%      and Date if not present in ResponseHeaders.\n  266: start_response({Code, ResponseHeaders}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  267      HResponse = mochiweb_headers:make(ResponseHeaders),\n  268      HResponse1 = mochiweb_headers:default_from_list(server_headers(),\n  ...\n  273  %% @doc Start the HTTP response by sending the Code HTTP response and\n  274  %%      ResponseHeaders.\n  275: start_raw_response({Code, ResponseHeaders}, {?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}=THIS) ->\n  276      F = fun ({K, V}, Acc) ->\n  277                  [mochiweb_util:make_io(K), <<\": \">>, V, <<\"\\r\\n\">> | Acc]\n  ...\n  289  %%      and Date if not present in ResponseHeaders.\n  290  start_response_length({Code, ResponseHeaders, Length},\n  291:                       {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  292      HResponse = mochiweb_headers:make(ResponseHeaders),\n  293      HResponse1 = mochiweb_headers:enter(\"Content-Length\", Length, HResponse),\n  ...\n  300  %%      defaults.\n  301  respond({Code, ResponseHeaders, {file, IoDevice}},\n  302:         {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}=THIS) ->\n  303      Length = mochiweb_io:iodevice_size(IoDevice),\n  304      Response = start_response_length({Code, ResponseHeaders, Length}, THIS),\n  ...\n  312      end,\n  313      Response;\n  314: respond({Code, ResponseHeaders, chunked}, {?MODULE, [_Socket, Method, _RawPath, Version, _Headers]}=THIS) ->\n  315      HResponse = mochiweb_headers:make(ResponseHeaders),\n  316      HResponse1 = case Method of\n  ...\n  334                   end,\n  335      start_response({Code, HResponse1}, THIS);\n  336: respond({Code, ResponseHeaders, Body}, {?MODULE, [_Socket, Method, _RawPath, _Version, _Headers]}=THIS) ->\n  337      Response = start_response_length({Code, ResponseHeaders, iolist_size(Body)}, THIS),\n  338      case Method of\n  ...\n  346  %% @spec not_found(request()) -> response()\n  347  %% @doc Alias for <code>not_found([])</code>.\n  348: not_found({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  349      not_found([], THIS).\n  350  \n  ...\n  352  %% @doc Alias for <code>respond({404, [{\"Content-Type\", \"text/plain\"}\n  353  %% | ExtraHeaders], &lt;&lt;\"Not found.\"&gt;&gt;})</code>.\n  354: not_found(ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  355      respond({404, [{\"Content-Type\", \"text/plain\"} | ExtraHeaders],\n  356               <<\"Not found.\">>}, THIS).\n  ...\n  359  %%           response()\n  360  %% @doc respond({200, [{\"Content-Type\", ContentType} | Headers], Body}).\n  361: ok({ContentType, Body}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  362      ok({ContentType, [], Body}, THIS);\n  363: ok({ContentType, ResponseHeaders, Body}, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  364      HResponse = mochiweb_headers:make(ResponseHeaders),\n  365      case THIS:get(range) of\n  ...\n  394  %% @doc Return true if the connection must be closed. If false, using\n  395  %%      Keep-Alive should be safe.\n  396: should_close({?MODULE, [_Socket, _Method, _RawPath, Version, _Headers]}=THIS) ->\n  397      ForceClose = erlang:get(?SAVE_FORCE_CLOSE) =/= undefined,\n  398      DidNotRecv = erlang:get(?SAVE_RECV) =:= undefined,\n  ...\n  403          orelse (Version =:= {1, 0}\n  404                  andalso get_header_value(\"connection\", THIS) =/= \"Keep-Alive\")\n  405:         %% unread data left on the socket, can't safely continue\n  406          orelse (DidNotRecv\n  407                  andalso get_combined_header_value(\"content-length\", THIS) =/= undefined\n  ...\n  420  %% @doc Clean up any junk in the process dictionary, required before continuing\n  421  %%      a Keep-Alive request.\n  422: cleanup({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  423      L = [?SAVE_QS, ?SAVE_PATH, ?SAVE_RECV, ?SAVE_BODY, ?SAVE_BODY_LENGTH,\n  424           ?SAVE_POST, ?SAVE_COOKIE, ?SAVE_FORCE_CLOSE],\n  ...\n  430  %% @spec parse_qs(request()) -> [{Key::string(), Value::string()}]\n  431  %% @doc Parse the query string of the URL.\n  432: parse_qs({?MODULE, [_Socket, _Method, RawPath, _Version, _Headers]}) ->\n  433      case erlang:get(?SAVE_QS) of\n  434          undefined ->\n  ...\n  443  %% @spec get_cookie_value(Key::string, request()) -> string() | undefined\n  444  %% @doc Get the value of the given cookie.\n  445: get_cookie_value(Key, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  446      proplists:get_value(Key, parse_cookie(THIS)).\n  447  \n  448  %% @spec parse_cookie(request()) -> [{Key::string(), Value::string()}]\n  449  %% @doc Parse the cookie header.\n  450: parse_cookie({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  451      case erlang:get(?SAVE_COOKIE) of\n  452          undefined ->\n  ...\n  466  %% @doc Parse an application/x-www-form-urlencoded form POST. This\n  467  %%      has the side-effect of calling recv_body().\n  468: parse_post({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  469      case erlang:get(?SAVE_POST) of\n  470          undefined ->\n  ...\n  490  %%      Used internally by read_chunked_body.\n  491  stream_chunked_body(MaxChunkSize, Fun, FunState,\n  492:                     {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  493      case read_chunk_length(THIS) of\n  494          0 ->\n  ...\n  502      end.\n  503  \n  504: stream_unchunked_body(0, Fun, FunState, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  505      Fun({0, <<>>}, FunState);\n  506  stream_unchunked_body(Length, Fun, FunState,\n  507:                       {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) when Length > 0 ->\n  508      PktSize = case Length > ?RECBUF_SIZE of\n  509          true ->\n  ...\n  518  %% @spec read_chunk_length(request()) -> integer()\n  519  %% @doc Read the length of the next HTTP chunk.\n  520: read_chunk_length({?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  521:     ok = mochiweb_socket:setopts(Socket, [{packet, line}]),\n  522:     case mochiweb_socket:recv(Socket, 0, ?IDLE_TIMEOUT) of\n  523          {ok, Header} ->\n  524:             ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  525              Splitter = fun (C) ->\n  526                                 C =/= $\\r andalso C =/= $\\n andalso C =/= $\n  ...\n  535  %% @doc Read in a HTTP chunk of the given length. If Length is 0, then read the\n  536  %%      HTTP footers (as a list of binaries, since they're nominal).\n  537: read_chunk(0, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  538:     ok = mochiweb_socket:setopts(Socket, [{packet, line}]),\n  539      F = fun (F1, Acc) ->\n  540:                 case mochiweb_socket:recv(Socket, 0, ?IDLE_TIMEOUT) of\n  541                      {ok, <<\"\\r\\n\">>} ->\n  542                          Acc;\n  ...\n  548          end,\n  549      Footers = F(F, []),\n  550:     ok = mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  551      put(?SAVE_RECV, true),\n  552      Footers;\n  553: read_chunk(Length, {?MODULE, [Socket, _Method, _RawPath, _Version, _Headers]}) ->\n  554:     case mochiweb_socket:recv(Socket, 2 + Length, ?IDLE_TIMEOUT) of\n  555          {ok, <<Chunk:Length/binary, \"\\r\\n\">>} ->\n  556              Chunk;\n  ...\n  560  \n  561  read_sub_chunks(Length, MaxChunkSize, Fun, FunState,\n  562:                 {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) when Length > MaxChunkSize ->\n  563      Bin = recv(MaxChunkSize, THIS),\n  564      NewState = Fun({size(Bin), Bin}, FunState),\n  ...\n  566  \n  567  read_sub_chunks(Length, _MaxChunkSize, Fun, FunState,\n  568:                 {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  569      Fun({Length, read_chunk(Length, THIS)}, FunState).\n  570  \n  571  %% @spec serve_file(Path, DocRoot, request()) -> Response\n  572  %% @doc Serve a file relative to DocRoot.\n  573: serve_file(Path, DocRoot, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  574      serve_file(Path, DocRoot, [], THIS).\n  575  \n  576  %% @spec serve_file(Path, DocRoot, ExtraHeaders, request()) -> Response\n  577  %% @doc Serve a file relative to DocRoot.\n  578: serve_file(Path, DocRoot, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  579      case mochiweb_util:safe_relative_path(Path) of\n  580          undefined ->\n  ...\n  596      filename:join([FullPath, \"index.html\"]).\n  597  \n  598: maybe_redirect([], FullPath, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  599      maybe_serve_file(directory_index(FullPath), ExtraHeaders, THIS);\n  600  \n  601  maybe_redirect(RelPath, FullPath, ExtraHeaders,\n  602:                {?MODULE, [_Socket, _Method, _RawPath, _Version, Headers]}=THIS) ->\n  603      case string:right(RelPath, 1) of\n  604          \"/\" ->\n  ...\n  621      end.\n  622  \n  623: maybe_serve_file(File, ExtraHeaders, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  624      case file:read_file_info(File) of\n  625          {ok, FileInfo} ->\n  ...\n  715  %%            [\"deflate\", \"gzip\", \"identity\"]\n  716  %%\n  717: accepted_encodings(SupportedEncodings, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  718      AcceptEncodingHeader = case get_header_value(\"Accept-Encoding\", THIS) of\n  719          undefined ->\n  ...\n  753  %%         accepts_content_type(\"text/plain\") -> false\n  754  %%\n  755: accepts_content_type(ContentType1, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  756      ContentType = re:replace(ContentType1, \"\\\\s\", \"\", [global, {return, list}]),\n  757      AcceptHeader = accept_header(THIS),\n  ...\n  802  %%             [\"text/html\", \"application/json\"]\n  803  %%\n  804: accepted_content_types(Types1, {?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  805      Types = lists:map(\n  806          fun(T) -> re:replace(T, \"\\\\s\", \"\", [global, {return, list}]) end,\n  ...\n  842      end.\n  843  \n  844: accept_header({?MODULE, [_Socket, _Method, _RawPath, _Version, _Headers]}=THIS) ->\n  845      case get_header_value(\"Accept\", THIS) of\n  846          undefined ->\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_response.erl:\n   43  \n   44  %% @spec send(iodata(), response()) -> ok\n   45: %% @doc Send data over the socket if the method is not HEAD.\n   46  send(Data, {?MODULE, [Request, _Code, _Headers]}) ->\n   47      case Request:get(method) of\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_socket.erl:\n    1  %% @copyright 2010 Mochi Media, Inc.\n    2  \n    3: %% @doc MochiWeb socket - wrapper for plain and ssl sockets.\n    4  \n    5: -module(mochiweb_socket).\n    6  \n    7  -export([listen/4, accept/1, recv/3, send/2, close/1, port/1, peername/1,\n    .\n   14          true ->\n   15              case ssl:listen(Port, Opts ++ SslOpts) of\n   16:                 {ok, ListenSocket} ->\n   17:                     {ok, {ssl, ListenSocket}};\n   18                  {error, _} = Err ->\n   19                      Err\n   ..\n   23      end.\n   24  \n   25: accept({ssl, ListenSocket}) ->\n   26      % There's a bug in ssl:transport_accept/2 at the moment, which is the\n   27      % reason for the try...catch block. Should be fixed in OTP R14.\n   28:     try ssl:transport_accept(ListenSocket) of\n   29:         {ok, Socket} ->\n   30:             case ssl:ssl_accept(Socket) of\n   31                  ok ->\n   32:                     {ok, {ssl, Socket}};\n   33                  {error, _} = Err ->\n   34                      Err\n   ..\n   40              {error, Reason}\n   41      end;\n   42: accept(ListenSocket) ->\n   43:     gen_tcp:accept(ListenSocket, ?ACCEPT_TIMEOUT).\n   44  \n   45: recv({ssl, Socket}, Length, Timeout) ->\n   46:     ssl:recv(Socket, Length, Timeout);\n   47: recv(Socket, Length, Timeout) ->\n   48:     gen_tcp:recv(Socket, Length, Timeout).\n   49  \n   50: send({ssl, Socket}, Data) ->\n   51:     ssl:send(Socket, Data);\n   52: send(Socket, Data) ->\n   53:     gen_tcp:send(Socket, Data).\n   54  \n   55: close({ssl, Socket}) ->\n   56:     ssl:close(Socket);\n   57: close(Socket) ->\n   58:     gen_tcp:close(Socket).\n   59  \n   60: port({ssl, Socket}) ->\n   61:     case ssl:sockname(Socket) of\n   62          {ok, {_, Port}} ->\n   63              {ok, Port};\n   ..\n   65              Err\n   66      end;\n   67: port(Socket) ->\n   68:     inet:port(Socket).\n   69  \n   70: peername({ssl, Socket}) ->\n   71:     ssl:peername(Socket);\n   72: peername(Socket) ->\n   73:     inet:peername(Socket).\n   74  \n   75: setopts({ssl, Socket}, Opts) ->\n   76:     ssl:setopts(Socket, Opts);\n   77: setopts(Socket, Opts) ->\n   78:     inet:setopts(Socket, Opts).\n   79  \n   80  type({ssl, _}) ->\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/src/mochiweb_socket_server.erl:\n    2  %% @copyright 2007 Mochi Media, Inc.\n    3  \n    4: %% @doc MochiWeb socket server.\n    5  \n    6: -module(mochiweb_socket_server).\n    7  -author('bob@mochimedia.com').\n    8  -behaviour(gen_server).\n    .\n   15  -export([get/2, set/3]).\n   16  \n   17: -record(mochiweb_socket_server,\n   18          {port,\n   19           loop,\n   ..\n   25           nodelay=false,\n   26           backlog=128,\n   27:          active_sockets=0,\n   28           acceptor_pool_size=16,\n   29           ssl=false,\n   ..\n   32           profile_fun=undefined}).\n   33  \n   34: -define(is_old_state(State), not is_record(State, mochiweb_socket_server)).\n   35  \n   36  start_link(Options) ->\n   ..\n   66  stop(Options) ->\n   67      State = parse_options(Options),\n   68:     stop(State#mochiweb_socket_server.name).\n   69  \n   70  %% Internal API\n   71  \n   72: parse_options(State=#mochiweb_socket_server{}) ->\n   73      State;\n   74  parse_options(Options) ->\n   75:     parse_options(Options, #mochiweb_socket_server{}).\n   76  \n   77  parse_options([], State) ->\n   ..\n   79  parse_options([{name, L} | Rest], State) when is_list(L) ->\n   80      Name = {local, list_to_atom(L)},\n   81:     parse_options(Rest, State#mochiweb_socket_server{name=Name});\n   82  parse_options([{name, A} | Rest], State) when A =:= undefined ->\n   83:     parse_options(Rest, State#mochiweb_socket_server{name=A});\n   84  parse_options([{name, A} | Rest], State) when is_atom(A) ->\n   85      Name = {local, A},\n   86:     parse_options(Rest, State#mochiweb_socket_server{name=Name});\n   87  parse_options([{name, Name} | Rest], State) ->\n   88:     parse_options(Rest, State#mochiweb_socket_server{name=Name});\n   89  parse_options([{port, L} | Rest], State) when is_list(L) ->\n   90      Port = list_to_integer(L),\n   91:     parse_options(Rest, State#mochiweb_socket_server{port=Port});\n   92  parse_options([{port, Port} | Rest], State) ->\n   93:     parse_options(Rest, State#mochiweb_socket_server{port=Port});\n   94  parse_options([{ip, Ip} | Rest], State) ->\n   95      ParsedIp = case Ip of\n   ..\n  102                         IpTuple\n  103                 end,\n  104:     parse_options(Rest, State#mochiweb_socket_server{ip=ParsedIp});\n  105  parse_options([{loop, Loop} | Rest], State) ->\n  106:     parse_options(Rest, State#mochiweb_socket_server{loop=Loop});\n  107  parse_options([{backlog, Backlog} | Rest], State) ->\n  108:     parse_options(Rest, State#mochiweb_socket_server{backlog=Backlog});\n  109  parse_options([{nodelay, NoDelay} | Rest], State) ->\n  110:     parse_options(Rest, State#mochiweb_socket_server{nodelay=NoDelay});\n  111  parse_options([{acceptor_pool_size, Max} | Rest], State) ->\n  112      MaxInt = ensure_int(Max),\n  113      parse_options(Rest,\n  114:                   State#mochiweb_socket_server{acceptor_pool_size=MaxInt});\n  115  parse_options([{max, Max} | Rest], State) ->\n  116      error_logger:info_report([{warning, \"TODO: max is currently unsupported\"},\n  117                                {max, Max}]),\n  118      MaxInt = ensure_int(Max),\n  119:     parse_options(Rest, State#mochiweb_socket_server{max=MaxInt});\n  120  parse_options([{ssl, Ssl} | Rest], State) when is_boolean(Ssl) ->\n  121:     parse_options(Rest, State#mochiweb_socket_server{ssl=Ssl});\n  122  parse_options([{ssl_opts, SslOpts} | Rest], State) when is_list(SslOpts) ->\n  123      SslOpts1 = [{ssl_imp, new} | proplists:delete(ssl_imp, SslOpts)],\n  124:     parse_options(Rest, State#mochiweb_socket_server{ssl_opts=SslOpts1});\n  125  parse_options([{profile_fun, ProfileFun} | Rest], State) when is_function(ProfileFun) ->\n  126:     parse_options(Rest, State#mochiweb_socket_server{profile_fun=ProfileFun}).\n  127  \n  128  \n  129: start_server(F, State=#mochiweb_socket_server{ssl=Ssl, name=Name}) ->\n  130      ok = prep_ssl(Ssl),\n  131      case Name of\n  ...\n  157      end.\n  158  \n  159: init(State=#mochiweb_socket_server{ip=Ip, port=Port, backlog=Backlog, nodelay=NoDelay}) ->\n  160      process_flag(trap_exit, true),\n  161      BaseOpts = [binary,\n  ...\n  181  \n  182  new_acceptor_pool(Listen,\n  183:                   State=#mochiweb_socket_server{acceptor_pool=Pool,\n  184                                                  acceptor_pool_size=Size,\n  185                                                  loop=Loop}) ->\n  ...\n  189          end,\n  190      Pool1 = lists:foldl(F, Pool, lists:seq(1, Size)),\n  191:     State#mochiweb_socket_server{acceptor_pool=Pool1}.\n  192  \n  193: listen(Port, Opts, State=#mochiweb_socket_server{ssl=Ssl, ssl_opts=SslOpts}) ->\n  194:     case mochiweb_socket:listen(Ssl, Port, Opts, SslOpts) of\n  195          {ok, Listen} ->\n  196:             {ok, ListenPort} = mochiweb_socket:port(Listen),\n  197              {ok, new_acceptor_pool(\n  198                     Listen,\n  199:                    State#mochiweb_socket_server{listen=Listen,\n  200                                                  port=ListenPort})};\n  201          {error, Reason} ->\n  ...\n  203      end.\n  204  \n  205: do_get(port, #mochiweb_socket_server{port=Port}) ->\n  206      Port;\n  207: do_get(active_sockets, #mochiweb_socket_server{active_sockets=ActiveSockets}) ->\n  208:     ActiveSockets.\n  209  \n  210  \n  211: state_to_proplist(#mochiweb_socket_server{name=Name,\n  212                                            port=Port,\n  213:                                           active_sockets=ActiveSockets}) ->\n  214:     [{name, Name}, {port, Port}, {active_sockets, ActiveSockets}].\n  215  \n  216: upgrade_state(State = #mochiweb_socket_server{}) ->\n  217      State;\n  218: upgrade_state({mochiweb_socket_server, Port, Loop, Name,\n  219:              Max, IP, Listen, NoDelay, Backlog, ActiveSockets,\n  220               AcceptorPoolSize, SSL, SSL_opts,\n  221               AcceptorPool}) ->\n  222:     #mochiweb_socket_server{port=Port, loop=Loop, name=Name, max=Max, ip=IP,\n  223                              listen=Listen, nodelay=NoDelay, backlog=Backlog,\n  224:                             active_sockets=ActiveSockets,\n  225                              acceptor_pool_size=AcceptorPoolSize,\n  226                              ssl=SSL,\n  ...\n  243      handle_cast(Req, upgrade_state(State));\n  244  handle_cast({accepted, Pid, Timing},\n  245:             State=#mochiweb_socket_server{active_sockets=ActiveSockets}) ->\n  246:     State1 = State#mochiweb_socket_server{active_sockets=1 + ActiveSockets},\n  247:     case State#mochiweb_socket_server.profile_fun of\n  248          undefined ->\n  249              undefined;\n  ...\n  255      State1 = case ProfileFun of\n  256                   ProfileFun when is_function(ProfileFun); ProfileFun =:= undefined ->\n  257:                      State#mochiweb_socket_server{profile_fun=ProfileFun};\n  258                   _ ->\n  259                       State\n  ...\n  264  terminate(Reason, State) when ?is_old_state(State) ->\n  265      terminate(Reason, upgrade_state(State));\n  266: terminate(_Reason, #mochiweb_socket_server{listen=Listen}) ->\n  267:     mochiweb_socket:close(Listen).\n  268  \n  269  code_change(_OldVsn, State, _Extra) ->\n  270      State.\n  271  \n  272: recycle_acceptor(Pid, State=#mochiweb_socket_server{\n  273                          acceptor_pool=Pool,\n  274                          listen=Listen,\n  275                          loop=Loop,\n  276:                         active_sockets=ActiveSockets}) ->\n  277      case sets:is_element(Pid, Pool) of\n  278          true ->\n  279              Acceptor = mochiweb_acceptor:start_link(self(), Listen, Loop),\n  280              Pool1 = sets:add_element(Acceptor, sets:del_element(Pid, Pool)),\n  281:             State#mochiweb_socket_server{acceptor_pool=Pool1};\n  282          false ->\n  283:             State#mochiweb_socket_server{active_sockets=ActiveSockets - 1}\n  284      end.\n  285  \n  ...\n  289      {noreply, recycle_acceptor(Pid, State)};\n  290  handle_info({'EXIT', Pid, Reason},\n  291:             State=#mochiweb_socket_server{acceptor_pool=Pool}) ->\n  292      case sets:is_element(Pid, Pool) of\n  293          true ->\n  ...\n  304  % since our supervisor modules list is set to 'dynamic'\n  305  % see sasl-2.1.9.2/src/release_handler_1.erl get_dynamic_mods\n  306: handle_info({From, Tag, get_modules}, State = #mochiweb_socket_server{name={local,Mod}}) ->\n  307      From ! {element(2,Tag), [Mod]},\n  308      {noreply, State};\n  ...\n  310  % If for some reason we can't get the module name, send empty list to avoid release_handler timeout:\n  311  handle_info({From, Tag, get_modules}, State) ->\n  312:     error_logger:info_msg(\"mochiweb_socket_server replying to dynamic modules request as '[]'~n\",[]),\n  313      From ! {element(2,Tag), []},\n  314      {noreply, State};\n  ...\n  327  \n  328  upgrade_state_test() ->\n  329:     OldState = {mochiweb_socket_server,\n  330                  port, loop, name,\n  331                  max, ip, listen,\n  332                  nodelay, backlog,\n  333:                 active_sockets,\n  334                  acceptor_pool_size,\n  335                  ssl, ssl_opts, acceptor_pool},\n  336      State = upgrade_state(OldState),\n  337:     CmpState = #mochiweb_socket_server{port=port, loop=loop,\n  338                                         name=name, max=max, ip=ip,\n  339                                         listen=listen, nodelay=nodelay,\n  340                                         backlog=backlog,\n  341:                                        active_sockets=active_sockets,\n  342                                         acceptor_pool_size=acceptor_pool_size,\n  343                                         ssl=ssl, ssl_opts=ssl_opts,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/test/mochiweb_http_tests.erl:\n   21  \n   22  has_acceptor_bug_tests(Server) ->\n   23:     Port = mochiweb_socket_server:get(Server, port),\n   24      [{\"1000 should be fine even with the bug\",\n   25        ?_assertEqual(false, has_bug(Port, 1000))},\n   ..\n   37                          [{\"X-Random\", lists:duplicate(Len, $a)}]}, [], [])\n   38    of\n   39:       {error, socket_closed_remotely} ->\n   40            true;\n   41        {ok, {{\"HTTP/1.1\", 200, \"OK\"}, _, \"<html><body>Hello</body></html>\"}} ->\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/mochiweb-wrapper/mochiweb-git/test/mochiweb_tests.erl:\n   20      end,\n   21      {ok, Server} = mochiweb_http:start_link(ServerOpts),\n   22:     Port = mochiweb_socket_server:get(Server, port),\n   23      Res = (catch ClientFun(Transport, Port)),\n   24      mochiweb_http:stop(Server),\n   ..\n  124      SockFun = case Transport of\n  125          plain ->\n  126:             {ok, Socket} = gen_tcp:connect(\"127.0.0.1\", Port, Opts),\n  127              fun (recv) ->\n  128:                     gen_tcp:recv(Socket, 0);\n  129                  ({recv, Length}) ->\n  130:                     gen_tcp:recv(Socket, Length);\n  131                  ({send, Data}) ->\n  132:                     gen_tcp:send(Socket, Data);\n  133                  ({setopts, L}) ->\n  134:                     inet:setopts(Socket, L)\n  135              end;\n  136          ssl ->\n  137:             {ok, Socket} = ssl:connect(\"127.0.0.1\", Port, [{ssl_imp, new} | Opts]),\n  138              fun (recv) ->\n  139:                     ssl:recv(Socket, 0);\n  140                  ({recv, Length}) ->\n  141:                     ssl:recv(Socket, Length);\n  142                  ({send, Data}) ->\n  143:                     ssl:send(Socket, Data);\n  144                  ({setopts, L}) ->\n  145:                     ssl:setopts(Socket, L)\n  146              end\n  147      end,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-amqp1.0/src/rabbit_amqp1_0_reader.erl:\n  167      %%\n  168      %% If we wanted to be *really* nice we should wait for a while for\n  169:     %% clients to close the socket at their end, just as we do in the\n  170      %% ordinary error case. However, since this termination is\n  171      %% initiated by our parent it is probably more important to exit\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-amqp1.0/src/rabbit_amqp1_0_session_sup.erl:\n   32  \n   33  -type(start_link_args() ::\n   34:         {rabbit_types:protocol(), rabbit_net:socket(),\n   35           rabbit_channel:channel_number(), non_neg_integer(), pid(),\n   36           rabbit_access_control:username(), rabbit_types:vhost(), pid()}).\n   ..\n   67  \n   68  adapter_info(Sock) ->\n   69:     amqp_connection:socket_adapter_info(Sock, {'AMQP', \"1.0\"}).\n   70  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-amqp1.0/src/rabbit_amqp1_0_writer.erl:\n   40  \n   41  -spec(start/5 ::\n   42:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   43           non_neg_integer(), rabbit_types:protocol(), pid())\n   44          -> rabbit_types:ok(pid())).\n   45  -spec(start_link/5 ::\n   46:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   47           non_neg_integer(), rabbit_types:protocol(), pid())\n   48          -> rabbit_types:ok(pid())).\n   49  -spec(start/6 ::\n   50:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   51           non_neg_integer(), rabbit_types:protocol(), pid(), boolean())\n   52          -> rabbit_types:ok(pid())).\n   53  -spec(start_link/6 ::\n   54:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   55           non_neg_integer(), rabbit_types:protocol(), pid(), boolean())\n   56          -> rabbit_types:ok(pid())).\n   ..\n   73          -> 'ok').\n   74  -spec(internal_send_command/4 ::\n   75:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   76           rabbit_framing:amqp_method_record(), rabbit_types:protocol())\n   77          -> 'ok').\n   78  -spec(internal_send_command/6 ::\n   79:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   80           rabbit_framing:amqp_method_record(), rabbit_types:content(),\n   81           non_neg_integer(), rabbit_types:protocol())\n   ..\n  291  %%\n  292  %% This means we may end up happily sending data down a closed/broken\n  293: %% socket, but that's ok since a) data in the buffers will be lost in\n  294  %% any case (so qualitatively we are no worse off than if we used\n  295: %% gen_tcp:send/2), and b) we do detect the changed socket status\n  296  %% eventually, i.e. when we get round to handling the result code.\n  297  %%\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-erlang-client/include/amqp_client.hrl:\n   37                                     fun amqp_auth_mechanisms:amqplain/3],\n   38                                client_properties  = [],\n   39:                               socket_options     = []}).\n   40  \n   41  -record(amqp_params_direct, {username          = <<\"guest\">>,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-erlang-client/src/amqp_connection.erl:\n   74  -export([error_atom/1]).\n   75  -export([info/2, info_keys/1, info_keys/0]).\n   76: -export([socket_adapter_info/2]).\n   77  \n   78  -define(DEFAULT_CONSUMER, {amqp_selective_consumer, []}).\n   ..\n  126  %% <li>client_properties :: [{binary(), atom(), binary()}] - A list of extra\n  127  %%     client properties to be sent to the server, defaults to []</li>\n  128: %% <li>socket_options :: [any()] - Extra socket options.  These are\n  129  %%     appended to the default options.  See\n  130  %%     <a href=\"http://www.erlang.org/doc/man/inet.html#setopts-2\">inet:setopts/2</a>\n  ...\n  308  %%<li>frame_max - returns the frame_max value negotiated with the\n  309  %%    server (only for the network connection)</li>\n  310: %%<li>sock - returns the socket for the network connection (for use with\n  311  %%    e.g. inet:sockname/1) (only for the network connection)</li>\n  312  %%<li>any other value - throws an exception</li>\n  ...\n  338      amqp_gen_connection:info_keys().\n  339  \n  340: %% @doc Takes a socket and a protocol, returns an #amqp_adapter_info{}\n  341: %% based on the socket for the protocol given.\n  342: socket_adapter_info(Sock, Protocol) ->\n  343:     amqp_direct_connection:socket_adapter_info(Sock, Protocol).\n  344  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-erlang-client/src/amqp_direct_connection.erl:\n   27           info_keys/0, handle_message/2, closing/3, channels_terminated/1]).\n   28  \n   29: -export([socket_adapter_info/2]).\n   30  \n   31  -record(state, {node,\n   ..\n  157  ensure_adapter_info(Info) -> Info.\n  158  \n  159: socket_adapter_info(Sock, Protocol) ->\n  160      {PeerHost, PeerPort, Host, Port} =\n  161:         case rabbit_net:socket_ends(Sock, inbound) of\n  162              {ok, Res} -> Res;\n  163              _          -> {unknown, unknown, unknown, unknown}\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-erlang-client/src/amqp_main_reader.erl:\n  107                                              State#state{message = none}));\n  108          NotEnough ->\n  109:             %% Read in more data from the socket\n  110              {noreply, State#state{message = {Type, Channel, L, NotEnough}}}\n  111      end;\n  ...\n  143  \n  144  handle_error(closed, State = #state{connection = Conn}) ->\n  145:     Conn ! socket_closed,\n  146      {noreply, State};\n  147  handle_error({refused, Version},  State = #state{connection = Conn}) ->\n  ...\n  152      {noreply, State};\n  153  handle_error(Reason, State = #state{connection = Conn}) ->\n  154:     Conn ! {socket_error, Reason},\n  155:     {stop, {socket_error, Reason}, State}.\n  156  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-erlang-client/src/amqp_network_connection.erl:\n   25  \n   26  -define(RABBIT_TCP_OPTS, [binary, {packet, 0}, {active,false}, {nodelay, true}]).\n   27: -define(SOCKET_CLOSING_TIMEOUT, 1000).\n   28  -define(HANDSHAKE_RECEIVE_TIMEOUT, 60000).\n   29  -define(TCP_MAX_PACKET_SIZE, (16#4000000 + ?EMPTY_FRAME_SIZE - 1)).\n   ..\n   35                  type_sup,\n   36                  closing_reason, %% undefined | Reason\n   37:                 waiting_socket_close = false}).\n   38  \n   39  -define(INFO_KEYS, [type, heartbeat, frame_max, sock]).\n   ..\n   48  \n   49  do(#'connection.close_ok'{} = CloseOk, State) ->\n   50:     erlang:send_after(?SOCKET_CLOSING_TIMEOUT, self(), socket_closing_timeout),\n   51      do2(CloseOk, State);\n   52  do(Method, State) ->\n   ..\n   57      catch rabbit_writer:send_command_sync(Writer, Method).\n   58  \n   59: handle_message(socket_closing_timeout,\n   60                 State = #state{closing_reason = Reason}) ->\n   61:     {stop, {socket_closing_timeout, Reason}, State};\n   62: handle_message(socket_closed, State = #state{waiting_socket_close = true,\n   63                                               closing_reason = Reason}) ->\n   64      {stop, {shutdown, Reason}, State};\n   65: handle_message(socket_closed, State = #state{waiting_socket_close = false}) ->\n   66:     {stop, socket_closed_unexpectedly, State};\n   67: handle_message({socket_error, _} = SocketError, State) ->\n   68:     {stop, SocketError, State};\n   69  handle_message({channel_exit, 0, Reason}, State) ->\n   70      {stop, {channel0_died, Reason}, State};\n   ..\n   75  %% see http://erlang.org/pipermail/erlang-bugs/2012-June/002933.html\n   76  handle_message({Ref, {error, Reason}},\n   77:                State = #state{waiting_socket_close = Waiting,\n   78                                closing_reason       = CloseReason})\n   79    when is_reference(Ref) ->\n   80      {stop, case {Reason, Waiting} of\n   81                 {closed,  true} -> {shutdown, CloseReason};\n   82:                {closed, false} -> socket_closed_unexpectedly;\n   83:                {_,          _} -> {socket_error, Reason}\n   84             end, State}.\n   85  \n   ..\n   89  channels_terminated(State = #state{closing_reason =\n   90                                       {server_initiated_close, _, _}}) ->\n   91:     {ok, State#state{waiting_socket_close = true}};\n   92  channels_terminated(State) ->\n   93      {ok, State}.\n   ..\n  120                                               port               = Port,\n  121                                               connection_timeout = Timeout,\n  122:                                              socket_options     = ExtraOpts},\n  123             SIF, State) ->\n  124      obtain(),\n  ...\n  134                                               port               = Port,\n  135                                               connection_timeout = Timeout,\n  136:                                              socket_options     = ExtraOpts},\n  137             SIF, State) ->\n  138      app_utils:start_applications([asn1, crypto, public_key, ssl]),\n  ...\n  144              case ssl:connect(Sock, SslOpts) of\n  145                  {ok, SslSock} ->\n  146:                     RabbitSslSock = #ssl_socket{ssl = SslSock, tcp = Sock},\n  147                      try_handshake(AmqpParams, SIF,\n  148                                    State#state{sock = RabbitSslSock});\n  ...\n  321                            {expecting, Expecting}})\n  322              end;\n  323:         socket_closed ->\n  324              case Expecting of\n  325                  'connection.tune'    -> exit({auth_failure, \"Disconnected\"});\n  326                  'connection.open_ok' -> exit(access_refused);\n  327:                 _                    -> exit({socket_closed_unexpectedly,\n  328                                                Expecting})\n  329              end;\n  330:         {socket_error, _} = SocketError ->\n  331:             exit({SocketError, {expecting, Expecting}});\n  332          {refused, Version} ->\n  333              exit({server_refused_connection, Version});\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-management/bin/rabbitmqadmin:\n   29  import json\n   30  import os\n   31: import socket\n   32  \n   33  VERSION = '%%VSN%%'\n   ..\n  428          try:\n  429              conn.request(method, path, body, headers)\n  430:         except socket.error, e:\n  431              die(\"Could not connect: {0}\".format(e))\n  432          resp = conn.getresponse()\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-management/priv/www/js/formatters.js:\n    2  FD_THRESHOLDS=[[0.95, 'red'],\n    3                 [0.8, 'yellow']];\n    4: SOCKETS_THRESHOLDS=[[1.0, 'red'],\n    5                      [0.8, 'yellow']];\n    6  PROCESS_THRESHOLDS=[[0.75, 'red'],\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-management/priv/www/js/help.js:\n   59      'file-descriptors':\n   60        '<p>File descriptor count and limit, as reported by the operating \\\n   61:       system. The count includes network sockets and file handles.</p> \\\n   62        <p>To optimize disk access RabbitMQ uses as many free descriptors as are \\\n   63        available, so the count may safely approach the limit. \\\n   64:       However, if most of the file descriptors are used by sockets then \\\n   65        persister performance will be negatively impacted.</p> \\\n   66        <p>To change the limit on Unix / Linux, use \"ulimit -n\". To change \\\n   ..\n   70        <a target=\"_blank\" href=\"http://technet.microsoft.com/en-us/sysinternals/bb896655\">here</a>.</p>',\n   71  \n   72:     'socket-descriptors':\n   73:       'The network sockets count and limit managed by RabbitMQ.<br/> \\\n   74        When the limit is exhausted RabbitMQ will stop accepting new \\\n   75        network connections.',\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-management/priv/www/js/tmpl/node.ejs:\n   20      <tr>\n   21        <th>\n   22:         Socket descriptors <span class=\"help\" id=\"socket-descriptors\"></span>\n   23        </th>\n   24        <td>\n   25: <%= fmt_resource_bar_count(node.sockets_used, node.sockets_total, FD_THRESHOLDS) %>\n   26        </td>\n   27      </tr>\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-management/priv/www/js/tmpl/overview.ejs:\n   61      </th>\n   62      <th>\n   63:       Socket descriptors <span class=\"help\" id=\"socket-descriptors\"></span>\n   64      </th>\n   65      <th>\n   ..\n  104       </td>\n  105       <td>\n  106: <%= fmt_resource_bar_count(node.sockets_used, node.sockets_total, FD_THRESHOLDS) %>\n  107       </td>\n  108       <td>\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-management/test/src/rabbitmqadmin-test.py:\n    4  import os\n    5  import os.path\n    6: import socket\n    7  import subprocess\n    8  import sys\n    .\n   24          self.run_success(['show', 'overview'])\n   25          self.run_success(['--host', 'localhost', 'show', 'overview'])\n   26:         self.run_success(['--host', socket.gethostname(), 'show', 'overview'])\n   27          self.run_fail(['--host', 'some-host-that-does-not-exist', 'show', 'overview'])\n   28  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-management-agent/src/rabbit_mgmt_external_stats.erl:\n   29  -define(REFRESH_RATIO, 5000).\n   30  -define(KEYS, [name, partitions, os_pid, fd_used, fd_total,\n   31:                sockets_used, sockets_total, mem_used, mem_limit, mem_alarm,\n   32                 disk_free_limit, disk_free, disk_free_alarm,\n   33                 proc_used, proc_total, statistics_level,\n   ..\n  101  %% Total handles: 238\n  102  \n  103: %% Note that the \"File\" number appears to include network sockets too; I assume\n  104  %% that's the number we care about. Note also that if you omit \"-s\" you will\n  105: %% see a list of file handles *without* network sockets. If you then add \"-a\"\n  106: %% you will see a list of handles of various types, including network sockets\n  107  %% shown as file handles to \\Device\\Afd.\n  108  \n  ...\n  146  i(fd_used,         _State) -> get_used_fd();\n  147  i(fd_total, #state{fd_total = FdTotal}) -> FdTotal;\n  148: i(sockets_used,    _State) ->\n  149:     proplists:get_value(sockets_used, file_handle_cache:info([sockets_used]));\n  150: i(sockets_total,   _State) ->\n  151:     proplists:get_value(sockets_limit, file_handle_cache:info([sockets_limit]));\n  152  i(os_pid,          _State) -> list_to_binary(os:getpid());\n  153  i(mem_used,        _State) -> erlang:memory(total);\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-mqtt/include/rabbit_mqtt.hrl:\n   17  -define(CLIENT_ID_MAXLEN, 23).\n   18  \n   19: -record(state,      { socket,\n   20                        conn_name,\n   21                        await_recv,\n   ..\n   25                        proc_state }).\n   26  \n   27: -record(proc_state, { socket,\n   28                        subscriptions,\n   29                        consumer_tags,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-mqtt/src/rabbit_mqtt_processor.erl:\n   28          Frame = #mqtt_frame{ fixed = #mqtt_frame_fixed{ type = Type }}).\n   29  \n   30: initial_state(Socket) ->\n   31      #proc_state{ unacked_pubs  = gb_trees:empty(),\n   32                   awaiting_ack  = gb_trees:empty(),\n   ..\n   36                   channels      = {undefined, undefined},\n   37                   exchange      = rabbit_mqtt_util:env(exchange),\n   38:                  socket        = Socket }.\n   39  \n   40  info(client_id, #proc_state{ client_id = ClientId }) -> ClientId.\n   ..\n  319  \n  320  process_login(UserBin, PassBin, #proc_state{ channels  = {undefined, undefined},\n  321:                                              socket    = Sock }) ->\n  322       VHost = rabbit_mqtt_util:env(vhost),\n  323       case amqp_connection:start(#amqp_params_direct{\n  ...\n  457  \n  458  adapter_info(Sock) ->\n  459:     amqp_connection:socket_adapter_info(\n  460               Sock, {'MQTT', {?MQTT_PROTO_MAJOR, ?MQTT_PROTO_MINOR}}).\n  461  \n  462: send_client(Frame, #proc_state{ socket = Sock }) ->\n  463      %rabbit_log:info(\"MQTT sending frame ~p ~n\", [Frame]),\n  464      rabbit_net:port_command(Sock, rabbit_mqtt_frame:serialise(Frame)).\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-mqtt/src/rabbit_mqtt_reader.erl:\n   51              {reply, ok,\n   52               control_throttle(\n   53:                #state{ socket           = Sock,\n   54                         conn_name        = ConnStr,\n   55                         await_recv       = false,\n   ..\n  100  \n  101  handle_info({inet_async, Sock, _Ref, {ok, Data}},\n  102:             State = #state{ socket = Sock }) ->\n  103      process_received_bytes(\n  104        Data, control_throttle(State #state{ await_recv = false }));\n  ...\n  186      pstate(State, rabbit_mqtt_processor:close_connection(ProcState)).\n  187  \n  188: run_socket(State = #state{ connection_state = blocked }) ->\n  189      State;\n  190: run_socket(State = #state{ await_recv = true }) ->\n  191      State;\n  192: run_socket(State = #state{ socket = Sock }) ->\n  193      rabbit_net:async_recv(Sock, 0, infinity),\n  194      State#state{ await_recv = true }.\n  ...\n  198      case {Flow, Conserve orelse credit_flow:blocked()} of\n  199          {running,   true} -> State #state{ connection_state = blocked };\n  200:         {blocked,  false} -> run_socket(State #state{\n  201                                                  connection_state = running });\n  202:         {_,            _} -> run_socket(State)\n  203      end.\n  204  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-mqtt/src/rabbit_mqtt_sup.erl:\n   35  \n   36  init([{Listeners, SslListeners}]) ->\n   37:     {ok, SocketOpts} = application:get_env(rabbitmq_mqtt, tcp_listen_options),\n   38      SslOpts = case SslListeners of\n   39                    [] -> none;\n   ..\n   47              transient, infinity, supervisor, [rabbit_client_sup]} |\n   48             listener_specs(fun tcp_listener_spec/1,\n   49:                           [SocketOpts], Listeners) ++\n   50             listener_specs(fun ssl_listener_spec/1,\n   51:                           [SocketOpts, SslOpts], SslListeners)]}}.\n   52  \n   53  listener_specs(Fun, Args, Listeners) ->\n   ..\n   56          Address  <- rabbit_networking:tcp_listener_addresses(Listener)].\n   57  \n   58: tcp_listener_spec([Address, SocketOpts]) ->\n   59      rabbit_networking:tcp_listener_spec(\n   60:       rabbit_mqtt_listener_sup, Address, SocketOpts,\n   61        mqtt, \"MQTT TCP Listener\",\n   62        {?MODULE, start_client, []}).\n   63  \n   64: ssl_listener_spec([Address, SocketOpts, SslOpts]) ->\n   65      rabbit_networking:tcp_listener_spec(\n   66:       rabbit_stomp_listener_sup, Address, SocketOpts,\n   67        'mqtt/ssl', \"MQTT SSL Listener\",\n   68        {?MODULE, start_ssl_client, [SslOpts]}).\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-mqtt/test/src/com/rabbitmq/mqtt/test/MqttTest.java:\n   33  import org.eclipse.paho.client.mqttv3.internal.wire.MqttPublish;\n   34  \n   35: import javax.net.SocketFactory;\n   36  import java.io.IOException;\n   37  import java.net.InetAddress;\n   38: import java.net.Socket;\n   39  import java.util.ArrayList;\n   40  import java.util.Arrays;\n   ..\n  131      public void testConnectFirst() throws MqttException, IOException, InterruptedException {\n  132          MqttPublish publish = new MqttPublish(this.getName(), new MqttMessage(payload));\n  133:         NetworkModule networkModule = new TCPNetworkModule(SocketFactory.getDefault(), host, port, \"\");\n  134          networkModule.start();\n  135          MqttOutputStream mqttOut = new MqttOutputStream(networkModule.getOutputStream());\n  ...\n  298          client2.setCallback(this);\n  299  \n  300:         final SocketFactory factory = SocketFactory.getDefault();\n  301:         final ArrayList<Socket> sockets = new ArrayList<Socket>();\n  302:         SocketFactory testFactory = new SocketFactory() {\n  303:             public Socket createSocket(String s, int i) throws IOException {\n  304:                 Socket sock = factory.createSocket(s, i);\n  305:                 sockets.add(sock);\n  306                  return sock;\n  307              }\n  308:             public Socket createSocket(String s, int i, InetAddress a, int i1) throws IOException {\n  309                  return null;\n  310              }\n  311:             public Socket createSocket(InetAddress a, int i) throws IOException {\n  312                  return null;\n  313              }\n  314:             public Socket createSocket(InetAddress a, int i, InetAddress a1, int i1) throws IOException {\n  315                  return null;\n  316              }\n  317              @Override\n  318:             public Socket createSocket() throws IOException {\n  319:                 Socket sock = new Socket();\n  320:                 sockets.add(sock);\n  321                  return sock;\n  322              }\n  323          };\n  324:         conOpt.setSocketFactory(testFactory);\n  325          MqttTopic willTopic = client.getTopic(topic);\n  326          conOpt.setWill(willTopic, payload, 0, false);\n  ...\n  328          client.connect(conOpt);\n  329  \n  330:         Assert.assertEquals(1, sockets.size());\n  331          expectConnectionFailure = true;\n  332:         sockets.get(0).close();\n  333          Thread.sleep(testDelay);\n  334  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-stomp/deps/stomppy/rabbit.patch:\n   17   \n   18               where OK is a boolean, and cert is a certificate structure\n   19:              as returned by ssl.SSLSocket.getpeercert()\n   20  +\n   21  +        \\param version\n   ..\n   44  +            self.__connect_headers['host'] = virtual_host\n   45  +\n   46:          self.__socket = None\n   47:          self.__socket_semaphore = threading.BoundedSemaphore(1)\n   48           self.__current_host_and_port = None\n   49  @@ -383,6 +405,10 @@\n   ..\n   51           self.__send_frame_helper('DISCONNECT', '', utils.merge_headers([self.__connect_headers, headers, keyword_headers]), [ ])\n   52           self.__running = False\n   53: +        self.close_socket()\n   54  +        self.__current_host_and_port = None\n   55  +        \n   56: +    def close_socket(self):\n   57:          if self.__socket is not None:\n   58               if self.__ssl:\n   59                   #\n   ..\n   61                   #\n   62                   try:\n   63:                      self.__socket = self.__socket.unwrap()\n   64  -                except Exception:\n   65  +                except Exception as e:\n   ..\n   69  -                    _, e, _ = sys.exc_info()\n   70  -                    log.warn(e)\n   71: +                    log.warning(\"socket unwrap() threw exception: %s\" % e)\n   72:              elif hasattr(socket, 'SHUT_RDWR'):\n   73: -                self.__socket.shutdown(socket.SHUT_RDWR)\n   74  +                try:\n   75: +                    self.__socket.shutdown(socket.SHUT_RDWR)\n   76  +                except Exception as e:\n   77: +                    log.warning(\"socket shutdown() threw exception: %s\" % e)\n   78           #\n   79: -        # split this into a separate check, because sometimes the socket is nulled between shutdown and this call\n   80: +        # caution, because sometimes the socket is nulled between shutdown and this call\n   81           #\n   82: -        if self.__socket is not None:\n   83  +        try:\n   84:              self.__socket.close()\n   85  -        self.__current_host_and_port = None\n   86  +        except Exception as e:\n   87: +            log.warning(\"socket close() threw exception: %s\" % e)\n   88   \n   89       def __convert_dict(self, payload):\n   ..\n  102                       sleep_exp += 1\n  103   \n  104:          if not self.__socket:\n  105  -            raise exception.ReconnectFailedException\n  106  \\ No newline at end of file\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-stomp/src/rabbit_stomp_reader.erl:\n   25  -include_lib(\"amqp_client/include/amqp_client.hrl\").\n   26  \n   27: -record(reader_state, {socket, parse_state, processor, state,\n   28                         conserve_resources, recv_outstanding}).\n   29  \n   ..\n   56                          mainloop(\n   57                            register_resource_alarm(\n   58:                             #reader_state{socket             = Sock,\n   59                                            parse_state        = ParseState,\n   60                                            processor          = ProcessorPid,\n   ..\n   79      end.\n   80  \n   81: mainloop(State0 = #reader_state{socket = Sock}) ->\n   82:     State = run_socket(control_throttle(State0)),\n   83      receive\n   84          {inet_async, Sock, _Ref, {ok, Data}} ->\n   ..\n  135      S.\n  136  \n  137: run_socket(State = #reader_state{state = blocked}) ->\n  138      State;\n  139: run_socket(State = #reader_state{recv_outstanding = true}) ->\n  140      State;\n  141: run_socket(State = #reader_state{socket = Sock}) ->\n  142      rabbit_net:async_recv(Sock, 0, infinity),\n  143      State#reader_state{recv_outstanding = true}.\n  ...\n  167  \n  168  adapter_info(Sock) ->\n  169:     amqp_connection:socket_adapter_info(Sock, {'STOMP', 0}).\n  170  \n  171  ssl_login_name(_Sock, #stomp_configuration{ssl_cert_login = false}) ->\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-stomp/src/rabbit_stomp_sup.erl:\n   27  \n   28  init([{Listeners, SslListeners}, Configuration]) ->\n   29:     {ok, SocketOpts} = application:get_env(rabbitmq_stomp, tcp_listen_options),\n   30  \n   31      SslOpts = case SslListeners of\n   ..\n   41              transient, infinity, supervisor, [rabbit_client_sup]} |\n   42             listener_specs(fun tcp_listener_spec/1,\n   43:                           [SocketOpts, Configuration], Listeners) ++\n   44             listener_specs(fun ssl_listener_spec/1,\n   45:                           [SocketOpts, SslOpts, Configuration], SslListeners)]}}.\n   46  \n   47  listener_specs(Fun, Args, Listeners) ->\n   ..\n   50          Address  <- rabbit_networking:tcp_listener_addresses(Listener)].\n   51  \n   52: tcp_listener_spec([Address, SocketOpts, Configuration]) ->\n   53      rabbit_networking:tcp_listener_spec(\n   54:       rabbit_stomp_listener_sup, Address, SocketOpts,\n   55        stomp, \"STOMP TCP Listener\",\n   56        {?MODULE, start_client, [Configuration]}).\n   57  \n   58: ssl_listener_spec([Address, SocketOpts, SslOpts, Configuration]) ->\n   59      rabbit_networking:tcp_listener_spec(\n   60:       rabbit_stomp_listener_sup, Address, SocketOpts,\n   61        'stomp/ssl', \"STOMP SSL Listener\",\n   62        {?MODULE, start_ssl_client, [Configuration, SslOpts]}).\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-stomp/test/src/parsing.py:\n    5  import unittest\n    6  import re\n    7: import socket\n    8  import functools\n    9  import time\n   ..\n   27          def wrapper(self, *args, **kwargs):\n   28              for cname in cnames:\n   29:                 sd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n   30                  sd.settimeout(30000)\n   31                  sd.connect((self.host, self.port))\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-stomp/test/src/reliability.py:\n    7  \n    8      def test_send_and_disconnect(self):\n    9:         ''' Test close socket after send does not lose messages '''\n   10          d = \"/queue/reliability\"\n   11          pub_conn = self.create_connection()\n   ..\n   23                  pub_conn.send(msg + str(x), destination=d)\n   24              time.sleep(2.0)\n   25:             pub_conn.close_socket()\n   26  \n   27              if listener.await(30):\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-stomp/test/src/test_util.py:\n    1  import subprocess\n    2: import socket\n    3  import sys\n    4  import os\n    .\n    6  \n    7  def ensure_ssl_auth_user():\n    8:     user = 'O=client,CN=%s' % socket.gethostname()\n    9      rabbitmqctl(['stop_app'])\n   10      rabbitmqctl(['reset'])\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-dispatch/src/rabbit_web_dispatch.erl:\n   54                Host = case Req:get_header_value(\"host\") of\n   55                           undefined -> {ok, {IP, _Port}} = rabbit_net:sockname(\n   56:                                                             Req:get(socket)),\n   57                                        rabbit_misc:ntoa(IP);\n   58                           Header    -> hd(string:tokens(Header, \":\"))\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-stomp/README.md:\n   12  connection to this url. You will be able to communicate using the\n   13  usual STOMP protocol over it. For example, a page using Jeff Mesnil's\n   14: \"stomp-websocket\" project may look like this:\n   15  \n   16  \n   ..\n   18      <script src=\"stomp.js\"></script>\n   19      <script>\n   20:         Stomp.WebSocketClass = SockJS;\n   21  \n   22          var client = Stomp.client('http://127.0.0.1:15674/stomp');\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-stomp/src/rabbitmq_web_stomp.app.src:\n    1  {application, rabbitmq_web_stomp,\n    2   [\n    3:   {description, \"Rabbit WEB-STOMP - WebSockets to Stomp adapter\"},\n    4    {vsn, \"%%VSN%%\"},\n    5    {modules, []},\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-stomp/test/src/rabbit_ws_test_all.erl:\n   20  \n   21  all_tests() ->\n   22:     ok = eunit:test(rabbit_ws_test_raw_websocket, [verbose]),\n   23:     ok = eunit:test(rabbit_ws_test_sockjs_websocket, [verbose]),\n   24      ok.\n   25  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-stomp/test/src/rabbit_ws_test_raw_websocket.erl:\n   15  %%\n   16  \n   17: -module(rabbit_ws_test_raw_websocket).\n   18  \n   19  -include_lib(\"eunit/include/eunit.hrl\").\n   20  \n   21  connection_test() ->\n   22:     WS = rfc6455_client:new(\"ws://127.0.0.1:15674/stomp/websocket\", self()),\n   23      {ok, _} = rfc6455_client:open(WS),\n   24      {close, _} = rfc6455_client:close(WS),\n   ..\n   38  \n   39  pubsub_test() ->\n   40:     WS = rfc6455_client:new(\"ws://127.0.0.1:15674/stomp/websocket\", self()),\n   41      {ok, _} = rfc6455_client:open(WS),\n   42      ok = raw_send(WS, \"CONNECT\", [{\"login\",\"guest\"}, {\"passcode\", \"guest\"}]),\n   ..\n   60  \n   61  disconnect_test() ->\n   62:     WS = rfc6455_client:new(\"ws://127.0.0.1:15674/stomp/websocket\", self()),\n   63      {ok, _} = rfc6455_client:open(WS),\n   64      ok = raw_send(WS, \"CONNECT\", [{\"login\",\"guest\"}, {\"passcode\", \"guest\"}]),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-stomp/test/src/rabbit_ws_test_sockjs_websocket.erl:\n   15  %%\n   16  \n   17: -module(rabbit_ws_test_sockjs_websocket).\n   18  \n   19  -include_lib(\"eunit/include/eunit.hrl\").\n   20  \n   21  connection_test() ->\n   22:     WS = rfc6455_client:new(\"ws://127.0.0.1:15674/stomp/0/0/websocket\", self()),\n   23      {ok, _} = rfc6455_client:open(WS),\n   24      {ok, <<\"o\">>} = rfc6455_client:recv(WS),\n   ..\n   48      \n   49  pubsub_test() ->\n   50:     WS = rfc6455_client:new(\"ws://127.0.0.1:15674/stomp/0/0/websocket\", self()),\n   51      {ok, _} = rfc6455_client:open(WS),\n   52      {ok, <<\"o\">>} = rfc6455_client:recv(WS),\n   ..\n   73  \n   74  disconnect_test() ->\n   75:     WS = rfc6455_client:new(\"ws://127.0.0.1:15674/stomp/0/0/websocket\", self()),\n   76      {ok, _} = rfc6455_client:open(WS),\n   77      {ok, <<\"o\">>} = rfc6455_client:recv(WS),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-stomp/test/src/rfc6455_client.erl:\n   19  -export([new/2, open/1, recv/1, send/2, close/1, close/2]).\n   20  \n   21: -record(state, {host, port, addr, path, ppid, socket, data, phase}).\n   22  \n   23  %% --------------------------------------------------------------------------\n   ..\n   75  \n   76  start_conn(State) ->\n   77:     {ok, Socket} = gen_tcp:connect(State#state.host, State#state.port,\n   78                                     [binary,\n   79                                      {packet, 0}]),\n   80      Key = base64:encode_to_string(crypto:rand_bytes(16)),\n   81:     gen_tcp:send(Socket,\n   82          \"GET \" ++ State#state.path ++ \" HTTP/1.1\\r\\n\" ++\n   83          \"Host: \" ++ State#state.addr ++ \"\\r\\n\" ++\n   84:         \"Upgrade: websocket\\r\\n\" ++\n   85          \"Connection: Upgrade\\r\\n\" ++\n   86:         \"Sec-WebSocket-Key: \" ++ Key ++ \"\\r\\n\" ++\n   87          \"Origin: null\\r\\n\" ++\n   88:         \"Sec-WebSocket-Version: 13\\r\\n\\r\\n\"),\n   89  \n   90:     loop(State#state{socket = Socket,\n   91                       data   = <<>>,\n   92                       phase = opening}).\n   ..\n  101                          data = Data1}\n  102      end;\n  103: do_recv(State = #state{phase = Phase, data = Data, socket = Socket, ppid = PPid})\n  104    when Phase =:= open orelse Phase =:= closing ->\n  105      R = case Data of\n  ...\n  116              <<_:1, _:3, _:4, 1:1, _/binary>> ->\n  117                  %% According o rfc6455 5.1 the server must not mask any frames.\n  118:                 die(Socket, PPid, {1006, \"Protocol error\"}, normal);\n  119              _ ->\n  120                  moredata\n  ...\n  126      end.\n  127  \n  128: do_recv2(State = #state{phase = Phase, socket = Socket, ppid = PPid}, R) ->\n  129      case R of\n  130          {1, 1, Payload, Rest} ->\n  ...\n  139                  open -> %% echo\n  140                      do_close(State, WsReason),\n  141:                     gen_tcp:close(Socket);\n  142                  closing ->\n  143                      ok\n  144              end,\n  145:             die(Socket, PPid, WsReason, normal);\n  146          {_, _, _, Rest2} ->\n  147              io:format(\"Unknown frame type~n\"),\n  148:             die(Socket, PPid, {1006, \"Unknown frame type\"}, normal)\n  149      end.\n  150  \n  ...\n  164      iolist_to_binary(IoData).\n  165  \n  166: do_send(State = #state{socket = Socket}, Payload) ->\n  167:     gen_tcp:send(Socket, encode_frame(1, 1, Payload)),\n  168      State.\n  169  \n  170: do_close(State = #state{socket = Socket}, {Code, Reason}) ->\n  171      Payload = iolist_to_binary([<<Code:16>>, Reason]),\n  172:     gen_tcp:send(Socket, encode_frame(1, 8, Payload)),\n  173      State#state{phase = closing}.\n  174  \n  175  \n  176: loop(State = #state{socket = Socket, ppid = PPid, data = Data,\n  177                      phase = Phase}) ->\n  178      receive\n  179:         {tcp, Socket, Bin} ->\n  180              State1 = State#state{data = iolist_to_binary([Data, Bin])},\n  181              loop(do_recv(State1));\n  182          {send, Payload} when Phase == open ->\n  183              loop(do_send(State, Payload));\n  184:         {tcp_closed, Socket} ->\n  185:             die(Socket, PPid, {1006, \"Connection closed abnormally\"}, normal);\n  186          {close, WsReason} when Phase == open ->\n  187              loop(do_close(State, WsReason))\n  ...\n  189  \n  190  \n  191: die(Socket, PPid, WsReason, Reason) ->\n  192:     gen_tcp:shutdown(Socket, read_write),\n  193      PPid ! {rfc6455, close, self(), WsReason},\n  194      exit(Reason).\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-stomp-examples/LICENSE:\n    2  MPL. For the MPL, please see LICENSE-MPL-RabbitMQ.\n    3  \n    4: priv/stomp.js is a part of stomp-websocket project\n    5: (https://github.com/jmesnil/stomp-websocket) and is released under\n    6: APL2. For the license see LICENSE-APL2-Stomp-Websocket.\n    7  \n    8  If you have any questions regarding licensing, please contact us at\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-web-stomp-examples/priv/stomp.js:\n    1  // Generated by CoffeeScript 1.6.3\n    2  /*\n    3:    Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0\n    4  */\n    5  \n    .\n  106          incoming: 10000\n  107        };\n  108:       this.maxWebSocketFrameSize = 16 * 1024;\n  109        this.subscriptions = {};\n  110      }\n  ...\n  122        }\n  123        while (true) {\n  124:         if (out.length > this.maxWebSocketFrameSize) {\n  125:           this.ws.send(out.substring(0, this.maxWebSocketFrameSize));\n  126:           out = out.substring(this.maxWebSocketFrameSize);\n  127            if (typeof this.debug === \"function\") {\n  128              this.debug(\"remaining = \" + out.length);\n  ...\n  182        this.connectCallback = connectCallback;\n  183        if (typeof this.debug === \"function\") {\n  184:         this.debug(\"Opening Web Socket...\");\n  185        }\n  186        this.ws.onmessage = function(evt) {\n  ...\n  250          var headers;\n  251          if (typeof _this.debug === \"function\") {\n  252:           _this.debug('Web Socket Opened...');\n  253          }\n  254          headers = {\n  ...\n  375          protocols = ['v10.stomp', 'v11.stomp'];\n  376        }\n  377:       klass = Stomp.WebSocketClass || WebSocket;\n  378        ws = new klass(url, protocols);\n  379        return new Client(ws);\n  ...\n  389    } else if (typeof exports !== \"undefined\" && exports !== null) {\n  390      exports.Stomp = Stomp;\n  391:     Stomp.WebSocketClass = require('./test/server.mock.js').StompServerMock;\n  392    } else {\n  393      self.Stomp = Stomp;\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/0000-remove-spec-patch.diff:\n  139  --spec info_test(req(), headers(), service()) -> req().\n  140  +%% -spec info_test(req(), headers(), service()) -> req().\n  141:  info_test(Req, Headers, #service{websocket = Websocket,\n  142                                    cookie_needed = CookieNeeded}) ->\n  143:      I = [{websocket, Websocket},\n  144: @@ -81,12 +81,12 @@ info_test(Req, Headers, #service{websocket = Websocket,\n  145   \n  146   %% --------------------------------------------------------------------------\n  ...\n  232   %% --------------------------------------------------------------------------\n  233   \n  234: --spec websocket(req(), headers(), service()) -> req().\n  235: +%% -spec websocket(req(), headers(), service()) -> req().\n  236:  websocket(Req, Headers, Service) ->\n  237       {_Any, Req1, {R1, R2}} = sockjs_handler:is_valid_ws(Service, Req),\n  238       case {R1, R2} of\n  239: @@ -274,6 +274,6 @@ websocket(Req, Headers, Service) ->\n  240:                                \"This WebSocket request can't be handled.\", Req1)\n  241       end.\n  242   \n  243: --spec rawwebsocket(req(), headers(), service()) -> req().\n  244: +%% -spec rawwebsocket(req(), headers(), service()) -> req().\n  245:  rawwebsocket(Req, Headers, Service) ->\n  246:      websocket(Req, Headers, Service).\n  247  diff --git a/src/sockjs_app.erl b/src/sockjs_app.erl\n  248  index 1b8e77c..54aceb6 100644\n  ...\n  340   is_valid_ws(Service, Req) ->\n  341       case get_action(Service, Req) of\n  342:          {{match, WS}, Req1} when WS =:= websocket orelse\n  343  @@ -44,7 +44,7 @@ is_valid_ws(Service, Req) ->\n  344               {false, Req1, {}}\n  ...\n  400   %% --------------------------------------------------------------------------\n  401   \n  402: --spec default_logger(service(), req(), websocket | http) -> req().\n  403: +%% -spec default_logger(service(), req(), websocket | http) -> req().\n  404   default_logger(_Service, Req, _Type) ->\n  405       {LongPath, Req1} = sockjs_http:path(Req),\n  ...\n  509           ok          -> {ok, R};\n  510  @@ -112,25 +112,25 @@ chunk(Chunk, {cowboy, Req} = R) ->\n  511:                        %% should catch tco socket closure before.\n  512       end.\n  513   \n  ...\n  550  --type(emittable()    :: init|closed|{recv, binary()}).\n  551  --type(callback()     :: fun((user_session(), emittable(), any()) -> ok)).\n  552: --type(logger()       :: fun((any(), req(), websocket|http) -> req())).\n  553  +%% -type(user_session() :: nonempty_string()).\n  554  +%% -type(emittable()    :: init|closed|{recv, binary()}).\n  555  +%% -type(callback()     :: fun((user_session(), emittable(), any()) -> ok)).\n  556: +%% -type(logger()       :: fun((any(), req(), websocket|http) -> req())).\n  557   \n  558  --record(service, {prefix           :: nonempty_string(),\n  ...\n  561  -                  sockjs_url       :: nonempty_string(),\n  562  -                  cookie_needed    :: boolean(),\n  563: -                  websocket        :: boolean(),\n  564  -                  disconnect_delay :: non_neg_integer(),\n  565  -                  heartbeat_delay  :: non_neg_integer(),\n  ...\n  571  +                  sockjs_url       , %%  nonempty_string()\n  572  +                  cookie_needed    , %%  boolean()\n  573: +                  websocket        , %%  boolean()\n  574  +                  disconnect_delay , %%  non_neg_integer()\n  575  +                  heartbeat_delay  , %%  non_neg_integer()\n  ...\n  792   %% --------------------------------------------------------------------------\n  793   \n  794: --spec received(websocket|rawwebsocket, pid(), binary()) -> ok | shutdown.\n  795: +%% -spec received(websocket|rawwebsocket, pid(), binary()) -> ok | shutdown.\n  796   %% Ignore empty\n  797:  received(_RawWebsocket, _SessionPid, <<>>) ->\n  798       ok;\n  799  @@ -30,7 +30,7 @@ session_received(Messages, SessionPid) ->\n  ...\n  801       end.\n  802   \n  803: --spec reply(websocket|rawwebsocket, pid()) -> {close|open, binary()} | wait.\n  804: +%% -spec reply(websocket|rawwebsocket, pid()) -> {close|open, binary()} | wait.\n  805:  reply(websocket, SessionPid) ->\n  806       case sockjs_session:reply(SessionPid) of\n  807           {W, Frame} when W =:= ok orelse W =:= close->\n  808: @@ -52,7 +52,7 @@ reply(rawwebsocket, SessionPid) ->\n  809               wait\n  810       end.\n  811   \n  812: --spec close(websocket|rawwebsocket, pid()) -> ok.\n  813: +%% -spec close(websocket|rawwebsocket, pid()) -> ok.\n  814:  close(_RawWebsocket, SessionPid) ->\n  815       SessionPid ! force_shutdown,\n  816       ok.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/Changelog:\n    2  =====\n    3  \n    4:  * #41 - fix a traceback when websocket is too slow or too\n    5     busy to prompty process incoming and outgoing data\n    6   * #37 - make porting to new cowboy a tiny bit easier\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/README.md:\n  102         href=\"http://cdn.sockjs.org/sockjs-0.2.min.js\"> the latest\n  103         minified SockJS client release</a>, this is the default).\n  104:      * `{websocket, boolean()}` - are native websockets enabled? This\n  105         can be usefull when your loadbalancer doesn't support them.\n  106       * `{cookie_needed, boolean()}` - is your load balancer relying on\n  ...\n  133       Sometimes you may want to know more about the underlying\n  134       connection. This method returns a proplist with few attributes\n  135:      extracted from the first HTTP/websocket request that was coming\n  136       to this connection. You should see:\n  137  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/examples/cowboy_test_server.erl:\n   25                         <<\"/broadcast\">>, fun service_broadcast/3, state, []),\n   26      StateDWSEcho = sockjs_handler:init_state(\n   27:                   <<\"/disabled_websocket_echo\">>, fun service_echo/3, state,\n   28:                      [{websocket, false}]),\n   29      StateCNEcho = sockjs_handler:init_state(\n   30                      <<\"/cookie_needed_echo\">>, fun service_echo/3, state,\n   ..\n   35                 {[<<\"amplify\">>, '...'], sockjs_cowboy_handler, StateAmplify},\n   36                 {[<<\"broadcast\">>, '...'], sockjs_cowboy_handler, StateBroadcast},\n   37:                {[<<\"disabled_websocket_echo\">>, '...'], sockjs_cowboy_handler,\n   38                  StateDWSEcho},\n   39                 {[<<\"cookie_needed_echo\">>, '...'], sockjs_cowboy_handler,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/examples/multiplex/index.html:\n   54      <script>\n   55          // Pipe - convenience wrapper to present data received from an\n   56:         // object supporting WebSocket API in an html element. And the other\n   57          // direction: data typed into an input box shall be sent back.\n   58          var pipe = function(ws, el_name) {\n   ..\n   83          var sockjs = new SockJS(sockjs_url);\n   84  \n   85:         var multiplexer = new MultiplexedWebSocket(sockjs);\n   86          var ann  = multiplexer.channel('ann');\n   87          var bob  = multiplexer.channel('bob');\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/examples/multiplex/multiplex.js:\n   23  // ****\n   24  \n   25: var MultiplexedWebSocket = function(ws) {\n   26      var that = this;\n   27      this.ws = ws;\n   ..\n   46      });\n   47  };\n   48: MultiplexedWebSocket.prototype.channel = function(raw_name) {\n   49      return this.channels[escape(raw_name)] =\n   50          new Channel(this.ws, escape(raw_name), this.channels);\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/src/sockjs_action.erl:\n    8  -export([xhr_send/4, jsonp_send/4]).\n    9  % misc\n   10: -export([websocket/3, rawwebsocket/3]).\n   11  \n   12  -include(\"sockjs_internal.hrl\").\n   ..\n   70  \n   71  %% -spec info_test(req(), headers(), service()) -> req().\n   72: info_test(Req, Headers, #service{websocket = Websocket,\n   73                                   cookie_needed = CookieNeeded}) ->\n   74:     I = [{websocket, Websocket},\n   75           {cookie_needed, CookieNeeded},\n   76           {origins, [<<\"*:*\">>]},\n   ..\n  260  %% --------------------------------------------------------------------------\n  261  \n  262: %% -spec websocket(req(), headers(), service()) -> req().\n  263: websocket(Req, Headers, Service) ->\n  264      {_Any, Req1, {R1, R2}} = sockjs_handler:is_valid_ws(Service, Req),\n  265      case {R1, R2} of\n  266          {false, _} ->\n  267              sockjs_http:reply(400, Headers,\n  268:                               \"Can \\\"Upgrade\\\" only to \\\"WebSocket\\\".\", Req1);\n  269          {_, false} ->\n  270              sockjs_http:reply(400, Headers,\n  ...\n  272          {true, true} ->\n  273              sockjs_http:reply(400, Headers,\n  274:                               \"This WebSocket request can't be handled.\", Req1)\n  275      end.\n  276  \n  277: %% -spec rawwebsocket(req(), headers(), service()) -> req().\n  278: rawwebsocket(Req, Headers, Service) ->\n  279:     websocket(Req, Headers, Service).\n  280  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/src/sockjs_cowboy_handler.erl:\n    1  -module(sockjs_cowboy_handler).\n    2  -behaviour(cowboy_http_handler).\n    3: -behaviour(cowboy_http_websocket_handler).\n    4  \n    5  %% Cowboy http callbacks\n    .\n    7  \n    8  %% Cowboy ws callbacks\n    9: -export([websocket_init/3, websocket_handle/3,\n   10:          websocket_info/3, websocket_terminate/3]).\n   11  \n   12  -include(\"sockjs_internal.hrl\").\n   ..\n   17      case sockjs_handler:is_valid_ws(Service, {cowboy, Req}) of\n   18          {true, {cowboy, _Req1}, _Reason} ->\n   19:             {upgrade, protocol, cowboy_http_websocket};\n   20          {false, {cowboy, Req1}, _Reason} ->\n   21              {ok, Req1, Service}\n   ..\n   31  %% --------------------------------------------------------------------------\n   32  \n   33: websocket_init(_TransportName, Req, Service = #service{logger = Logger}) ->\n   34:     Req0 = Logger(Service, {cowboy, Req}, websocket),\n   35  \n   36      Service1 = Service#service{disconnect_delay = 5*60*1000},\n   ..\n   38      {Info, Req1} = sockjs_handler:extract_info(Req0),\n   39      SessionPid = sockjs_session:maybe_create(undefined, Service1, Info),\n   40:     {RawWebsocket, {cowboy, Req3}} =\n   41          case sockjs_handler:get_action(Service, Req1) of\n   42:             {{match, WS}, Req2} when WS =:= websocket orelse\n   43:                                      WS =:= rawwebsocket ->\n   44                  {WS, Req2}\n   45          end,\n   46      self() ! go,\n   47:     {ok, Req3, {RawWebsocket, SessionPid}}.\n   48  \n   49: websocket_handle({text, Data}, Req, {RawWebsocket, SessionPid} = S) ->\n   50:     case sockjs_ws_handler:received(RawWebsocket, SessionPid, Data) of\n   51          ok       -> {ok, Req, S};\n   52          shutdown -> {shutdown, Req, S}\n   53      end;\n   54: websocket_handle(_Unknown, Req, S) ->\n   55      {shutdown, Req, S}.\n   56  \n   57: websocket_info(go, Req, {RawWebsocket, SessionPid} = S) ->\n   58:     case sockjs_ws_handler:reply(RawWebsocket, SessionPid) of\n   59          wait          -> {ok, Req, S};\n   60          {ok, Data}    -> self() ! go,\n   ..\n   64                           {reply, {text, Data}, Req, S}\n   65      end;\n   66: websocket_info(shutdown, Req, S) ->\n   67      {shutdown, Req, S}.\n   68  \n   69: websocket_terminate(_Reason, _Req, {RawWebsocket, SessionPid}) ->\n   70:     sockjs_ws_handler:close(RawWebsocket, SessionPid),\n   71      ok.\n   72  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/src/sockjs_handler.erl:\n   19               sockjs_url =\n   20                   proplists:get_value(sockjs_url, Options, ?SOCKJS_URL),\n   21:              websocket =\n   22:                  proplists:get_value(websocket, Options, true),\n   23               cookie_needed =\n   24                   proplists:get_value(cookie_needed, Options, false),\n   ..\n   38  is_valid_ws(Service, Req) ->\n   39      case get_action(Service, Req) of\n   40:         {{match, WS}, Req1} when WS =:= websocket orelse\n   41:                                  WS =:= rawwebsocket ->\n   42              valid_ws_request(Service, Req1);\n   43          {_Else, Req1} ->\n   ..\n   57          {V, Req2} ->\n   58              case string:to_lower(V) of\n   59:                 \"websocket\" ->\n   60                      {true, Req2};\n   61                  _Else ->\n   ..\n  132  filters() ->\n  133      OptsFilters = [h_sid, xhr_cors, cache_for, xhr_options_post],\n  134:     %% websocket does not actually go via handle_req/3 but we need\n  135      %% something in dispatch/2\n  136:     [{t(\"/websocket\"),               [{'GET',     none, websocket,      []}]},\n  137       {t(\"/xhr_send\"),                [{'POST',    recv, xhr_send,       [h_sid, h_no_cache, xhr_cors]},\n  138                                        {'OPTIONS', none, options,        OptsFilters}]},\n  ...\n  145       {t(\"/eventsource\"),             [{'GET',     send, eventsource,    [h_sid, h_no_cache]}]},\n  146       {t(\"/htmlfile\"),                [{'GET',     send, htmlfile,       [h_sid, h_no_cache]}]},\n  147:      {p(\"/websocket\"),               [{'GET',     none, rawwebsocket,   []}]},\n  148       {p(\"\"),                         [{'GET',     none, welcome_screen, []}]},\n  149       {p(\"/iframe[0-9-.a-z_]*.html\"), [{'GET',     none, iframe,         [cache_for]}]},\n  ...\n  203  %% --------------------------------------------------------------------------\n  204  \n  205: %% -spec default_logger(service(), req(), websocket | http) -> req().\n  206  default_logger(_Service, Req, _Type) ->\n  207      {LongPath, Req1} = sockjs_http:path(Req),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/src/sockjs_http.erl:\n  110          {error, _E} -> {error, R}\n  111                        %% This shouldn't happen too often, usually we\n  112:                       %% should catch tco socket closure before.\n  113      end.\n  114  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/src/sockjs_internal.hrl:\n    5  %% -type(emittable()    :: init|closed|{recv, binary()}).\n    6  %% -type(callback()     :: fun((user_session(), emittable(), any()) -> ok)).\n    7: %% -type(logger()       :: fun((any(), req(), websocket|http) -> req())).\n    8  \n    9  -record(service, {prefix           , %%  nonempty_string(),\n   ..\n   12                    sockjs_url       , %%  nonempty_string()\n   13                    cookie_needed    , %%  boolean()\n   14:                   websocket        , %%  boolean()\n   15                    disconnect_delay , %%  non_neg_integer()\n   16                    heartbeat_delay  , %%  non_neg_integer()\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/src/sockjs_session.erl:\n  283  \n  284  handle_info(force_shutdown, State) ->\n  285:     %% Websockets may want to force closure sometimes\n  286      {stop, normal, State};\n  287  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/sockjs-erlang-wrapper/sockjs-erlang-git/src/sockjs_ws_handler.erl:\n    7  %% --------------------------------------------------------------------------\n    8  \n    9: %% -spec received(websocket|rawwebsocket, pid(), binary()) -> ok | shutdown.\n   10  %% Ignore empty\n   11: received(_RawWebsocket, _SessionPid, <<>>) ->\n   12      ok;\n   13: received(websocket, SessionPid, Data) ->\n   14      case sockjs_json:decode(Data) of\n   15          {ok, Msg} when is_binary(Msg) ->\n   ..\n   21      end;\n   22  \n   23: received(rawwebsocket, SessionPid, Data) ->\n   24      session_received([Data], SessionPid).\n   25  \n   ..\n   31      end.\n   32  \n   33: %% -spec reply(websocket|rawwebsocket, pid()) -> {close|open, binary()} | wait.\n   34: reply(websocket, SessionPid) ->\n   35      case sockjs_session:reply(SessionPid) of\n   36          {W, Frame} when W =:= ok orelse W =:= close->\n   ..\n   40              wait\n   41      end;\n   42: reply(rawwebsocket, SessionPid) ->\n   43      case sockjs_session:reply(SessionPid, false) of\n   44          {W, Frame} when W =:= ok orelse W =:= close->\n   45              case Frame of\n   46:                 {open, nil}               -> reply(rawwebsocket, SessionPid);\n   47                  {close, {_Code, _Reason}} -> {close, <<>>};\n   48                  {data, [Msg]}             -> {ok, iolist_to_binary(Msg)};\n   49:                 {heartbeat, nil}          -> reply(rawwebsocket, SessionPid)\n   50              end;\n   51          wait ->\n   ..\n   53      end.\n   54  \n   55: %% -spec close(websocket|rawwebsocket, pid()) -> ok.\n   56: close(_RawWebsocket, SessionPid) ->\n   57      SessionPid ! force_shutdown,\n   58      ok.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/webmachine-wrapper/webmachine-git/include/wm_reqstate.hrl:\n    1: -record(wm_reqstate, {socket=undefined,\n    2                     metadata=orddict:new(),\n    3                     range=undefined,\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/webmachine-wrapper/webmachine-git/priv/templates/src/wmskel_sup.erl:\n   57      Web = {webmachine_mochiweb,\n   58             {webmachine_mochiweb, start, [WebConfig]},\n   59:            permanent, 5000, worker, [mochiweb_socket_server]},\n   60      Processes = [Web],\n   61      {ok, { {one_for_one, 10, 10}, Processes} }.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/webmachine-wrapper/webmachine-git/src/webmachine.erl:\n   51              {Request:get(headers), Request:get(raw_path)}\n   52      end,\n   53:     Socket = Request:get(socket),\n   54:     InitState = #wm_reqstate{socket=Socket,\n   55                            reqdata=wrq:create(Method,Scheme,Version,RawPath,Headers)},\n   56  \n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/webmachine-wrapper/webmachine-git/src/webmachine_request.erl:\n   51           get_reqdata/1,\n   52           set_reqdata/2,\n   53:          socket/1,\n   54           method/1,\n   55           version/1,\n   ..\n  117      case ReqState#wm_reqstate.peer of\n  118      undefined ->\n  119:         PeerName = case ReqState#wm_reqstate.socket of\n  120              testing -> {ok, {{127,0,0,1}, 80}};\n  121:             {ssl,SslSocket} -> ssl:peername(SslSocket);\n  122:             _ -> inet:peername(ReqState#wm_reqstate.socket)\n  123          end,\n  124          Peer = peer_from_peername(PeerName, Req),\n  ...\n  153  call(base_uri, {?MODULE, ReqState}) ->\n  154      {wrq:base_uri(ReqState#wm_reqstate.reqdata), ReqState};\n  155: call(socket, {?MODULE, ReqState}) -> {ReqState#wm_reqstate.socket,ReqState};\n  156  call(get_reqdata, {?MODULE, ReqState}) -> {ReqState#wm_reqstate.reqdata, ReqState};\n  157  call({set_reqdata, RD}, {?MODULE, ReqState}) ->\n  ...\n  305      get_outheader_value(K, {?MODULE, ReqState}).\n  306  \n  307: send(Socket, Data) ->\n  308:     case mochiweb_socket:send(Socket, iolist_to_binary(Data)) of\n  309          ok -> ok;\n  310          {error,closed} -> ok;\n  ...\n  312      end.\n  313  \n  314: send_stream_body(Socket, X) -> send_stream_body(Socket, X, 0).\n  315: send_stream_body(Socket, {<<>>, done}, SoFar) ->\n  316:     send_chunk(Socket, <<>>),\n  317      SoFar;\n  318: send_stream_body(Socket, {Data, done}, SoFar) ->\n  319:     Size = send_chunk(Socket, Data),\n  320:     send_chunk(Socket, <<>>),\n  321      Size + SoFar;\n  322: send_stream_body(Socket, {<<>>, Next}, SoFar) ->\n  323:     send_stream_body(Socket, Next(), SoFar);\n  324: send_stream_body(Socket, {[], Next}, SoFar) ->\n  325:     send_stream_body(Socket, Next(), SoFar);\n  326: send_stream_body(Socket, {Data, Next}, SoFar) ->\n  327:     Size = send_chunk(Socket, Data),\n  328:     send_stream_body(Socket, Next(), Size + SoFar).\n  329  \n  330: send_stream_body_no_chunk(Socket, {Data, done}) ->\n  331:     send(Socket, Data);\n  332: send_stream_body_no_chunk(Socket, {Data, Next}) ->\n  333:     send(Socket, Data),\n  334:     send_stream_body_no_chunk(Socket, Next()).\n  335  \n  336: send_writer_body(Socket, {Encoder, Charsetter, BodyFun}) ->\n  337      put(bytes_written, 0),\n  338      Writer = fun(Data) ->\n  339:         Size = send_chunk(Socket, Encoder(Charsetter(Data))),\n  340          put(bytes_written, get(bytes_written) + Size),\n  341          Size\n  342      end,\n  343      BodyFun(Writer),\n  344:     send_chunk(Socket, <<>>),\n  345      get(bytes_written).\n  346  \n  347: send_chunk(Socket, Data) ->\n  348      Size = iolist_size(Data),\n  349:     send(Socket, [mochihex:to_hex(Size), <<\"\\r\\n\">>, Data, <<\"\\r\\n\">>]),\n  350      Size.\n  351  \n  ...\n  385          _ -> {Body0, iolist_size([Body0])}\n  386      end,\n  387:     send(PassedState#wm_reqstate.socket,\n  388           [make_version(wrq:version(RD)),\n  389            make_code(Code), <<\"\\r\\n\">> |\n  ...\n  394              case Body of\n  395                  {stream, Body2} ->\n  396:                     send_stream_body(PassedState#wm_reqstate.socket, Body2);\n  397                  {known_length_stream, Body2} ->\n  398:                     send_stream_body_no_chunk(PassedState#wm_reqstate.socket, Body2),\n  399                      Length;\n  400                  {writer, Body2} ->\n  401:                     send_writer_body(PassedState#wm_reqstate.socket, Body2);\n  402                  _ ->\n  403:                     send(PassedState#wm_reqstate.socket, Body),\n  404                      Length\n  405              end\n  ...\n  450      case get_header_value(\"expect\", PassedState) of\n  451          {\"100-continue\", _} ->\n  452:             send(PassedState#wm_reqstate.socket,\n  453                   [make_version(wrq:version(RD)),\n  454                    make_code(100), <<\"\\r\\n\\r\\n\">>]);\n  ...\n  460          undefined -> {<<>>, done};\n  461          0 -> {<<>>, done};\n  462:         chunked -> recv_chunked_body(PassedState#wm_reqstate.socket,\n  463                                       MaxHunkSize);\n  464:         Length -> recv_unchunked_body(PassedState#wm_reqstate.socket,\n  465                                        MaxHunkSize, Length)\n  466      end.\n  467  \n  468: recv_unchunked_body(Socket, MaxHunk, DataLeft) ->\n  469      case MaxHunk >= DataLeft of\n  470          true ->\n  471:             {ok,Data1} = mochiweb_socket:recv(Socket,DataLeft,?IDLE_TIMEOUT),\n  472              {Data1, done};\n  473          false ->\n  474:             {ok,Data2} = mochiweb_socket:recv(Socket,MaxHunk,?IDLE_TIMEOUT),\n  475              {Data2,\n  476:              fun() -> recv_unchunked_body(Socket, MaxHunk, DataLeft-MaxHunk)\n  477               end}\n  478      end.\n  479  \n  480: recv_chunked_body(Socket, MaxHunk) ->\n  481:     case read_chunk_length(Socket, false) of\n  482          0 -> {<<>>, done};\n  483:         ChunkLength -> recv_chunked_body(Socket,MaxHunk,ChunkLength)\n  484      end.\n  485: recv_chunked_body(Socket, MaxHunk, LeftInChunk) ->\n  486      case MaxHunk >= LeftInChunk of\n  487          true ->\n  488:             {ok,Data1} = mochiweb_socket:recv(Socket,LeftInChunk,?IDLE_TIMEOUT),\n  489              {Data1,\n  490:              fun() -> recv_chunked_body(Socket, MaxHunk)\n  491               end};\n  492          false ->\n  493:             {ok,Data2} = mochiweb_socket:recv(Socket,MaxHunk,?IDLE_TIMEOUT),\n  494              {Data2,\n  495:              fun() -> recv_chunked_body(Socket, MaxHunk, LeftInChunk-MaxHunk)\n  496               end}\n  497      end.\n  498  \n  499: read_chunk_length(Socket, MaybeLastChunk) ->\n  500:     mochiweb_socket:setopts(Socket, [{packet, line}]),\n  501:     case mochiweb_socket:recv(Socket, 0, ?IDLE_TIMEOUT) of\n  502          {ok, Header} ->\n  503:             mochiweb_socket:setopts(Socket, [{packet, raw}]),\n  504              Splitter = fun (C) ->\n  505                                 C =/= $\\r andalso C =/= $\\n andalso C =/= $\n  ...\n  513                      %% empty instead of '0' explicitly\n  514                      if MaybeLastChunk -> 0;\n  515:                        true -> read_chunk_length(Socket, true)\n  516                      end;\n  517                  _ ->\n  ...\n  745  set_reqdata(RD, Req) -> call({set_reqdata, RD}, Req).\n  746  \n  747: socket(#wm_reqstate{}=ReqState) -> call(socket, {?MODULE, ReqState});\n  748: socket(Req) -> call(socket, Req).\n  749  \n  750  method(#wm_reqstate{}=ReqState) -> call(method, {?MODULE, ReqState});\n  ...\n  950              {ok, S} = gen_tcp:connect({127,0,0,1}, Port, [binary, {active, false}]),\n  951              ReqData = #wm_reqdata{req_headers = mochiweb_headers:make([])},\n  952:             ReqState = #wm_reqstate{socket=S, reqdata=ReqData},\n  953:             ?assertEqual({S, ReqState}, socket(ReqState)),\n  954              {\"127.0.0.1\", NReqState} = get_peer(ReqState),\n  955              ?assertEqual(\"127.0.0.1\", NReqState#wm_reqstate.peer),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/webmachine-wrapper/webmachine-git/test/etag_test.erl:\n   57          {ok, Result} ->\n   58              {ok, Result};\n   59:         {error, socket_closed_remotely} ->\n   60              io:format(user, \"Retry!\\n\", []),\n   61              http_request(Match, IfVals, NewVal, Count-1)\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/webmachine-wrapper/webmachine-git/www/reftrans.html:\n   30  </p>\n   31  <p>\n   32: Note that there is one important exception to this.  The <a href=\"streambody.html\">streamed body feature</a> exists to allow resources to consume or produce request/response bodies a hunk at a time without ever having the whole thing in memory.  While the continuation-passing style used in the streaming API is friendly to general functional analysis, due to the necessary side-effect of reading or writing to sockets the stream bodies cannot be treated in quite the same way as other uses of the <code>ReqData</code> interface.  Luckily, it is easy to inspect a <code>ReqData</code> to see if this is the case in any individual resource or request instance.\n   33  </p>\n   34  		</div>\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/credit_flow.erl:\n   27  %% receiver it will not grant any more credit to its senders when it\n   28  %% is itself blocked - thus the only processes that need to check\n   29: %% blocked/0 are ones that read from network sockets.\n   30  \n   31  -define(DEFAULT_CREDIT, {200, 50}).\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/file_handle_cache.erl:\n   22  %% module. In the below, we use \"file handle\" to specifically refer to\n   23  %% file handles, and \"file descriptor\" to refer to descriptors which\n   24: %% are not file handles, e.g. sockets.\n   25  %%\n   26  %% Some constraints\n   ..\n  134  %% and they are not managed in any way by the server. It is simply a\n  135  %% mechanism to ensure that processes that need file descriptors such\n  136: %% as sockets can do so in such a way that the overall number of open\n  137  %% file descriptors is managed.\n  138  %%\n  ...\n  268  \n  269  %%----------------------------------------------------------------------------\n  270: -define(INFO_KEYS, [total_limit, total_used, sockets_limit, sockets_used]).\n  271  \n  272  %%----------------------------------------------------------------------------\n  ...\n  813  i(total_limit,   #fhc_state{limit        = Limit})               -> Limit;\n  814  i(total_used,    #fhc_state{open_count = C1, obtain_count = C2}) -> C1 + C2;\n  815: i(sockets_limit, #fhc_state{obtain_limit = Limit})               -> Limit;\n  816: i(sockets_used,  #fhc_state{obtain_count = Count})               -> Count;\n  817  i(Item, _) -> throw({bad_argument, Item}).\n  818  \n  ...\n  833              end,\n  834      ObtainLimit = obtain_limit(Limit),\n  835:     error_logger:info_msg(\"Limiting to approx ~p file handles (~p sockets)~n\",\n  836                            [Limit, ObtainLimit]),\n  837      Clients = ets:new(?CLIENT_ETS_TABLE, [set, private, {keypos, #cstate.pid}]),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_auth_mechanism.erl:\n   22  -callback description() -> [proplists:property()].\n   23  \n   24: %% If this mechanism is enabled, should it be offered for a given socket?\n   25  %% (primarily so EXTERNAL can be SSL-only)\n   26: -callback should_offer(rabbit_net:socket()) -> boolean().\n   27  \n   28  %% Called before authentication starts. Should create a state\n   29  %% object to be passed through all the stages of authentication.\n   30: -callback init(rabbit_net:socket()) -> any().\n   31  \n   32  %% Handle a stage of authentication. Possible responses:\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_channel_sup.erl:\n   32  \n   33  -type(start_link_args() ::\n   34:         {'tcp', rabbit_net:socket(), rabbit_channel:channel_number(),\n   35           non_neg_integer(), pid(), string(), rabbit_types:protocol(),\n   36           rabbit_types:user(), rabbit_types:vhost(), rabbit_framing:amqp_table(),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_heartbeat.erl:\n   36  \n   37  -spec(start/6 ::\n   38:         (pid(), rabbit_net:socket(),\n   39           non_neg_integer(), heartbeat_callback(),\n   40           non_neg_integer(), heartbeat_callback()) -> heartbeaters()).\n   41  \n   42  -spec(start_heartbeat_sender/3 ::\n   43:         (rabbit_net:socket(), non_neg_integer(), heartbeat_callback()) ->\n   44                                         rabbit_types:ok(pid())).\n   45  -spec(start_heartbeat_receiver/3 ::\n   46:         (rabbit_net:socket(), non_neg_integer(), heartbeat_callback()) ->\n   47                                           rabbit_types:ok(pid())).\n   48  \n   ..\n  143                      end;\n  144                  {error, einval} ->\n  145:                     %% the socket is dead, most likely because the\n  146                      %% connection is being shut down -> terminate\n  147                      ok;\n  148                  {error, Reason} ->\n  149:                     exit({cannot_get_socket_stats, Reason})\n  150              end\n  151      end.\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_net.erl:\n   21           recv/1, sync_recv/2, async_recv/3, port_command/2, getopts/2,\n   22           setopts/2, send/2, close/1, fast_close/1, sockname/1, peername/1,\n   23:          peercert/1, connection_string/2, socket_ends/2]).\n   24  \n   25  %%---------------------------------------------------------------------------\n   ..\n   27  -ifdef(use_specs).\n   28  \n   29: -export_type([socket/0]).\n   30  \n   31  -type(stat_option() ::\n   ..\n   34  -type(ok_val_or_error(A) :: rabbit_types:ok_or_error2(A, any())).\n   35  -type(ok_or_any_error() :: rabbit_types:ok_or_error(any())).\n   36: -type(socket() :: port() | #ssl_socket{}).\n   37  -type(opts() :: [{atom(), any()} |\n   38                   {raw, non_neg_integer(), non_neg_integer(), binary()}]).\n   39  -type(host_or_ip() :: binary() | inet:ip_address()).\n   40: -spec(is_ssl/1 :: (socket()) -> boolean()).\n   41: -spec(ssl_info/1 :: (socket())\n   42                      -> 'nossl' | ok_val_or_error(\n   43                                     {atom(), {atom(), atom(), atom()}})).\n   44: -spec(controlling_process/2 :: (socket(), pid()) -> ok_or_any_error()).\n   45  -spec(getstat/2 ::\n   46:         (socket(), [stat_option()])\n   47          -> ok_val_or_error([{stat_option(), integer()}])).\n   48: -spec(recv/1 :: (socket()) ->\n   49                       {'data', [char()] | binary()} | 'closed' |\n   50                       rabbit_types:error(any()) | {'other', any()}).\n   51: -spec(sync_recv/2 :: (socket(), integer()) -> rabbit_types:ok(binary()) |\n   52                                                rabbit_types:error(any())).\n   53  -spec(async_recv/3 ::\n   54:         (socket(), integer(), timeout()) -> rabbit_types:ok(any())).\n   55: -spec(port_command/2 :: (socket(), iolist()) -> 'true').\n   56: -spec(getopts/2 :: (socket(), [atom() | {raw,\n   57                                           non_neg_integer(),\n   58                                           non_neg_integer(),\n   59                                           non_neg_integer() | binary()}])\n   60                     -> ok_val_or_error(opts())).\n   61: -spec(setopts/2 :: (socket(), opts()) -> ok_or_any_error()).\n   62: -spec(send/2 :: (socket(), binary() | iolist()) -> ok_or_any_error()).\n   63: -spec(close/1 :: (socket()) -> ok_or_any_error()).\n   64: -spec(fast_close/1 :: (socket()) -> ok_or_any_error()).\n   65  -spec(sockname/1 ::\n   66:         (socket())\n   67          -> ok_val_or_error({inet:ip_address(), rabbit_networking:ip_port()})).\n   68  -spec(peername/1 ::\n   69:         (socket())\n   70          -> ok_val_or_error({inet:ip_address(), rabbit_networking:ip_port()})).\n   71  -spec(peercert/1 ::\n   72:         (socket())\n   73          -> 'nossl' | ok_val_or_error(rabbit_ssl:certificate())).\n   74  -spec(connection_string/2 ::\n   75:         (socket(), 'inbound' | 'outbound') -> ok_val_or_error(string())).\n   76: -spec(socket_ends/2 ::\n   77:         (socket(), 'inbound' | 'outbound')\n   78          -> ok_val_or_error({host_or_ip(), rabbit_networking:ip_port(),\n   79                              host_or_ip(), rabbit_networking:ip_port()})).\n   ..\n   85  -define(SSL_CLOSE_TIMEOUT, 5000).\n   86  \n   87: -define(IS_SSL(Sock), is_record(Sock, ssl_socket)).\n   88  \n   89  is_ssl(Sock) -> ?IS_SSL(Sock).\n   90  \n   91  ssl_info(Sock) when ?IS_SSL(Sock) ->\n   92:     ssl:connection_info(Sock#ssl_socket.ssl);\n   93  ssl_info(_Sock) ->\n   94      nossl.\n   95  \n   96  controlling_process(Sock, Pid) when ?IS_SSL(Sock) ->\n   97:     ssl:controlling_process(Sock#ssl_socket.ssl, Pid);\n   98  controlling_process(Sock, Pid) when is_port(Sock) ->\n   99      gen_tcp:controlling_process(Sock, Pid).\n  100  \n  101  getstat(Sock, Stats) when ?IS_SSL(Sock) ->\n  102:     inet:getstat(Sock#ssl_socket.tcp, Stats);\n  103  getstat(Sock, Stats) when is_port(Sock) ->\n  104      inet:getstat(Sock, Stats).\n  105  \n  106  recv(Sock) when ?IS_SSL(Sock) ->\n  107:     recv(Sock#ssl_socket.ssl, {ssl, ssl_closed, ssl_error});\n  108  recv(Sock) when is_port(Sock) ->\n  109      recv(Sock, {tcp, tcp_closed, tcp_error}).\n  ...\n  118  \n  119  sync_recv(Sock, Length) when ?IS_SSL(Sock) ->\n  120:     ssl:recv(Sock#ssl_socket.ssl, Length);\n  121  sync_recv(Sock, Length) ->\n  122      gen_tcp:recv(Sock, Length).\n  ...\n  127  \n  128      spawn(fun () -> Pid ! {inet_async, Sock, Ref,\n  129:                            ssl:recv(Sock#ssl_socket.ssl, Length, Timeout)}\n  130            end),\n  131  \n  ...\n  137  \n  138  port_command(Sock, Data) when ?IS_SSL(Sock) ->\n  139:     case ssl:send(Sock#ssl_socket.ssl, Data) of\n  140          ok              -> self() ! {inet_reply, Sock, ok},\n  141                             true;\n  ...\n  146  \n  147  getopts(Sock, Options) when ?IS_SSL(Sock) ->\n  148:     ssl:getopts(Sock#ssl_socket.ssl, Options);\n  149  getopts(Sock, Options) when is_port(Sock) ->\n  150      inet:getopts(Sock, Options).\n  151  \n  152  setopts(Sock, Options) when ?IS_SSL(Sock) ->\n  153:     ssl:setopts(Sock#ssl_socket.ssl, Options);\n  154  setopts(Sock, Options) when is_port(Sock) ->\n  155      inet:setopts(Sock, Options).\n  156  \n  157: send(Sock, Data) when ?IS_SSL(Sock) -> ssl:send(Sock#ssl_socket.ssl, Data);\n  158  send(Sock, Data) when is_port(Sock) -> gen_tcp:send(Sock, Data).\n  159  \n  160: close(Sock)      when ?IS_SSL(Sock) -> ssl:close(Sock#ssl_socket.ssl);\n  161  close(Sock)      when is_port(Sock) -> gen_tcp:close(Sock).\n  162  \n  163  fast_close(Sock) when ?IS_SSL(Sock) ->\n  164:     %% We cannot simply port_close the underlying tcp socket since the\n  165      %% TLS protocol is quite insistent that a proper closing handshake\n  166      %% should take place (see RFC 5245 s7.2.1). So we call ssl:close\n  ...\n  169      %% or the ssl_connection process has entered the the\n  170      %% workaround_transport_delivery_problems function during\n  171:     %% termination, which, inexplicably, does a gen_tcp:recv(Socket,\n  172      %% 0), which may never return if the client doesn't send a FIN or\n  173      %% that gets swallowed by the network. Since there is no timeout\n  174      %% variant of ssl:close, we construct our own.\n  175:     {Pid, MRef} = spawn_monitor(fun () -> ssl:close(Sock#ssl_socket.ssl) end),\n  176      erlang:send_after(?SSL_CLOSE_TIMEOUT, self(), {Pid, ssl_close_timeout}),\n  177      receive\n  ...\n  182              ok\n  183      end,\n  184:     catch port_close(Sock#ssl_socket.tcp),\n  185      ok;\n  186  fast_close(Sock) when is_port(Sock) ->\n  187      catch port_close(Sock), ok.\n  188  \n  189: sockname(Sock)   when ?IS_SSL(Sock) -> ssl:sockname(Sock#ssl_socket.ssl);\n  190  sockname(Sock)   when is_port(Sock) -> inet:sockname(Sock).\n  191  \n  192: peername(Sock)   when ?IS_SSL(Sock) -> ssl:peername(Sock#ssl_socket.ssl);\n  193  peername(Sock)   when is_port(Sock) -> inet:peername(Sock).\n  194  \n  195: peercert(Sock)   when ?IS_SSL(Sock) -> ssl:peercert(Sock#ssl_socket.ssl);\n  196  peercert(Sock)   when is_port(Sock) -> nossl.\n  197  \n  198  connection_string(Sock, Direction) ->\n  199:     case socket_ends(Sock, Direction) of\n  200          {ok, {FromAddress, FromPort, ToAddress, ToPort}} ->\n  201              {ok, rabbit_misc:format(\n  ...\n  207      end.\n  208  \n  209: socket_ends(Sock, Direction) ->\n  210      {From, To} = sock_funs(Direction),\n  211      case {From(Sock), To(Sock)} of\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_networking.erl:\n   91  -spec(ssl_transform_fun/1 ::\n   92          (rabbit_types:infos())\n   93:         -> fun ((rabbit_net:socket())\n   94:                 -> rabbit_types:ok_or_error(#ssl_socket{}))).\n   95  \n   96  -spec(boot/0 :: () -> 'ok').\n   97  -spec(start_client/1 ::\n   98: 	(port() | #ssl_socket{ssl::{'sslsocket',_,_}}) ->\n   99  			     atom() | pid() | port() | {atom(),atom()}).\n  100  -spec(start_ssl_client/2 ::\n  101: 	(_,port() | #ssl_socket{ssl::{'sslsocket',_,_}}) ->\n  102  				 atom() | pid() | port() | {atom(),atom()}).\n  103  -spec(tcp_listener_started/3 ::\n  ...\n  172              case catch ssl:ssl_accept(Sock, SslOpts, ?SSL_TIMEOUT * 1000) of\n  173                  {ok, SslSock} ->\n  174:                     {ok, #ssl_socket{tcp = Sock, ssl = SslSock}};\n  175                  {error, timeout} ->\n  176                      {error, {ssl_upgrade_error, timeout}};\n  ...\n  180                      %% going, it might be stuck, or it could be just\n  181                      %% about to fail. There is little that our caller\n  182:                     %% can do but close the TCP socket, but this could\n  183                      %% cause ssl alerts to get dropped (which is bad\n  184                      %% form, according to the TLS spec). So we give\n  ...\n  212                       Listener <- port_to_listeners(Port)]).\n  213  \n  214: tcp_listener_spec(NamePrefix, {IPAddress, Port, Family}, SocketOpts,\n  215                    Protocol, Label, OnConnect) ->\n  216      {rabbit_misc:tcp_name(NamePrefix, IPAddress, Port),\n  217       {tcp_listener_sup, start_link,\n  218:       [IPAddress, Port, [Family | SocketOpts],\n  219         {?MODULE, tcp_listener_started, [Protocol]},\n  220         {?MODULE, tcp_listener_stopped, [Protocol]},\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_reader.erl:\n   87  -spec(init/2 :: (pid(), pid()) -> no_return()).\n   88  -spec(start_connection/5 ::\n   89:         (pid(), pid(), any(), rabbit_net:socket(),\n   90:          fun ((rabbit_net:socket()) ->\n   91                       rabbit_types:ok_or_error2(\n   92:                        rabbit_net:socket(), any()))) -> no_return()).\n   93  \n   94  -spec(mainloop/2 :: (_,#v1{}) -> any()).\n   ..\n  184  log(Level, Fmt, Args) -> rabbit_log:log(connection, Level, Fmt, Args).\n  185  \n  186: socket_error(Reason) ->\n  187      log(error, \"error on AMQP connection ~p: ~p (~s)~n\",\n  188          [self(), Reason, rabbit_misc:format_inet_error(Reason)]).\n  ...\n  190  inet_op(F) -> rabbit_misc:throw_on_error(inet_error, F).\n  191  \n  192: socket_op(Sock, Fun) ->\n  193      case Fun(Sock) of\n  194          {ok, Res}       -> Res;\n  195:         {error, Reason} -> socket_error(Reason),\n  196:                            %% NB: this is tcp socket, even in case of ssl\n  197                             rabbit_net:fast_close(Sock),\n  198                             exit(normal)\n  ...\n  205                 {error, enotconn} -> rabbit_net:fast_close(Sock),\n  206                                      exit(normal);\n  207:                {error, Reason}   -> socket_error(Reason),\n  208                                      rabbit_net:fast_close(Sock),\n  209                                      exit(normal)\n  210             end,\n  211      log(info, \"accepting AMQP connection ~p (~s)~n\", [self(), Name]),\n  212:     ClientSock = socket_op(Sock, SockTransform),\n  213      erlang:send_after(?HANDSHAKE_TIMEOUT * 1000, self(), handshake_timeout),\n  214      {PeerHost, PeerPort, Host, Port} =\n  215:         socket_op(Sock, fun (S) -> rabbit_net:socket_ends(S, inbound) end),\n  216      State = #v1{parent              = Parent,\n  217                  sock                = ClientSock,\n  ...\n  263          %% delays. We could just terminate - the reader is the\n  264          %% controlling process and hence its termination will close\n  265:         %% the socket. However, to keep the file_handle_cache\n  266          %% accounting as accurate as possible we ought to close the\n  267:         %% socket w/o delay before termination.\n  268          rabbit_net:fast_close(ClientSock),\n  269          rabbit_networking:unregister_connection(self()),\n  ...\n  338      %%\n  339      %% If we wanted to be *really* nice we should wait for a while for\n  340:     %% clients to close the socket at their end, just as we do in the\n  341      %% ordinary error case. However, since this termination is\n  342      %% initiated by our parent it is probably more important to exit\n  ...\n  729  %% * If the server cannot support the protocol specified in the\n  730  %% protocol header, it MUST respond with a valid protocol header and\n  731: %% then close the socket connection.\n  732  %%\n  733  %% * The server MUST provide a protocol version that is lower than or\n  ...\n  790  \n  791  -ifdef(use_specs).\n  792: -spec(refuse_connection/2 :: (rabbit_net:socket(), any()) -> no_return()).\n  793  -endif.\n  794  refuse_connection(Sock, Exception) ->\n  ...\n 1009                                SockStat =:= send_cnt;\n 1010                                SockStat =:= send_pend ->\n 1011:     socket_info(fun (Sock) -> rabbit_net:getstat(Sock, [SockStat]) end,\n 1012                  fun ([{_, I}]) -> I end, S);\n 1013  i(ssl,                #v1{sock = Sock}) -> rabbit_net:is_ssl(Sock);\n ....\n 1045  ic(Item,              #connection{}) -> throw({bad_argument, Item}).\n 1046  \n 1047: socket_info(Get, Select, #v1{sock = Sock}) ->\n 1048      case Get(Sock) of\n 1049          {ok,    T} -> Select(T);\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_tests.erl:\n 1755      %% test copying when there is just one spare handle\n 1756      Limit = file_handle_cache:get_limit(),\n 1757:     ok = file_handle_cache:set_limit(5), %% 1 or 2 sockets, 2 msg_stores\n 1758      TmpDir = filename:join(rabbit_mnesia:dir(), \"tmp\"),\n 1759      ok = filelib:ensure_dir(filename:join(TmpDir, \"nothing\")),\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_writer.erl:\n   43  \n   44  -spec(start/5 ::\n   45:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   46           non_neg_integer(), rabbit_types:protocol(), pid())\n   47          -> rabbit_types:ok(pid())).\n   48  -spec(start_link/5 ::\n   49:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   50           non_neg_integer(), rabbit_types:protocol(), pid())\n   51          -> rabbit_types:ok(pid())).\n   52  -spec(start/6 ::\n   53:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   54           non_neg_integer(), rabbit_types:protocol(), pid(), boolean())\n   55          -> rabbit_types:ok(pid())).\n   56  -spec(start_link/6 ::\n   57:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   58           non_neg_integer(), rabbit_types:protocol(), pid(), boolean())\n   59          -> rabbit_types:ok(pid())).\n   ..\n   87  -spec(flush/1 :: (pid()) -> 'ok').\n   88  -spec(internal_send_command/4 ::\n   89:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   90           rabbit_framing:amqp_method_record(), rabbit_types:protocol())\n   91          -> 'ok').\n   92  -spec(internal_send_command/6 ::\n   93:         (rabbit_net:socket(), rabbit_channel:channel_number(),\n   94           rabbit_framing:amqp_method_record(), rabbit_types:content(),\n   95           non_neg_integer(), rabbit_types:protocol())\n   ..\n  330  %%\n  331  %% This means we may end up happily sending data down a closed/broken\n  332: %% socket, but that's ok since a) data in the buffers will be lost in\n  333  %% any case (so qualitatively we are no worse off than if we used\n  334: %% gen_tcp:send/2), and b) we do detect the changed socket status\n  335  %% eventually, i.e. when we get round to handling the result code.\n  336  %%\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/tcp_acceptor.erl:\n   50              State = #state{callback={M,F,A}, sock=LSock, ref=Ref}) ->\n   51  \n   52:     %% patch up the socket so it looks like one we got from\n   53      %% gen_tcp:accept/1\n   54:     {ok, Mod} = inet_db:lookup_socket(LSock),\n   55:     inet_db:register_socket(Sock, Mod),\n   56  \n   57      %% handle\n   ..\n   76              State=#state{sock=LSock, ref=Ref}) ->\n   77      case Reason of\n   78:         closed       -> {stop, normal, State}; %% listening socket closed\n   79          econnaborted -> accept(State); %% client sent RST before we accepted\n   80          _            -> {stop, {accept_failed, Reason}, State}\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/tcp_listener.erl:\n   41  %%--------------------------------------------------------------------\n   42  \n   43: start_link(IPAddress, Port, SocketOpts,\n   44             ConcurrentAcceptorCount, AcceptorSup,\n   45             OnStartup, OnShutdown, Label) ->\n   46      gen_server:start_link(\n   47:       ?MODULE, {IPAddress, Port, SocketOpts,\n   48                  ConcurrentAcceptorCount, AcceptorSup,\n   49                  OnStartup, OnShutdown, Label}, []).\n   ..\n   51  %%--------------------------------------------------------------------\n   52  \n   53: init({IPAddress, Port, SocketOpts,\n   54        ConcurrentAcceptorCount, AcceptorSup,\n   55        {M,F,A} = OnStartup, OnShutdown, Label}) ->\n   56      process_flag(trap_exit, true),\n   57:     case gen_tcp:listen(Port, SocketOpts ++ [{ip, IPAddress},\n   58                                               {active, false}]) of\n   59          {ok, LSock} ->\n\n/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/tcp_listener_sup.erl:\n   42  %%----------------------------------------------------------------------------\n   43  \n   44: start_link(IPAddress, Port, SocketOpts, OnStartup, OnShutdown,\n   45             AcceptCallback, Label) ->\n   46:     start_link(IPAddress, Port, SocketOpts, OnStartup, OnShutdown,\n   47                 AcceptCallback, 1, Label).\n   48  \n   49: start_link(IPAddress, Port, SocketOpts, OnStartup, OnShutdown,\n   50             AcceptCallback, ConcurrentAcceptorCount, Label) ->\n   51      supervisor:start_link(\n   52:       ?MODULE, {IPAddress, Port, SocketOpts, OnStartup, OnShutdown,\n   53                  AcceptCallback, ConcurrentAcceptorCount, Label}).\n   54  \n   55: init({IPAddress, Port, SocketOpts, OnStartup, OnShutdown,\n   56        AcceptCallback, ConcurrentAcceptorCount, Label}) ->\n   57      %% This is gross. The tcp_listener needs to know about the\n   ..\n   65              transient, infinity, supervisor, [tcp_acceptor_sup]},\n   66             {tcp_listener, {tcp_listener, start_link,\n   67:                            [IPAddress, Port, SocketOpts,\n   68                              ConcurrentAcceptorCount, Name,\n   69                              OnStartup, OnShutdown, Label]},\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/README.md:\n    2  =====\n    3  \n    4: Ranch is a socket acceptor pool for TCP protocols.\n    5  \n    6  Goals\n    .\n   18  \n   19  Ranch also allows you to **upgrade** the acceptor pool without having\n   20: to close any of the currently opened sockets.\n   21  \n   22  Getting started\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/examples/tcp_echo/src/echo_protocol.erl:\n    7  -export([init/4]).\n    8  \n    9: start_link(Ref, Socket, Transport, Opts) ->\n   10: 	Pid = spawn_link(?MODULE, init, [Ref, Socket, Transport, Opts]),\n   11  	{ok, Pid}.\n   12  \n   13: init(Ref, Socket, Transport, _Opts = []) ->\n   14  	ok = ranch:accept_ack(Ref),\n   15: 	loop(Socket, Transport).\n   16  \n   17: loop(Socket, Transport) ->\n   18: 	case Transport:recv(Socket, 0, 5000) of\n   19  		{ok, Data} ->\n   20: 			Transport:send(Socket, Data),\n   21: 			loop(Socket, Transport);\n   22  		_ ->\n   23: 			ok = Transport:close(Socket)\n   24  	end.\n   25  \n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/examples/tcp_reverse/src/reverse_protocol.erl:\n   19  -define(TIMEOUT, 5000).\n   20  \n   21: -record(state, {socket, transport}).\n   22  \n   23  %% API.\n   24  \n   25: start_link(Ref, Socket, Transport, Opts) ->\n   26: 	proc_lib:start_link(?MODULE, init, [Ref, Socket, Transport, Opts]).\n   27  \n   28  %% gen_server.\n   ..\n   32  init([]) -> {ok, undefined}.\n   33  \n   34: init(Ref, Socket, Transport, _Opts = []) ->\n   35  	ok = proc_lib:init_ack({ok, self()}),\n   36  	ok = ranch:accept_ack(Ref),\n   37: 	ok = Transport:setopts(Socket, [{active, once}]),\n   38  	gen_server:enter_loop(?MODULE, [],\n   39: 		#state{socket=Socket, transport=Transport},\n   40  		?TIMEOUT).\n   41  \n   42: handle_info({tcp, Socket, Data}, State=#state{\n   43: 		socket=Socket, transport=Transport}) ->\n   44: 	Transport:setopts(Socket, [{active, once}]),\n   45: 	Transport:send(Socket, reverse_binary(Data)),\n   46  	{noreply, State, ?TIMEOUT};\n   47: handle_info({tcp_closed, _Socket}, State) ->\n   48  	{stop, normal, State};\n   49  handle_info({tcp_error, _, Reason}, State) ->\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/guide/internals.md:\n   41  `ranch_server` gen_server with varying amount of information.\n   42  \n   43: All socket operations, including listening for connections, go through\n   44  transport handlers. Accepted connections are given to the protocol handler.\n   45  Transport handlers are simple callback modules for performing operations on\n   46: sockets. Protocol handlers start a new process, which receives socket\n   47  ownership, with no requirements on how the code should be written inside\n   48  that new process.\n   ..\n   75  ------------------------------\n   76  \n   77: Some socket options are platform-specific and not supported by `inet`.\n   78  They can be of interest because they generally are related to\n   79  optimizations provided by the underlying OS. They can still be enabled\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/guide/introduction.md:\n    5  -------\n    6  \n    7: Ranch is a socket acceptor pool for TCP protocols.\n    8  \n    9  Ranch aims to provide everything you need to accept TCP connections\n   ..\n   15  \n   16  It is assumed the developer already knows Erlang and has some experience\n   17: with socket programming and TCP protocols.\n   18  \n   19  Supported platforms\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/guide/listeners.md:\n    8  for new connections. It manages a pool of acceptor processes, each\n    9  of them indefinitely accepting connections. When it does, it starts\n   10: a new process executing the protocol handler code. All the socket\n   11  programming is abstracted through the user of transport handlers.\n   12  \n   ..\n   84  -------------------------\n   85  \n   86: By default the socket will be set to return `binary` data, with the\n   87  options `{active, false}`, `{packet, raw}`, `{reuseaddr, true}` set.\n   88  These values can't be overriden when starting the listener, but\n   ..\n  115  Some systems limit access to ports below 1024 for security reasons.\n  116  This can easily be identified by an `{error, eacces}` error when trying\n  117: to open a listening socket on such a port.\n  118  \n  119  The methods for listening on privileged ports vary between systems,\n  ...\n  124  solutions is however out of the scope of this guide.\n  125  \n  126: Accepting connections on an existing socket\n  127  -------------------------------------------\n  128  \n  129: If you want to accept connections on an existing socket, you can use the\n  130: `socket` transport option, which should just be the relevant data returned\n  131: from the connect function for the transport or the underlying socket library\n  132  (`gen_tcp:connect`, `ssl:connect`). The accept function will then be\n  133: called on the passed in socket. You should connect the socket in\n  134  `{active, false}` mode, as well.\n  135  \n  136  Note, however, that because of a bug in SSL, you cannot change ownership of an\n  137: SSL listen socket prior to R16. Ranch will catch the error thrown, but the\n  138: owner of the SSL socket will remain as whatever process created the socket.\n  139  However, this will not affect accept behaviour unless the owner process dies,\n  140: in which case the socket is closed. Therefore, to use this feature with SSL\n  141: with an erlang release prior to R16, ensure that the SSL socket is opened in a\n  142  persistant process.\n  143  \n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/guide/parsers.md:\n   12  \n   13  This chapter isn't specifically about Ranch, we assume here that\n   14: you know how to read data from the socket. The data you read and\n   15  the data that hasn't been parsed is saved in a buffer. Every\n   16: time you read from the socket, the data read is appended to the\n   17  buffer. What happens next depends on the kind of protocol. We\n   18  will only cover the first two.\n   ..\n   38  a line break in the buffer and we get it split into two parts,\n   39  the line and the rest of the buffer; or there was no line break\n   40: in the buffer and we need to get more data from the socket.\n   41  \n   42  Next, we need to parse the line. The simplest way is to again\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/guide/protocols.md:\n   14  which defines a single callback, `start_link/4`. This callback is\n   15  responsible for spawning a new process for handling the connection.\n   16: It receives four arguments: the name of the listener, the socket, the\n   17  transport handler being used and the protocol options defined in\n   18  the call to `ranch:start_listener/6`. This callback must\n   ..\n   20  \n   21  The newly started process can then freely initialize itself. However,\n   22: it must call `ranch:accept_ack/1` before doing any socket operation.\n   23: This will ensure the connection process is the owner of the socket.\n   24  It expects the listener's name as argument.\n   25  \n   ..\n   28  ```\n   29  \n   30: If your protocol code requires specific socket options, you should\n   31  set them while initializing your connection process and before\n   32  starting `ranch:accept_ack/1`. You can use `Transport:setopts/2`\n   ..\n   43  -export([init/4]).\n   44  \n   45: start_link(Ref, Socket, Transport, Opts) ->\n   46:     Pid = spawn_link(?MODULE, init, [Ref, Socket, Transport, Opts]),\n   47      {ok, Pid}.\n   48  \n   49: init(Ref, Socket, Transport, _Opts = []) ->\n   50      ok = ranch:accept_ack(Ref),\n   51:     loop(Socket, Transport).\n   52  \n   53: loop(Socket, Transport) ->\n   54:     case Transport:recv(Socket, 0, 5000) of\n   55          {ok, Data} ->\n   56:             Transport:send(Socket, Data),\n   57:             loop(Socket, Transport);\n   58          _ ->\n   59:             ok = Transport:close(Socket)\n   60      end.\n   61  ```\n   ..\n   87  %% Exports of other gen_server callbacks here.\n   88  \n   89: start_link(Ref, Socket, Transport, Opts) ->\n   90:     proc_lib:start_link(?MODULE, init, [Ref, Socket, Transport, Opts]).\n   91  \n   92: init(Ref, Socket, Transport, _Opts = []) ->\n   93      ok = proc_lib:init_ack({ok, self()}),\n   94      %% Perform any required state initialization here.\n   95      ok = ranch:accept_ack(Ref),\n   96:     ok = Transport:setopts(Socket, [{active, once}]),\n   97:     gen_server:enter_loop(?MODULE, [], {state, Socket, Transport}).\n   98  \n   99  %% Other gen_server callbacks here.\n  ...\n  111  %% Exports go here.\n  112  \n  113: init([Ref, Socket, Transport]) ->\n  114:     {ok, {state, Ref, Socket, Transport}, 0}.\n  115  \n  116: handle_info(timeout, State={state, Ref, Socket, Transport}) ->\n  117      ok = ranch:accept_ack(Ref),\n  118:     ok = Transport:setopts(Socket, [{active, once}]),\n  119      {noreply, State};\n  120  %% ...\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/guide/ssl_auth.md:\n  105  \n  106  ``` erlang\n  107: socket_to_issuer_id(Socket) ->\n  108: 	case ssl:peercert(Socket) of\n  109  		{error, no_peercert} ->\n  110  			false;\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/guide/transports.md:\n    5  -------\n    6  \n    7: A transport defines the interface to interact with a socket.\n    8  \n    9  Transports can be used for connecting, listening and accepting\n   10  connections, but also for receiving and sending data. Both\n   11: passive and active mode are supported, although all sockets\n   12  are initialized as passive.\n   13  \n   ..\n   37  and SSL accepts. Errors occurring during the SSL accept phase\n   38  are returned as `{error, {ssl_accept, atom()}}` to differentiate\n   39: on which socket the problem occurred.\n   40  \n   41  Sending and receiving data\n   ..\n   43  \n   44  This section assumes that `Transport` is a valid transport handler\n   45: (like `ranch_tcp` or `ranch_ssl`) and `Socket` is a connected\n   46: socket obtained through the listener.\n   47  \n   48: You can send data to a socket by calling the `Transport:send/2`\n   49  function. The data can be given as `iodata()`, which is defined as\n   50  `binary() | iolist()`. All the following calls will work:\n   51  \n   52  ``` erlang\n   53: Transport:send(Socket, <<\"Ranch is cool!\">>).\n   54: Transport:send(Socket, \"Ranch is cool!\").\n   55: Transport:send(Socket, [\"Ranch\", [\"is\", \"cool!\"]]).\n   56: Transport:send(Socket, [\"Ranch\", [<<\"is\">>, \"cool!\"]]).\n   57  ```\n   58  \n   ..\n   66  \n   67  Receiving data using passive mode requires a single function call. The\n   68: first argument is the socket, and the third argument is a timeout duration\n   69  before the call returns with `{error, timeout}`.\n   70  \n   ..\n   75  \n   76  ``` erlang\n   77: {ok, Data} = Transport:recv(Socket, 0, 5000).\n   78  ```\n   79  \n   80: Active mode requires you to inform the socket that you want to receive\n   81  data as a message and to write the code to actually receive it.\n   82  \n   ..\n   85  back to passive mode; the second will send messages indefinitely.\n   86  We recommend not using the `{active, true}` mode as it could quickly\n   87: flood your process mailbox. It's better to keep the data in the socket\n   88  and read it only when required.\n   89  \n   90  Three different messages can be received:\n   91:  *  `{OK, Socket, Data}`\n   92:  *  `{Closed, Socket}`\n   93:  *  `{Error, Socket, Reason}`\n   94  \n   95  The value of `OK`, `Closed` and `Error` can be different\n   ..\n  106  ``` erlang\n  107  {OK, Closed, Error} = Transport:messages(),\n  108: Transport:setopts(Socket, [{active, once}]),\n  109  receive\n  110:     {OK, Socket, Data} ->\n  111          io:format(\"data received: ~p~n\", [Data]);\n  112:     {Closed, Socket} ->\n  113:         io:format(\"socket got closed!~n\");\n  114:     {Error, Socket, Reason} ->\n  115          io:format(\"error happened: ~p~n\", [Reason])\n  116  end.\n  117  ```\n  118  \n  119: You can easily integrate active sockets with existing Erlang code as all\n  120  you really need is just a few more clauses when receiving messages.\n  121  \n  ...\n  124  \n  125  As in the previous section it is assumed `Transport` is a valid transport\n  126: handler and `Socket` is a connected socket obtained through the listener.\n  127  \n  128: To send a whole file, with name `Filename`, over a socket:\n  129  \n  130  ```erlang\n  131: {ok, SentBytes} = Transport:sendfile(Socket, Filename).\n  132  ```\n  133  \n  ...\n  137  ```erlang\n  138  Opts = [{chunk_size, ChunkSize}],\n  139: {ok, SentBytes} = Transport:sendfile(Socket, Filename, Offset, Bytes, Opts).\n  140  ```\n  141  \n  ...\n  145  ```erlang\n  146  {ok, RawFile} = file:open(Filename, [raw, read, binary]),\n  147: {ok, SentBytes} = Transport:sendfile(Socket, RawFile, Offset, Bytes, Opts).\n  148  ```\n  149  \n  ...\n  155  allow transparent usage of the transport handler.\n  156  \n  157: The behavior doesn't define the socket options available when opening a\n  158: socket. These do not need to be common to all transports as it's easy enough\n  159  to write different initialization functions for the different transports that\n  160  will be used. With one exception though. The `setopts/2` function *must*\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/manual/ranch.md:\n   34  > This function MUST be used by a connection process to inform\n   35  > Ranch that it initialized properly and let it perform any\n   36: > additional operations before the socket can be safely used.\n   37  \n   38  ### child_spec(Ref, NbAcceptors, Transport, TransOpts, Protocol, ProtoOpts)\n   ..\n  130  > regardless of transport. They allow configuring how the\n  131  > connections are supervised, rate limited and allow using\n  132: > an already open listening socket.\n  133  >\n  134: > The `ack_timeout` option defines how long post-accept socket\n  135  > initialization should take at a maximum. It defaults to `5000`.\n  136  >\n  ...\n  151  > children, or the atom `brutal_kill`. It defaults to `5000`.\n  152  >\n  153: > The `socket` option allow passing an already open listening\n  154: > socket. In this case, Ranch will not call `Transport:listen/1`\n  155  > and so none of the transport specific options apply.\n  156  \n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/manual/ranch_app.md:\n    2  =====================\n    3  \n    4: Socket acceptor pool for TCP protocols.\n    5  \n    6  Dependencies\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/manual/ranch_protocol.md:\n   13  ---------\n   14  \n   15: ### start_link(Ref, Socket, Transport, ProtoOpts) -> {ok, pid()}\n   16  \n   17  > Types:\n   18  >  *  Ref = ranch:ref()\n   19: >  *  Socket = any()\n   20  >  *  Transport = module()\n   21  >  *  ProtoOpts = any()\n   22  >\n   23: > Start a new connection process for the given socket.\n   24  >\n   25  > The only purpose of this callback is to start a process that\n   26: > will handle the socket. It must spawn the process, link and\n   27  > then return the new pid. This function will always be called\n   28  > from inside a supervisor.\n   29  >\n   30  > If any other value is returned, the supervisor will close the\n   31: > socket and assume no process has been started.\n   32  >\n   33  > Do not perform any operation in this callback, as this would\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/manual/ranch_ssl.md:\n   38  >\n   39  > This does not represent the entirety of the options that can\n   40: > be set on the socket, but only the options that should be\n   41  > set independently of protocol implementation.\n   42  \n   ..\n   64     -  Whether to refuse the connection if the client sends an empty certificate.\n   65   -  hibernate_after (undefined)\n   66:    -  Time in ms after which SSL socket processes go into hibernation to reduce memory usage.\n   67   -  honor_cipher_order (false)\n   68     -  If true, use the server's preference for cipher selection. If false (the default), use the client's preference.\n   ..\n   74     -  Path to the PEM encoded private key file, if different than the certfile.\n   75   -  linger ({false, 0})\n   76:    -  Whether to wait and how long to flush data sent before closing the socket.\n   77   -  log_alert (true)\n   78     -  If false, error reports will not be displayed.\n   ..\n   94     -  How long the send call may wait for confirmation before returning.\n   95   -  send_timeout_close (true)\n   96:    -  Whether to close the socket when the confirmation wasn't received.\n   97   -  verify (verify_none)\n   98     -  Use `verify_peer` to request a certificate from the client.\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/manual/ranch_tcp.md:\n   24  >\n   25  > This does not represent the entirety of the options that can\n   26: > be set on the socket, but only the options that should be\n   27  > set independently of protocol implementation.\n   28  \n   ..\n   39     -  Interface to listen on. Listen on all interfaces by default.\n   40   -  linger ({false, 0})\n   41:    -  Whether to wait and how long to flush data sent before closing the socket.\n   42   -  nodelay (true)\n   43     -  Whether to enable TCP_NODELAY.\n   ..\n   47     -  How long the send call may wait for confirmation before returning.\n   48   -  send_timeout_close (true)\n   49:    -  Whether to close the socket when the confirmation wasn't received.\n   50  \n   51  The `raw` option is unsupported.\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/manual/ranch_transport.md:\n   17  ---------\n   18  \n   19: ### accept(LSocket, Timeout)\n   20: 	-> {ok, CSocket} | {error, closed | timeout | atom()}\n   21  \n   22  > Types:\n   23: >  *  LSocket = CSocket = any()\n   24  >  *  Timeout = timeout()\n   25  >\n   26: > Accept a connection on the given listening socket.\n   27  >\n   28: > The `accept_ack` callback will be used to initialize the socket\n   29  > after accepting the connection. This is most useful when the\n   30  > transport is not raw TCP, like with SSL for example.\n   31  \n   32: ### accept_ack(CSocket, Timeout) -> ok\n   33  \n   34  > Types:\n   35: >  *  CSocket = any()\n   36  >  *  Timeout = timeout()\n   37  >\n   ..\n   39  >\n   40  > This function will be called by connection processes\n   41: > before performing any socket operation. It allows\n   42  > transports that require extra initialization to perform\n   43: > their task and make the socket ready to use.\n   44  \n   45: ### close(CSocket) -> ok\n   46  \n   47  > Types:\n   48: >  *  CSocket = any()\n   49  >\n   50: > Close the given socket.\n   51  \n   52: ### controlling_process(CSocket, Pid)\n   53  	-> ok | {error, closed | not_owner | atom()}\n   54  \n   55  > Types:\n   56: >  *  CSocket = any()\n   57  >  *  Pid = pid()\n   58  >\n   59: > Change the controlling process for the given socket.\n   60  >\n   61  > The controlling process is the process that is allowed to\n   62: > perform operations on the socket, and that will receive\n   63: > messages from the socket when active mode is used. When\n   64: > the controlling process dies, the socket is closed.\n   65  \n   66: ### listen(TransOpts) -> {ok, LSocket} | {error, atom()}\n   67  \n   68  > Types:\n   69  >  *  TransOpts = any()\n   70: >  *  LSocket = any()\n   71  >\n   72  > Listen for connections on the given port.\n   ..\n   75  > the key `port`. Any other option is transport dependent.\n   76  >\n   77: > The socket returned by this call can then be used to\n   78  > accept connections. It is not possible to send or receive\n   79: > data from the listening socket.\n   80  \n   81  ### messages() -> {OK, Closed, Error}\n   ..\n   93  > Return the name of the transport.\n   94  \n   95: ### peername(CSocket) -> {ok, {IP, Port}} | {error, atom()}\n   96  \n   97  > Types:\n   98: >  *  CSocket = any()\n   99  >  *  IP = inet:ip_address()\n  100  >  *  Port = inet:port_number()\n  ...\n  102  > Return the IP and port of the remote endpoint.\n  103  \n  104: ### recv(CSocket, Length, Timeout)\n  105  	-> {ok, Packet} | {error, closed | timeout | atom()}\n  106  \n  107  > Types:\n  108: >  *  CSocket = any()\n  109  >  *  Length = non_neg_integer()\n  110  >  *  Timeout = timeout()\n  111  >  *  Packet = iodata() | any()\n  112  >\n  113: > Receive data from the given socket when in passive mode.\n  114  >\n  115: > Trying to receive data from a socket that is in active mode\n  116  > will return an error.\n  117  >\n  118: > A length of 0 will return any data available on the socket.\n  119  >\n  120  > While it is possible to use the timeout value `infinity`,\n  121  > this is highly discouraged as this could cause your process\n  122  > to get stuck waiting for data that will never come. This may\n  123: > happen when a socket becomes half-open due to a crash of the\n  124  > remote endpoint. Wi-Fi going down is another common culprit\n  125  > of this issue.\n  126  \n  127: ### send(CSocket, Packet) -> ok | {error, atom()}\n  128  \n  129  > Types:\n  130: >  *  CSocket = any()\n  131  >  *  Packet = iodata()\n  132  >\n  133: > Send data to the given socket.\n  134  \n  135: ### sendfile(CSocket, File)\n  136: 	-> sendfile(CSocket, File, 0, 0, [])\n  137: ### sendfile(CSocket, File, Offset, Bytes)\n  138: 	-> sendfile(CSocket, File, Offset, Bytes, [])\n  139: ### sendfile(CSocket, File, Offset, Bytes, SfOpts)\n  140  	-> {ok, SentBytes} | {error, atom()}\n  141  \n  142  > Types:\n  143: >  *  CSocket = any()\n  144  >  *  File = file:filename_all() | file:fd()\n  145  >  *  Offset = non_neg_integer()\n  ...\n  147  >  *  SfOpts = sendfile_opts()\n  148  >\n  149: > Send data from a file to the given socket.\n  150  >\n  151  > The file may be sent full or in parts, and may be specified\n  ...\n  158  > this module.\n  159  \n  160: ### setopts(CSocket, TransOpts) -> ok | {error, atom()}\n  161  \n  162  > Types:\n  163: >  *  CSocket = any()\n  164  >  *  TransOpts = any()\n  165  >\n  166: > Change transport options for the given socket.\n  167  >\n  168  > This is mainly useful for switching to active or passive mode.\n  169  \n  170: ### shutdown(CSocket, How) -> ok | {error, atom()}\n  171  \n  172  > Types:\n  173: >  *  CSocket = any()\n  174  >  *  How = read | write | read_write\n  175  >\n  176: > Immediately close the socket in one or two directions.\n  177  \n  178: ### sockname(CSocket) -> {ok, {IP, Port}} | {error, atom()}\n  179  \n  180  > Types:\n  181: >  *  CSocket = any()\n  182  >  *  IP = inet:ip_address()\n  183  >  *  Port = inet:port_number()\n  ...\n  188  -------\n  189  \n  190: ### sendfile(Transport, CSocket, File, Offset, Bytes, SfOpts)\n  191  	-> {ok, SentBytes} | {error, atom()}\n  192  \n  193  > Types:\n  194  >  *  Transport = module()\n  195: >  *  CSocket = any()\n  196  >  *  File = file:filename_all() | file:fd()\n  197  >  *  Offset = non_neg_integer()\n  ...\n  199  >  *  SfOpts = sendfile_opts()\n  200  >\n  201: > Send data from a file to the given socket.\n  202  >\n  203  > This function emulates the function `file:sendfile/{2,4,5}`\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch.app.src:\n   14  \n   15  {application, ranch, [\n   16: 	{description, \"Socket acceptor pool for TCP protocols.\"},\n   17  	{vsn, \"0.10.0\"},\n   18  	{modules, []},\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch.erl:\n   47  			Res = supervisor:start_child(ranch_sup, child_spec(Ref, NbAcceptors,\n   48  					Transport, TransOpts, Protocol, ProtoOpts)),\n   49: 			Socket = proplists:get_value(socket, TransOpts),\n   50  			case Res of\n   51: 				{ok, Pid} when Socket =/= undefined ->\n   52: 					%% Give ownership of the socket to ranch_acceptors_sup\n   53: 					%% to make sure the socket stays open as long as the\n   54: 					%% listener is alive. If the socket closes however there\n   55  					%% will be no way to recover because we don't know how\n   56  					%% to open it again.\n   ..\n   59  						= lists:keyfind(ranch_acceptors_sup, 1, Children),\n   60  					%%% Note: the catch is here because SSL crashes when you change\n   61: 					%%% the controlling process of a listen socket because of a bug.\n   62  					%%% The bug will be fixed in R16.\n   63: 					catch Transport:controlling_process(Socket, AcceptorsSup);\n   64  				_ ->\n   65  					ok\n   ..\n   89  -spec accept_ack(ref()) -> ok.\n   90  accept_ack(Ref) ->\n   91: 	receive {shoot, Ref, Transport, Socket, AckTimeout} ->\n   92: 		Transport:accept_ack(Socket, AckTimeout)\n   93  	end.\n   94  \n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch_acceptor.erl:\n   18  -export([loop/3]).\n   19  \n   20: -spec start_link(inet:socket(), module(), pid())\n   21  	-> {ok, pid()}.\n   22: start_link(LSocket, Transport, ConnsSup) ->\n   23: 	Pid = spawn_link(?MODULE, loop, [LSocket, Transport, ConnsSup]),\n   24  	{ok, Pid}.\n   25  \n   26: -spec loop(inet:socket(), module(), pid()) -> no_return().\n   27: loop(LSocket, Transport, ConnsSup) ->\n   28: 	_ = case Transport:accept(LSocket, infinity) of\n   29: 		{ok, CSocket} ->\n   30: 			Transport:controlling_process(CSocket, ConnsSup),\n   31  			%% This call will not return until process has been started\n   32  			%% AND we are below the maximum number of connections.\n   33: 			ranch_conns_sup:start_protocol(ConnsSup, CSocket);\n   34  		%% Reduce the accept rate if we run out of file descriptors.\n   35  		%% We can't accept anymore anyway, so we might as well wait\n   ..\n   37  		{error, emfile} ->\n   38  			receive after 100 -> ok end;\n   39: 		%% We want to crash if the listening socket got closed.\n   40  		{error, Reason} when Reason =/= closed ->\n   41  			ok\n   42  	end,\n   43  	flush(),\n   44: 	?MODULE:loop(LSocket, Transport, ConnsSup).\n   45  \n   46  flush() ->\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch_acceptors_sup.erl:\n   26  init([Ref, NbAcceptors, Transport, TransOpts]) ->\n   27  	ConnsSup = ranch_server:get_connections_sup(Ref),\n   28: 	LSocket = case proplists:get_value(socket, TransOpts) of\n   29  		undefined ->\n   30: 			{ok, Socket} = Transport:listen(TransOpts),\n   31: 			Socket;\n   32: 		Socket ->\n   33: 			Socket\n   34  	end,\n   35: 	{ok, {_, Port}} = Transport:sockname(LSocket),\n   36  	ranch_server:set_port(Ref, Port),\n   37  	Procs = [\n   38  		{{acceptor, self(), N}, {ranch_acceptor, start_link, [\n   39: 			LSocket, Transport, ConnsSup\n   40  		]}, permanent, brutal_kill, worker, []}\n   41  			|| N <- lists:seq(1, NbAcceptors)],\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch_conns_sup.erl:\n   68  %% to continue. The supervisor sends its own pid when the acceptor can\n   69  %% continue.\n   70: -spec start_protocol(pid(), inet:socket()) -> ok.\n   71: start_protocol(SupPid, Socket) ->\n   72: 	SupPid ! {?MODULE, start_protocol, self(), Socket},\n   73  	receive SupPid -> ok end.\n   74  \n   ..\n  112  		CurConns, NbChildren, Sleepers) ->\n  113  	receive\n  114: 		{?MODULE, start_protocol, To, Socket} ->\n  115: 			case Protocol:start_link(Ref, Socket, Transport, Opts) of\n  116  				{ok, Pid} ->\n  117: 					Transport:controlling_process(Socket, Pid),\n  118: 					Pid ! {shoot, Ref, Transport, Socket, AckTimeout},\n  119  					put(Pid, true),\n  120  					CurConns2 = CurConns + 1,\n  ...\n  133  						\"~p:start_link/4 returned: ~999999p~n\",\n  134  						[Ref, Protocol, Ret]),\n  135: 					Transport:close(Socket),\n  136  					loop(State, CurConns, NbChildren, Sleepers)\n  137  			end;\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch_protocol.erl:\n   15  -module(ranch_protocol).\n   16  \n   17: %% Start a new connection process for the given socket.\n   18  -callback start_link(\n   19  		Ref::ranch:ref(),\n   20: 		Socket::any(),\n   21  		Transport::module(),\n   22  		ProtocolOptions::any())\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch_ssl.erl:\n   69  messages() -> {ssl, ssl_closed, ssl_error}.\n   70  \n   71: -spec listen(opts()) -> {ok, ssl:sslsocket()} | {error, atom()}.\n   72  listen(Opts) ->\n   73  	ranch:require([crypto, asn1, public_key, ssl]),\n   ..\n   93  			{reuseaddr, true}, {nodelay, true}])).\n   94  \n   95: -spec accept(ssl:sslsocket(), timeout())\n   96: 	-> {ok, ssl:sslsocket()} | {error, closed | timeout | atom()}.\n   97: accept(LSocket, Timeout) ->\n   98: 	ssl:transport_accept(LSocket, Timeout).\n   99  \n  100: -spec accept_ack(ssl:sslsocket(), timeout()) -> ok.\n  101: accept_ack(CSocket, Timeout) ->\n  102: 	case ssl:ssl_accept(CSocket, Timeout) of\n  103  		ok ->\n  104  			ok;\n  105: 		%% Garbage was most likely sent to the socket, don't error out.\n  106  		{error, {tls_alert, _}} ->\n  107: 			ok = close(CSocket),\n  108  			exit(normal);\n  109: 		%% Socket most likely stopped responding, don't error out.\n  110  		{error, timeout} ->\n  111: 			ok = close(CSocket),\n  112  			exit(normal);\n  113  		{error, Reason} ->\n  114: 			ok = close(CSocket),\n  115  			error(Reason)\n  116  	end.\n  ...\n  119  -spec connect(inet:ip_address() | inet:hostname(),\n  120  	inet:port_number(), any())\n  121: 	-> {ok, inet:socket()} | {error, atom()}.\n  122  connect(Host, Port, Opts) when is_integer(Port) ->\n  123  	ssl:connect(Host, Port,\n  ...\n  127  -spec connect(inet:ip_address() | inet:hostname(),\n  128  	inet:port_number(), any(), timeout())\n  129: 	-> {ok, inet:socket()} | {error, atom()}.\n  130  connect(Host, Port, Opts, Timeout) when is_integer(Port) ->\n  131  	ssl:connect(Host, Port,\n  ...\n  133  		Timeout).\n  134  \n  135: -spec recv(ssl:sslsocket(), non_neg_integer(), timeout())\n  136  	-> {ok, any()} | {error, closed | atom()}.\n  137: recv(Socket, Length, Timeout) ->\n  138: 	ssl:recv(Socket, Length, Timeout).\n  139  \n  140: -spec send(ssl:sslsocket(), iodata()) -> ok | {error, atom()}.\n  141: send(Socket, Packet) ->\n  142: 	ssl:send(Socket, Packet).\n  143  \n  144: -spec sendfile(ssl:sslsocket(), file:name_all() | file:fd())\n  145  	-> {ok, non_neg_integer()} | {error, atom()}.\n  146: sendfile(Socket, Filename) ->\n  147: 	sendfile(Socket, Filename, 0, 0, []).\n  148  \n  149: -spec sendfile(ssl:sslsocket(), file:name_all() | file:fd(),\n  150  		non_neg_integer(), non_neg_integer())\n  151  	-> {ok, non_neg_integer()} | {error, atom()}.\n  152: sendfile(Socket, File, Offset, Bytes) ->\n  153: 	sendfile(Socket, File, Offset, Bytes, []).\n  154  \n  155  %% Unlike with TCP, no syscall can be used here, so sending files\n  156  %% through SSL will be much slower in comparison. Note that unlike\n  157  %% file:sendfile/5 this function accepts either a file or a file name.\n  158: -spec sendfile(ssl:sslsocket(), file:name_all() | file:fd(),\n  159  		non_neg_integer(), non_neg_integer(), ranch_transport:sendfile_opts())\n  160  	-> {ok, non_neg_integer()} | {error, atom()}.\n  161: sendfile(Socket, File, Offset, Bytes, Opts) ->\n  162: 	ranch_transport:sendfile(?MODULE, Socket, File, Offset, Bytes, Opts).\n  163  \n  164  %% @todo Probably filter Opts?\n  165: -spec setopts(ssl:sslsocket(), list()) -> ok | {error, atom()}.\n  166: setopts(Socket, Opts) ->\n  167: 	ssl:setopts(Socket, Opts).\n  168  \n  169: -spec controlling_process(ssl:sslsocket(), pid())\n  170  	-> ok | {error, closed | not_owner | atom()}.\n  171: controlling_process(Socket, Pid) ->\n  172: 	ssl:controlling_process(Socket, Pid).\n  173  \n  174: -spec peername(ssl:sslsocket())\n  175  	-> {ok, {inet:ip_address(), inet:port_number()}} | {error, atom()}.\n  176: peername(Socket) ->\n  177: 	ssl:peername(Socket).\n  178  \n  179: -spec sockname(ssl:sslsocket())\n  180  	-> {ok, {inet:ip_address(), inet:port_number()}} | {error, atom()}.\n  181: sockname(Socket) ->\n  182: 	ssl:sockname(Socket).\n  183  \n  184: -spec shutdown(ssl:sslsocket(), read | write | read_write)\n  185  	-> ok | {error, atom()}.\n  186: shutdown(Socket, How) ->\n  187: 	ssl:shutdown(Socket, How).\n  188  \n  189: -spec close(ssl:sslsocket()) -> ok.\n  190: close(Socket) ->\n  191: 	ssl:close(Socket).\n  192  \n  193  %% Internal.\n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch_tcp.erl:\n   50  messages() -> {tcp, tcp_closed, tcp_error}.\n   51  \n   52: -spec listen(opts()) -> {ok, inet:socket()} | {error, atom()}.\n   53  listen(Opts) ->\n   54  	Opts2 = ranch:set_option_default(Opts, backlog, 1024),\n   ..\n   64  			{reuseaddr, true}, {nodelay, true}])).\n   65  \n   66: -spec accept(inet:socket(), timeout())\n   67: 	-> {ok, inet:socket()} | {error, closed | timeout | atom()}.\n   68: accept(LSocket, Timeout) ->\n   69: 	gen_tcp:accept(LSocket, Timeout).\n   70  \n   71: -spec accept_ack(inet:socket(), timeout()) -> ok.\n   72  accept_ack(_, _) ->\n   73  	ok.\n   ..\n   76  -spec connect(inet:ip_address() | inet:hostname(),\n   77  	inet:port_number(), any())\n   78: 	-> {ok, inet:socket()} | {error, atom()}.\n   79  connect(Host, Port, Opts) when is_integer(Port) ->\n   80  	gen_tcp:connect(Host, Port,\n   ..\n   84  -spec connect(inet:ip_address() | inet:hostname(),\n   85  	inet:port_number(), any(), timeout())\n   86: 	-> {ok, inet:socket()} | {error, atom()}.\n   87  connect(Host, Port, Opts, Timeout) when is_integer(Port) ->\n   88  	gen_tcp:connect(Host, Port,\n   ..\n   90  		Timeout).\n   91  \n   92: -spec recv(inet:socket(), non_neg_integer(), timeout())\n   93  	-> {ok, any()} | {error, closed | atom()}.\n   94: recv(Socket, Length, Timeout) ->\n   95: 	gen_tcp:recv(Socket, Length, Timeout).\n   96  \n   97: -spec send(inet:socket(), iodata()) -> ok | {error, atom()}.\n   98: send(Socket, Packet) ->\n   99: 	gen_tcp:send(Socket, Packet).\n  100  \n  101: -spec sendfile(inet:socket(), file:name_all() | file:fd())\n  102  	-> {ok, non_neg_integer()} | {error, atom()}.\n  103: sendfile(Socket, Filename) ->\n  104: 	sendfile(Socket, Filename, 0, 0, []).\n  105  \n  106: -spec sendfile(inet:socket(), file:name_all() | file:fd(), non_neg_integer(),\n  107  		non_neg_integer())\n  108  	-> {ok, non_neg_integer()} | {error, atom()}.\n  109: sendfile(Socket, File, Offset, Bytes) ->\n  110: 	sendfile(Socket, File, Offset, Bytes, []).\n  111  \n  112: -spec sendfile(inet:socket(), file:name_all() | file:fd(), non_neg_integer(),\n  113  		non_neg_integer(), [{chunk_size, non_neg_integer()}])\n  114  	-> {ok, non_neg_integer()} | {error, atom()}.\n  115: sendfile(Socket, Filename, Offset, Bytes, Opts)\n  116  		when is_list(Filename) orelse is_atom(Filename)\n  117  		orelse is_binary(Filename) ->\n  118  	case file:open(Filename, [read, raw, binary]) of\n  119  		{ok, RawFile} ->\n  120: 			try sendfile(Socket, RawFile, Offset, Bytes, Opts) of\n  121  				Result -> Result\n  122  			after\n  ...\n  126  			Error\n  127  	end;\n  128: sendfile(Socket, RawFile, Offset, Bytes, Opts) ->\n  129  	Opts2 = case Opts of\n  130  		[] -> [{chunk_size, 16#1FFF}];\n  131  		_ -> Opts\n  132  	end,\n  133: 	try file:sendfile(RawFile, Socket, Offset, Bytes, Opts2) of\n  134  		Result -> Result\n  135  	catch\n  ...\n  138  			%% {badmatch, {error, enotconn}}. This is because its\n  139  			%% implementation fails with a badmatch in\n  140: 			%% prim_file:sendfile/10 if the socket is not connected.\n  141  			{error, closed}\n  142  	end.\n  143  \n  144  %% @todo Probably filter Opts?\n  145: -spec setopts(inet:socket(), list()) -> ok | {error, atom()}.\n  146: setopts(Socket, Opts) ->\n  147: 	inet:setopts(Socket, Opts).\n  148  \n  149: -spec controlling_process(inet:socket(), pid())\n  150  	-> ok | {error, closed | not_owner | atom()}.\n  151: controlling_process(Socket, Pid) ->\n  152: 	gen_tcp:controlling_process(Socket, Pid).\n  153  \n  154: -spec peername(inet:socket())\n  155  	-> {ok, {inet:ip_address(), inet:port_number()}} | {error, atom()}.\n  156: peername(Socket) ->\n  157: 	inet:peername(Socket).\n  158  \n  159: -spec sockname(inet:socket())\n  160  	-> {ok, {inet:ip_address(), inet:port_number()}} | {error, atom()}.\n  161: sockname(Socket) ->\n  162: 	inet:sockname(Socket).\n  163  \n  164: -spec shutdown(inet:socket(), read | write | read_write)\n  165  	-> ok | {error, atom()}.\n  166: shutdown(Socket, How) ->\n  167: 	gen_tcp:shutdown(Socket, How).\n  168  \n  169: -spec close(inet:socket()) -> ok.\n  170: close(Socket) ->\n  171: 	gen_tcp:close(Socket).\n  172  \n\n/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/src/ranch_transport.erl:\n   17  -export([sendfile/6]).\n   18  \n   19: -type socket() :: any().\n   20  -type opts() :: any().\n   21  -type sendfile_opts() :: [{chunk_size, non_neg_integer()}].\n   ..\n   25  %% @todo -callback caps(secure | sendfile) -> boolean().\n   26  -callback messages() -> {OK::atom(), Closed::atom(), Error::atom()}.\n   27: -callback listen(opts()) -> {ok, socket()} | {error, atom()}.\n   28: -callback accept(socket(), timeout())\n   29: 	-> {ok, socket()} | {error, closed | timeout | atom()}.\n   30: -callback accept_ack(socket(), timeout()) -> ok.\n   31  -callback connect(string(), inet:port_number(), opts())\n   32: 	-> {ok, socket()} | {error, atom()}.\n   33  -callback connect(string(), inet:port_number(), opts(), timeout())\n   34: 	-> {ok, socket()} | {error, atom()}.\n   35: -callback recv(socket(), non_neg_integer(), timeout())\n   36  	-> {ok, any()} | {error, closed | timeout | atom()}.\n   37: -callback send(socket(), iodata()) -> ok | {error, atom()}.\n   38: -callback sendfile(socket(), file:name() | file:fd())\n   39  	-> {ok, non_neg_integer()} | {error, atom()}.\n   40: -callback sendfile(socket(), file:name() | file:fd(), non_neg_integer(),\n   41  		non_neg_integer()) -> {ok, non_neg_integer()} | {error, atom()}.\n   42: -callback sendfile(socket(), file:name() | file:fd(), non_neg_integer(),\n   43  		non_neg_integer(), sendfile_opts())\n   44  	-> {ok, non_neg_integer()} | {error, atom()}.\n   45: -callback setopts(socket(), opts()) -> ok | {error, atom()}.\n   46: -callback controlling_process(socket(), pid())\n   47  	-> ok | {error, closed | not_owner | atom()}.\n   48: -callback peername(socket())\n   49  	-> {ok, {inet:ip_address(), inet:port_number()}} | {error, atom()}.\n   50: -callback sockname(socket())\n   51  	-> {ok, {inet:ip_address(), inet:port_number()}} | {error, atom()}.\n   52: -callback shutdown(socket(), read | write | read_write)\n   53  	-> ok | {error, atom()}.\n   54: -callback close(socket()) -> ok.\n   55  \n   56  %% A fallback for transports that don't have a native sendfile implementation.\n   57  %% Note that the ordering of arguments is different from file:sendfile/5 and\n   58  %% that this function accepts either a raw file or a file name.\n   59: -spec sendfile(module(), socket(), file:filename_all() | file:fd(),\n   60  		non_neg_integer(), non_neg_integer(), sendfile_opts())\n   61  	-> {ok, non_neg_integer()} | {error, atom()}.\n   62: sendfile(Transport, Socket, Filename, Offset, Bytes, Opts)\n   63  		when is_list(Filename) orelse is_atom(Filename)\n   64  		orelse is_binary(Filename) ->\n   ..\n   73  			end,\n   74  			try\n   75: 				sendfile_loop(Transport, Socket, RawFile, Bytes, 0, ChunkSize)\n   76  			after\n   77  				ok = file:close(RawFile)\n   ..\n   80  			Error\n   81  	end;\n   82: sendfile(Transport, Socket, RawFile, Offset, Bytes, Opts) ->\n   83  	ChunkSize = chunk_size(Opts),\n   84  	Initial2 = case file:position(RawFile, {cur, 0}) of\n   ..\n   89  			Initial\n   90  		end,\n   91: 	case sendfile_loop(Transport, Socket, RawFile, Bytes, 0, ChunkSize) of\n   92  		{ok, _Sent} = Result ->\n   93  			{ok, _} = file:position(RawFile, {bof, Initial2}),\n   ..\n  109  	end.\n  110  \n  111: -spec sendfile_loop(module(), socket(), file:fd(), non_neg_integer(),\n  112  		non_neg_integer(), pos_integer())\n  113  	-> {ok, non_neg_integer()} | {error, term()}.\n  114: sendfile_loop(_Transport, _Socket, _RawFile, Sent, Sent, _ChunkSize)\n  115  		when Sent =/= 0 ->\n  116  	%% All requested data has been read and sent, return number of bytes sent.\n  117  	{ok, Sent};\n  118: sendfile_loop(Transport, Socket, RawFile, Bytes, Sent, ChunkSize) ->\n  119  	ReadSize = read_size(Bytes, Sent, ChunkSize),\n  120  	case file:read(RawFile, ReadSize) of\n  121  		{ok, IoData} ->\n  122: 			case Transport:send(Socket, IoData) of\n  123  				ok ->\n  124  					Sent2 = iolist_size(IoData) + Sent,\n  125: 					sendfile_loop(Transport, Socket, RawFile, Bytes, Sent2,\n  126  						ChunkSize);\n  127  				{error, _Reason} = Error ->\n\n/home/sam/conversant/repos/kazoo/deps/recon-1.2.0/README.md:\n   33    function call.\n   34  - 0.4.0: fixed bug where nodes with lots of processes or ports could see their\n   35:   count or window functions fail because a process or socket closed between the\n   36    time the function started and before it finished. This ends up changing the\n   37    API in `recon_lib` for the window and count functions that take a specific\n\n/home/sam/conversant/repos/kazoo/deps/recon-1.2.0/src/recon.erl:\n   46  %%%         in case it's not available in the currently running node.</dd>\n   47  %%%\n   48: %%%     <dt>4. Ports and Sockets</dt>\n   49  %%%     <dd>To make it simpler to debug some network-related issues,\n   50  %%%         recon contains functions to deal with Erlang ports (raw, file\n   ..\n   57  %%%         {@link port_info/1} and {@link port_info/2} are wrappers to provide\n   58  %%%         more similar or more details than `erlang:port_info/1-2', and, for\n   59: %%%         inet ports, statistics and options for each socket.</dd>\n   60  %%%     <dd>Finally, the functions {@link inet_count/2} and {@link inet_window/3}\n   61  %%%         provide the absolute or sliding window functionality of\n   ..\n  509  %% details based on the port type (only inet ports have this feature\n  510  %% so far). For example, TCP ports will include information about the\n  511: %% remote peer, transfer statistics, and socket options being used.\n  512  %%\n  513  %% The information-specific and the basic port info are sorted and \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/Makefile:\n    1: PROJECT = socketio\n    2  ROOT = ../..\n    3  REBAR = $(ROOT)/utils/rebar/rebar\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/README.md:\n    1: socket.io-cowboy\n    2  ================\n    3  \n    4  ### Overview\n    5  \n    6: [Travis-CI](http://travis-ci.org/sinnus/socket.io-cowboy) :: ![Travis-CI status](https://secure.travis-ci.org/sinnus/socket.io-cowboy.png)\n    7  \n    8: This project is an open-source Erlang implementation of [Socket.IO](http://socket.io/) server. Based on [Cowboy](https://github.com/extend/cowboy).\n    9  \n   10  Licensed under the Apache License 2.0.\n   ..\n   12  ### Feauters\n   13  \n   14: * Partial Supports 0.7+ version of [Socket.IO-client](https://github.com/LearnBoost/socket.io-client) up to latest - 0.9.6 (doesn't support ack and events)\n   15  * Supports xhr-polling transport\n   16: * Supports websocket transport\n   17  * Supports SSL\n   18  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/demo/demo.erl:\n   12      ok = application:start(ranch),\n   13      ok = application:start(cowboy),\n   14:     ok = application:start(socketio),\n   15  \n   16      Dispatch = cowboy_router:compile([\n   17                                        {'_', [\n   18:                                              {\"/socket.io/1/[...]\", socketio_handler, [socketio_session:configure([{heartbeat, 5000},\n   19                                                                                                                     {heartbeat_timeout, 30000},\n   20                                                                                                                     {session_timeout, 30000},\n   21                                                                                                                     {callback, ?MODULE},\n   22:                                                                                                                    {protocol, socketio_data_protocol}])]},\n   23                                               {\"/[...]\", cowboy_static, [\n   24                                                                          {directory, <<\"./priv\">>},\n   ..\n   33      demo_mgr:start_link(),\n   34  \n   35:     cowboy:start_http(socketio_http_listener, 100, [{host, \"127.0.0.1\"},\n   36                                                      {port, 8080}], [{env, [{dispatch, Dispatch}]}]).\n   37  \n   ..\n   49  \n   50  recv(Pid, _Sid, {message, <<>>, Message}, SessionState = #session_state{}) ->\n   51:     socketio_session:send_message(Pid, Message),\n   52      {ok, SessionState};\n   53  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/demo/demo_mgr.erl:\n   80      Reply = ok,\n   81      sets:fold(fun(Pid, AccIn) ->\n   82:                       socketio_session:send_obj(Pid, Json),\n   83                        AccIn\n   84                end, notused, State#state.sessions),\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/demo/priv/index.html:\n   22  \n   23  \n   24: 	<script src=\"https://raw.github.com/LearnBoost/socket.io-client/0.9.8/dist/socket.io.js\"></script>\n   25      <script src=\"https://raw.github.com/timrwood/moment/1.7.2/moment.js\"></script>\n   26      <script src=\"http://code.jquery.com/jquery-1.7.2.min.js\"></script>\n   ..\n   29                  var userName = 'user' + Math.floor((Math.random()*1000)+1);\n   30  \n   31: 		var socket =  io.connect('http://localhost:8080');\n   32  \n   33: 		socket.on('connect', function() {\n   34  			output('<span class=\"connect-msg\">Client has connected to the server!</span>');\n   35  		});\n   36  \n   37: 		socket.on('message', function(data) {\n   38  			output('<span class=\"username-msg\">' + data.userName + ':</span> ' + data.message);\n   39  		});\n   40  \n   41: 		socket.on('disconnect', function() {\n   42  			output('<span class=\"disconnect-msg\">The client has disconnected!</span>');\n   43  		});\n   44  \n   45                  function sendDisconnect() {\n   46:                         socket.disconnect();\n   47                  }\n   48  \n   ..\n   61                          var jsonObject = {userName: userName,\n   62                                            message: message};\n   63:                         socket.json.send(jsonObject);\n   64  		}\n   65  \n   ..\n   75  <body>\n   76  \n   77: 	<h1>Socket.io-cowboy Demo Chat</h1>\n   78  \n   79  	<br/>\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/demo/priv/stress.html:\n    4      <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">\n    5      <title>Shadow world test</title>\n    6:     <script src=\"/js/socket.io/socket.io.js\"></script>\n    7      <script>\n    8       var received_amount = 0;\n    9       var messages, start;\n   10       var updater;\n   11: 	 var socket = io.connect('http://localhost:8080');\n   12  \n   13:      socket.on('connect', function() {\n   14         // console.log(\"Connected\");\n   15       })\n   16:      socket.on('message', function(){\n   17         received_amount++;\n   18         if (received_amount >= messages) {\n   ..\n   22       })\n   23  \n   24:      socket.on('disconnect', function(){\n   25        // console.log(\"Disconnected\");\n   26       })\n   ..\n   44         start = new Date().getTime();\n   45         for (var i=0; i < messages; i++) {\n   46:          socket.send(\"PING\");\n   47         };\n   48         document.getElementById('sent').innerHTML = \"Sent \" + messages + \" messages in \" + (new Date().getTime() - start) + \"ms\";\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio.app.src:\n    1: {application, socketio, [\n    2: 	{description, \"Socketio for cowboy.\"},\n    3  	{vsn, \"0.1.0\"},\n    4  	{modules, []},\n    5: 	{registered, [socketio_sup]},\n    6  	{applications, [\n    7  		kernel,\n    .\n   12  		cowboy\n   13  	]},\n   14: 	{mod, {socketio, []}},\n   15  	{env, []}\n   16  ]}.\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17  -behaviour(application).\n   ..\n   24      ok = application:start(ranch),\n   25      ok = application:start(cowboy),\n   26:     ok = application:start(socketio).\n   27  \n   28  start(_Type, _Args) ->\n   29:     socketio_session:init(),\n   30:     socketio_sup:start_link().\n   31  \n   32  stop(_State) ->\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_data_protocol.erl:\n    1: -module(socketio_data_protocol).\n    2  -export([encode/1,\n    3           decode/1]).\n    .\n    5  -include_lib(\"eunit/include/eunit.hrl\").\n    6  \n    7: %% The source code was taken and modified from https://github.com/yrashk/socket.io-erlang/blob/master/src/socketio_data_v1.erl\n    8  \n    9  -define(FRAME, 16#fffd).\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_handler.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio_handler).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17: -include(\"socketio_internal.hrl\").\n   18  \n   19  -export([init/3, handle/2, info/3, terminate/3,\n   20:          websocket_init/3, websocket_handle/3,\n   21:          websocket_info/3, websocket_terminate/3]).\n   22  \n   23  -record(http_state, {action, config, sid, heartbeat_tref, messages, pid}).\n   ..\n   30              {ok, Req, #http_state{action = create_session, config = Config}};\n   31          [<<\"xhr-polling\">>, Sid] ->\n   32:             case {socketio_session:find(Sid), Method} of\n   33                  {{ok, Pid}, <<\"GET\">>} ->\n   34:                     case socketio_session:pull_no_wait(Pid, self()) of\n   35                          session_in_use ->\n   36                              {ok, Req, #http_state{action = session_in_use, config = Config, sid = Sid}};\n   ..\n   46                          {ok, Body, Req1} ->\n   47                              Messages = Protocol:decode(Body),\n   48:                             socketio_session:recv(Pid, Messages),\n   49                              {ok, Req1, #http_state{action = ok, config = Config, sid = Sid}};\n   50                          {error, _} ->\n   ..\n   56                      {ok, Req, #http_state{action = error, sid = Sid, config = Config}}\n   57              end;\n   58:         [<<\"websocket\">>, _Sid] ->\n   59:             {upgrade, protocol, cowboy_websocket};\n   60          _ ->\n   61              {ok, Req, #http_state{config = Config}}\n   ..\n   72      SessionTimeoutBin = list_to_binary(integer_to_list(SessionTimeout div 1000)),\n   73  \n   74:     _Pid = socketio_session:create(Sid, SessionTimeout, Callback, Opts),\n   75  \n   76:     Result = <<\":\", HeartbeatTimeoutBin/binary, \":\", SessionTimeoutBin/binary, \":websocket,xhr-polling\">>,\n   77      {ok, Req1} = cowboy_req:reply(200, text_headers(Req), <<Sid/binary, Result/binary>>, Req),\n   78      {ok, Req1, HttpState};\n   ..\n  150  safe_unsub_caller(Pid, Caller) ->\n  151      try\n  152:         socketio_session:unsub_caller(Pid, Caller),\n  153          ok\n  154      catch\n  ...\n  159  safe_poll(Req, HttpState = #http_state{config = Config = #config{protocol = Protocol}}, Pid, WaitIfEmpty) ->\n  160      try\n  161:         Messages = socketio_session:poll(Pid),\n  162          case {WaitIfEmpty, Messages} of\n  163              {true, []} ->\n  ...\n  173      end.\n  174  \n  175: %% Websocket handlers\n  176: websocket_init(_TransportName, Req, [Config]) ->\n  177      {PathInfo, _} = cowboy_req:path_info(Req),\n  178:     [<<\"websocket\">>, Sid] = PathInfo,\n  179:     case socketio_session:find(Sid) of\n  180          {ok, Pid} ->\n  181              erlang:monitor(process, Pid),\n  ...\n  187      end.\n  188  \n  189: websocket_handle({text, Data}, Req, {Config = #config{protocol = Protocol}, Pid}) ->\n  190      Messages = Protocol:decode(Data),\n  191:     socketio_session:recv(Pid, Messages),\n  192      {ok, Req, {Config, Pid}};\n  193: websocket_handle(_Data, Req, State) ->\n  194      {ok, Req, State}.\n  195  \n  196: websocket_info(go, Req, {Config, Pid}) ->\n  197:     case socketio_session:pull(Pid, self()) of\n  198          session_in_use ->\n  199              {ok, Req, {Config, Pid}};\n  ...\n  201              reply_ws_messages(Req, Messages, {Config, Pid})\n  202      end;\n  203: websocket_info({message_arrived, Pid}, Req, {Config, Pid}) ->\n  204:     Messages =  socketio_session:poll(Pid),\n  205      self() ! go,\n  206      reply_ws_messages(Req, Messages, {Config, Pid});\n  207: websocket_info({timeout, _TRef, {?MODULE, Pid}}, Req, {Config = #config{protocol = Protocol}, Pid}) ->\n  208:     socketio_session:refresh(Pid),\n  209      erlang:start_timer(Config#config.heartbeat, self(), {?MODULE, Pid}),\n  210      Packet = Protocol:encode(heartbeat),\n  211      {reply, {text, Packet}, Req, {Config, Pid}};\n  212: websocket_info({'DOWN', _Ref, process, Pid, _Reason}, Req, State = {_Config, Pid}) ->\n  213      {shutdown, Req, State};\n  214: websocket_info(_Info, Req, State) ->\n  215      {ok, Req, State}.\n  216  \n  217: websocket_terminate(_Reason, _Req, _State = {_Config, Pid}) ->\n  218:     socketio_session:disconnect(Pid),\n  219      ok.\n  220  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_session.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio_session).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17  -behaviour(gen_server).\n   18  \n   19: -include(\"socketio_internal.hrl\").\n   20  \n   21  %% API\n   ..\n   27           terminate/2, code_change/3]).\n   28  \n   29: -define(ETS, socketio_session_table).\n   30  \n   31  -record(state, {id,\n   ..\n   47              session_timeout = proplists:get_value(session_timeout, Opts, 30000),\n   48              callback = proplists:get_value(callback, Opts),\n   49:             protocol = proplists:get_value(protocol, Opts, socketio_data_protocol),\n   50              opts = proplists:get_value(opts, Opts, undefined)\n   51             }.\n   ..\n   56  \n   57  create(SessionId, SessionTimeout, Callback, Opts) ->\n   58:     {ok, Pid} = socketio_session_sup:start_child(SessionId, SessionTimeout, Callback, Opts),\n   59      Pid.\n   60  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_session_sup.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio_session_sup).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17  -behaviour(supervisor).\n   ..\n   28  init([]) ->\n   29      {ok, {{simple_one_for_one, 10, 10},\n   30:           [{undefined, {socketio_session, start_link, []},\n   31:             temporary, 5000, worker, [socketio_session]}]}}.\n   32  \n   33  start_child(SessionId, SessionTimeout, Callback, Opts) ->\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_sup.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio_sup).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17  -behaviour(supervisor).\n   ..\n   32              permanent, 5000, worker, [uuids]},\n   33  \n   34:            {socketio_session_sup, {socketio_session_sup, start_link, []},\n   35:             permanent, 5000, supervisor, [socketio_session_sup]}\n   36            ]}}.\n   37  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/stress/src/stress_client.erl:\n   94  polling_result_ready(go, State = #state{sid = Sid, body = Body, send_packets = PrevPackets, connected = true, start_poll_ts = StartPollTS}) ->\n   95      log_polling_req(Sid, StartPollTS, erlang:now()),\n   96:     Packets = socketio_data_protocol:decode(list_to_binary(Body)),\n   97      case Packets of\n   98          PrevPackets ->\n   ..\n  159  send_test_packets(State = #state{transport_url = TransportUrl}) ->\n  160      SendPackets = get_test_packets(),\n  161:     PacketsBin = socketio_data_protocol:encode(SendPackets),\n  162  \n  163      Headers = [{\"Content-Type\", \"text/plain; charset=utf-8\"},\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/stress/src/stress_test.erl:\n   31      ibrowse:set_max_pipeline_size(Host, Port, N),\n   32  \n   33:     SocketIoUrl = \"http://\" ++ Host ++ \":\" ++ integer_to_list(Port) ++ \"/socket.io\",\n   34  \n   35:     error_logger:info_msg(\"***** Starting stress clients. Url ~p~n\", [SocketIoUrl]),\n   36:     ok = start_stress_clients(SocketIoUrl, N),\n   37      error_logger:info_msg(\"***** ~p stress clients started~n\", [N]).\n   38  \n   ..\n   40      ok;\n   41  \n   42: start_stress_clients(SocketIoUrl, N) ->\n   43:     {ok, _} = stress_client:start_link(SocketIoUrl),\n   44:     start_stress_clients(SocketIoUrl, N - 1).\n   45  \n\n/home/sam/conversant/repos/kazoo/deps/wsock-1.1.5/src/wsock.app.src:\n    1  {application, wsock,\n    2   [\n    3:   {description, \"wsock is a library for building WebSocket clients and servers\"},\n    4    {vsn, \"1.1.4\"},\n    5    {registered, []},\n\n/home/sam/conversant/repos/kazoo/deps/wsock-1.1.5/src/wsock_handshake.erl:\n   45    end.\n   46  \n   47: -spec response(ClientWebsocketKey::string()) -> {ok, #handshake{}}.\n   48: response(ClientWebsocketKey) ->\n   49:   BinaryKey = list_to_binary(ClientWebsocketKey),\n   50    HttpMessage = #http_message{\n   51      start_line = [\n   ..\n   55      ],\n   56      headers = [\n   57:       {\"upgrade\", \"Websocket\"},\n   58        {\"connection\", \"Upgrade\"},\n   59:       {\"sec-websocket-accept\", base64:encode_to_string(crypto:sha(<<BinaryKey/binary, ?GUID>>)) }\n   60      ],\n   61      type = response\n   ..\n   74    Headers =[\n   75      {\"Host\", Host ++ \":\" ++ integer_to_list(Port)},\n   76:     {\"Upgrade\", \"websocket\"},\n   77      {\"Connection\", \"upgrade\"},\n   78:     {\"Sec-Websocket-Key\", wsock_key:generate()},\n   79:     {\"Sec-Websocket-Version\", integer_to_list(?VERSION)}\n   80    ],\n   81  \n   ..\n   98    Matchers = [\n   99      {\"host\", \".+\", required},\n  100:     {\"upgrade\", \"websocket\", required},\n  101      {\"connection\", \"upgrade\", required},\n  102:     {\"sec-websocket-key\", \"[a-z0-9\\+\\/]{22}==\", required},\n  103:     {\"sec-websocket-version\", \"13\", required},\n  104      {\"origin\", \".+\", optional}],\n  105  \n  ...\n  123    validate_connection_header(Response)\n  124    andalso\n  125:   validate_sec_websocket_accept_header(Response, OpenHandshake).\n  126  \n  127  -spec validate_handshake_open(OpenHandshake::#http_message{}) -> true | false.\n  ...\n  151  -spec validate_upgrade_header(Response ::#http_message{}) -> boolean().\n  152  validate_upgrade_header(Response) ->\n  153:   \"websocket\" == string:to_lower(wsock_http:get_header_value(\"upgrade\", Response)).\n  154  \n  155  -spec validate_connection_header(Response ::#http_message{}) -> boolean().\n  ...\n  157    \"upgrade\" == string:to_lower(wsock_http:get_header_value(\"connection\", Response)).\n  158  \n  159: -spec validate_sec_websocket_accept_header(Response::#http_message{}, Handshake::#handshake{}) -> boolean().\n  160: validate_sec_websocket_accept_header(Response, Handshake) ->\n  161:   ClientKey         = wsock_http:get_header_value(\"sec-websocket-key\", Handshake#handshake.message),\n  162    BinaryClientKey   = list_to_binary(ClientKey),\n  163    ExpectedHashedKey = base64:encode_to_string(crypto:sha(<<BinaryClientKey/binary, ?GUID>>)),\n  164:   HashedKey         = wsock_http:get_header_value(\"sec-websocket-accept\", Response),\n  165  \n  166    ExpectedHashedKey == HashedKey.\n\n/home/sam/conversant/repos/kazoo/deps/wsock-1.1.5/src/wsock_message.erl:\n   45  %%========================================\n   46  \n   47: % @doc Encode Data into WebSockets frames and returns an iolist with those\n   48  % frames.\n   49  %\n   ..\n  104  % </dl>\n  105  %\n  106: % If a received message is fragmented (WebSocket or TCP fragmentation), this \n  107  % message must be given as parameter to {@link decode/3} when new data is ready to be\n  108  % decoded.\n\n/home/sam/conversant/repos/kazoo/utils/lineman/src/toolbag/freeswitch.erl:\n  254  \n  255  %% @doc Send an event to FreeSWITCH. `EventName' is the name of the event and\n  256: %% `Headers' is a list of `{Key, Value}' string tuples. See the mod_event_socket\n  257  %% documentation for more information.\n  258  sendevent(Node, EventName, Headers) ->\n  ...\n  267  %% @doc Send a CUSTOM event to FreeSWITCH. `SubClassName' is the name of the event\n  268  %% subclass and `Headers' is a list of `{Key, Value}' string tuples. See the\n  269: %% mod_event_socket documentation for more information.\n  270  sendevent_custom(Node, SubClassName, Headers) ->\n  271      {fs_simulator, Node} ! {self(), <<\"sendevent.custom.\", (wh_util:to_lower_binary(SubClassName))/binary>>, Headers},\n\n~/conversant/repos/kazoo/utils/media_importer/media_importer:\n    <binary>\n\n/home/sam/conversant/repos/kazoo/utils/rebar/priv/templates/simplenode.vm.args:\n   13  ##+A 5\n   14  \n   15: ## Increase number of concurrent ports/sockets\n   16  ##-env ERL_MAX_PORTS 4096\n   17  \n\n/home/sam/conversant/repos/kazoo/utils/rebar/test/upgrade_project/rel/files/vm.args:\n   13  +A 5\n   14  \n   15: ## Increase number of concurrent ports/sockets\n   16  -env ERL_MAX_PORTS 4096\n   17  \n\n6108 matches across 280 files\n\n\nSearching 3816 files for \"socketio\"\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole.erl:\n   36  -spec stop() -> 'ok'.\n   37  stop() -> \n   38:     cowboy:stop_listener('socketio_http_listener'),\n   39      exit(whereis('blackhole_sup'), 'shutdown'),\n   40      'ok'.\n   ..\n   59                                                 ,'public_key'\n   60                                                 ,'ssl'\n   61:                                                ,'socketio'\n   62                                                 ]],\n   63      'ok'.\n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_data_emitter.erl:\n   16  emit(SessionPid, Event, Data) when is_pid(SessionPid) ->\n   17      lager:debug(\"sending event data: ~s\", [Event]),\n   18:     socketio_session:send_event(SessionPid, Event, Data);\n   19  emit([_|_]=SessionPids, Event, Data) ->\n   20:     [socketio_session:send_event(SessionPid, Event, Data) || SessionPid <- SessionPids].\n   21  \n\n/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_sup.erl:\n   38      Dispatch = cowboy_router:compile([\n   39                                        {'_', [{\"/socket.io/1/[...]\"\n   40:                                              ,'socketio_handler'\n   41:                                              ,[socketio_session:configure([{'heartbeat', 5000}\n   42                                                                            ,{'heartbeat_timeout', 30000}\n   43                                                                            ,{'session_timeout', 30000}\n   44                                                                            ,{'callback', 'blackhole_socket_callback'}\n   45:                                                                           ,{'protocol', 'socketio_data_protocol'}\n   46                                                                            ])]}\n   47                                              ]\n   ..\n   49                                       ]),\n   50      Port = whapps_config:get_integer(<<\"blackhole\">>, <<\"port\">>, 5555),\n   51:     {'ok', _} = cowboy:start_http('socketio_http_listener', 100, [{'port', Port}],\n   52                                    [{'env', [{'dispatch', Dispatch}]}]),\n   53      supervisor:start_link({'local', ?MODULE}, ?MODULE, []).\n\n/home/sam/conversant/repos/kazoo/core/whistle_apps-1.0.0/src/whapps_controller.erl:\n   77                        ,'whistle_amqp', 'whistle_stats', 'sasl', 'lager', 'gproc'\n   78                        ,'amqp_client', 'syslog', 'asn1', 'folsom', 'kazoo_token_buckets'\n   79:                       ,'socketio', 'kazoo_bindings', 'cowlib'\n   80                       ]).\n   81  -spec running_apps() -> atoms() | string().\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/Makefile:\n    1: PROJECT = socketio\n    2  ROOT = ../..\n    3  REBAR = $(ROOT)/utils/rebar/rebar\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/demo/demo.erl:\n   12      ok = application:start(ranch),\n   13      ok = application:start(cowboy),\n   14:     ok = application:start(socketio),\n   15  \n   16      Dispatch = cowboy_router:compile([\n   17                                        {'_', [\n   18:                                              {\"/socket.io/1/[...]\", socketio_handler, [socketio_session:configure([{heartbeat, 5000},\n   19                                                                                                                     {heartbeat_timeout, 30000},\n   20                                                                                                                     {session_timeout, 30000},\n   21                                                                                                                     {callback, ?MODULE},\n   22:                                                                                                                    {protocol, socketio_data_protocol}])]},\n   23                                               {\"/[...]\", cowboy_static, [\n   24                                                                          {directory, <<\"./priv\">>},\n   ..\n   33      demo_mgr:start_link(),\n   34  \n   35:     cowboy:start_http(socketio_http_listener, 100, [{host, \"127.0.0.1\"},\n   36                                                      {port, 8080}], [{env, [{dispatch, Dispatch}]}]).\n   37  \n   ..\n   49  \n   50  recv(Pid, _Sid, {message, <<>>, Message}, SessionState = #session_state{}) ->\n   51:     socketio_session:send_message(Pid, Message),\n   52      {ok, SessionState};\n   53  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/demo/demo_mgr.erl:\n   80      Reply = ok,\n   81      sets:fold(fun(Pid, AccIn) ->\n   82:                       socketio_session:send_obj(Pid, Json),\n   83                        AccIn\n   84                end, notused, State#state.sessions),\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio.app.src:\n    1: {application, socketio, [\n    2: 	{description, \"Socketio for cowboy.\"},\n    3  	{vsn, \"0.1.0\"},\n    4  	{modules, []},\n    5: 	{registered, [socketio_sup]},\n    6  	{applications, [\n    7  		kernel,\n    .\n   12  		cowboy\n   13  	]},\n   14: 	{mod, {socketio, []}},\n   15  	{env, []}\n   16  ]}.\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17  -behaviour(application).\n   ..\n   24      ok = application:start(ranch),\n   25      ok = application:start(cowboy),\n   26:     ok = application:start(socketio).\n   27  \n   28  start(_Type, _Args) ->\n   29:     socketio_session:init(),\n   30:     socketio_sup:start_link().\n   31  \n   32  stop(_State) ->\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_data_protocol.erl:\n    1: -module(socketio_data_protocol).\n    2  -export([encode/1,\n    3           decode/1]).\n    .\n    5  -include_lib(\"eunit/include/eunit.hrl\").\n    6  \n    7: %% The source code was taken and modified from https://github.com/yrashk/socket.io-erlang/blob/master/src/socketio_data_v1.erl\n    8  \n    9  -define(FRAME, 16#fffd).\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_handler.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio_handler).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17: -include(\"socketio_internal.hrl\").\n   18  \n   19  -export([init/3, handle/2, info/3, terminate/3,\n   ..\n   30              {ok, Req, #http_state{action = create_session, config = Config}};\n   31          [<<\"xhr-polling\">>, Sid] ->\n   32:             case {socketio_session:find(Sid), Method} of\n   33                  {{ok, Pid}, <<\"GET\">>} ->\n   34:                     case socketio_session:pull_no_wait(Pid, self()) of\n   35                          session_in_use ->\n   36                              {ok, Req, #http_state{action = session_in_use, config = Config, sid = Sid}};\n   ..\n   46                          {ok, Body, Req1} ->\n   47                              Messages = Protocol:decode(Body),\n   48:                             socketio_session:recv(Pid, Messages),\n   49                              {ok, Req1, #http_state{action = ok, config = Config, sid = Sid}};\n   50                          {error, _} ->\n   ..\n   72      SessionTimeoutBin = list_to_binary(integer_to_list(SessionTimeout div 1000)),\n   73  \n   74:     _Pid = socketio_session:create(Sid, SessionTimeout, Callback, Opts),\n   75  \n   76      Result = <<\":\", HeartbeatTimeoutBin/binary, \":\", SessionTimeoutBin/binary, \":websocket,xhr-polling\">>,\n   ..\n  150  safe_unsub_caller(Pid, Caller) ->\n  151      try\n  152:         socketio_session:unsub_caller(Pid, Caller),\n  153          ok\n  154      catch\n  ...\n  159  safe_poll(Req, HttpState = #http_state{config = Config = #config{protocol = Protocol}}, Pid, WaitIfEmpty) ->\n  160      try\n  161:         Messages = socketio_session:poll(Pid),\n  162          case {WaitIfEmpty, Messages} of\n  163              {true, []} ->\n  ...\n  177      {PathInfo, _} = cowboy_req:path_info(Req),\n  178      [<<\"websocket\">>, Sid] = PathInfo,\n  179:     case socketio_session:find(Sid) of\n  180          {ok, Pid} ->\n  181              erlang:monitor(process, Pid),\n  ...\n  189  websocket_handle({text, Data}, Req, {Config = #config{protocol = Protocol}, Pid}) ->\n  190      Messages = Protocol:decode(Data),\n  191:     socketio_session:recv(Pid, Messages),\n  192      {ok, Req, {Config, Pid}};\n  193  websocket_handle(_Data, Req, State) ->\n  ...\n  195  \n  196  websocket_info(go, Req, {Config, Pid}) ->\n  197:     case socketio_session:pull(Pid, self()) of\n  198          session_in_use ->\n  199              {ok, Req, {Config, Pid}};\n  ...\n  202      end;\n  203  websocket_info({message_arrived, Pid}, Req, {Config, Pid}) ->\n  204:     Messages =  socketio_session:poll(Pid),\n  205      self() ! go,\n  206      reply_ws_messages(Req, Messages, {Config, Pid});\n  207  websocket_info({timeout, _TRef, {?MODULE, Pid}}, Req, {Config = #config{protocol = Protocol}, Pid}) ->\n  208:     socketio_session:refresh(Pid),\n  209      erlang:start_timer(Config#config.heartbeat, self(), {?MODULE, Pid}),\n  210      Packet = Protocol:encode(heartbeat),\n  ...\n  216  \n  217  websocket_terminate(_Reason, _Req, _State = {_Config, Pid}) ->\n  218:     socketio_session:disconnect(Pid),\n  219      ok.\n  220  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_session.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio_session).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17  -behaviour(gen_server).\n   18  \n   19: -include(\"socketio_internal.hrl\").\n   20  \n   21  %% API\n   ..\n   27           terminate/2, code_change/3]).\n   28  \n   29: -define(ETS, socketio_session_table).\n   30  \n   31  -record(state, {id,\n   ..\n   47              session_timeout = proplists:get_value(session_timeout, Opts, 30000),\n   48              callback = proplists:get_value(callback, Opts),\n   49:             protocol = proplists:get_value(protocol, Opts, socketio_data_protocol),\n   50              opts = proplists:get_value(opts, Opts, undefined)\n   51             }.\n   ..\n   56  \n   57  create(SessionId, SessionTimeout, Callback, Opts) ->\n   58:     {ok, Pid} = socketio_session_sup:start_child(SessionId, SessionTimeout, Callback, Opts),\n   59      Pid.\n   60  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_session_sup.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio_session_sup).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17  -behaviour(supervisor).\n   ..\n   28  init([]) ->\n   29      {ok, {{simple_one_for_one, 10, 10},\n   30:           [{undefined, {socketio_session, start_link, []},\n   31:             temporary, 5000, worker, [socketio_session]}]}}.\n   32  \n   33  start_child(SessionId, SessionTimeout, Callback, Opts) ->\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/src/socketio_sup.erl:\n   13  %% See the License for the specific language governing permissions and\n   14  %% limitations under the License.\n   15: -module(socketio_sup).\n   16  -author('Kirill Trofimov <sinnus@gmail.com>').\n   17  -behaviour(supervisor).\n   ..\n   32              permanent, 5000, worker, [uuids]},\n   33  \n   34:            {socketio_session_sup, {socketio_session_sup, start_link, []},\n   35:             permanent, 5000, supervisor, [socketio_session_sup]}\n   36            ]}}.\n   37  \n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/stress/src/stress_client.erl:\n   94  polling_result_ready(go, State = #state{sid = Sid, body = Body, send_packets = PrevPackets, connected = true, start_poll_ts = StartPollTS}) ->\n   95      log_polling_req(Sid, StartPollTS, erlang:now()),\n   96:     Packets = socketio_data_protocol:decode(list_to_binary(Body)),\n   97      case Packets of\n   98          PrevPackets ->\n   ..\n  159  send_test_packets(State = #state{transport_url = TransportUrl}) ->\n  160      SendPackets = get_test_packets(),\n  161:     PacketsBin = socketio_data_protocol:encode(SendPackets),\n  162  \n  163      Headers = [{\"Content-Type\", \"text/plain; charset=utf-8\"},\n\n/home/sam/conversant/repos/kazoo/deps/socketio-0.1.0/stress/src/stress_test.erl:\n   31      ibrowse:set_max_pipeline_size(Host, Port, N),\n   32  \n   33:     SocketIoUrl = \"http://\" ++ Host ++ \":\" ++ integer_to_list(Port) ++ \"/socket.io\",\n   34  \n   35:     error_logger:info_msg(\"***** Starting stress clients. Url ~p~n\", [SocketIoUrl]),\n   36:     ok = start_stress_clients(SocketIoUrl, N),\n   37      error_logger:info_msg(\"***** ~p stress clients started~n\", [N]).\n   38  \n   ..\n   40      ok;\n   41  \n   42: start_stress_clients(SocketIoUrl, N) ->\n   43:     {ok, _} = stress_client:start_link(SocketIoUrl),\n   44:     start_stress_clients(SocketIoUrl, N - 1).\n   45  \n\n61 matches across 16 files\n",
					"settings":
					{
						"buffer_size": 828075,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_channel.erl",
					"settings":
					{
						"buffer_size": 25613,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_command.erl",
					"settings":
					{
						"buffer_size": 1728,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_originate.erl",
					"settings":
					{
						"buffer_size": 16626,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_route_win.erl",
					"settings":
					{
						"buffer_size": 11598,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_attributes.erl",
					"settings":
					{
						"buffer_size": 22246,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/core/whistle_apps-1.0.0/src/whapps_call.erl",
					"settings":
					{
						"buffer_size": 39324,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazoo/core/whistle_apps-1.0.0/src/whapps_call_command.erl",
					"settings":
					{
						"buffer_size": 107377,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/Makefile/Make.sublime-build",
			"command_palette":
			{
				"height": 392.0,
				"selected_items":
				[
					[
						":w",
						":w - Save"
					],
					[
						"pack",
						"Package Control: Install Package"
					],
					[
						":",
						":w - Save"
					],
					[
						"pac",
						"Package Control: Install Package"
					],
					[
						"for",
						"Gherkin/Cucumber: Format"
					],
					[
						"form",
						"Gherkin/Cucumber: Format"
					],
					[
						"hook_bloc",
						"Snippet: hook_block_view_MODULE_DELTA_alter"
					],
					[
						"h_us_p",
						"Snippet: hook_user_presave"
					],
					[
						"user_pre",
						"Snippet: block_user_presave"
					],
					[
						"hook_user",
						"Snippet: hook_user_cancel"
					],
					[
						"hook_menu",
						"Snippet: hook_menu"
					],
					[
						"menu_alt",
						"Snippet: hook_menu_alter"
					],
					[
						"mail_alter",
						"Snippet: hook_mail_alter"
					],
					[
						"pc",
						"Package Control: Install Package"
					],
					[
						"set h",
						"Set Syntax: HTML"
					],
					[
						"js",
						"JSHint"
					],
					[
						"g c",
						"Git: Commit"
					],
					[
						"g ad",
						"Git: Add Current File"
					],
					[
						"git h",
						"Git: Commit history"
					],
					[
						"git",
						"Git: Toggle Annotations"
					],
					[
						"g ",
						"Git: Commit"
					],
					[
						"packa",
						"Package Control: Install Package"
					],
					[
						"git d",
						"Git: Diff All"
					],
					[
						"g",
						"Git: Commit"
					],
					[
						"gi",
						"Git: Commit"
					],
					[
						"git ",
						"Git: Commit"
					],
					[
						"g co",
						"Git: Commit"
					],
					[
						"g di c",
						"Git: Diff Current File"
					],
					[
						"g d",
						"Git: Diff All"
					],
					[
						"g di",
						"Git: Diff Staged"
					],
					[
						"gher",
						"Set Syntax: Gherkin"
					],
					[
						"fo",
						"Gherkin/Cucumber: Format"
					],
					[
						"format",
						"Gherkin/Cucumber: Format"
					],
					[
						"forma",
						"Gherkin/Cucumber: Format"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						":W",
						":w - Save"
					],
					[
						"sett",
						"Preferences: Settings - User"
					],
					[
						":p",
						"Set Syntax: Plain Text"
					],
					[
						":q",
						"Set Syntax: SQL"
					],
					[
						":ph",
						"Set Syntax: PHP"
					],
					[
						"pa",
						"Package Control: Discover Packages"
					],
					[
						"set p",
						"Set Syntax: PHP"
					],
					[
						"",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"php",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"pc ",
						"Package Control: Install Package"
					],
					[
						"sy c",
						"Set Syntax: C"
					]
				],
				"width": 458.0
			},
			"console":
			{
				"height": 139.0,
				"history":
				[
					"n",
					"jsHint",
					"jshint",
					"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) ",
					"syntax "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/sam/conversant/repos/kazoo/core/whistle_number_manager-1.0.0/include/wh_port_request.hrl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_temporal_route.erl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_temporal_rules.erl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/priv/couchdb/schemas/temporal_rules.json",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/priv/couchdb/account/temporal_rules.json",
				"/home/sam/conversant/repos/kazoo/system_media/temporal-marker_reset.wav",
				"/home/sam/conversant/repos/kazoo/system_media/temporal-menu.wav",
				"/home/sam/conversant/repos/kazoo/applications/blackhole/src/bh_context.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-stomp/examples/perl/headers-example-recv.pl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/LICENSE-APACHE2-ExplorerCanvas",
				"/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_sup.erl",
				"/home/sam/conversant/repos/kazoo/applications/blackhole/doc/README.org",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_resources.erl",
				"/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_resource.erl",
				"/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_socket_callback.erl",
				"/home/sam/conversant/repos/kazoo/applications/blackhole/src/modules/bh_skel.erl",
				"/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_app.erl",
				"/home/sam/conversant/repos/kazoo/deps/ibrowse-4.0.1/BSD_LICENSE",
				"/home/sam/conversant/repos/kazoo/utils/rebar/bootstrap",
				"/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_call_command.erl",
				"/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_config.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_endpoint.erl",
				"/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_channel.erl",
				"/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_authn.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_group_pickup_feature.erl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_faxboxes.erl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_faxes.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/credit_flow.erl",
				"/home/sam/conversant/repos/kazoo/system_media/cf-now_forwarded_to.wav",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_do_not_disturb.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_singular_call_hooks_listener.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_ring_group.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_record_call.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_receive_fax.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_prepend_cid.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_page_group.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_manual_presence.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_intercept_feature.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_group_pickup.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_dynamic_cid.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_check_cid.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_call_forward.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_acdc_queue.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_acdc_member.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_acdc_agent.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_singular_call_hooks.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_event_handler_sup.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_webhook.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_voicemail.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_user.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_sleep.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_skel.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_set.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_response.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_privacy.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_play.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_pivot.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_park.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_offnet.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_move.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_menu.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_intercom.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_intercept.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_hotdesk.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_group.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_eavesdrop.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_disa.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_directory.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_device.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_conference.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_callflow.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_shared_listener.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_route_resume.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_route_req.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_exe_sup.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_util.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_listener.erl",
				"/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_exe.erl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/src/crossbar.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-federation/src/rabbit_federation_exchange.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-federation/src/rabbit_federation_db.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-federation/src/rabbit_federation_app.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-federation-management/src/rabbit_federation_mgmt.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-tracing/src/rabbit_tracing_wm_file.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-shovel/src/rabbit_shovel_config.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-tracing/src/rabbit_tracing_wm_files.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/rabbitmq-tracing/src/rabbit_tracing_files.erl",
				"/home/sam/conversant/repos/kazoo/deps/lager-2.0.0/src/lager_transform.erl",
				"/home/sam/conversant/repos/kazoo/core/whistle-1.0.0/src/kazoo_transform.erl",
				"/home/sam/conversant/repos/kazoo/system_media/menu-transferring_call.wav",
				"/home/sam/conversant/repos/kazoo/deps/erlydtl-0.9.0/tests/expect/trans",
				"/home/sam/conversant/repos/kazoo/deps/ranch-0.10.0/examples/tcp_reverse/src/tcp_reverse_app.erl",
				"/home/sam/conversant/repos/kazoo/applications/trunkstore/src/ts_responder.erl",
				"/home/sam/conversant/repos/kazoo/TAGS",
				"/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_registrar.erl",
				"/home/sam/conversant/repos/kazoo/SOURCE",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/supervisor2_tests.erl",
				"/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_bridge.erl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/src/api_resource.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/webmachine-wrapper/webmachine-git/www/resources.html",
				"/home/sam/conversant/repos/kazoo/applications/stepswitch/priv/couchdb/views/resources.json",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/priv/couchdb/account/resources.json",
				"/home/sam/conversant/repos/kazoo/applications/registrar/priv/couchdb/resources.json",
				"/home/sam/conversant/repos/kazoo/deps/cowboy-0.10.0/guide/resources.md",
				"/home/sam/conversant/repos/kazoo/deps/erlydtl-0.9.0/rebar-slex.config",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/scripts/rabbitmq-env",
				"/home/sam/conversant/repos/kazoo/README.md",
				"/home/sam/conversant/repos/kazoo/applications/registrar/src/registrar.erl",
				"/home/sam/conversant/repos/kazoo/applications/registrar/src/reg.hrl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/src/crossbar.hrl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/src/crossbar_default_handler.erl",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/calculate-relative",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/webmachine-wrapper/webmachine-git/www/quickstart.html",
				"/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/src/rabbit_queue_index.erl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/doc/queues.curl.txt",
				"/home/sam/conversant/repos/kazoo/core/braintree-1.0.0/src/braintree_util.erl",
				"/home/sam/conversant/repos/kazoo/deps/erlydtl-0.9.0/tests/expect/custom_tag",
				"/home/sam/conversant/repos/kazoo/deps/ejson-0.1.0/t/cases/codepoints_from_unicode_org.erl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_hotdesks.erl",
				"/home/sam/conversant/repos/kazoo/applications/fax/src/fax_app.erl",
				"/home/sam/conversant/repos/kazoo/applications/notify/priv/notify_fax_inbound.config",
				"/home/sam/conversant/repos/kazoo/system_media/vm-fail_auth.wav",
				"/home/sam/conversant/repos/kazoo/core/whistle_number_manager-1.0.0/src/providers/wnm_failover.erl",
				"/home/sam/conversant/repos/kazoo/system_media/fault-can_not_be_completed_as_dialed.wav",
				"/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_request_sup.erl",
				"/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_resources.erl",
				"/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr.hrl",
				"/home/sam/conversant/repos/kazoo/applications/crossbar/priv/couchdb/schemas/clicktocall.json"
			],
			"find":
			{
				"height": 35.0
			},
			"find_in_files":
			{
				"height": 93.0,
				"where_history":
				[
					"",
					"*.css",
					"",
					"sites/all/modules/contrib/domain",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"4. Contacts.feature",
					"",
					"-indsex.html",
					"",
					"config/config.js",
					"/home/sam/repos/conversant/console/sites/all/modules/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console/tests/vendor",
					"",
					"user_sync.webservices.inc",
					""
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"socketio",
					"socket",
					"click",
					"loopback",
					"effective_caller_id",
					"authorizing",
					"xferext",
					"default_bleg_cid",
					"origi",
					"from_caller",
					"from_cid",
					"from_exten",
					"quickla",
					"bootstrap_callflow_executer",
					"cf_endpoint:get",
					"try_create_endpoint",
					"failed to create",
					"DEFAULT_REALM",
					"nodomain.com",
					"bridge_timeout",
					"reset_temporal_rules",
					"time based rule",
					"vm_count_by_owner",
					"unsolicited_endpoint_mwi_update",
					"build_originate",
					"publish_originate_req",
					"<<\"ecallmgr",
					"sip(-|_)header(s)?",
					"header",
					"whapps_call:(set|update)_custom_channel_var(s)?",
					"whapps_call:(set|update)_custom_channel_var",
					"whapps_call_command:set",
					"log_call_information",
					"outbound_flags",
					"'now'",
					"execute_control_request",
					"command",
					"'dialplan'",
					"handle_dialplan",
					"get_module",
					"whapps_call_command:send_command",
					"whapps_call_command:publish_command",
					"wapi_dialplan:publish",
					"wapi_dialplan:publiush",
					"SPECIAL_CHANNEL_VARS",
					"insert_command",
					"set_call",
					"ring_ready",
					"cf_metaflow",
					"ignore_complete",
					"ignore_complete_elsewhere",
					"reply_affirmative",
					"route_re",
					"route_req_x",
					"publis",
					"ecallmgr_fs_xml:get_channel_vars",
					"invite",
					"x.auth.ip",
					"fs.support",
					"fs.Support",
					"FS-Support",
					"X-FS-Support",
					"handle_couch_mgr_errors",
					"datastore_conflict",
					"response_conflicting_docs",
					"response_conflictiong_docs",
					"response_conflictiong_doics",
					"409",
					"put_call",
					"blackhole_resource",
					"handle_ccvs",
					"SPECIAL_CHANNEL_VARS",
					"ecallmgr_util:custom_channel_vars",
					"sip_h_",
					"update_ccvs",
					"(set|update)_custom_channel_vars",
					"whapps_call_command:set",
					"custom",
					"ccv",
					"filter_doc",
					"crossbar_doc:filter_doc",
					"filter_prop",
					"crossbar_doc:filter_prop",
					"<<\"filter",
					"<<*\"filter*>>",
					"<<*\"filter\"*>>",
					"<<\"filter\">>",
					"<<\"filter_\">>",
					"filter_",
					"get_query_string_data",
					"query_string",
					"query_json",
					"<<\"&\">>",
					"<<\"?\">>",
					"whapps_call_command:set(",
					"AGG_VIEW_NAME",
					"AGG_VIEW_REALM",
					"get",
					"descendants",
					"number",
					">>>",
					"number",
					"REQUEST",
					"notify_listener",
					"put_call",
					"modb",
					"request",
					"PORT_PVT_STATE",
					"port_state",
					"port_state\\",
					"port_state",
					"category_to_file",
					"database",
					"system_config",
					"set_value",
					"proplist",
					"to_proplist",
					"proplist",
					"publish_port_cancel",
					"request",
					"REQUEST",
					"request",
					"USER_LIST",
					"rfc",
					"to_string",
					"cb_context:set_doc(",
					"req_data",
					"fold_bind_results"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					">",
					"<",
					"&gt",
					"&lt",
					"ports_manager.",
					"ports_manager_html",
					"billing_postal_code",
					"There was an internal error and the changes may not be complete.",
					"There was an internal error and the changes may not be complete",
					"url",
					"!empty($values['roles']['user'])",
					"!empty($values['roles']['admin'])",
					"localhost",
					""
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"follow_symlinks": true,
					"path": "/home/sam/conversant/repos/kazoo"
				}
			],
			"groups":
			[
				{
					"selected": 5,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/crossbar_doc.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 31626,
								"regions":
								{
								},
								"selection":
								[
									[
										520,
										520
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 200.0,
								"zoom_level": 1.0
							},
							"stack_index": 28,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_resources.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 12336,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 540.0,
								"zoom_level": 1.0
							},
							"stack_index": 27,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/sam/conversant/misc/outbound_call_from_clicktocall_20140512.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 70189,
								"regions":
								{
								},
								"selection":
								[
									[
										3537,
										3537
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 10080.0,
								"zoom_level": 1.0
							},
							"stack_index": 26,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_exe.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 28214,
								"regions":
								{
								},
								"selection":
								[
									[
										6423,
										6423
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 2345.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_temporal_rules.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6107,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 33,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_temporal_route.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 146765,
								"regions":
								{
								},
								"selection":
								[
									[
										15785,
										15785
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 7185.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/home/sam/conversant/repos/kazoo/deps/rabbitmq_server-3.2.0/plugins-src/licensing/license_info_rabbitmq-management",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 698,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 32,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/module/cf_hotdesk.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 17668,
								"regions":
								{
								},
								"selection":
								[
									[
										17311,
										17311
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 909.0,
								"zoom_level": 1.0
							},
							"stack_index": 31,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/cb_context.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 25945,
								"regions":
								{
								},
								"selection":
								[
									[
										4027,
										4027
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 108.0,
								"zoom_level": 1.0
							},
							"stack_index": 30,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/crossbar.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 10464,
								"regions":
								{
								},
								"selection":
								[
									[
										3505,
										3505
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 29,
							"type": "text"
						}
					]
				},
				{
					"selected": 8,
					"sheets":
					[
						{
							"buffer": 10,
							"file": "/home/sam/conversant/misc/kazoo_update_port_requests.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3815,
								"regions":
								{
								},
								"selection":
								[
									[
										793,
										793
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 273.0,
								"zoom_level": 1.0
							},
							"stack_index": 25,
							"type": "text"
						},
						{
							"buffer": 11,
							"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_clicktocall.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 14424,
								"regions":
								{
								},
								"selection":
								[
									[
										10166,
										10166
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3435.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_util.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 45014,
								"regions":
								{
								},
								"selection":
								[
									[
										2715,
										2715
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 720.0,
								"zoom_level": 1.0
							},
							"stack_index": 17,
							"type": "text"
						},
						{
							"buffer": 13,
							"file": "/home/sam/conversant/repos/kazoo/applications/crossbar/src/modules/cb_modules_util.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 15092,
								"regions":
								{
								},
								"selection":
								[
									[
										8290,
										8290
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 605.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 14,
							"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_originate.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 36198,
								"regions":
								{
								},
								"selection":
								[
									[
										24145,
										24145
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 375.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_call_events.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 44233,
								"regions":
								{
								},
								"selection":
								[
									[
										20329,
										20329
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 6750.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 16,
							"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2170,
								"regions":
								{
								},
								"selection":
								[
									[
										2170,
										2170
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 360.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 17,
							"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_util.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3232,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 18,
							"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole.hrl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 586,
								"regions":
								{
								},
								"selection":
								[
									[
										388,
										388
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 19,
							"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/doc/example_client.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1296,
								"regions":
								{
								},
								"selection":
								[
									[
										972,
										972
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 20,
							"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/blackhole_bindings.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6651,
								"regions":
								{
								},
								"selection":
								[
									[
										1826,
										1826
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 675.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 21,
							"file": "/home/sam/conversant/repos/kazoo/applications/blackhole/src/modules/bh_call.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1975,
								"regions":
								{
								},
								"selection":
								[
									[
										407,
										407
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 22,
							"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_originate_sup.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2167,
								"regions":
								{
								},
								"selection":
								[
									[
										1245,
										1245
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 19,
							"type": "text"
						},
						{
							"buffer": 23,
							"file": "/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_resources.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 33067,
								"regions":
								{
								},
								"selection":
								[
									[
										4908,
										4908
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1575.0,
								"zoom_level": 1.0
							},
							"stack_index": 20,
							"type": "text"
						},
						{
							"buffer": 24,
							"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/callflow_maintenance.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 19878,
								"regions":
								{
								},
								"selection":
								[
									[
										1660,
										1660
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 273.0,
								"zoom_level": 1.0
							},
							"stack_index": 21,
							"type": "text"
						},
						{
							"buffer": 25,
							"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr.hrl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22675,
								"regions":
								{
								},
								"selection":
								[
									[
										9818,
										9818
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 2600.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						},
						{
							"buffer": 26,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 828075,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												214,
												221
											],
											[
												469,
												476
											],
											[
												890,
												897
											],
											[
												1200,
												1207
											],
											[
												1393,
												1400
											],
											[
												1405,
												1412
											],
											[
												1671,
												1678
											],
											[
												1705,
												1712
											],
											[
												1770,
												1777
											],
											[
												1992,
												1999
											],
											[
												2004,
												2011
											],
											[
												2572,
												2579
											],
											[
												2787,
												2794
											],
											[
												2996,
												3003
											],
											[
												3217,
												3224
											],
											[
												4742,
												4749
											],
											[
												5060,
												5067
											],
											[
												5577,
												5588
											],
											[
												5608,
												5619
											],
											[
												5992,
												6003
											],
											[
												6072,
												6083
											],
											[
												6430,
												6441
											],
											[
												6543,
												6554
											],
											[
												6887,
												6898
											],
											[
												7129,
												7140
											],
											[
												7440,
												7451
											],
											[
												7668,
												7679
											],
											[
												7696,
												7707
											],
											[
												7847,
												7858
											],
											[
												7935,
												7946
											],
											[
												8177,
												8188
											],
											[
												8475,
												8486
											],
											[
												8819,
												8830
											],
											[
												8852,
												8863
											],
											[
												9093,
												9104
											],
											[
												9345,
												9356
											],
											[
												9646,
												9657
											],
											[
												9991,
												10002
											],
											[
												10289,
												10300
											],
											[
												10579,
												10590
											],
											[
												10813,
												10824
											],
											[
												11284,
												11295
											],
											[
												11511,
												11522
											],
											[
												11899,
												11910
											],
											[
												12190,
												12201
											],
											[
												12218,
												12229
											],
											[
												12278,
												12289
											],
											[
												12469,
												12480
											],
											[
												12511,
												12522
											],
											[
												12833,
												12844
											],
											[
												12957,
												12968
											],
											[
												13065,
												13076
											],
											[
												13118,
												13129
											],
											[
												13146,
												13157
											],
											[
												13204,
												13215
											],
											[
												13525,
												13536
											],
											[
												13809,
												13820
											],
											[
												14075,
												14086
											],
											[
												14284,
												14295
											],
											[
												14521,
												14532
											],
											[
												14812,
												14823
											],
											[
												15148,
												15159
											],
											[
												15396,
												15407
											],
											[
												15715,
												15726
											],
											[
												15803,
												15814
											],
											[
												15859,
												15870
											],
											[
												15983,
												15994
											],
											[
												16033,
												16044
											],
											[
												16060,
												16071
											],
											[
												16125,
												16136
											],
											[
												16267,
												16278
											],
											[
												16453,
												16464
											],
											[
												16468,
												16479
											],
											[
												16787,
												16798
											],
											[
												16971,
												16982
											],
											[
												17122,
												17133
											],
											[
												17412,
												17423
											],
											[
												17698,
												17709
											],
											[
												18064,
												18075
											],
											[
												18160,
												18171
											],
											[
												18541,
												18552
											],
											[
												18849,
												18860
											],
											[
												19129,
												19140
											],
											[
												19490,
												19501
											],
											[
												19838,
												19849
											],
											[
												20201,
												20212
											],
											[
												20488,
												20499
											],
											[
												20736,
												20747
											],
											[
												20805,
												20816
											],
											[
												22659,
												22670
											],
											[
												22699,
												22710
											],
											[
												23296,
												23307
											],
											[
												23336,
												23347
											],
											[
												23704,
												23715
											],
											[
												23734,
												23745
											],
											[
												24243,
												24254
											],
											[
												24273,
												24284
											],
											[
												25111,
												25122
											],
											[
												25569,
												25580
											],
											[
												25750,
												25761
											],
											[
												25884,
												25895
											],
											[
												26215,
												26226
											],
											[
												26237,
												26248
											],
											[
												26627,
												26638
											],
											[
												26668,
												26679
											],
											[
												26742,
												26753
											],
											[
												27054,
												27065
											],
											[
												27126,
												27137
											],
											[
												27473,
												27484
											],
											[
												27543,
												27554
											],
											[
												27894,
												27905
											],
											[
												27927,
												27938
											],
											[
												27975,
												27986
											],
											[
												28006,
												28017
											],
											[
												28358,
												28369
											],
											[
												28380,
												28391
											],
											[
												28638,
												28649
											],
											[
												28905,
												28916
											],
											[
												29133,
												29144
											],
											[
												29491,
												29502
											],
											[
												29835,
												29846
											],
											[
												30021,
												30032
											],
											[
												30314,
												30325
											],
											[
												30603,
												30614
											],
											[
												30965,
												30976
											],
											[
												31169,
												31180
											],
											[
												31465,
												31476
											],
											[
												31675,
												31686
											],
											[
												31991,
												32002
											],
											[
												32150,
												32161
											],
											[
												32511,
												32522
											],
											[
												32723,
												32734
											],
											[
												32946,
												32957
											],
											[
												33092,
												33103
											],
											[
												33355,
												33366
											],
											[
												33691,
												33702
											],
											[
												33958,
												33969
											],
											[
												34161,
												34172
											],
											[
												34384,
												34395
											],
											[
												34530,
												34541
											],
											[
												34793,
												34804
											],
											[
												35129,
												35140
											],
											[
												35465,
												35476
											],
											[
												35542,
												35553
											],
											[
												35990,
												36001
											],
											[
												36055,
												36066
											],
											[
												36145,
												36156
											],
											[
												36472,
												36483
											],
											[
												36573,
												36584
											],
											[
												36966,
												36977
											],
											[
												37001,
												37012
											],
											[
												37036,
												37047
											],
											[
												37073,
												37084
											],
											[
												37372,
												37383
											],
											[
												37407,
												37418
											],
											[
												37442,
												37453
											],
											[
												37479,
												37490
											],
											[
												37822,
												37833
											],
											[
												37865,
												37876
											],
											[
												37913,
												37924
											],
											[
												37958,
												37969
											],
											[
												38433,
												38444
											],
											[
												38477,
												38488
											],
											[
												38551,
												38562
											],
											[
												38597,
												38608
											],
											[
												39088,
												39099
											],
											[
												39217,
												39228
											],
											[
												39502,
												39513
											],
											[
												39554,
												39565
											],
											[
												39637,
												39648
											],
											[
												39765,
												39776
											],
											[
												39839,
												39850
											],
											[
												39922,
												39933
											],
											[
												39968,
												39979
											],
											[
												40020,
												40031
											],
											[
												40067,
												40078
											],
											[
												40138,
												40149
											],
											[
												40288,
												40299
											],
											[
												40533,
												40544
											],
											[
												41026,
												41037
											],
											[
												41500,
												41511
											],
											[
												41696,
												41707
											],
											[
												42093,
												42104
											],
											[
												42317,
												42328
											],
											[
												42638,
												42649
											],
											[
												42991,
												43002
											],
											[
												43059,
												43070
											],
											[
												43389,
												43400
											],
											[
												43427,
												43438
											],
											[
												43489,
												43500
											],
											[
												43529,
												43540
											],
											[
												43921,
												43932
											],
											[
												43958,
												43969
											],
											[
												44047,
												44058
											],
											[
												44346,
												44357
											],
											[
												44363,
												44374
											],
											[
												44414,
												44425
											],
											[
												44454,
												44465
											],
											[
												44800,
												44811
											],
											[
												44815,
												44826
											],
											[
												44920,
												44931
											],
											[
												44937,
												44948
											],
											[
												45242,
												45253
											],
											[
												45258,
												45269
											],
											[
												45309,
												45320
											],
											[
												45327,
												45338
											],
											[
												45631,
												45642
											],
											[
												45667,
												45678
											],
											[
												45700,
												45711
											],
											[
												45738,
												45749
											],
											[
												46128,
												46139
											],
											[
												46464,
												46475
											],
											[
												46759,
												46770
											],
											[
												46859,
												46870
											],
											[
												47283,
												47294
											],
											[
												47686,
												47697
											],
											[
												47768,
												47779
											],
											[
												48111,
												48122
											],
											[
												48129,
												48140
											],
											[
												48231,
												48242
											],
											[
												48247,
												48258
											],
											[
												48615,
												48626
											],
											[
												48633,
												48644
											],
											[
												48786,
												48797
											],
											[
												48802,
												48813
											],
											[
												49158,
												49169
											],
											[
												49509,
												49520
											],
											[
												49818,
												49829
											],
											[
												50309,
												50320
											],
											[
												50892,
												50903
											],
											[
												51721,
												51732
											],
											[
												51751,
												51762
											],
											[
												52283,
												52294
											],
											[
												52309,
												52320
											],
											[
												52573,
												52584
											],
											[
												52599,
												52610
											],
											[
												52864,
												52875
											],
											[
												52909,
												52920
											],
											[
												53233,
												53244
											],
											[
												53271,
												53282
											],
											[
												53312,
												53323
											],
											[
												53352,
												53363
											],
											[
												53682,
												53693
											],
											[
												53722,
												53733
											],
											[
												53794,
												53805
											],
											[
												54255,
												54266
											],
											[
												54563,
												54574
											],
											[
												54644,
												54655
											],
											[
												55091,
												55102
											],
											[
												55173,
												55184
											],
											[
												55510,
												55521
											],
											[
												55855,
												55866
											],
											[
												56212,
												56223
											],
											[
												56274,
												56285
											],
											[
												56327,
												56338
											],
											[
												56403,
												56414
											],
											[
												56418,
												56429
											],
											[
												56627,
												56638
											],
											[
												56727,
												56738
											],
											[
												57030,
												57041
											],
											[
												57045,
												57056
											],
											[
												57311,
												57322
											],
											[
												57330,
												57341
											],
											[
												57370,
												57381
											],
											[
												57391,
												57402
											],
											[
												57571,
												57582
											],
											[
												57586,
												57597
											],
											[
												57885,
												57896
											],
											[
												57976,
												57987
											],
											[
												58434,
												58445
											],
											[
												58868,
												58879
											],
											[
												59116,
												59127
											],
											[
												59132,
												59143
											],
											[
												59514,
												59525
											],
											[
												59755,
												59766
											],
											[
												59792,
												59803
											],
											[
												59942,
												59953
											],
											[
												60162,
												60173
											],
											[
												60511,
												60522
											],
											[
												60902,
												60913
											],
											[
												61451,
												61462
											],
											[
												61851,
												61862
											],
											[
												61873,
												61884
											],
											[
												62324,
												62335
											],
											[
												62643,
												62654
											],
											[
												62661,
												62672
											],
											[
												62701,
												62712
											],
											[
												62721,
												62732
											],
											[
												63125,
												63136
											],
											[
												63249,
												63260
											],
											[
												63764,
												63775
											],
											[
												63796,
												63807
											],
											[
												63847,
												63858
											],
											[
												63881,
												63892
											],
											[
												64220,
												64231
											],
											[
												64261,
												64272
											],
											[
												64286,
												64297
											],
											[
												64337,
												64348
											],
											[
												64380,
												64391
											],
											[
												64407,
												64418
											],
											[
												64821,
												64832
											],
											[
												64893,
												64904
											],
											[
												65276,
												65287
											],
											[
												65317,
												65328
											],
											[
												65383,
												65394
											],
											[
												65426,
												65437
											],
											[
												65857,
												65868
											],
											[
												65898,
												65909
											],
											[
												65923,
												65934
											],
											[
												65959,
												65970
											],
											[
												66002,
												66013
											],
											[
												66029,
												66040
											],
											[
												66344,
												66355
											],
											[
												66363,
												66374
											],
											[
												66402,
												66413
											],
											[
												66423,
												66434
											],
											[
												66592,
												66603
											],
											[
												66650,
												66661
											],
											[
												66665,
												66676
											],
											[
												66716,
												66727
											],
											[
												66771,
												66782
											],
											[
												66790,
												66801
											],
											[
												66822,
												66833
											],
											[
												66837,
												66848
											],
											[
												66875,
												66886
											],
											[
												66922,
												66933
											],
											[
												66950,
												66961
											],
											[
												66965,
												66976
											],
											[
												66995,
												67006
											],
											[
												67035,
												67046
											],
											[
												67095,
												67106
											],
											[
												67112,
												67123
											],
											[
												67165,
												67176
											],
											[
												67222,
												67233
											],
											[
												67243,
												67254
											],
											[
												67277,
												67288
											],
											[
												67294,
												67305
											],
											[
												67334,
												67345
											],
											[
												67383,
												67394
											],
											[
												67413,
												67424
											],
											[
												67430,
												67441
											],
											[
												67462,
												67473
											],
											[
												67793,
												67804
											],
											[
												67885,
												67896
											],
											[
												68365,
												68376
											],
											[
												68678,
												68689
											],
											[
												69114,
												69125
											],
											[
												69453,
												69464
											],
											[
												69810,
												69821
											],
											[
												70167,
												70178
											],
											[
												70786,
												70797
											],
											[
												70838,
												70849
											],
											[
												71032,
												71043
											],
											[
												72555,
												72566
											],
											[
												74611,
												74622
											],
											[
												76679,
												76690
											],
											[
												76717,
												76728
											],
											[
												78066,
												78077
											],
											[
												78123,
												78134
											],
											[
												78982,
												78993
											],
											[
												79644,
												79663
											],
											[
												79740,
												79759
											],
											[
												80233,
												80252
											],
											[
												80580,
												80599
											],
											[
												81087,
												81106
											],
											[
												81357,
												81376
											],
											[
												81880,
												81899
											],
											[
												82161,
												82180
											],
											[
												82594,
												82613
											],
											[
												83000,
												83019
											],
											[
												83279,
												83298
											],
											[
												83973,
												83992
											],
											[
												84006,
												84025
											],
											[
												85338,
												85357
											],
											[
												85378,
												85397
											],
											[
												87447,
												87466
											],
											[
												87487,
												87506
											],
											[
												89522,
												89541
											],
											[
												89562,
												89581
											],
											[
												91166,
												91174
											],
											[
												91493,
												91501
											],
											[
												91906,
												91914
											],
											[
												92325,
												92333
											],
											[
												92348,
												92356
											],
											[
												92710,
												92718
											],
											[
												92751,
												92759
											],
											[
												93209,
												93217
											],
											[
												93315,
												93323
											],
											[
												93721,
												93729
											],
											[
												94064,
												94072
											],
											[
												94457,
												94465
											],
											[
												94910,
												94918
											],
											[
												95256,
												95264
											],
											[
												95583,
												95591
											],
											[
												95996,
												96004
											],
											[
												96415,
												96423
											],
											[
												96438,
												96446
											],
											[
												96512,
												96520
											],
											[
												96535,
												96543
											],
											[
												96886,
												96894
											],
											[
												96927,
												96935
											],
											[
												97385,
												97393
											],
											[
												97491,
												97499
											],
											[
												97897,
												97905
											],
											[
												98240,
												98248
											],
											[
												98633,
												98641
											],
											[
												99086,
												99094
											],
											[
												99426,
												99432
											],
											[
												99446,
												99452
											],
											[
												99530,
												99536
											],
											[
												99637,
												99643
											],
											[
												99663,
												99669
											],
											[
												99687,
												99693
											],
											[
												99888,
												99894
											],
											[
												99904,
												99910
											],
											[
												100038,
												100044
											],
											[
												100102,
												100108
											],
											[
												100274,
												100280
											],
											[
												100446,
												100452
											],
											[
												100619,
												100625
											],
											[
												100796,
												100802
											],
											[
												100908,
												100914
											],
											[
												101036,
												101042
											],
											[
												101144,
												101150
											],
											[
												101440,
												101446
											],
											[
												101468,
												101474
											],
											[
												101507,
												101513
											],
											[
												101528,
												101534
											],
											[
												101682,
												101688
											],
											[
												101737,
												101743
											],
											[
												101909,
												101915
											],
											[
												101964,
												101970
											],
											[
												102163,
												102169
											],
											[
												102196,
												102202
											],
											[
												102250,
												102256
											],
											[
												102276,
												102282
											],
											[
												102287,
												102293
											],
											[
												102302,
												102308
											],
											[
												102547,
												102553
											],
											[
												102623,
												102629
											],
											[
												103072,
												103078
											],
											[
												103161,
												103167
											],
											[
												103205,
												103211
											],
											[
												103239,
												103245
											],
											[
												103286,
												103292
											],
											[
												103297,
												103303
											],
											[
												103478,
												103484
											],
											[
												103692,
												103698
											],
											[
												103981,
												103987
											],
											[
												104289,
												104295
											],
											[
												104402,
												104408
											],
											[
												104697,
												104703
											],
											[
												104848,
												104854
											],
											[
												105059,
												105065
											],
											[
												105342,
												105348
											],
											[
												105533,
												105539
											],
											[
												105685,
												105691
											],
											[
												106095,
												106101
											],
											[
												106488,
												106494
											],
											[
												106561,
												106567
											],
											[
												106633,
												106639
											],
											[
												107007,
												107013
											],
											[
												107121,
												107127
											],
											[
												107461,
												107467
											],
											[
												107924,
												107930
											],
											[
												108125,
												108131
											],
											[
												108224,
												108230
											],
											[
												108606,
												108612
											],
											[
												109012,
												109018
											],
											[
												109213,
												109219
											],
											[
												109312,
												109318
											],
											[
												109725,
												109731
											],
											[
												109808,
												109814
											],
											[
												110184,
												110190
											],
											[
												110394,
												110400
											],
											[
												110643,
												110649
											],
											[
												110658,
												110664
											],
											[
												110902,
												110908
											],
											[
												110965,
												110971
											],
											[
												111103,
												111109
											],
											[
												111110,
												111116
											],
											[
												111325,
												111331
											],
											[
												111347,
												111353
											],
											[
												111354,
												111360
											],
											[
												111510,
												111516
											],
											[
												111526,
												111532
											],
											[
												111533,
												111539
											],
											[
												111726,
												111732
											],
											[
												111781,
												111787
											],
											[
												111806,
												111812
											],
											[
												111813,
												111819
											],
											[
												111923,
												111929
											],
											[
												112027,
												112033
											],
											[
												112273,
												112279
											],
											[
												112487,
												112493
											],
											[
												112494,
												112500
											],
											[
												112548,
												112554
											],
											[
												113001,
												113007
											],
											[
												113308,
												113314
											],
											[
												113452,
												113458
											],
											[
												113701,
												113707
											],
											[
												114075,
												114081
											],
											[
												114435,
												114441
											],
											[
												114772,
												114778
											],
											[
												114887,
												114893
											],
											[
												114911,
												114917
											],
											[
												114985,
												114991
											],
											[
												115339,
												115345
											],
											[
												115454,
												115460
											],
											[
												115478,
												115484
											],
											[
												115552,
												115558
											],
											[
												115859,
												115865
											],
											[
												115967,
												115973
											],
											[
												116094,
												116100
											],
											[
												116260,
												116266
											],
											[
												116416,
												116422
											],
											[
												116477,
												116483
											],
											[
												116676,
												116682
											],
											[
												116853,
												116859
											],
											[
												116919,
												116925
											],
											[
												116952,
												116958
											],
											[
												117013,
												117019
											],
											[
												117148,
												117154
											],
											[
												117381,
												117387
											],
											[
												117427,
												117433
											],
											[
												117499,
												117505
											],
											[
												117531,
												117537
											],
											[
												117604,
												117610
											],
											[
												117995,
												118001
											],
											[
												118108,
												118114
											],
											[
												118574,
												118580
											],
											[
												118687,
												118693
											],
											[
												119036,
												119042
											],
											[
												119253,
												119259
											],
											[
												119453,
												119459
											],
											[
												119521,
												119527
											],
											[
												119750,
												119756
											],
											[
												119829,
												119835
											],
											[
												119925,
												119931
											],
											[
												120125,
												120131
											],
											[
												120312,
												120318
											],
											[
												120572,
												120578
											],
											[
												120801,
												120807
											],
											[
												120826,
												120832
											],
											[
												121026,
												121032
											],
											[
												121198,
												121204
											],
											[
												121234,
												121240
											],
											[
												121313,
												121319
											],
											[
												121578,
												121584
											],
											[
												121751,
												121757
											],
											[
												121967,
												121973
											],
											[
												122157,
												122163
											],
											[
												122367,
												122373
											],
											[
												122461,
												122467
											],
											[
												122739,
												122745
											],
											[
												122975,
												122981
											],
											[
												123056,
												123062
											],
											[
												123316,
												123322
											],
											[
												123532,
												123538
											],
											[
												123565,
												123571
											],
											[
												123796,
												123802
											],
											[
												123908,
												123914
											],
											[
												123967,
												123973
											],
											[
												124111,
												124117
											],
											[
												124307,
												124313
											],
											[
												124541,
												124547
											],
											[
												124554,
												124560
											],
											[
												124577,
												124583
											],
											[
												124789,
												124795
											],
											[
												124833,
												124839
											],
											[
												124919,
												124925
											],
											[
												125000,
												125006
											],
											[
												125046,
												125052
											],
											[
												125105,
												125111
											],
											[
												125182,
												125188
											],
											[
												125242,
												125248
											],
											[
												125437,
												125443
											],
											[
												125566,
												125572
											],
											[
												125667,
												125673
											],
											[
												125815,
												125821
											],
											[
												125841,
												125847
											],
											[
												126107,
												126113
											],
											[
												126263,
												126269
											],
											[
												126426,
												126432
											],
											[
												126462,
												126468
											],
											[
												126559,
												126565
											],
											[
												126750,
												126756
											],
											[
												126925,
												126931
											],
											[
												126941,
												126947
											],
											[
												127048,
												127054
											],
											[
												127116,
												127122
											],
											[
												127186,
												127192
											],
											[
												127260,
												127266
											],
											[
												127399,
												127405
											],
											[
												127506,
												127512
											],
											[
												127530,
												127536
											],
											[
												127676,
												127682
											],
											[
												127700,
												127706
											],
											[
												127787,
												127793
											],
											[
												127921,
												127927
											],
											[
												128056,
												128062
											],
											[
												128324,
												128330
											],
											[
												128367,
												128373
											],
											[
												128454,
												128460
											],
											[
												128562,
												128568
											],
											[
												128749,
												128755
											],
											[
												128914,
												128920
											],
											[
												128954,
												128960
											],
											[
												129037,
												129043
											],
											[
												129197,
												129203
											],
											[
												129393,
												129399
											],
											[
												129593,
												129599
											],
											[
												129663,
												129669
											],
											[
												129699,
												129705
											],
											[
												129737,
												129743
											],
											[
												129773,
												129779
											],
											[
												129882,
												129888
											],
											[
												129909,
												129915
											],
											[
												130062,
												130068
											],
											[
												130195,
												130201
											],
											[
												130275,
												130281
											],
											[
												130441,
												130447
											],
											[
												130519,
												130525
											],
											[
												130742,
												130748
											],
											[
												131043,
												131049
											],
											[
												131359,
												131365
											],
											[
												131734,
												131740
											],
											[
												131912,
												131918
											],
											[
												132185,
												132191
											],
											[
												132417,
												132423
											],
											[
												132661,
												132667
											],
											[
												133086,
												133092
											],
											[
												133145,
												133151
											],
											[
												133319,
												133325
											],
											[
												133594,
												133600
											],
											[
												133873,
												133879
											],
											[
												134091,
												134097
											],
											[
												134413,
												134419
											],
											[
												134612,
												134618
											],
											[
												134865,
												134871
											],
											[
												134938,
												134944
											],
											[
												135372,
												135378
											],
											[
												135591,
												135597
											],
											[
												135982,
												135988
											],
											[
												136008,
												136014
											],
											[
												136050,
												136056
											],
											[
												136332,
												136338
											],
											[
												136464,
												136470
											],
											[
												136696,
												136702
											],
											[
												136812,
												136818
											],
											[
												137035,
												137041
											],
											[
												137299,
												137305
											],
											[
												137416,
												137422
											],
											[
												137641,
												137647
											],
											[
												137946,
												137952
											],
											[
												138153,
												138159
											],
											[
												138201,
												138207
											],
											[
												138364,
												138370
											],
											[
												138554,
												138560
											],
											[
												138663,
												138669
											],
											[
												138930,
												138936
											],
											[
												139085,
												139091
											],
											[
												139137,
												139143
											],
											[
												139351,
												139357
											],
											[
												139555,
												139561
											],
											[
												139612,
												139618
											],
											[
												139669,
												139675
											],
											[
												139828,
												139834
											],
											[
												139946,
												139952
											],
											[
												139976,
												139982
											],
											[
												140071,
												140077
											],
											[
												140170,
												140176
											],
											[
												140310,
												140316
											],
											[
												140521,
												140527
											],
											[
												140686,
												140692
											],
											[
												140809,
												140815
											],
											[
												140936,
												140942
											],
											[
												141042,
												141048
											],
											[
												141242,
												141248
											],
											[
												141296,
												141302
											],
											[
												141415,
												141421
											],
											[
												141593,
												141599
											],
											[
												141666,
												141672
											],
											[
												141744,
												141750
											],
											[
												141775,
												141781
											],
											[
												141960,
												141966
											],
											[
												142041,
												142047
											],
											[
												142277,
												142283
											],
											[
												142452,
												142458
											],
											[
												142642,
												142648
											],
											[
												142773,
												142779
											],
											[
												142918,
												142924
											],
											[
												143115,
												143121
											],
											[
												143399,
												143405
											],
											[
												143516,
												143522
											],
											[
												143610,
												143616
											],
											[
												143758,
												143764
											],
											[
												143876,
												143882
											],
											[
												144014,
												144020
											],
											[
												144088,
												144094
											],
											[
												144181,
												144187
											],
											[
												144289,
												144295
											],
											[
												144425,
												144431
											],
											[
												144555,
												144561
											],
											[
												144717,
												144723
											],
											[
												144866,
												144872
											],
											[
												145165,
												145171
											],
											[
												145469,
												145475
											],
											[
												145728,
												145734
											],
											[
												145781,
												145787
											],
											[
												145916,
												145922
											],
											[
												146023,
												146029
											],
											[
												146175,
												146181
											],
											[
												146368,
												146374
											],
											[
												146503,
												146509
											],
											[
												146594,
												146600
											],
											[
												146729,
												146735
											],
											[
												146960,
												146966
											],
											[
												147224,
												147230
											],
											[
												147335,
												147341
											],
											[
												147585,
												147591
											],
											[
												147709,
												147715
											],
											[
												147807,
												147813
											],
											[
												147874,
												147880
											],
											[
												148131,
												148137
											],
											[
												148541,
												148547
											],
											[
												148949,
												148955
											],
											[
												149369,
												149375
											],
											[
												149780,
												149786
											],
											[
												150079,
												150085
											],
											[
												150281,
												150287
											],
											[
												150320,
												150326
											],
											[
												150334,
												150340
											],
											[
												150525,
												150531
											],
											[
												150727,
												150733
											],
											[
												150788,
												150794
											],
											[
												150821,
												150827
											],
											[
												150874,
												150880
											],
											[
												150942,
												150948
											],
											[
												151037,
												151043
											],
											[
												151120,
												151126
											],
											[
												151182,
												151188
											],
											[
												151271,
												151277
											],
											[
												151428,
												151434
											],
											[
												151505,
												151511
											],
											[
												151571,
												151577
											],
											[
												151624,
												151630
											],
											[
												151717,
												151723
											],
											[
												151749,
												151755
											],
											[
												151773,
												151779
											],
											[
												151949,
												151955
											],
											[
												151997,
												152003
											],
											[
												152125,
												152131
											],
											[
												152156,
												152162
											],
											[
												152381,
												152387
											],
											[
												152436,
												152442
											],
											[
												152753,
												152759
											],
											[
												153028,
												153034
											],
											[
												153189,
												153195
											],
											[
												153219,
												153225
											],
											[
												153423,
												153429
											],
											[
												153493,
												153499
											],
											[
												153608,
												153614
											],
											[
												153820,
												153826
											],
											[
												153891,
												153897
											],
											[
												154090,
												154096
											],
											[
												154300,
												154306
											],
											[
												154350,
												154356
											],
											[
												154508,
												154514
											],
											[
												154846,
												154852
											],
											[
												154864,
												154870
											],
											[
												154897,
												154903
											],
											[
												154923,
												154929
											],
											[
												155111,
												155117
											],
											[
												155140,
												155146
											],
											[
												155180,
												155186
											],
											[
												155209,
												155215
											],
											[
												155249,
												155255
											],
											[
												155278,
												155284
											],
											[
												155318,
												155324
											],
											[
												155347,
												155353
											],
											[
												155387,
												155393
											],
											[
												155417,
												155423
											],
											[
												155458,
												155464
											],
											[
												155489,
												155495
											],
											[
												155802,
												155808
											],
											[
												155852,
												155858
											],
											[
												156201,
												156207
											],
											[
												156238,
												156244
											],
											[
												156290,
												156296
											],
											[
												156502,
												156508
											],
											[
												156539,
												156545
											],
											[
												156591,
												156597
											],
											[
												156740,
												156746
											],
											[
												156983,
												156989
											],
											[
												157020,
												157026
											],
											[
												157128,
												157134
											],
											[
												157338,
												157344
											],
											[
												157458,
												157464
											],
											[
												157678,
												157684
											],
											[
												158005,
												158011
											],
											[
												158063,
												158069
											],
											[
												158221,
												158227
											],
											[
												158577,
												158583
											],
											[
												158614,
												158620
											],
											[
												158666,
												158672
											],
											[
												158785,
												158791
											],
											[
												158985,
												158991
											],
											[
												159000,
												159006
											],
											[
												159147,
												159153
											],
											[
												159214,
												159220
											],
											[
												159288,
												159294
											],
											[
												159405,
												159411
											],
											[
												159457,
												159463
											],
											[
												159725,
												159731
											],
											[
												159732,
												159738
											],
											[
												159972,
												159978
											],
											[
												160098,
												160104
											],
											[
												160153,
												160159
											],
											[
												160187,
												160193
											],
											[
												160386,
												160392
											],
											[
												160540,
												160546
											],
											[
												160547,
												160553
											],
											[
												160630,
												160636
											],
											[
												160910,
												160916
											],
											[
												161198,
												161204
											],
											[
												161205,
												161211
											],
											[
												161293,
												161299
											],
											[
												161475,
												161481
											],
											[
												161482,
												161488
											],
											[
												161573,
												161579
											],
											[
												161781,
												161787
											],
											[
												161788,
												161794
											],
											[
												161886,
												161892
											],
											[
												162129,
												162135
											],
											[
												162136,
												162142
											],
											[
												162243,
												162249
											],
											[
												162526,
												162532
											],
											[
												162533,
												162539
											],
											[
												162774,
												162780
											],
											[
												162839,
												162845
											],
											[
												163123,
												163129
											],
											[
												163130,
												163136
											],
											[
												163261,
												163267
											],
											[
												163487,
												163493
											],
											[
												163494,
												163500
											],
											[
												163551,
												163557
											],
											[
												163710,
												163716
											],
											[
												163927,
												163933
											],
											[
												164092,
												164098
											],
											[
												164099,
												164105
											],
											[
												164422,
												164428
											],
											[
												164656,
												164662
											],
											[
												164899,
												164905
											],
											[
												164906,
												164912
											],
											[
												164995,
												165001
											],
											[
												165236,
												165242
											],
											[
												165243,
												165249
											],
											[
												165467,
												165473
											],
											[
												165649,
												165655
											],
											[
												165807,
												165813
											],
											[
												165814,
												165820
											],
											[
												165909,
												165915
											],
											[
												165953,
												165959
											],
											[
												165960,
												165966
											],
											[
												166044,
												166050
											],
											[
												166088,
												166094
											],
											[
												166095,
												166101
											],
											[
												166179,
												166185
											],
											[
												166423,
												166429
											],
											[
												166430,
												166436
											],
											[
												166502,
												166508
											],
											[
												166582,
												166588
											],
											[
												166589,
												166595
											],
											[
												166649,
												166655
											],
											[
												166816,
												166822
											],
											[
												166823,
												166829
											],
											[
												166956,
												166962
											],
											[
												167174,
												167180
											],
											[
												167192,
												167198
											],
											[
												167512,
												167518
											],
											[
												167563,
												167569
											],
											[
												167888,
												167894
											],
											[
												167895,
												167901
											],
											[
												168192,
												168198
											],
											[
												168370,
												168376
											],
											[
												168611,
												168617
											],
											[
												168866,
												168872
											],
											[
												169057,
												169063
											],
											[
												169095,
												169101
											],
											[
												169269,
												169275
											],
											[
												169396,
												169402
											],
											[
												169462,
												169468
											],
											[
												169556,
												169562
											],
											[
												169681,
												169687
											],
											[
												169741,
												169747
											],
											[
												169902,
												169908
											],
											[
												170171,
												170177
											],
											[
												170178,
												170184
											],
											[
												170386,
												170392
											],
											[
												170393,
												170399
											],
											[
												170558,
												170564
											],
											[
												170615,
												170621
											],
											[
												170807,
												170813
											],
											[
												170863,
												170869
											],
											[
												170931,
												170937
											],
											[
												171175,
												171181
											],
											[
												171409,
												171415
											],
											[
												171604,
												171610
											],
											[
												171693,
												171699
											],
											[
												171884,
												171890
											],
											[
												171980,
												171986
											],
											[
												172247,
												172253
											],
											[
												172509,
												172515
											],
											[
												172586,
												172592
											],
											[
												172712,
												172718
											],
											[
												172955,
												172961
											],
											[
												173200,
												173206
											],
											[
												173207,
												173213
											],
											[
												173288,
												173294
											],
											[
												173492,
												173498
											],
											[
												173543,
												173549
											],
											[
												173633,
												173639
											],
											[
												173693,
												173699
											],
											[
												173854,
												173860
											],
											[
												174020,
												174026
											],
											[
												174207,
												174213
											],
											[
												174214,
												174220
											],
											[
												174324,
												174330
											],
											[
												174451,
												174457
											],
											[
												174458,
												174464
											],
											[
												174532,
												174538
											],
											[
												174609,
												174615
											],
											[
												174616,
												174622
											],
											[
												174717,
												174723
											],
											[
												174792,
												174798
											],
											[
												174799,
												174805
											],
											[
												174878,
												174884
											],
											[
												174962,
												174968
											],
											[
												174969,
												174975
											],
											[
												175121,
												175127
											],
											[
												175191,
												175197
											],
											[
												175323,
												175329
											],
											[
												175436,
												175442
											],
											[
												175529,
												175535
											],
											[
												175676,
												175682
											],
											[
												175943,
												175949
											],
											[
												176241,
												176247
											],
											[
												176444,
												176450
											],
											[
												176517,
												176523
											],
											[
												176628,
												176634
											],
											[
												176682,
												176688
											],
											[
												176772,
												176778
											],
											[
												176842,
												176848
											],
											[
												176914,
												176920
											],
											[
												176985,
												176991
											],
											[
												177031,
												177037
											],
											[
												177091,
												177097
											],
											[
												177152,
												177158
											],
											[
												177189,
												177195
											],
											[
												177244,
												177250
											],
											[
												177346,
												177352
											],
											[
												177444,
												177450
											],
											[
												177508,
												177514
											],
											[
												177574,
												177580
											],
											[
												177643,
												177649
											],
											[
												177682,
												177688
											],
											[
												177719,
												177725
											],
											[
												177963,
												177969
											],
											[
												178026,
												178032
											],
											[
												178087,
												178093
											],
											[
												178202,
												178208
											],
											[
												178269,
												178275
											],
											[
												178313,
												178319
											],
											[
												178382,
												178388
											],
											[
												178618,
												178624
											],
											[
												178673,
												178679
											],
											[
												178966,
												178972
											],
											[
												179046,
												179052
											],
											[
												179079,
												179085
											],
											[
												179214,
												179220
											],
											[
												179241,
												179247
											],
											[
												179428,
												179434
											],
											[
												179465,
												179471
											],
											[
												179523,
												179529
											],
											[
												179530,
												179536
											],
											[
												179601,
												179607
											],
											[
												179755,
												179761
											],
											[
												179854,
												179860
											],
											[
												180128,
												180134
											],
											[
												180257,
												180263
											],
											[
												180493,
												180499
											],
											[
												180561,
												180567
											],
											[
												180633,
												180639
											],
											[
												180693,
												180699
											],
											[
												180795,
												180801
											],
											[
												180875,
												180881
											],
											[
												181150,
												181156
											],
											[
												181244,
												181250
											],
											[
												181349,
												181355
											],
											[
												181540,
												181546
											],
											[
												181641,
												181647
											],
											[
												181747,
												181753
											],
											[
												181884,
												181890
											],
											[
												182033,
												182039
											],
											[
												182244,
												182250
											],
											[
												182396,
												182402
											],
											[
												182574,
												182580
											],
											[
												182804,
												182810
											],
											[
												182963,
												182969
											],
											[
												182996,
												183002
											],
											[
												183157,
												183163
											],
											[
												183164,
												183170
											],
											[
												183274,
												183280
											],
											[
												183450,
												183456
											],
											[
												183457,
												183463
											],
											[
												183551,
												183557
											],
											[
												183763,
												183769
											],
											[
												183770,
												183776
											],
											[
												183895,
												183901
											],
											[
												183973,
												183979
											],
											[
												184075,
												184081
											],
											[
												184175,
												184181
											],
											[
												184316,
												184322
											],
											[
												184593,
												184599
											],
											[
												184801,
												184807
											],
											[
												185070,
												185076
											],
											[
												185209,
												185215
											],
											[
												185355,
												185361
											],
											[
												185504,
												185510
											],
											[
												185622,
												185628
											],
											[
												185734,
												185740
											],
											[
												185886,
												185892
											],
											[
												186000,
												186006
											],
											[
												186147,
												186153
											],
											[
												186309,
												186315
											],
											[
												186434,
												186440
											],
											[
												186520,
												186526
											],
											[
												186663,
												186669
											],
											[
												186903,
												186909
											],
											[
												187058,
												187064
											],
											[
												187188,
												187194
											],
											[
												187363,
												187369
											],
											[
												187493,
												187499
											],
											[
												187677,
												187683
											],
											[
												187856,
												187862
											],
											[
												187951,
												187957
											],
											[
												188088,
												188094
											],
											[
												188164,
												188170
											],
											[
												188468,
												188474
											],
											[
												188552,
												188558
											],
											[
												188621,
												188627
											],
											[
												188705,
												188711
											],
											[
												188800,
												188806
											],
											[
												188984,
												188990
											],
											[
												189256,
												189262
											],
											[
												189382,
												189388
											],
											[
												189558,
												189564
											],
											[
												189683,
												189689
											],
											[
												189813,
												189819
											],
											[
												189947,
												189953
											],
											[
												190114,
												190120
											],
											[
												190202,
												190208
											],
											[
												190319,
												190325
											],
											[
												190590,
												190596
											],
											[
												190766,
												190772
											],
											[
												190949,
												190955
											],
											[
												191038,
												191044
											],
											[
												191282,
												191288
											],
											[
												191578,
												191584
											],
											[
												191686,
												191692
											],
											[
												191836,
												191842
											],
											[
												191934,
												191940
											],
											[
												192182,
												192188
											],
											[
												192468,
												192474
											],
											[
												192575,
												192581
											],
											[
												192723,
												192729
											],
											[
												192895,
												192901
											],
											[
												193064,
												193070
											],
											[
												193295,
												193301
											],
											[
												193403,
												193409
											],
											[
												193553,
												193559
											],
											[
												193651,
												193657
											],
											[
												193899,
												193905
											],
											[
												194144,
												194150
											],
											[
												194251,
												194257
											],
											[
												194406,
												194412
											],
											[
												194627,
												194633
											],
											[
												194803,
												194809
											],
											[
												194933,
												194939
											],
											[
												195101,
												195107
											],
											[
												195209,
												195215
											],
											[
												195272,
												195278
											],
											[
												195474,
												195480
											],
											[
												195654,
												195660
											],
											[
												195761,
												195767
											],
											[
												195823,
												195829
											],
											[
												195955,
												195961
											],
											[
												196058,
												196064
											],
											[
												196253,
												196259
											],
											[
												196430,
												196436
											],
											[
												196666,
												196672
											],
											[
												196731,
												196737
											],
											[
												196795,
												196801
											],
											[
												196888,
												196894
											],
											[
												196952,
												196958
											],
											[
												197117,
												197123
											],
											[
												197283,
												197289
											],
											[
												197450,
												197456
											],
											[
												197686,
												197692
											],
											[
												197719,
												197725
											],
											[
												197726,
												197732
											],
											[
												197920,
												197926
											],
											[
												197977,
												197983
											],
											[
												198055,
												198061
											],
											[
												198183,
												198189
											],
											[
												198283,
												198289
											],
											[
												198424,
												198430
											],
											[
												198567,
												198573
											],
											[
												198764,
												198770
											],
											[
												198852,
												198858
											],
											[
												199017,
												199023
											],
											[
												199254,
												199260
											],
											[
												199388,
												199394
											],
											[
												199566,
												199572
											],
											[
												199698,
												199704
											],
											[
												199869,
												199875
											],
											[
												200015,
												200021
											],
											[
												200054,
												200060
											],
											[
												200104,
												200110
											],
											[
												200250,
												200256
											],
											[
												200291,
												200297
											],
											[
												200348,
												200354
											],
											[
												200429,
												200435
											],
											[
												200497,
												200503
											],
											[
												200610,
												200616
											],
											[
												200769,
												200775
											],
											[
												200798,
												200804
											],
											[
												200805,
												200811
											],
											[
												200976,
												200982
											],
											[
												201112,
												201118
											],
											[
												201151,
												201157
											],
											[
												201207,
												201213
											],
											[
												201354,
												201360
											],
											[
												201393,
												201399
											],
											[
												201604,
												201610
											],
											[
												201852,
												201858
											],
											[
												202056,
												202062
											],
											[
												202281,
												202287
											],
											[
												202469,
												202475
											],
											[
												202576,
												202582
											],
											[
												202723,
												202729
											],
											[
												202759,
												202765
											],
											[
												202797,
												202803
											],
											[
												202834,
												202840
											],
											[
												202870,
												202876
											],
											[
												202921,
												202927
											],
											[
												203022,
												203028
											],
											[
												203219,
												203225
											],
											[
												203499,
												203505
											],
											[
												203619,
												203625
											],
											[
												203650,
												203656
											],
											[
												203657,
												203663
											],
											[
												203739,
												203745
											],
											[
												203788,
												203794
											],
											[
												203920,
												203926
											],
											[
												203951,
												203957
											],
											[
												203958,
												203964
											],
											[
												204054,
												204060
											],
											[
												204099,
												204105
											],
											[
												204157,
												204163
											],
											[
												204208,
												204214
											],
											[
												204262,
												204268
											],
											[
												204334,
												204340
											],
											[
												204341,
												204347
											],
											[
												204394,
												204400
											],
											[
												204609,
												204615
											],
											[
												204734,
												204740
											],
											[
												204777,
												204783
											],
											[
												204784,
												204790
											],
											[
												204837,
												204843
											],
											[
												204894,
												204900
											],
											[
												205142,
												205148
											],
											[
												205253,
												205259
											],
											[
												205381,
												205387
											],
											[
												205443,
												205449
											],
											[
												205500,
												205506
											],
											[
												205557,
												205563
											],
											[
												205721,
												205727
											],
											[
												205868,
												205874
											],
											[
												205894,
												205900
											],
											[
												205901,
												205907
											],
											[
												206042,
												206048
											],
											[
												206146,
												206152
											],
											[
												206253,
												206259
											],
											[
												206356,
												206362
											],
											[
												206459,
												206465
											],
											[
												206549,
												206555
											],
											[
												206757,
												206763
											],
											[
												206921,
												206927
											],
											[
												207228,
												207234
											],
											[
												207371,
												207377
											],
											[
												207516,
												207522
											],
											[
												207707,
												207713
											],
											[
												207868,
												207874
											],
											[
												207896,
												207902
											],
											[
												207953,
												207959
											],
											[
												207981,
												207987
											],
											[
												208126,
												208132
											],
											[
												208251,
												208257
											],
											[
												208279,
												208285
											],
											[
												208336,
												208342
											],
											[
												208364,
												208370
											],
											[
												208509,
												208515
											],
											[
												208796,
												208802
											],
											[
												209027,
												209033
											],
											[
												209348,
												209354
											],
											[
												209715,
												209721
											],
											[
												210163,
												210169
											],
											[
												210331,
												210337
											],
											[
												210563,
												210569
											],
											[
												210778,
												210784
											],
											[
												210938,
												210944
											],
											[
												211369,
												211375
											],
											[
												211541,
												211547
											],
											[
												211714,
												211720
											],
											[
												211887,
												211893
											],
											[
												212108,
												212114
											],
											[
												212290,
												212296
											],
											[
												212490,
												212496
											],
											[
												212660,
												212666
											],
											[
												212833,
												212839
											],
											[
												213020,
												213026
											],
											[
												213181,
												213187
											],
											[
												213360,
												213366
											],
											[
												213543,
												213549
											],
											[
												213718,
												213724
											],
											[
												213900,
												213906
											],
											[
												214161,
												214167
											],
											[
												214178,
												214184
											],
											[
												214245,
												214251
											],
											[
												214285,
												214291
											],
											[
												214621,
												214627
											],
											[
												214757,
												214763
											],
											[
												214782,
												214788
											],
											[
												214941,
												214947
											],
											[
												215086,
												215092
											],
											[
												215744,
												215750
											],
											[
												216464,
												216470
											],
											[
												216603,
												216609
											],
											[
												216769,
												216775
											],
											[
												216786,
												216792
											],
											[
												216874,
												216880
											],
											[
												216907,
												216913
											],
											[
												216924,
												216930
											],
											[
												217051,
												217057
											],
											[
												217231,
												217237
											],
											[
												217248,
												217254
											],
											[
												217341,
												217347
											],
											[
												217374,
												217380
											],
											[
												217391,
												217397
											],
											[
												217524,
												217530
											],
											[
												217549,
												217555
											],
											[
												217729,
												217735
											],
											[
												217746,
												217752
											],
											[
												217760,
												217766
											],
											[
												217825,
												217831
											],
											[
												217858,
												217864
											],
											[
												217875,
												217881
											],
											[
												217905,
												217911
											],
											[
												217925,
												217931
											],
											[
												217980,
												217986
											],
											[
												218077,
												218083
											],
											[
												218245,
												218251
											],
											[
												218282,
												218288
											],
											[
												218333,
												218339
											],
											[
												218353,
												218359
											],
											[
												218408,
												218414
											],
											[
												218737,
												218743
											],
											[
												218770,
												218776
											],
											[
												218787,
												218793
											],
											[
												218869,
												218875
											],
											[
												219112,
												219118
											],
											[
												219129,
												219135
											],
											[
												219270,
												219276
											],
											[
												219298,
												219304
											],
											[
												219310,
												219316
											],
											[
												219370,
												219376
											],
											[
												219526,
												219532
											],
											[
												219770,
												219776
											],
											[
												219787,
												219793
											],
											[
												219921,
												219927
											],
											[
												219949,
												219955
											],
											[
												219961,
												219967
											],
											[
												220021,
												220027
											],
											[
												220368,
												220374
											],
											[
												220471,
												220477
											],
											[
												220504,
												220510
											],
											[
												220521,
												220527
											],
											[
												220821,
												220827
											],
											[
												220838,
												220844
											],
											[
												220950,
												220956
											],
											[
												220983,
												220989
											],
											[
												221000,
												221006
											],
											[
												221352,
												221358
											],
											[
												221369,
												221375
											],
											[
												221480,
												221486
											],
											[
												221513,
												221519
											],
											[
												221530,
												221536
											],
											[
												221871,
												221877
											],
											[
												221888,
												221894
											],
											[
												221997,
												222003
											],
											[
												222030,
												222036
											],
											[
												222047,
												222053
											],
											[
												222379,
												222385
											],
											[
												222396,
												222402
											],
											[
												222519,
												222525
											],
											[
												222552,
												222558
											],
											[
												222569,
												222575
											],
											[
												222908,
												222914
											],
											[
												222925,
												222931
											],
											[
												223049,
												223055
											],
											[
												223077,
												223083
											],
											[
												223089,
												223095
											],
											[
												223149,
												223155
											],
											[
												223265,
												223271
											],
											[
												223412,
												223418
											],
											[
												223429,
												223435
											],
											[
												223563,
												223569
											],
											[
												223591,
												223597
											],
											[
												223603,
												223609
											],
											[
												223663,
												223669
											],
											[
												223867,
												223873
											],
											[
												224106,
												224112
											],
											[
												224217,
												224223
											],
											[
												224237,
												224243
											],
											[
												224292,
												224298
											],
											[
												224616,
												224622
											],
											[
												224705,
												224711
											],
											[
												224725,
												224731
											],
											[
												224809,
												224815
											],
											[
												225191,
												225197
											],
											[
												225322,
												225328
											],
											[
												225342,
												225348
											],
											[
												225397,
												225403
											],
											[
												225770,
												225776
											],
											[
												225900,
												225906
											],
											[
												225920,
												225926
											],
											[
												225975,
												225981
											],
											[
												226362,
												226368
											],
											[
												226465,
												226471
											],
											[
												226485,
												226491
											],
											[
												226540,
												226546
											],
											[
												226981,
												226987
											],
											[
												227073,
												227079
											],
											[
												227093,
												227099
											],
											[
												227148,
												227154
											],
											[
												227550,
												227556
											],
											[
												227670,
												227676
											],
											[
												227690,
												227696
											],
											[
												227745,
												227751
											],
											[
												228072,
												228078
											],
											[
												228202,
												228208
											],
											[
												228222,
												228228
											],
											[
												228277,
												228283
											],
											[
												228943,
												228949
											],
											[
												229374,
												229380
											],
											[
												229455,
												229461
											],
											[
												229757,
												229763
											],
											[
												229986,
												229992
											],
											[
												230204,
												230210
											],
											[
												230235,
												230241
											],
											[
												230430,
												230436
											],
											[
												230461,
												230467
											],
											[
												230671,
												230677
											],
											[
												230871,
												230877
											],
											[
												231057,
												231063
											],
											[
												231231,
												231237
											],
											[
												231408,
												231414
											],
											[
												231640,
												231646
											],
											[
												231652,
												231658
											],
											[
												231714,
												231720
											],
											[
												231746,
												231752
											],
											[
												232245,
												232251
											],
											[
												232495,
												232501
											],
											[
												232520,
												232526
											],
											[
												233110,
												233116
											],
											[
												233698,
												233704
											],
											[
												234164,
												234170
											],
											[
												234324,
												234330
											],
											[
												234385,
												234391
											],
											[
												234436,
												234442
											],
											[
												234456,
												234462
											],
											[
												234511,
												234517
											],
											[
												235148,
												235154
											],
											[
												235176,
												235182
											],
											[
												235188,
												235194
											],
											[
												235394,
												235400
											],
											[
												235406,
												235412
											],
											[
												235489,
												235495
											],
											[
												235517,
												235523
											],
											[
												235529,
												235535
											],
											[
												235660,
												235666
											],
											[
												235795,
												235801
											],
											[
												235856,
												235862
											],
											[
												235907,
												235913
											],
											[
												235927,
												235933
											],
											[
												235982,
												235988
											],
											[
												236629,
												236635
											],
											[
												236657,
												236663
											],
											[
												236669,
												236675
											],
											[
												236917,
												236923
											],
											[
												236929,
												236935
											],
											[
												237017,
												237023
											],
											[
												237045,
												237051
											],
											[
												237057,
												237063
											],
											[
												237190,
												237196
											],
											[
												237215,
												237221
											],
											[
												237460,
												237466
											],
											[
												237472,
												237478
											],
											[
												237543,
												237549
											],
											[
												237571,
												237577
											],
											[
												237583,
												237589
											],
											[
												237910,
												237916
											],
											[
												237922,
												237928
											],
											[
												238008,
												238014
											],
											[
												238036,
												238042
											],
											[
												238048,
												238054
											],
											[
												238493,
												238499
											],
											[
												238505,
												238511
											],
											[
												238576,
												238582
											],
											[
												238604,
												238610
											],
											[
												238616,
												238622
											],
											[
												238932,
												238938
											],
											[
												238944,
												238950
											],
											[
												239013,
												239019
											],
											[
												239041,
												239047
											],
											[
												239053,
												239059
											],
											[
												239290,
												239296
											],
											[
												239302,
												239308
											],
											[
												239438,
												239444
											],
											[
												239466,
												239472
											],
											[
												239478,
												239484
											],
											[
												239538,
												239544
											],
											[
												239694,
												239700
											],
											[
												239841,
												239847
											],
											[
												240063,
												240069
											],
											[
												240075,
												240081
											],
											[
												240204,
												240210
											],
											[
												240232,
												240238
											],
											[
												240244,
												240250
											],
											[
												240304,
												240310
											],
											[
												240676,
												240682
											],
											[
												240688,
												240694
											],
											[
												240702,
												240708
											],
											[
												240762,
												240768
											],
											[
												240790,
												240796
											],
											[
												240802,
												240808
											],
											[
												240832,
												240838
											],
											[
												240852,
												240858
											],
											[
												241000,
												241006
											],
											[
												241144,
												241150
											],
											[
												241242,
												241248
											],
											[
												241270,
												241276
											],
											[
												241282,
												241288
											],
											[
												241580,
												241586
											],
											[
												241592,
												241598
											],
											[
												241699,
												241705
											],
											[
												241727,
												241733
											],
											[
												241739,
												241745
											],
											[
												242089,
												242095
											],
											[
												242101,
												242107
											],
											[
												242207,
												242213
											],
											[
												242235,
												242241
											],
											[
												242247,
												242253
											],
											[
												242531,
												242537
											],
											[
												242697,
												242703
											],
											[
												242709,
												242715
											],
											[
												242813,
												242819
											],
											[
												242841,
												242847
											],
											[
												242853,
												242859
											],
											[
												243183,
												243189
											],
											[
												243361,
												243367
											],
											[
												243373,
												243379
											],
											[
												243492,
												243498
											],
											[
												243520,
												243526
											],
											[
												243532,
												243538
											],
											[
												243592,
												243598
											],
											[
												243708,
												243714
											],
											[
												243850,
												243856
											],
											[
												243864,
												243870
											],
											[
												243924,
												243930
											],
											[
												243952,
												243958
											],
											[
												243964,
												243970
											],
											[
												243994,
												244000
											],
											[
												244014,
												244020
											],
											[
												244188,
												244194
											],
											[
												244344,
												244350
											],
											[
												244364,
												244370
											],
											[
												244424,
												244430
											],
											[
												244452,
												244458
											],
											[
												244464,
												244470
											],
											[
												244549,
												244555
											],
											[
												244569,
												244575
											],
											[
												244720,
												244726
											],
											[
												244876,
												244882
											],
											[
												244888,
												244894
											],
											[
												244917,
												244923
											],
											[
												244977,
												244983
											],
											[
												245005,
												245011
											],
											[
												245017,
												245023
											],
											[
												245150,
												245156
											],
											[
												245170,
												245176
											],
											[
												245395,
												245401
											],
											[
												245488,
												245494
											],
											[
												245661,
												245667
											],
											[
												245673,
												245679
											],
											[
												245802,
												245808
											],
											[
												245830,
												245836
											],
											[
												245842,
												245848
											],
											[
												245902,
												245908
											],
											[
												246106,
												246112
											],
											[
												246359,
												246365
											],
											[
												246419,
												246425
											],
											[
												246900,
												246906
											],
											[
												246957,
												246963
											],
											[
												247370,
												247376
											],
											[
												247562,
												247568
											],
											[
												247831,
												247837
											],
											[
												248174,
												248180
											],
											[
												248268,
												248274
											],
											[
												248520,
												248526
											],
											[
												248643,
												248649
											],
											[
												248667,
												248673
											],
											[
												248910,
												248916
											],
											[
												248950,
												248956
											],
											[
												249111,
												249117
											],
											[
												249181,
												249187
											],
											[
												249195,
												249201
											],
											[
												249245,
												249251
											],
											[
												249254,
												249260
											],
											[
												249342,
												249348
											],
											[
												249432,
												249438
											],
											[
												249545,
												249551
											],
											[
												249692,
												249698
											],
											[
												249772,
												249778
											],
											[
												249858,
												249864
											],
											[
												249966,
												249972
											],
											[
												250048,
												250054
											],
											[
												250196,
												250202
											],
											[
												250254,
												250260
											],
											[
												250290,
												250296
											],
											[
												250304,
												250310
											],
											[
												250354,
												250360
											],
											[
												250363,
												250369
											],
											[
												250482,
												250488
											],
											[
												250601,
												250607
											],
											[
												250678,
												250684
											],
											[
												250769,
												250775
											],
											[
												250812,
												250818
											],
											[
												250837,
												250843
											],
											[
												250848,
												250854
											],
											[
												250861,
												250867
											],
											[
												250917,
												250923
											],
											[
												250928,
												250934
											],
											[
												250954,
												250960
											],
											[
												250974,
												250980
											],
											[
												250985,
												250991
											],
											[
												250998,
												251004
											],
											[
												251010,
												251016
											],
											[
												251058,
												251064
											],
											[
												251104,
												251110
											],
											[
												251143,
												251149
											],
											[
												251189,
												251195
											],
											[
												251224,
												251230
											],
											[
												251272,
												251278
											],
											[
												251283,
												251289
											],
											[
												251316,
												251322
											],
											[
												251327,
												251333
											],
											[
												251340,
												251346
											],
											[
												251387,
												251393
											],
											[
												251398,
												251404
											],
											[
												251425,
												251431
											],
											[
												251445,
												251451
											],
											[
												251456,
												251462
											],
											[
												251469,
												251475
											],
											[
												251482,
												251488
											],
											[
												251540,
												251546
											],
											[
												251581,
												251587
											],
											[
												251629,
												251635
											],
											[
												251640,
												251646
											],
											[
												251673,
												251679
											],
											[
												251684,
												251690
											],
											[
												251697,
												251703
											],
											[
												251744,
												251750
											],
											[
												251755,
												251761
											],
											[
												251782,
												251788
											],
											[
												251807,
												251813
											],
											[
												251837,
												251843
											],
											[
												251848,
												251854
											],
											[
												251861,
												251867
											],
											[
												251874,
												251880
											],
											[
												251936,
												251942
											],
											[
												251993,
												251999
											],
											[
												252004,
												252010
											],
											[
												252048,
												252054
											],
											[
												252087,
												252093
											],
											[
												252098,
												252104
											],
											[
												252138,
												252144
											],
											[
												252149,
												252155
											],
											[
												252162,
												252168
											],
											[
												252206,
												252212
											],
											[
												252272,
												252278
											],
											[
												252283,
												252289
											],
											[
												252338,
												252344
											],
											[
												252388,
												252394
											],
											[
												252399,
												252405
											],
											[
												252450,
												252456
											],
											[
												252476,
												252482
											],
											[
												252487,
												252493
											],
											[
												252545,
												252551
											],
											[
												252596,
												252602
											],
											[
												252607,
												252613
											],
											[
												252620,
												252626
											],
											[
												252662,
												252668
											],
											[
												252710,
												252716
											],
											[
												252721,
												252727
											],
											[
												252734,
												252740
											],
											[
												252764,
												252770
											],
											[
												252814,
												252820
											],
											[
												252825,
												252831
											],
											[
												252874,
												252880
											],
											[
												252906,
												252912
											],
											[
												252915,
												252921
											],
											[
												252999,
												253005
											],
											[
												253050,
												253056
											],
											[
												253099,
												253105
											],
											[
												253131,
												253137
											],
											[
												253140,
												253146
											],
											[
												253224,
												253230
											],
											[
												253275,
												253281
											],
											[
												253415,
												253421
											],
											[
												253545,
												253551
											],
											[
												253572,
												253578
											],
											[
												253741,
												253747
											],
											[
												253894,
												253900
											],
											[
												253953,
												253959
											],
											[
												253981,
												253987
											],
											[
												254016,
												254022
											],
											[
												254247,
												254253
											],
											[
												254346,
												254352
											],
											[
												254355,
												254361
											],
											[
												254524,
												254530
											],
											[
												254558,
												254564
											],
											[
												254579,
												254585
											],
											[
												254599,
												254605
											],
											[
												254648,
												254654
											],
											[
												254902,
												254908
											],
											[
												254920,
												254926
											],
											[
												254978,
												254984
											],
											[
												255020,
												255026
											],
											[
												255273,
												255279
											],
											[
												255280,
												255286
											],
											[
												255289,
												255295
											],
											[
												255420,
												255426
											],
											[
												255431,
												255437
											],
											[
												255466,
												255472
											],
											[
												255484,
												255490
											],
											[
												255507,
												255513
											],
											[
												255527,
												255533
											],
											[
												255576,
												255582
											],
											[
												255653,
												255659
											],
											[
												255706,
												255712
											],
											[
												255713,
												255719
											],
											[
												255722,
												255728
											],
											[
												255808,
												255814
											],
											[
												256018,
												256024
											],
											[
												256143,
												256149
											],
											[
												256211,
												256217
											],
											[
												256229,
												256235
											],
											[
												256408,
												256414
											],
											[
												256415,
												256421
											],
											[
												256424,
												256430
											],
											[
												256576,
												256582
											],
											[
												256702,
												256708
											],
											[
												256786,
												256792
											],
											[
												256804,
												256810
											],
											[
												257001,
												257007
											],
											[
												257159,
												257165
											],
											[
												257229,
												257235
											],
											[
												257247,
												257253
											],
											[
												257419,
												257425
											],
											[
												257455,
												257461
											],
											[
												257508,
												257514
											],
											[
												257587,
												257593
											],
											[
												257605,
												257611
											],
											[
												257788,
												257794
											],
											[
												257795,
												257801
											],
											[
												257804,
												257810
											],
											[
												257828,
												257834
											],
											[
												257908,
												257914
											],
											[
												258010,
												258016
											],
											[
												258160,
												258166
											],
											[
												258238,
												258244
											],
											[
												258256,
												258262
											],
											[
												258442,
												258448
											],
											[
												258635,
												258641
											],
											[
												258717,
												258723
											],
											[
												258730,
												258736
											],
											[
												258780,
												258786
											],
											[
												258910,
												258916
											],
											[
												258951,
												258957
											],
											[
												258958,
												258964
											],
											[
												258967,
												258973
											],
											[
												259032,
												259038
											],
											[
												259089,
												259095
											],
											[
												259154,
												259160
											],
											[
												259167,
												259173
											],
											[
												259217,
												259223
											],
											[
												259310,
												259316
											],
											[
												259351,
												259357
											],
											[
												259358,
												259364
											],
											[
												259367,
												259373
											],
											[
												259432,
												259438
											],
											[
												259489,
												259495
											],
											[
												259564,
												259570
											],
											[
												259577,
												259583
											],
											[
												259627,
												259633
											],
											[
												259824,
												259830
											],
											[
												259831,
												259837
											],
											[
												259840,
												259846
											],
											[
												259897,
												259903
											],
											[
												259945,
												259951
											],
											[
												260020,
												260026
											],
											[
												260033,
												260039
											],
											[
												260083,
												260089
											],
											[
												260230,
												260236
											],
											[
												260272,
												260278
											],
											[
												260279,
												260285
											],
											[
												260288,
												260294
											],
											[
												260345,
												260351
											],
											[
												260393,
												260399
											],
											[
												260453,
												260459
											],
											[
												260471,
												260477
											],
											[
												260574,
												260580
											],
											[
												260599,
												260605
											],
											[
												260652,
												260658
											],
											[
												260659,
												260665
											],
											[
												260668,
												260674
											],
											[
												260741,
												260747
											],
											[
												260794,
												260800
											],
											[
												260849,
												260855
											],
											[
												260867,
												260873
											],
											[
												260967,
												260973
											],
											[
												261006,
												261012
											],
											[
												261013,
												261019
											],
											[
												261022,
												261028
											],
											[
												261046,
												261052
											],
											[
												261140,
												261146
											],
											[
												261184,
												261190
											],
											[
												261229,
												261235
											],
											[
												261308,
												261314
											],
											[
												261496,
												261502
											],
											[
												261528,
												261534
											],
											[
												261696,
												261702
											],
											[
												261862,
												261868
											],
											[
												261983,
												261989
											],
											[
												262053,
												262059
											],
											[
												262073,
												262079
											],
											[
												262122,
												262128
											],
											[
												262356,
												262362
											],
											[
												262401,
												262407
											],
											[
												262444,
												262450
											],
											[
												262485,
												262491
											],
											[
												262528,
												262534
											],
											[
												262587,
												262593
											],
											[
												262607,
												262613
											],
											[
												262656,
												262662
											],
											[
												262871,
												262877
											],
											[
												262911,
												262917
											],
											[
												262953,
												262959
											],
											[
												263025,
												263031
											],
											[
												263045,
												263051
											],
											[
												263094,
												263100
											],
											[
												263311,
												263317
											],
											[
												263356,
												263362
											],
											[
												263399,
												263405
											],
											[
												263443,
												263449
											],
											[
												263486,
												263492
											],
											[
												263547,
												263553
											],
											[
												263567,
												263573
											],
											[
												263616,
												263622
											],
											[
												263871,
												263877
											],
											[
												263916,
												263922
											],
											[
												263959,
												263965
											],
											[
												264003,
												264009
											],
											[
												264046,
												264052
											],
											[
												264117,
												264123
											],
											[
												264137,
												264143
											],
											[
												264186,
												264192
											],
											[
												264397,
												264403
											],
											[
												264434,
												264440
											],
											[
												264469,
												264475
											],
											[
												264505,
												264511
											],
											[
												264539,
												264545
											],
											[
												264610,
												264616
											],
											[
												264630,
												264636
											],
											[
												264679,
												264685
											],
											[
												264890,
												264896
											],
											[
												264927,
												264933
											],
											[
												264962,
												264968
											],
											[
												264998,
												265004
											],
											[
												265032,
												265038
											],
											[
												265088,
												265094
											],
											[
												265108,
												265114
											],
											[
												265183,
												265189
											],
											[
												265437,
												265443
											],
											[
												265489,
												265495
											],
											[
												265528,
												265534
											],
											[
												265580,
												265586
											],
											[
												265600,
												265606
											],
											[
												265649,
												265655
											],
											[
												265874,
												265880
											],
											[
												265907,
												265913
											],
											[
												266036,
												266042
											],
											[
												266128,
												266134
											],
											[
												266148,
												266154
											],
											[
												266313,
												266319
											],
											[
												266371,
												266377
											],
											[
												266392,
												266398
											],
											[
												266412,
												266418
											],
											[
												266461,
												266467
											],
											[
												266678,
												266684
											],
											[
												266691,
												266697
											],
											[
												266771,
												266777
											],
											[
												266854,
												266860
											],
											[
												266931,
												266937
											],
											[
												266989,
												266995
											],
											[
												267010,
												267016
											],
											[
												267030,
												267036
											],
											[
												267079,
												267085
											],
											[
												267284,
												267290
											],
											[
												267297,
												267303
											],
											[
												267376,
												267382
											],
											[
												267459,
												267465
											],
											[
												267542,
												267548
											],
											[
												267623,
												267629
											],
											[
												267730,
												267736
											],
											[
												267962,
												267968
											],
											[
												268026,
												268032
											],
											[
												268233,
												268239
											],
											[
												268368,
												268374
											],
											[
												268497,
												268503
											],
											[
												268523,
												268529
											],
											[
												268657,
												268663
											],
											[
												268721,
												268727
											],
											[
												268732,
												268738
											],
											[
												268913,
												268919
											],
											[
												269043,
												269049
											],
											[
												269313,
												269319
											],
											[
												269478,
												269484
											],
											[
												269710,
												269716
											],
											[
												269960,
												269966
											],
											[
												269967,
												269973
											],
											[
												269976,
												269982
											],
											[
												270051,
												270057
											],
											[
												270177,
												270183
											],
											[
												270476,
												270482
											],
											[
												270619,
												270625
											],
											[
												270954,
												270960
											],
											[
												271092,
												271098
											],
											[
												271099,
												271105
											],
											[
												271108,
												271114
											],
											[
												271320,
												271326
											],
											[
												271373,
												271379
											],
											[
												271386,
												271392
											],
											[
												271559,
												271565
											],
											[
												271715,
												271721
											],
											[
												271751,
												271757
											],
											[
												271764,
												271770
											],
											[
												271881,
												271887
											],
											[
												271977,
												271983
											],
											[
												271988,
												271994
											],
											[
												272018,
												272024
											],
											[
												272031,
												272037
											],
											[
												272054,
												272060
											],
											[
												272074,
												272080
											],
											[
												272218,
												272224
											],
											[
												272268,
												272274
											],
											[
												272303,
												272309
											],
											[
												272357,
												272363
											],
											[
												272374,
												272380
											],
											[
												272404,
												272410
											],
											[
												272417,
												272423
											],
											[
												272492,
												272498
											],
											[
												272512,
												272518
											],
											[
												272638,
												272644
											],
											[
												272688,
												272694
											],
											[
												272729,
												272735
											],
											[
												272783,
												272789
											],
											[
												272809,
												272815
											],
											[
												272839,
												272845
											],
											[
												272852,
												272858
											],
											[
												272972,
												272978
											],
											[
												272992,
												272998
											],
											[
												273176,
												273182
											],
											[
												273268,
												273274
											],
											[
												273336,
												273342
											],
											[
												273343,
												273349
											],
											[
												273352,
												273358
											],
											[
												273384,
												273390
											],
											[
												273630,
												273636
											],
											[
												273828,
												273834
											],
											[
												274084,
												274090
											],
											[
												274186,
												274192
											],
											[
												274299,
												274305
											],
											[
												274396,
												274402
											],
											[
												274703,
												274709
											],
											[
												274839,
												274845
											],
											[
												275069,
												275075
											],
											[
												275126,
												275132
											],
											[
												275137,
												275143
											],
											[
												275167,
												275173
											],
											[
												275180,
												275186
											],
											[
												275203,
												275209
											],
											[
												275223,
												275229
											],
											[
												275346,
												275352
											],
											[
												275403,
												275409
											],
											[
												275410,
												275416
											],
											[
												275419,
												275425
											],
											[
												275545,
												275551
											],
											[
												275587,
												275593
											],
											[
												275625,
												275631
											],
											[
												275638,
												275644
											],
											[
												275860,
												275866
											],
											[
												275956,
												275962
											],
											[
												275994,
												276000
											],
											[
												276007,
												276013
											],
											[
												276226,
												276232
											],
											[
												276406,
												276412
											],
											[
												276526,
												276532
											],
											[
												276589,
												276595
											],
											[
												276602,
												276608
											],
											[
												276779,
												276785
											],
											[
												276786,
												276792
											],
											[
												276795,
												276801
											],
											[
												276810,
												276816
											],
											[
												276887,
												276893
											],
											[
												276944,
												276950
											],
											[
												277065,
												277071
											],
											[
												277240,
												277246
											],
											[
												277305,
												277311
											],
											[
												277318,
												277324
											],
											[
												277488,
												277494
											],
											[
												277519,
												277525
											],
											[
												277567,
												277573
											],
											[
												277641,
												277647
											],
											[
												277654,
												277660
											],
											[
												277835,
												277841
											],
											[
												277842,
												277848
											],
											[
												277851,
												277857
											],
											[
												277883,
												277889
											],
											[
												277954,
												277960
											],
											[
												278113,
												278119
											],
											[
												278272,
												278278
											],
											[
												278514,
												278520
											],
											[
												278680,
												278686
											],
											[
												278753,
												278759
											],
											[
												278766,
												278772
											],
											[
												278988,
												278994
											],
											[
												279057,
												279063
											],
											[
												279083,
												279089
											],
											[
												279270,
												279276
											],
											[
												279409,
												279415
											],
											[
												279444,
												279450
											],
											[
												279474,
												279480
											],
											[
												279513,
												279519
											],
											[
												279688,
												279694
											],
											[
												279887,
												279893
											],
											[
												279956,
												279962
											],
											[
												280011,
												280017
											],
											[
												280061,
												280067
											],
											[
												280068,
												280074
											],
											[
												280077,
												280083
											],
											[
												280371,
												280377
											],
											[
												280505,
												280511
											],
											[
												280582,
												280588
											],
											[
												280595,
												280601
											],
											[
												280645,
												280651
											],
											[
												280775,
												280781
											],
											[
												280811,
												280817
											],
											[
												280818,
												280824
											],
											[
												280827,
												280833
											],
											[
												280892,
												280898
											],
											[
												280944,
												280950
											],
											[
												281004,
												281010
											],
											[
												281017,
												281023
											],
											[
												281067,
												281073
											],
											[
												281160,
												281166
											],
											[
												281196,
												281202
											],
											[
												281203,
												281209
											],
											[
												281212,
												281218
											],
											[
												281277,
												281283
											],
											[
												281329,
												281335
											],
											[
												281399,
												281405
											],
											[
												281412,
												281418
											],
											[
												281462,
												281468
											],
											[
												281654,
												281660
											],
											[
												281661,
												281667
											],
											[
												281670,
												281676
											],
											[
												281727,
												281733
											],
											[
												281770,
												281776
											],
											[
												281840,
												281846
											],
											[
												281853,
												281859
											],
											[
												281903,
												281909
											],
											[
												282050,
												282056
											],
											[
												282087,
												282093
											],
											[
												282094,
												282100
											],
											[
												282103,
												282109
											],
											[
												282160,
												282166
											],
											[
												282203,
												282209
											],
											[
												282258,
												282264
											],
											[
												282271,
												282277
											],
											[
												282374,
												282380
											],
											[
												282399,
												282405
											],
											[
												282447,
												282453
											],
											[
												282454,
												282460
											],
											[
												282463,
												282469
											],
											[
												282536,
												282542
											],
											[
												282584,
												282590
											],
											[
												282634,
												282640
											],
											[
												282647,
												282653
											],
											[
												282751,
												282757
											],
											[
												282785,
												282791
											],
											[
												282792,
												282798
											],
											[
												282801,
												282807
											],
											[
												282820,
												282826
											],
											[
												282935,
												282941
											],
											[
												282976,
												282982
											],
											[
												283025,
												283031
											],
											[
												283141,
												283147
											],
											[
												283325,
												283331
											],
											[
												283349,
												283355
											],
											[
												283727,
												283733
											],
											[
												283829,
												283835
											],
											[
												283951,
												283957
											],
											[
												284430,
												284436
											],
											[
												284444,
												284450
											],
											[
												284527,
												284533
											],
											[
												285004,
												285010
											],
											[
												285372,
												285378
											],
											[
												285386,
												285392
											],
											[
												285479,
												285485
											],
											[
												285863,
												285869
											],
											[
												286321,
												286327
											],
											[
												286621,
												286627
											],
											[
												287071,
												287077
											],
											[
												287169,
												287175
											],
											[
												287286,
												287292
											],
											[
												287498,
												287504
											],
											[
												287601,
												287607
											],
											[
												287615,
												287621
											],
											[
												288028,
												288034
											],
											[
												288118,
												288124
											],
											[
												288507,
												288513
											],
											[
												288792,
												288798
											],
											[
												288821,
												288827
											],
											[
												289039,
												289045
											],
											[
												289281,
												289287
											],
											[
												289378,
												289384
											],
											[
												289431,
												289437
											],
											[
												289488,
												289494
											],
											[
												289794,
												289800
											],
											[
												290002,
												290008
											],
											[
												290330,
												290336
											],
											[
												290676,
												290682
											],
											[
												290690,
												290696
											],
											[
												290751,
												290757
											],
											[
												290883,
												290889
											],
											[
												290950,
												290956
											],
											[
												290967,
												290973
											],
											[
												291023,
												291029
											],
											[
												291228,
												291234
											],
											[
												291242,
												291248
											],
											[
												291302,
												291308
											],
											[
												291418,
												291424
											],
											[
												291803,
												291809
											],
											[
												291833,
												291839
											],
											[
												291889,
												291895
											],
											[
												291980,
												291986
											],
											[
												292026,
												292032
											],
											[
												292672,
												292678
											],
											[
												292802,
												292808
											],
											[
												292932,
												292938
											],
											[
												292946,
												292952
											],
											[
												292985,
												292991
											],
											[
												293107,
												293113
											],
											[
												293207,
												293213
											],
											[
												293255,
												293261
											],
											[
												293364,
												293370
											],
											[
												293627,
												293633
											],
											[
												293680,
												293686
											],
											[
												293770,
												293776
											],
											[
												293906,
												293912
											],
											[
												294004,
												294010
											],
											[
												294064,
												294070
											],
											[
												294141,
												294147
											],
											[
												294361,
												294367
											],
											[
												294580,
												294586
											],
											[
												294735,
												294741
											],
											[
												294842,
												294848
											],
											[
												295136,
												295142
											],
											[
												295536,
												295542
											],
											[
												295925,
												295931
											],
											[
												296107,
												296113
											],
											[
												296155,
												296161
											],
											[
												296431,
												296437
											],
											[
												296603,
												296609
											],
											[
												296823,
												296829
											],
											[
												297107,
												297113
											],
											[
												297399,
												297405
											],
											[
												297698,
												297704
											],
											[
												297984,
												297990
											],
											[
												298197,
												298203
											],
											[
												298388,
												298394
											],
											[
												298467,
												298473
											],
											[
												298825,
												298831
											],
											[
												299049,
												299055
											],
											[
												299363,
												299369
											],
											[
												299625,
												299631
											],
											[
												299889,
												299895
											],
											[
												300040,
												300046
											],
											[
												300203,
												300209
											],
											[
												300409,
												300415
											],
											[
												300560,
												300566
											],
											[
												300706,
												300712
											],
											[
												300964,
												300970
											],
											[
												301107,
												301113
											],
											[
												301269,
												301275
											],
											[
												301399,
												301405
											],
											[
												301696,
												301702
											],
											[
												302098,
												302104
											],
											[
												302129,
												302135
											],
											[
												302148,
												302154
											],
											[
												302293,
												302299
											],
											[
												302354,
												302360
											],
											[
												302397,
												302403
											],
											[
												302472,
												302478
											],
											[
												302689,
												302695
											],
											[
												302847,
												302853
											],
											[
												302922,
												302928
											],
											[
												303113,
												303119
											],
											[
												303147,
												303153
											],
											[
												303287,
												303293
											],
											[
												303327,
												303333
											],
											[
												303441,
												303447
											],
											[
												303482,
												303488
											],
											[
												303526,
												303532
											],
											[
												303685,
												303691
											],
											[
												303701,
												303707
											],
											[
												303863,
												303869
											],
											[
												303879,
												303885
											],
											[
												304075,
												304081
											],
											[
												304133,
												304139
											],
											[
												304194,
												304200
											],
											[
												304227,
												304233
											],
											[
												304240,
												304246
											],
											[
												304248,
												304254
											],
											[
												304297,
												304303
											],
											[
												304406,
												304412
											],
											[
												304485,
												304491
											],
											[
												304546,
												304552
											],
											[
												304597,
												304603
											],
											[
												304644,
												304650
											],
											[
												304752,
												304758
											],
											[
												304800,
												304806
											],
											[
												304848,
												304854
											],
											[
												304917,
												304923
											],
											[
												304964,
												304970
											],
											[
												305005,
												305011
											],
											[
												305057,
												305063
											],
											[
												305338,
												305344
											],
											[
												305375,
												305381
											],
											[
												305434,
												305440
											],
											[
												305621,
												305627
											],
											[
												305665,
												305671
											],
											[
												305762,
												305768
											],
											[
												305857,
												305863
											],
											[
												305928,
												305934
											],
											[
												305935,
												305941
											],
											[
												306094,
												306100
											],
											[
												306171,
												306177
											],
											[
												306178,
												306184
											],
											[
												306199,
												306205
											],
											[
												306221,
												306227
											],
											[
												306240,
												306246
											],
											[
												306251,
												306257
											],
											[
												306267,
												306273
											],
											[
												306289,
												306295
											],
											[
												306308,
												306314
											],
											[
												306319,
												306325
											],
											[
												306352,
												306358
											],
											[
												306359,
												306365
											],
											[
												306379,
												306385
											],
											[
												306394,
												306400
											],
											[
												306421,
												306427
											],
											[
												306428,
												306434
											],
											[
												306509,
												306515
											],
											[
												306574,
												306580
											],
											[
												306636,
												306642
											],
											[
												306681,
												306687
											],
											[
												306722,
												306728
											],
											[
												306775,
												306781
											],
											[
												306819,
												306825
											],
											[
												306970,
												306976
											],
											[
												307305,
												307311
											],
											[
												307373,
												307379
											],
											[
												307524,
												307530
											],
											[
												307572,
												307578
											],
											[
												307617,
												307623
											],
											[
												307708,
												307714
											],
											[
												307755,
												307761
											],
											[
												307798,
												307804
											],
											[
												307933,
												307939
											],
											[
												307948,
												307954
											],
											[
												307994,
												308000
											],
											[
												308100,
												308106
											],
											[
												308114,
												308120
											],
											[
												308167,
												308173
											],
											[
												308327,
												308333
											],
											[
												308339,
												308345
											],
											[
												308390,
												308396
											],
											[
												308521,
												308527
											],
											[
												308533,
												308539
											],
											[
												308560,
												308566
											],
											[
												308572,
												308578
											],
											[
												308596,
												308602
											],
											[
												308629,
												308635
											],
											[
												308641,
												308647
											],
											[
												308692,
												308698
											],
											[
												308803,
												308809
											],
											[
												308819,
												308825
											],
											[
												308863,
												308869
											],
											[
												308996,
												309002
											],
											[
												309012,
												309018
											],
											[
												309059,
												309065
											],
											[
												309294,
												309300
											],
											[
												309582,
												309588
											],
											[
												309740,
												309746
											],
											[
												309824,
												309830
											],
											[
												309861,
												309867
											],
											[
												309976,
												309982
											],
											[
												310144,
												310150
											],
											[
												310229,
												310235
											],
											[
												310310,
												310316
											],
											[
												310320,
												310326
											],
											[
												310327,
												310333
											],
											[
												310412,
												310418
											],
											[
												310463,
												310469
											],
											[
												310508,
												310514
											],
											[
												310552,
												310558
											],
											[
												310637,
												310643
											],
											[
												310647,
												310653
											],
											[
												310654,
												310660
											],
											[
												310722,
												310728
											],
											[
												310810,
												310816
											],
											[
												310869,
												310875
											],
											[
												310948,
												310954
											],
											[
												310960,
												310966
											],
											[
												311043,
												311049
											],
											[
												311173,
												311179
											],
											[
												311319,
												311325
											],
											[
												311410,
												311416
											],
											[
												311534,
												311540
											],
											[
												311618,
												311624
											],
											[
												311628,
												311634
											],
											[
												311635,
												311641
											],
											[
												311700,
												311706
											],
											[
												311770,
												311776
											],
											[
												311861,
												311867
											],
											[
												311925,
												311931
											],
											[
												311956,
												311962
											],
											[
												311968,
												311974
											],
											[
												312045,
												312051
											],
											[
												312126,
												312132
											],
											[
												312217,
												312223
											],
											[
												312299,
												312305
											],
											[
												312388,
												312394
											],
											[
												312484,
												312490
											],
											[
												312613,
												312619
											],
											[
												312695,
												312701
											],
											[
												312705,
												312711
											],
											[
												312712,
												312718
											],
											[
												312779,
												312785
											],
											[
												312853,
												312859
											],
											[
												312896,
												312902
											],
											[
												312928,
												312934
											],
											[
												312940,
												312946
											],
											[
												313004,
												313010
											],
											[
												313067,
												313073
											],
											[
												313079,
												313085
											],
											[
												313154,
												313160
											],
											[
												313299,
												313305
											],
											[
												313394,
												313400
											],
											[
												313523,
												313529
											],
											[
												313612,
												313618
											],
											[
												313706,
												313712
											],
											[
												313716,
												313722
											],
											[
												313723,
												313729
											],
											[
												313807,
												313813
											],
											[
												313916,
												313922
											],
											[
												314037,
												314043
											],
											[
												314153,
												314159
											],
											[
												314274,
												314280
											],
											[
												314512,
												314518
											],
											[
												314744,
												314750
											],
											[
												314899,
												314905
											],
											[
												315036,
												315042
											],
											[
												315046,
												315052
											],
											[
												315053,
												315059
											],
											[
												315157,
												315163
											],
											[
												315444,
												315450
											],
											[
												315521,
												315527
											],
											[
												315531,
												315537
											],
											[
												315538,
												315544
											],
											[
												315674,
												315680
											],
											[
												315746,
												315752
											],
											[
												315806,
												315812
											],
											[
												315818,
												315824
											],
											[
												315891,
												315897
											],
											[
												316178,
												316184
											],
											[
												316190,
												316196
											],
											[
												316262,
												316268
											],
											[
												316490,
												316496
											],
											[
												316638,
												316644
											],
											[
												316705,
												316711
											],
											[
												316762,
												316768
											],
											[
												316774,
												316780
											],
											[
												316844,
												316850
											],
											[
												316992,
												316998
											],
											[
												317004,
												317010
											],
											[
												317070,
												317076
											],
											[
												317226,
												317232
											],
											[
												317238,
												317244
											],
											[
												317306,
												317312
											],
											[
												317537,
												317543
											],
											[
												317696,
												317702
											],
											[
												317844,
												317850
											],
											[
												317911,
												317917
											],
											[
												318036,
												318042
											],
											[
												318048,
												318054
											],
											[
												318137,
												318143
											],
											[
												318359,
												318365
											],
											[
												318426,
												318432
											],
											[
												318552,
												318558
											],
											[
												318617,
												318623
											],
											[
												318627,
												318633
											],
											[
												318634,
												318640
											],
											[
												318696,
												318702
											],
											[
												318729,
												318735
											],
											[
												318741,
												318747
											],
											[
												318876,
												318882
											],
											[
												319000,
												319006
											],
											[
												319079,
												319085
											],
											[
												319204,
												319210
											],
											[
												319214,
												319220
											],
											[
												319221,
												319227
											],
											[
												319283,
												319289
											],
											[
												319316,
												319322
											],
											[
												319328,
												319334
											],
											[
												319463,
												319469
											],
											[
												319597,
												319603
											],
											[
												319686,
												319692
											],
											[
												319826,
												319832
											],
											[
												319836,
												319842
											],
											[
												319843,
												319849
											],
											[
												319898,
												319904
											],
											[
												319905,
												319911
											],
											[
												319944,
												319950
											],
											[
												320227,
												320233
											],
											[
												320341,
												320347
											],
											[
												320498,
												320504
											],
											[
												320646,
												320652
											],
											[
												320732,
												320738
											],
											[
												320802,
												320808
											],
											[
												320841,
												320847
											],
											[
												320851,
												320857
											],
											[
												320858,
												320864
											],
											[
												320891,
												320897
											],
											[
												320898,
												320904
											],
											[
												320944,
												320950
											],
											[
												320972,
												320978
											],
											[
												320984,
												320990
											],
											[
												321052,
												321058
											],
											[
												321232,
												321238
											],
											[
												321253,
												321259
											],
											[
												321293,
												321299
											],
											[
												321320,
												321326
											],
											[
												321371,
												321377
											],
											[
												321405,
												321411
											],
											[
												321568,
												321574
											],
											[
												321657,
												321663
											],
											[
												321766,
												321772
											],
											[
												321833,
												321839
											],
											[
												321889,
												321895
											],
											[
												321962,
												321968
											],
											[
												322050,
												322056
											],
											[
												322145,
												322151
											],
											[
												322320,
												322326
											],
											[
												322330,
												322336
											],
											[
												322337,
												322343
											],
											[
												322403,
												322409
											],
											[
												322427,
												322433
											],
											[
												322439,
												322445
											],
											[
												322637,
												322643
											],
											[
												322770,
												322776
											],
											[
												322780,
												322786
											],
											[
												322787,
												322793
											],
											[
												322881,
												322887
											],
											[
												322916,
												322922
											],
											[
												322928,
												322934
											],
											[
												323188,
												323194
											],
											[
												323252,
												323258
											],
											[
												323387,
												323393
											],
											[
												323406,
												323412
											],
											[
												323418,
												323424
											],
											[
												323447,
												323453
											],
											[
												323460,
												323466
											],
											[
												323559,
												323565
											],
											[
												323664,
												323670
											],
											[
												323944,
												323950
											],
											[
												323992,
												323998
											],
											[
												324085,
												324091
											],
											[
												324370,
												324376
											],
											[
												324418,
												324424
											],
											[
												324511,
												324517
											],
											[
												324552,
												324558
											],
											[
												324594,
												324600
											],
											[
												324642,
												324648
											],
											[
												324735,
												324741
											],
											[
												324776,
												324782
											],
											[
												324818,
												324824
											],
											[
												324866,
												324872
											],
											[
												324959,
												324965
											],
											[
												325134,
												325140
											],
											[
												325182,
												325188
											],
											[
												325275,
												325281
											],
											[
												325316,
												325322
											],
											[
												325358,
												325364
											],
											[
												325406,
												325412
											],
											[
												325499,
												325505
											],
											[
												325540,
												325546
											],
											[
												325603,
												325609
											],
											[
												325881,
												325887
											],
											[
												325929,
												325935
											],
											[
												326016,
												326022
											],
											[
												326379,
												326385
											],
											[
												326427,
												326433
											],
											[
												326524,
												326530
											],
											[
												326575,
												326581
											],
											[
												326623,
												326629
											],
											[
												326716,
												326722
											],
											[
												326891,
												326897
											],
											[
												326939,
												326945
											],
											[
												327032,
												327038
											],
											[
												327073,
												327079
											],
											[
												327210,
												327216
											],
											[
												327277,
												327283
											],
											[
												327325,
												327331
											],
											[
												327418,
												327424
											],
											[
												327459,
												327465
											],
											[
												327596,
												327602
											],
											[
												327962,
												327968
											],
											[
												328010,
												328016
											],
											[
												328092,
												328098
											],
											[
												328133,
												328139
											],
											[
												328241,
												328247
											],
											[
												328282,
												328288
											],
											[
												328388,
												328394
											],
											[
												328429,
												328435
											],
											[
												328523,
												328529
											],
											[
												328564,
												328570
											],
											[
												328640,
												328646
											],
											[
												328681,
												328687
											],
											[
												328764,
												328770
											],
											[
												328833,
												328839
											],
											[
												328874,
												328880
											],
											[
												328950,
												328956
											],
											[
												329221,
												329227
											],
											[
												329269,
												329275
											],
											[
												329362,
												329368
											],
											[
												329403,
												329409
											],
											[
												329506,
												329512
											],
											[
												329547,
												329553
											],
											[
												329641,
												329647
											],
											[
												329682,
												329688
											],
											[
												329758,
												329764
											],
											[
												329799,
												329805
											],
											[
												329882,
												329888
											],
											[
												329951,
												329957
											],
											[
												329992,
												329998
											],
											[
												330068,
												330074
											],
											[
												330351,
												330357
											],
											[
												330399,
												330405
											],
											[
												330492,
												330498
											],
											[
												330533,
												330539
											],
											[
												330636,
												330642
											],
											[
												330677,
												330683
											],
											[
												330771,
												330777
											],
											[
												330812,
												330818
											],
											[
												330888,
												330894
											],
											[
												330929,
												330935
											],
											[
												331012,
												331018
											],
											[
												331081,
												331087
											],
											[
												331122,
												331128
											],
											[
												331198,
												331204
											],
											[
												331473,
												331479
											],
											[
												331521,
												331527
											],
											[
												331614,
												331620
											],
											[
												331655,
												331661
											],
											[
												331757,
												331763
											],
											[
												331925,
												331931
											],
											[
												331980,
												331986
											],
											[
												332142,
												332148
											],
											[
												332183,
												332189
											],
											[
												332302,
												332308
											],
											[
												332343,
												332349
											],
											[
												332437,
												332443
											],
											[
												332478,
												332484
											],
											[
												332554,
												332560
											],
											[
												332595,
												332601
											],
											[
												332678,
												332684
											],
											[
												332747,
												332753
											],
											[
												332788,
												332794
											],
											[
												332864,
												332870
											],
											[
												333151,
												333157
											],
											[
												333199,
												333205
											],
											[
												333292,
												333298
											],
											[
												333333,
												333339
											],
											[
												333435,
												333441
											],
											[
												333603,
												333609
											],
											[
												333658,
												333664
											],
											[
												333820,
												333826
											],
											[
												333861,
												333867
											],
											[
												333980,
												333986
											],
											[
												334021,
												334027
											],
											[
												334115,
												334121
											],
											[
												334156,
												334162
											],
											[
												334232,
												334238
											],
											[
												334273,
												334279
											],
											[
												334356,
												334362
											],
											[
												334425,
												334431
											],
											[
												334466,
												334472
											],
											[
												334542,
												334548
											],
											[
												334853,
												334859
											],
											[
												334901,
												334907
											],
											[
												334994,
												335000
											],
											[
												335035,
												335041
											],
											[
												335273,
												335279
											],
											[
												335314,
												335320
											],
											[
												335411,
												335417
											],
											[
												335722,
												335728
											],
											[
												335770,
												335776
											],
											[
												335863,
												335869
											],
											[
												335904,
												335910
											],
											[
												336010,
												336016
											],
											[
												336051,
												336057
											],
											[
												336212,
												336218
											],
											[
												336253,
												336259
											],
											[
												336414,
												336420
											],
											[
												336455,
												336461
											],
											[
												336552,
												336558
											],
											[
												336863,
												336869
											],
											[
												336911,
												336917
											],
											[
												337004,
												337010
											],
											[
												337045,
												337051
											],
											[
												337157,
												337163
											],
											[
												337497,
												337503
											],
											[
												337565,
												337571
											],
											[
												337711,
												337717
											],
											[
												337808,
												337814
											],
											[
												338166,
												338172
											],
											[
												338214,
												338220
											],
											[
												338307,
												338313
											],
											[
												338348,
												338354
											],
											[
												338460,
												338466
											],
											[
												338800,
												338806
											],
											[
												338868,
												338874
											],
											[
												339014,
												339020
											],
											[
												339111,
												339117
											],
											[
												339286,
												339292
											],
											[
												339334,
												339340
											],
											[
												339427,
												339433
											],
											[
												339468,
												339474
											],
											[
												339566,
												339572
											],
											[
												339865,
												339871
											],
											[
												339913,
												339919
											],
											[
												340006,
												340012
											],
											[
												340047,
												340053
											],
											[
												340164,
												340170
											],
											[
												340438,
												340444
											],
											[
												340651,
												340657
											],
											[
												341012,
												341018
											],
											[
												341060,
												341066
											],
											[
												341153,
												341159
											],
											[
												341194,
												341200
											],
											[
												341318,
												341324
											],
											[
												341359,
												341365
											],
											[
												341453,
												341459
											],
											[
												341494,
												341500
											],
											[
												341588,
												341594
											],
											[
												341629,
												341635
											],
											[
												341705,
												341711
											],
											[
												341746,
												341752
											],
											[
												341829,
												341835
											],
											[
												341898,
												341904
											],
											[
												341939,
												341945
											],
											[
												342015,
												342021
											],
											[
												342056,
												342062
											],
											[
												342273,
												342279
											],
											[
												342440,
												342446
											],
											[
												342644,
												342650
											],
											[
												342716,
												342722
											],
											[
												342774,
												342780
											],
											[
												342804,
												342810
											],
											[
												342844,
												342850
											],
											[
												342869,
												342875
											],
											[
												342882,
												342888
											],
											[
												342975,
												342981
											],
											[
												342990,
												342996
											],
											[
												343300,
												343306
											],
											[
												343495,
												343501
											],
											[
												343505,
												343511
											],
											[
												343548,
												343554
											],
											[
												343568,
												343574
											],
											[
												343704,
												343710
											],
											[
												343899,
												343905
											],
											[
												343932,
												343938
											],
											[
												344267,
												344273
											],
											[
												344531,
												344537
											],
											[
												344741,
												344747
											],
											[
												344899,
												344905
											],
											[
												345025,
												345031
											],
											[
												345055,
												345061
											],
											[
												345129,
												345135
											],
											[
												345198,
												345204
											],
											[
												345304,
												345310
											],
											[
												345454,
												345460
											],
											[
												345669,
												345675
											],
											[
												345689,
												345695
											],
											[
												345882,
												345888
											],
											[
												345916,
												345922
											],
											[
												346195,
												346201
											],
											[
												346320,
												346326
											],
											[
												346388,
												346394
											],
											[
												346479,
												346485
											],
											[
												346574,
												346580
											],
											[
												346612,
												346618
											],
											[
												346851,
												346857
											],
											[
												346971,
												346977
											],
											[
												347034,
												347040
											],
											[
												347206,
												347212
											],
											[
												347248,
												347254
											],
											[
												347264,
												347270
											],
											[
												347609,
												347615
											],
											[
												347621,
												347627
											],
											[
												347683,
												347689
											],
											[
												347702,
												347708
											],
											[
												347750,
												347756
											],
											[
												347759,
												347765
											],
											[
												347923,
												347929
											],
											[
												347935,
												347941
											],
											[
												347990,
												347996
											],
											[
												348003,
												348009
											],
											[
												348115,
												348121
											],
											[
												348128,
												348134
											],
											[
												348249,
												348255
											],
											[
												348262,
												348268
											],
											[
												348352,
												348358
											],
											[
												348403,
												348409
											],
											[
												348416,
												348422
											],
											[
												348671,
												348677
											],
											[
												348680,
												348686
											],
											[
												348728,
												348734
											],
											[
												348740,
												348746
											],
											[
												348786,
												348792
											],
											[
												348805,
												348811
											],
											[
												348966,
												348972
											],
											[
												348975,
												348981
											],
											[
												349023,
												349029
											],
											[
												349035,
												349041
											],
											[
												349147,
												349153
											],
											[
												349166,
												349172
											],
											[
												349316,
												349322
											],
											[
												349325,
												349331
											],
											[
												349595,
												349601
											],
											[
												349612,
												349618
											],
											[
												349621,
												349627
											],
											[
												349656,
												349662
											],
											[
												349671,
												349677
											],
											[
												349939,
												349945
											],
											[
												349951,
												349957
											],
											[
												350001,
												350007
											],
											[
												350020,
												350026
											],
											[
												350256,
												350262
											],
											[
												350268,
												350274
											],
											[
												350341,
												350347
											],
											[
												350360,
												350366
											],
											[
												350549,
												350555
											],
											[
												350561,
												350567
											],
											[
												350601,
												350607
											],
											[
												350620,
												350626
											],
											[
												350893,
												350899
											],
											[
												350905,
												350911
											],
											[
												351159,
												351165
											],
											[
												351174,
												351180
											],
											[
												351260,
												351266
											],
											[
												351429,
												351435
											],
											[
												351463,
												351469
											],
											[
												351631,
												351637
											],
											[
												351714,
												351720
											],
											[
												351799,
												351805
											],
											[
												351808,
												351814
											],
											[
												351836,
												351842
											],
											[
												351848,
												351854
											],
											[
												351900,
												351906
											],
											[
												351913,
												351919
											],
											[
												352112,
												352118
											],
											[
												352137,
												352143
											],
											[
												352427,
												352433
											],
											[
												352436,
												352442
											],
											[
												352464,
												352470
											],
											[
												352476,
												352482
											],
											[
												352584,
												352590
											],
											[
												352593,
												352599
											],
											[
												352621,
												352627
											],
											[
												352633,
												352639
											],
											[
												352749,
												352755
											],
											[
												352758,
												352764
											],
											[
												352987,
												352993
											],
											[
												352999,
												353005
											],
											[
												353266,
												353272
											],
											[
												353278,
												353284
											],
											[
												353507,
												353513
											],
											[
												353519,
												353525
											],
											[
												353668,
												353674
											],
											[
												353677,
												353683
											],
											[
												353705,
												353711
											],
											[
												353717,
												353723
											],
											[
												353833,
												353839
											],
											[
												353842,
												353848
											],
											[
												354129,
												354135
											],
											[
												354141,
												354147
											],
											[
												354596,
												354602
											],
											[
												354608,
												354614
											],
											[
												354822,
												354828
											],
											[
												354834,
												354840
											],
											[
												355014,
												355020
											],
											[
												355023,
												355029
											],
											[
												355051,
												355057
											],
											[
												355063,
												355069
											],
											[
												355176,
												355182
											],
											[
												355185,
												355191
											],
											[
												355409,
												355415
											],
											[
												355421,
												355427
											],
											[
												355669,
												355675
											],
											[
												355681,
												355687
											],
											[
												355868,
												355874
											],
											[
												355880,
												355886
											],
											[
												355951,
												355957
											],
											[
												355963,
												355969
											],
											[
												356224,
												356230
											],
											[
												356236,
												356242
											],
											[
												356600,
												356606
											],
											[
												356612,
												356618
											],
											[
												357062,
												357068
											],
											[
												357074,
												357080
											],
											[
												357397,
												357403
											],
											[
												357406,
												357412
											],
											[
												357588,
												357594
											],
											[
												357600,
												357606
											],
											[
												357665,
												357671
											],
											[
												357677,
												357683
											],
											[
												357992,
												357998
											],
											[
												358001,
												358007
											],
											[
												358029,
												358035
											],
											[
												358041,
												358047
											],
											[
												358159,
												358165
											],
											[
												358168,
												358174
											],
											[
												358440,
												358446
											],
											[
												358452,
												358458
											],
											[
												358697,
												358703
											],
											[
												358709,
												358715
											],
											[
												358923,
												358929
											],
											[
												358935,
												358941
											],
											[
												359159,
												359165
											],
											[
												359171,
												359177
											],
											[
												359394,
												359400
											],
											[
												359406,
												359412
											],
											[
												359626,
												359632
											],
											[
												359638,
												359644
											],
											[
												359811,
												359817
											],
											[
												359823,
												359829
											],
											[
												359939,
												359945
											],
											[
												359951,
												359957
											],
											[
												360105,
												360111
											],
											[
												360114,
												360120
											],
											[
												360142,
												360148
											],
											[
												360154,
												360160
											],
											[
												360269,
												360275
											],
											[
												360278,
												360284
											],
											[
												360531,
												360537
											],
											[
												360543,
												360549
											],
											[
												360703,
												360709
											],
											[
												360715,
												360721
											],
											[
												360953,
												360959
											],
											[
												360965,
												360971
											],
											[
												361200,
												361206
											],
											[
												361212,
												361218
											],
											[
												361510,
												361516
											],
											[
												361522,
												361528
											],
											[
												361647,
												361653
											],
											[
												361659,
												361665
											],
											[
												361789,
												361795
											],
											[
												361798,
												361804
											],
											[
												361848,
												361854
											],
											[
												361860,
												361866
											],
											[
												361978,
												361984
											],
											[
												361987,
												361993
											],
											[
												362128,
												362134
											],
											[
												362140,
												362146
											],
											[
												362238,
												362244
											],
											[
												362250,
												362256
											],
											[
												362346,
												362352
											],
											[
												362358,
												362364
											],
											[
												362602,
												362608
											],
											[
												362611,
												362617
											],
											[
												362711,
												362717
											],
											[
												362723,
												362729
											],
											[
												363047,
												363053
											],
											[
												363056,
												363062
											],
											[
												363084,
												363090
											],
											[
												363096,
												363102
											],
											[
												363189,
												363195
											],
											[
												363198,
												363204
											],
											[
												363226,
												363232
											],
											[
												363238,
												363244
											],
											[
												363361,
												363367
											],
											[
												363370,
												363376
											],
											[
												363628,
												363634
											],
											[
												363640,
												363646
											],
											[
												363794,
												363800
											],
											[
												363806,
												363812
											],
											[
												363939,
												363945
											],
											[
												363951,
												363957
											],
											[
												364089,
												364095
											],
											[
												364098,
												364104
											],
											[
												364310,
												364316
											],
											[
												364322,
												364328
											],
											[
												364523,
												364529
											],
											[
												364544,
												364550
											],
											[
												364590,
												364596
											],
											[
												364686,
												364692
											],
											[
												364698,
												364704
											],
											[
												364990,
												364996
											],
											[
												365002,
												365008
											],
											[
												365112,
												365118
											],
											[
												365124,
												365130
											],
											[
												365253,
												365259
											],
											[
												365262,
												365268
											],
											[
												365290,
												365296
											],
											[
												365302,
												365308
											],
											[
												365420,
												365426
											],
											[
												365429,
												365435
											],
											[
												365457,
												365463
											],
											[
												365469,
												365475
											],
											[
												365590,
												365596
											],
											[
												365599,
												365605
											],
											[
												365801,
												365807
											],
											[
												365813,
												365819
											],
											[
												366162,
												366168
											],
											[
												366171,
												366177
											],
											[
												366522,
												366528
											],
											[
												366534,
												366540
											],
											[
												366772,
												366778
											],
											[
												366784,
												366790
											],
											[
												367019,
												367025
											],
											[
												367031,
												367037
											],
											[
												367217,
												367223
											],
											[
												367473,
												367479
											],
											[
												367540,
												367546
											],
											[
												367552,
												367558
											],
											[
												367969,
												367975
											],
											[
												368374,
												368380
											],
											[
												368616,
												368622
											],
											[
												368794,
												368800
											],
											[
												368995,
												369001
											],
											[
												369215,
												369221
											],
											[
												369275,
												369281
											],
											[
												369316,
												369322
											],
											[
												369419,
												369425
											],
											[
												369680,
												369686
											],
											[
												369800,
												369806
											],
											[
												369956,
												369962
											],
											[
												370186,
												370192
											],
											[
												370260,
												370266
											],
											[
												370369,
												370375
											],
											[
												370462,
												370468
											],
											[
												370668,
												370674
											],
											[
												370742,
												370748
											],
											[
												370851,
												370857
											],
											[
												370931,
												370937
											],
											[
												371125,
												371131
											],
											[
												371199,
												371205
											],
											[
												371308,
												371314
											],
											[
												371396,
												371402
											],
											[
												371585,
												371591
											],
											[
												371659,
												371665
											],
											[
												371768,
												371774
											],
											[
												371856,
												371862
											],
											[
												372043,
												372049
											],
											[
												372117,
												372123
											],
											[
												372226,
												372232
											],
											[
												372319,
												372325
											],
											[
												372537,
												372543
											],
											[
												372660,
												372666
											],
											[
												372767,
												372773
											],
											[
												372922,
												372928
											],
											[
												372996,
												373002
											],
											[
												373105,
												373111
											],
											[
												373198,
												373204
											],
											[
												373416,
												373422
											],
											[
												373538,
												373544
											],
											[
												373645,
												373651
											],
											[
												373796,
												373802
											],
											[
												373882,
												373888
											],
											[
												374079,
												374085
											],
											[
												374153,
												374159
											],
											[
												374262,
												374268
											],
											[
												374355,
												374361
											],
											[
												374461,
												374467
											],
											[
												374567,
												374573
											],
											[
												374662,
												374668
											],
											[
												374767,
												374773
											],
											[
												374862,
												374868
											],
											[
												374942,
												374948
											],
											[
												375037,
												375043
											],
											[
												375100,
												375106
											],
											[
												375163,
												375169
											],
											[
												375231,
												375237
											],
											[
												375274,
												375280
											],
											[
												375325,
												375331
											],
											[
												375406,
												375412
											],
											[
												375606,
												375612
											],
											[
												375681,
												375687
											],
											[
												375792,
												375798
											],
											[
												375886,
												375892
											],
											[
												375994,
												376000
											],
											[
												376101,
												376107
											],
											[
												376198,
												376204
											],
											[
												376304,
												376310
											],
											[
												376401,
												376407
											],
											[
												376482,
												376488
											],
											[
												376579,
												376585
											],
											[
												376643,
												376649
											],
											[
												376707,
												376713
											],
											[
												376776,
												376782
											],
											[
												376820,
												376826
											],
											[
												376868,
												376874
											],
											[
												376916,
												376922
											],
											[
												376963,
												376969
											],
											[
												377008,
												377014
											],
											[
												377054,
												377060
											],
											[
												377105,
												377111
											],
											[
												377187,
												377193
											],
											[
												377376,
												377382
											],
											[
												377451,
												377457
											],
											[
												377562,
												377568
											],
											[
												377656,
												377662
											],
											[
												377764,
												377770
											],
											[
												377871,
												377877
											],
											[
												377968,
												377974
											],
											[
												378074,
												378080
											],
											[
												378171,
												378177
											],
											[
												378252,
												378258
											],
											[
												378349,
												378355
											],
											[
												378413,
												378419
											],
											[
												378477,
												378483
											],
											[
												378546,
												378552
											],
											[
												378590,
												378596
											],
											[
												378638,
												378644
											],
											[
												378688,
												378694
											],
											[
												378735,
												378741
											],
											[
												378780,
												378786
											],
											[
												378826,
												378832
											],
											[
												378872,
												378878
											],
											[
												378954,
												378960
											],
											[
												379163,
												379169
											],
											[
												379238,
												379244
											],
											[
												379349,
												379355
											],
											[
												379443,
												379449
											],
											[
												379551,
												379557
											],
											[
												379658,
												379664
											],
											[
												379755,
												379761
											],
											[
												379861,
												379867
											],
											[
												379958,
												379964
											],
											[
												380039,
												380045
											],
											[
												380136,
												380142
											],
											[
												380200,
												380206
											],
											[
												380262,
												380268
											],
											[
												380331,
												380337
											],
											[
												380375,
												380381
											],
											[
												380423,
												380429
											],
											[
												380471,
												380477
											],
											[
												380518,
												380524
											],
											[
												380564,
												380570
											],
											[
												380612,
												380618
											],
											[
												380664,
												380670
											],
											[
												380746,
												380752
											],
											[
												380957,
												380963
											],
											[
												381031,
												381037
											],
											[
												381140,
												381146
											],
											[
												381233,
												381239
											],
											[
												381339,
												381345
											],
											[
												381445,
												381451
											],
											[
												381540,
												381546
											],
											[
												381645,
												381651
											],
											[
												381740,
												381746
											],
											[
												381820,
												381826
											],
											[
												381915,
												381921
											],
											[
												381978,
												381984
											],
											[
												382039,
												382045
											],
											[
												382107,
												382113
											],
											[
												382150,
												382156
											],
											[
												382195,
												382201
											],
											[
												382242,
												382248
											],
											[
												382288,
												382294
											],
											[
												382333,
												382339
											],
											[
												382380,
												382386
											],
											[
												382431,
												382437
											],
											[
												382512,
												382518
											],
											[
												382699,
												382705
											],
											[
												382759,
												382765
											],
											[
												382800,
												382806
											],
											[
												382903,
												382909
											],
											[
												383199,
												383205
											],
											[
												383319,
												383325
											],
											[
												383466,
												383472
											],
											[
												383540,
												383546
											],
											[
												383649,
												383655
											],
											[
												383742,
												383748
											],
											[
												383969,
												383975
											],
											[
												384098,
												384104
											],
											[
												384230,
												384236
											],
											[
												384353,
												384359
											],
											[
												384460,
												384466
											],
											[
												384618,
												384624
											],
											[
												384692,
												384698
											],
											[
												384801,
												384807
											],
											[
												384887,
												384893
											],
											[
												385071,
												385077
											],
											[
												385145,
												385151
											],
											[
												385254,
												385260
											],
											[
												385347,
												385353
											],
											[
												385567,
												385573
											],
											[
												385689,
												385695
											],
											[
												385814,
												385820
											],
											[
												385930,
												385936
											],
											[
												386037,
												386043
											],
											[
												386197,
												386203
											],
											[
												386283,
												386289
											],
											[
												386496,
												386502
											],
											[
												386570,
												386576
											],
											[
												386679,
												386685
											],
											[
												386772,
												386778
											],
											[
												386999,
												387005
											],
											[
												387128,
												387134
											],
											[
												387260,
												387266
											],
											[
												387383,
												387389
											],
											[
												387490,
												387496
											],
											[
												387650,
												387656
											],
											[
												387736,
												387742
											],
											[
												387911,
												387917
											],
											[
												387995,
												388001
											],
											[
												388219,
												388225
											],
											[
												388293,
												388299
											],
											[
												388402,
												388408
											],
											[
												388495,
												388501
											],
											[
												388722,
												388728
											],
											[
												388851,
												388857
											],
											[
												388983,
												388989
											],
											[
												389106,
												389112
											],
											[
												389213,
												389219
											],
											[
												389373,
												389379
											],
											[
												389459,
												389465
											],
											[
												389642,
												389648
											],
											[
												389726,
												389732
											],
											[
												389943,
												389949
											],
											[
												390017,
												390023
											],
											[
												390126,
												390132
											],
											[
												390219,
												390225
											],
											[
												390446,
												390452
											],
											[
												390575,
												390581
											],
											[
												390707,
												390713
											],
											[
												390830,
												390836
											],
											[
												390937,
												390943
											],
											[
												391162,
												391168
											],
											[
												391261,
												391267
											],
											[
												391495,
												391501
											],
											[
												391569,
												391575
											],
											[
												391678,
												391684
											],
											[
												391771,
												391777
											],
											[
												392028,
												392034
											],
											[
												392157,
												392163
											],
											[
												392289,
												392295
											],
											[
												392412,
												392418
											],
											[
												392520,
												392526
											],
											[
												392753,
												392759
											],
											[
												392852,
												392858
											],
											[
												393072,
												393078
											],
											[
												393146,
												393152
											],
											[
												393255,
												393261
											],
											[
												393348,
												393354
											],
											[
												393605,
												393611
											],
											[
												393734,
												393740
											],
											[
												393866,
												393872
											],
											[
												393989,
												393995
											],
											[
												394096,
												394102
											],
											[
												394330,
												394336
											],
											[
												394429,
												394435
											],
											[
												394635,
												394641
											],
											[
												394709,
												394715
											],
											[
												394818,
												394824
											],
											[
												394911,
												394917
											],
											[
												395168,
												395174
											],
											[
												395297,
												395303
											],
											[
												395429,
												395435
											],
											[
												395552,
												395558
											],
											[
												395659,
												395665
											],
											[
												395819,
												395825
											],
											[
												395905,
												395911
											],
											[
												396086,
												396092
											],
											[
												396170,
												396176
											],
											[
												396373,
												396379
											],
											[
												396447,
												396453
											],
											[
												396556,
												396562
											],
											[
												396649,
												396655
											],
											[
												396876,
												396882
											],
											[
												397005,
												397011
											],
											[
												397137,
												397143
											],
											[
												397260,
												397266
											],
											[
												397367,
												397373
											],
											[
												397527,
												397533
											],
											[
												397613,
												397619
											],
											[
												397789,
												397795
											],
											[
												397873,
												397879
											],
											[
												398050,
												398056
											],
											[
												398135,
												398141
											],
											[
												398345,
												398351
											],
											[
												398419,
												398425
											],
											[
												398528,
												398534
											],
											[
												398621,
												398627
											],
											[
												398848,
												398854
											],
											[
												398977,
												398983
											],
											[
												399109,
												399115
											],
											[
												399232,
												399238
											],
											[
												399339,
												399345
											],
											[
												399499,
												399505
											],
											[
												399585,
												399591
											],
											[
												399762,
												399768
											],
											[
												399846,
												399852
											],
											[
												400023,
												400029
											],
											[
												400108,
												400114
											],
											[
												400314,
												400320
											],
											[
												400388,
												400394
											],
											[
												400497,
												400503
											],
											[
												400590,
												400596
											],
											[
												400817,
												400823
											],
											[
												400946,
												400952
											],
											[
												401078,
												401084
											],
											[
												401201,
												401207
											],
											[
												401308,
												401314
											],
											[
												401468,
												401474
											],
											[
												401557,
												401563
											],
											[
												401834,
												401840
											],
											[
												401918,
												401924
											],
											[
												402131,
												402137
											],
											[
												402205,
												402211
											],
											[
												402314,
												402320
											],
											[
												402407,
												402413
											],
											[
												402634,
												402640
											],
											[
												402763,
												402769
											],
											[
												402895,
												402901
											],
											[
												403018,
												403024
											],
											[
												403125,
												403131
											],
											[
												403285,
												403291
											],
											[
												403374,
												403380
											],
											[
												403651,
												403657
											],
											[
												403735,
												403741
											],
											[
												403946,
												403952
											],
											[
												404006,
												404012
											],
											[
												404047,
												404053
											],
											[
												404150,
												404156
											],
											[
												404521,
												404527
											],
											[
												404641,
												404647
											],
											[
												404792,
												404798
											],
											[
												404866,
												404872
											],
											[
												404975,
												404981
											],
											[
												405068,
												405074
											],
											[
												405292,
												405298
											],
											[
												405421,
												405427
											],
											[
												405550,
												405556
											],
											[
												405673,
												405679
											],
											[
												405780,
												405786
											],
											[
												405942,
												405948
											],
											[
												406016,
												406022
											],
											[
												406125,
												406131
											],
											[
												406218,
												406224
											],
											[
												406442,
												406448
											],
											[
												406571,
												406577
											],
											[
												406700,
												406706
											],
											[
												406823,
												406829
											],
											[
												406930,
												406936
											],
											[
												407090,
												407096
											],
											[
												407256,
												407262
											],
											[
												407319,
												407325
											],
											[
												407358,
												407364
											],
											[
												407391,
												407397
											],
											[
												407410,
												407416
											],
											[
												407444,
												407450
											],
											[
												407508,
												407514
											],
											[
												407528,
												407534
											],
											[
												407547,
												407553
											],
											[
												407727,
												407733
											],
											[
												407801,
												407807
											],
											[
												407910,
												407916
											],
											[
												408003,
												408009
											],
											[
												408227,
												408233
											],
											[
												408356,
												408362
											],
											[
												408485,
												408491
											],
											[
												408608,
												408614
											],
											[
												408715,
												408721
											],
											[
												408875,
												408881
											],
											[
												409041,
												409047
											],
											[
												409104,
												409110
											],
											[
												409142,
												409148
											],
											[
												409175,
												409181
											],
											[
												409194,
												409200
											],
											[
												409218,
												409224
											],
											[
												409230,
												409236
											],
											[
												409293,
												409299
											],
											[
												409313,
												409319
											],
											[
												409332,
												409338
											],
											[
												409490,
												409496
											],
											[
												409539,
												409545
											],
											[
												409558,
												409564
											],
											[
												409622,
												409628
											],
											[
												409663,
												409669
											],
											[
												409682,
												409688
											],
											[
												409745,
												409751
											],
											[
												409794,
												409800
											],
											[
												409813,
												409819
											],
											[
												409871,
												409877
											],
											[
												409912,
												409918
											],
											[
												409931,
												409937
											],
											[
												409988,
												409994
											],
											[
												410021,
												410027
											],
											[
												410040,
												410046
											],
											[
												410206,
												410212
											],
											[
												410280,
												410286
											],
											[
												410389,
												410395
											],
											[
												410482,
												410488
											],
											[
												410706,
												410712
											],
											[
												410835,
												410841
											],
											[
												410964,
												410970
											],
											[
												411087,
												411093
											],
											[
												411194,
												411200
											],
											[
												411354,
												411360
											],
											[
												411520,
												411526
											],
											[
												411583,
												411589
											],
											[
												411621,
												411627
											],
											[
												411654,
												411660
											],
											[
												411673,
												411679
											],
											[
												411697,
												411703
											],
											[
												411709,
												411715
											],
											[
												411772,
												411778
											],
											[
												411792,
												411798
											],
											[
												411811,
												411817
											],
											[
												411969,
												411975
											],
											[
												412018,
												412024
											],
											[
												412037,
												412043
											],
											[
												412101,
												412107
											],
											[
												412142,
												412148
											],
											[
												412161,
												412167
											],
											[
												412224,
												412230
											],
											[
												412273,
												412279
											],
											[
												412292,
												412298
											],
											[
												412350,
												412356
											],
											[
												412391,
												412397
											],
											[
												412410,
												412416
											],
											[
												412467,
												412473
											],
											[
												412500,
												412506
											],
											[
												412519,
												412525
											],
											[
												412662,
												412668
											],
											[
												412674,
												412680
											],
											[
												412728,
												412734
											],
											[
												412748,
												412754
											],
											[
												412767,
												412773
											],
											[
												412939,
												412945
											],
											[
												413013,
												413019
											],
											[
												413122,
												413128
											],
											[
												413215,
												413221
											],
											[
												413439,
												413445
											],
											[
												413568,
												413574
											],
											[
												413697,
												413703
											],
											[
												413820,
												413826
											],
											[
												413927,
												413933
											],
											[
												414087,
												414093
											],
											[
												414330,
												414336
											],
											[
												414405,
												414411
											],
											[
												414451,
												414457
											],
											[
												414545,
												414551
											],
											[
												414720,
												414726
											],
											[
												414849,
												414855
											],
											[
												414978,
												414984
											],
											[
												415101,
												415107
											],
											[
												415208,
												415214
											],
											[
												415390,
												415396
											],
											[
												415496,
												415502
											],
											[
												415506,
												415512
											],
											[
												415550,
												415556
											],
											[
												415569,
												415575
											],
											[
												415593,
												415599
											],
											[
												415605,
												415611
											],
											[
												415668,
												415674
											],
											[
												415688,
												415694
											],
											[
												415707,
												415713
											],
											[
												415865,
												415871
											],
											[
												415914,
												415920
											],
											[
												415933,
												415939
											],
											[
												415997,
												416003
											],
											[
												416038,
												416044
											],
											[
												416057,
												416063
											],
											[
												416120,
												416126
											],
											[
												416169,
												416175
											],
											[
												416188,
												416194
											],
											[
												416246,
												416252
											],
											[
												416287,
												416293
											],
											[
												416306,
												416312
											],
											[
												416363,
												416369
											],
											[
												416396,
												416402
											],
											[
												416415,
												416421
											],
											[
												416558,
												416564
											],
											[
												416570,
												416576
											],
											[
												416624,
												416630
											],
											[
												416644,
												416650
											],
											[
												416663,
												416669
											],
											[
												416836,
												416842
											],
											[
												416910,
												416916
											],
											[
												417019,
												417025
											],
											[
												417112,
												417118
											],
											[
												417336,
												417342
											],
											[
												417465,
												417471
											],
											[
												417594,
												417600
											],
											[
												417717,
												417723
											],
											[
												417824,
												417830
											],
											[
												417984,
												417990
											],
											[
												418234,
												418240
											],
											[
												418309,
												418315
											],
											[
												418355,
												418361
											],
											[
												418449,
												418455
											],
											[
												418624,
												418630
											],
											[
												418753,
												418759
											],
											[
												418882,
												418888
											],
											[
												419005,
												419011
											],
											[
												419112,
												419118
											],
											[
												419294,
												419300
											],
											[
												419400,
												419406
											],
											[
												419410,
												419416
											],
											[
												419454,
												419460
											],
											[
												419473,
												419479
											],
											[
												419497,
												419503
											],
											[
												419509,
												419515
											],
											[
												419642,
												419648
											],
											[
												419687,
												419693
											],
											[
												419706,
												419712
											],
											[
												419769,
												419775
											],
											[
												419810,
												419816
											],
											[
												419829,
												419835
											],
											[
												419887,
												419893
											],
											[
												419921,
												419927
											],
											[
												419940,
												419946
											],
											[
												420110,
												420116
											],
											[
												420122,
												420128
											],
											[
												420198,
												420204
											],
											[
												420218,
												420224
											],
											[
												420237,
												420243
											],
											[
												420314,
												420320
											],
											[
												420326,
												420332
											],
											[
												420401,
												420407
											],
											[
												420421,
												420427
											],
											[
												420440,
												420446
											],
											[
												420517,
												420523
											],
											[
												420529,
												420535
											],
											[
												420579,
												420585
											],
											[
												420599,
												420605
											],
											[
												420618,
												420624
											],
											[
												420695,
												420701
											],
											[
												420707,
												420713
											],
											[
												420759,
												420765
											],
											[
												420771,
												420777
											],
											[
												420823,
												420829
											],
											[
												420835,
												420841
											],
											[
												420892,
												420898
											],
											[
												420904,
												420910
											],
											[
												420936,
												420942
											],
											[
												420948,
												420954
											],
											[
												420988,
												420994
											],
											[
												421000,
												421006
											],
											[
												421051,
												421057
											],
											[
												421071,
												421077
											],
											[
												421090,
												421096
											],
											[
												421372,
												421378
											],
											[
												421403,
												421409
											],
											[
												421587,
												421593
											],
											[
												421861,
												421867
											],
											[
												421880,
												421886
											],
											[
												421899,
												421905
											],
											[
												422177,
												422183
											],
											[
												422406,
												422412
											],
											[
												422683,
												422689
											],
											[
												422908,
												422914
											],
											[
												423084,
												423090
											],
											[
												423208,
												423214
											],
											[
												423218,
												423224
											],
											[
												423238,
												423244
											],
											[
												423282,
												423288
											],
											[
												423308,
												423314
											],
											[
												423355,
												423361
											],
											[
												423365,
												423371
											],
											[
												423424,
												423430
											],
											[
												423468,
												423474
											],
											[
												423498,
												423504
											],
											[
												423537,
												423543
											],
											[
												423574,
												423580
											],
											[
												423621,
												423627
											],
											[
												423693,
												423699
											],
											[
												423726,
												423732
											],
											[
												423796,
												423802
											],
											[
												423850,
												423856
											],
											[
												423887,
												423893
											],
											[
												423926,
												423932
											],
											[
												423953,
												423959
											],
											[
												424025,
												424031
											],
											[
												424035,
												424041
											],
											[
												424125,
												424131
											],
											[
												424152,
												424158
											],
											[
												424184,
												424190
											],
											[
												424211,
												424217
											],
											[
												424245,
												424251
											],
											[
												424286,
												424292
											],
											[
												424296,
												424302
											],
											[
												424384,
												424390
											],
											[
												424416,
												424422
											],
											[
												424469,
												424475
											],
											[
												424479,
												424485
											],
											[
												424610,
												424616
											],
											[
												424648,
												424654
											],
											[
												424680,
												424686
											],
											[
												424718,
												424724
											],
											[
												424763,
												424769
											],
											[
												424830,
												424836
											],
											[
												424840,
												424846
											],
											[
												424924,
												424930
											],
											[
												424955,
												424961
											],
											[
												425002,
												425008
											],
											[
												425048,
												425054
											],
											[
												425101,
												425107
											],
											[
												425150,
												425156
											],
											[
												425160,
												425166
											],
											[
												425254,
												425260
											],
											[
												425275,
												425281
											],
											[
												425308,
												425314
											],
											[
												425333,
												425339
											],
											[
												425365,
												425371
											],
											[
												425401,
												425407
											],
											[
												425411,
												425417
											],
											[
												425443,
												425449
											],
											[
												425464,
												425470
											],
											[
												425497,
												425503
											],
											[
												425519,
												425525
											],
											[
												425548,
												425554
											],
											[
												425587,
												425593
											],
											[
												425597,
												425603
											],
											[
												425691,
												425697
											],
											[
												425717,
												425723
											],
											[
												425753,
												425759
											],
											[
												425783,
												425789
											],
											[
												425820,
												425826
											],
											[
												425867,
												425873
											],
											[
												425877,
												425883
											],
											[
												425934,
												425940
											],
											[
												425955,
												425961
											],
											[
												425987,
												425993
											],
											[
												426033,
												426039
											],
											[
												426064,
												426070
											],
											[
												426120,
												426126
											],
											[
												426130,
												426136
											],
											[
												426202,
												426208
											],
											[
												426232,
												426238
											],
											[
												426264,
												426270
											],
											[
												426297,
												426303
											],
											[
												426337,
												426343
											],
											[
												426392,
												426398
											],
											[
												426445,
												426451
											],
											[
												426466,
												426472
											],
											[
												426508,
												426514
											],
											[
												426657,
												426663
											],
											[
												426667,
												426673
											],
											[
												426711,
												426717
											],
											[
												426732,
												426738
											],
											[
												426774,
												426780
											],
											[
												426811,
												426817
											],
											[
												426855,
												426861
											],
											[
												426862,
												426868
											],
											[
												427019,
												427025
											],
											[
												427043,
												427049
											],
											[
												427065,
												427071
											],
											[
												427120,
												427126
											],
											[
												427141,
												427147
											],
											[
												427186,
												427192
											],
											[
												427200,
												427206
											],
											[
												427258,
												427264
											],
											[
												427268,
												427274
											],
											[
												427284,
												427290
											],
											[
												427294,
												427300
											],
											[
												427314,
												427320
											],
											[
												427370,
												427376
											],
											[
												427427,
												427433
											],
											[
												427485,
												427491
											],
											[
												427495,
												427501
											],
											[
												427511,
												427517
											],
											[
												427521,
												427527
											],
											[
												427560,
												427566
											],
											[
												427616,
												427622
											],
											[
												427650,
												427656
											],
											[
												427677,
												427683
											],
											[
												427730,
												427736
											],
											[
												427744,
												427750
											],
											[
												427953,
												427959
											],
											[
												427990,
												427996
											],
											[
												428030,
												428036
											],
											[
												428113,
												428119
											],
											[
												428169,
												428175
											],
											[
												428199,
												428205
											],
											[
												428246,
												428252
											],
											[
												428349,
												428355
											],
											[
												428359,
												428365
											],
											[
												428383,
												428389
											],
											[
												428434,
												428440
											],
											[
												428467,
												428473
											],
											[
												428515,
												428521
											],
											[
												428525,
												428531
											],
											[
												428568,
												428574
											],
											[
												428619,
												428625
											],
											[
												428661,
												428667
											],
											[
												428724,
												428730
											],
											[
												428734,
												428740
											],
											[
												428820,
												428826
											],
											[
												428871,
												428877
											],
											[
												428910,
												428916
											],
											[
												428944,
												428950
											],
											[
												429013,
												429019
											],
											[
												429109,
												429115
											],
											[
												429119,
												429125
											],
											[
												429146,
												429152
											],
											[
												429205,
												429211
											],
											[
												429238,
												429244
											],
											[
												429286,
												429292
											],
											[
												429296,
												429302
											],
											[
												429342,
												429348
											],
											[
												429401,
												429407
											],
											[
												429443,
												429449
											],
											[
												429506,
												429512
											],
											[
												429516,
												429522
											],
											[
												429605,
												429611
											],
											[
												429664,
												429670
											],
											[
												429703,
												429709
											],
											[
												429734,
												429740
											],
											[
												429804,
												429810
											],
											[
												429891,
												429897
											],
											[
												429901,
												429907
											],
											[
												429938,
												429944
											],
											[
												429959,
												429965
											],
											[
												429996,
												430002
											],
											[
												430086,
												430092
											],
											[
												430093,
												430099
											],
											[
												430103,
												430109
											],
											[
												430149,
												430155
											],
											[
												430160,
												430166
											],
											[
												430228,
												430234
											],
											[
												430235,
												430241
											],
											[
												430254,
												430260
											],
											[
												430324,
												430330
											],
											[
												430399,
												430405
											],
											[
												430424,
												430430
											],
											[
												430451,
												430457
											],
											[
												430505,
												430511
											],
											[
												430518,
												430524
											],
											[
												430574,
												430580
											],
											[
												430704,
												430710
											],
											[
												430762,
												430768
											],
											[
												430781,
												430787
											],
											[
												430829,
												430835
											],
											[
												430848,
												430854
											],
											[
												430964,
												430970
											],
											[
												431034,
												431040
											],
											[
												431068,
												431074
											],
											[
												431091,
												431097
											],
											[
												431139,
												431145
											],
											[
												431180,
												431186
											],
											[
												431225,
												431231
											],
											[
												431298,
												431304
											],
											[
												431324,
												431330
											],
											[
												431375,
												431381
											],
											[
												431407,
												431413
											],
											[
												431529,
												431535
											],
											[
												431671,
												431677
											],
											[
												431702,
												431708
											],
											[
												431736,
												431742
											],
											[
												431759,
												431765
											],
											[
												431807,
												431813
											],
											[
												431848,
												431854
											],
											[
												431893,
												431899
											],
											[
												431969,
												431975
											],
											[
												431989,
												431995
											],
											[
												432034,
												432040
											],
											[
												432065,
												432071
											],
											[
												432097,
												432103
											],
											[
												432244,
												432250
											],
											[
												432293,
												432299
											],
											[
												432361,
												432367
											],
											[
												432486,
												432492
											],
											[
												432507,
												432513
											],
											[
												432561,
												432567
											],
											[
												432595,
												432601
											],
											[
												432609,
												432615
											],
											[
												432650,
												432656
											],
											[
												432689,
												432695
											],
											[
												432706,
												432712
											],
											[
												432768,
												432774
											],
											[
												432936,
												432942
											],
											[
												432967,
												432973
											],
											[
												433061,
												433067
											],
											[
												433222,
												433228
											],
											[
												433367,
												433373
											],
											[
												433512,
												433518
											],
											[
												433566,
												433572
											],
											[
												433600,
												433606
											],
											[
												433614,
												433620
											],
											[
												433732,
												433738
											],
											[
												433769,
												433775
											],
											[
												433803,
												433809
											],
											[
												433840,
												433846
											],
											[
												433871,
												433877
											],
											[
												434036,
												434042
											],
											[
												434070,
												434076
											],
											[
												434207,
												434213
											],
											[
												434275,
												434281
											],
											[
												434420,
												434426
											],
											[
												434471,
												434477
											],
											[
												434505,
												434511
											],
											[
												434519,
												434525
											],
											[
												434560,
												434566
											],
											[
												434602,
												434608
											],
											[
												434636,
												434642
											],
											[
												434666,
												434672
											],
											[
												434779,
												434785
											],
											[
												434813,
												434819
											],
											[
												434978,
												434984
											],
											[
												435012,
												435018
											],
											[
												435117,
												435123
											],
											[
												435208,
												435214
											],
											[
												435332,
												435338
											],
											[
												435355,
												435361
											],
											[
												435396,
												435402
											],
											[
												435429,
												435435
											],
											[
												435460,
												435466
											],
											[
												435595,
												435601
											],
											[
												435734,
												435740
											],
											[
												435765,
												435771
											],
											[
												435865,
												435871
											],
											[
												435896,
												435902
											],
											[
												435984,
												435990
											],
											[
												436046,
												436052
											],
											[
												436120,
												436126
											],
											[
												436152,
												436158
											],
											[
												436203,
												436209
											],
											[
												436377,
												436383
											],
											[
												436528,
												436534
											],
											[
												436560,
												436566
											],
											[
												436649,
												436655
											],
											[
												436726,
												436732
											],
											[
												436851,
												436857
											],
											[
												436899,
												436905
											],
											[
												436973,
												436979
											],
											[
												437015,
												437021
											],
											[
												437059,
												437065
											],
											[
												437136,
												437142
											],
											[
												437333,
												437339
											],
											[
												437381,
												437387
											],
											[
												437454,
												437460
											],
											[
												437496,
												437502
											],
											[
												437621,
												437627
											],
											[
												437684,
												437690
											],
											[
												437707,
												437713
											],
											[
												437744,
												437750
											],
											[
												437754,
												437760
											],
											[
												437781,
												437787
											],
											[
												437900,
												437906
											],
											[
												437950,
												437956
											],
											[
												438031,
												438037
											],
											[
												438065,
												438071
											],
											[
												438095,
												438101
											],
											[
												438131,
												438137
											],
											[
												438165,
												438171
											],
											[
												438202,
												438208
											],
											[
												438247,
												438253
											],
											[
												438271,
												438277
											],
											[
												438305,
												438311
											],
											[
												438339,
												438345
											],
											[
												438461,
												438467
											],
											[
												438597,
												438603
											],
											[
												438620,
												438626
											],
											[
												438697,
												438703
											],
											[
												438732,
												438738
											],
											[
												438778,
												438784
											],
											[
												438849,
												438855
											],
											[
												438971,
												438977
											],
											[
												439107,
												439113
											],
											[
												439130,
												439136
											],
											[
												439165,
												439171
											],
											[
												439210,
												439216
											],
											[
												439283,
												439289
											],
											[
												439366,
												439372
											],
											[
												439398,
												439404
											],
											[
												439429,
												439435
											],
											[
												439631,
												439637
											],
											[
												440054,
												440060
											],
											[
												440466,
												440472
											],
											[
												440827,
												440833
											],
											[
												441108,
												441114
											],
											[
												441400,
												441406
											],
											[
												443018,
												443024
											],
											[
												443684,
												443690
											],
											[
												443950,
												443956
											],
											[
												444031,
												444037
											],
											[
												444421,
												444427
											],
											[
												444693,
												444699
											],
											[
												444775,
												444781
											],
											[
												445073,
												445079
											],
											[
												445474,
												445480
											],
											[
												445700,
												445706
											],
											[
												445748,
												445754
											],
											[
												445951,
												445957
											],
											[
												445960,
												445966
											],
											[
												446088,
												446094
											],
											[
												446303,
												446309
											],
											[
												446483,
												446489
											],
											[
												446726,
												446732
											],
											[
												446735,
												446741
											],
											[
												446896,
												446902
											],
											[
												446953,
												446959
											],
											[
												447182,
												447188
											],
											[
												447201,
												447207
											],
											[
												447559,
												447565
											],
											[
												447848,
												447854
											],
											[
												448152,
												448158
											],
											[
												448180,
												448186
											],
											[
												448436,
												448442
											],
											[
												448733,
												448739
											],
											[
												449024,
												449030
											],
											[
												449299,
												449305
											],
											[
												449326,
												449332
											],
											[
												449548,
												449554
											],
											[
												449748,
												449754
											],
											[
												449977,
												449983
											],
											[
												450061,
												450067
											],
											[
												450165,
												450171
											],
											[
												450462,
												450468
											],
											[
												450525,
												450531
											],
											[
												450763,
												450769
											],
											[
												450845,
												450851
											],
											[
												450977,
												450983
											],
											[
												451038,
												451044
											],
											[
												451047,
												451053
											],
											[
												451089,
												451095
											],
											[
												451309,
												451315
											],
											[
												451594,
												451600
											],
											[
												451666,
												451672
											],
											[
												451984,
												451990
											],
											[
												451996,
												452002
											],
											[
												452219,
												452225
											],
											[
												452246,
												452252
											],
											[
												452314,
												452320
											],
											[
												452622,
												452628
											],
											[
												452647,
												452653
											],
											[
												452691,
												452697
											],
											[
												452716,
												452722
											],
											[
												452963,
												452969
											],
											[
												452978,
												452984
											],
											[
												453160,
												453166
											],
											[
												453169,
												453175
											],
											[
												453387,
												453393
											],
											[
												453449,
												453455
											],
											[
												453505,
												453511
											],
											[
												453564,
												453570
											],
											[
												453577,
												453583
											],
											[
												453788,
												453794
											],
											[
												454018,
												454024
											],
											[
												454027,
												454033
											],
											[
												454208,
												454214
											],
											[
												454336,
												454342
											],
											[
												454643,
												454649
											],
											[
												455093,
												455099
											],
											[
												455275,
												455281
											],
											[
												455807,
												455813
											],
											[
												456037,
												456043
											],
											[
												456160,
												456166
											],
											[
												456249,
												456255
											],
											[
												456470,
												456476
											],
											[
												456616,
												456622
											],
											[
												456834,
												456840
											],
											[
												456915,
												456921
											],
											[
												457113,
												457119
											],
											[
												457331,
												457337
											],
											[
												457456,
												457462
											],
											[
												457551,
												457557
											],
											[
												457649,
												457655
											],
											[
												457745,
												457751
											],
											[
												457826,
												457832
											],
											[
												457962,
												457968
											],
											[
												458053,
												458059
											],
											[
												458147,
												458153
											],
											[
												458242,
												458248
											],
											[
												458464,
												458470
											],
											[
												458509,
												458515
											],
											[
												458646,
												458652
											],
											[
												458777,
												458783
											],
											[
												458803,
												458809
											],
											[
												458843,
												458849
											],
											[
												458869,
												458875
											],
											[
												458910,
												458916
											],
											[
												458952,
												458958
											],
											[
												458989,
												458995
											],
											[
												459016,
												459022
											],
											[
												459234,
												459240
											],
											[
												459339,
												459345
											],
											[
												459414,
												459420
											],
											[
												459556,
												459562
											],
											[
												459592,
												459598
											],
											[
												459604,
												459610
											],
											[
												459687,
												459693
											],
											[
												459699,
												459705
											],
											[
												459777,
												459783
											],
											[
												459976,
												459982
											],
											[
												460054,
												460060
											],
											[
												460351,
												460357
											],
											[
												460475,
												460481
											],
											[
												460490,
												460496
											],
											[
												460579,
												460585
											],
											[
												460682,
												460688
											],
											[
												460752,
												460758
											],
											[
												460794,
												460800
											],
											[
												460809,
												460815
											],
											[
												460855,
												460861
											],
											[
												460893,
												460899
											],
											[
												460935,
												460941
											],
											[
												460950,
												460956
											],
											[
												461145,
												461151
											],
											[
												461160,
												461166
											],
											[
												461215,
												461221
											],
											[
												461388,
												461394
											],
											[
												461527,
												461533
											],
											[
												461604,
												461610
											],
											[
												461617,
												461623
											],
											[
												461721,
												461727
											],
											[
												461734,
												461740
											],
											[
												461874,
												461880
											],
											[
												461928,
												461934
											],
											[
												461941,
												461947
											],
											[
												462050,
												462056
											],
											[
												462124,
												462130
											],
											[
												462137,
												462143
											],
											[
												462235,
												462241
											],
											[
												462360,
												462366
											],
											[
												462375,
												462381
											],
											[
												462435,
												462441
											],
											[
												462477,
												462483
											],
											[
												462550,
												462556
											],
											[
												462565,
												462571
											],
											[
												462735,
												462741
											],
											[
												462995,
												463001
											],
											[
												463152,
												463158
											],
											[
												463165,
												463171
											],
											[
												463305,
												463311
											],
											[
												463359,
												463365
											],
											[
												463372,
												463378
											],
											[
												463481,
												463487
											],
											[
												463573,
												463579
											],
											[
												463586,
												463592
											],
											[
												463743,
												463749
											],
											[
												463788,
												463794
											],
											[
												463973,
												463979
											],
											[
												464034,
												464040
											],
											[
												464123,
												464129
											],
											[
												464136,
												464142
											],
											[
												464197,
												464203
											],
											[
												464254,
												464260
											],
											[
												464269,
												464275
											],
											[
												464328,
												464334
											],
											[
												464429,
												464435
											],
											[
												464446,
												464452
											],
											[
												464544,
												464550
											],
											[
												464557,
												464563
											],
											[
												464734,
												464740
											],
											[
												464929,
												464935
											],
											[
												465231,
												465237
											],
											[
												465296,
												465302
											],
											[
												465543,
												465549
											],
											[
												465631,
												465637
											],
											[
												465720,
												465726
											],
											[
												465792,
												465798
											],
											[
												465856,
												465862
											],
											[
												466084,
												466090
											],
											[
												466140,
												466146
											],
											[
												466152,
												466158
											],
											[
												466273,
												466279
											],
											[
												466334,
												466340
											],
											[
												466599,
												466605
											],
											[
												466804,
												466810
											],
											[
												466860,
												466866
											],
											[
												466872,
												466878
											],
											[
												466993,
												466999
											],
											[
												467054,
												467060
											],
											[
												467319,
												467325
											],
											[
												467513,
												467519
											],
											[
												467569,
												467575
											],
											[
												467581,
												467587
											],
											[
												467702,
												467708
											],
											[
												467763,
												467769
											],
											[
												468001,
												468007
											],
											[
												468206,
												468212
											],
											[
												468262,
												468268
											],
											[
												468274,
												468280
											],
											[
												468395,
												468401
											],
											[
												468456,
												468462
											],
											[
												468721,
												468727
											],
											[
												468926,
												468932
											],
											[
												468982,
												468988
											],
											[
												468994,
												469000
											],
											[
												469115,
												469121
											],
											[
												469176,
												469182
											],
											[
												469441,
												469447
											],
											[
												469646,
												469652
											],
											[
												469702,
												469708
											],
											[
												469714,
												469720
											],
											[
												469835,
												469841
											],
											[
												469896,
												469902
											],
											[
												470161,
												470167
											],
											[
												470366,
												470372
											],
											[
												470422,
												470428
											],
											[
												470434,
												470440
											],
											[
												470555,
												470561
											],
											[
												470616,
												470622
											],
											[
												470881,
												470887
											],
											[
												471086,
												471092
											],
											[
												471142,
												471148
											],
											[
												471154,
												471160
											],
											[
												471275,
												471281
											],
											[
												471336,
												471342
											],
											[
												471601,
												471607
											],
											[
												471806,
												471812
											],
											[
												471862,
												471868
											],
											[
												471874,
												471880
											],
											[
												471995,
												472001
											],
											[
												472056,
												472062
											],
											[
												472321,
												472327
											],
											[
												472647,
												472653
											],
											[
												472910,
												472916
											],
											[
												473025,
												473031
											],
											[
												473093,
												473099
											],
											[
												473309,
												473315
											],
											[
												473466,
												473472
											],
											[
												473632,
												473638
											],
											[
												473777,
												473783
											],
											[
												474021,
												474027
											],
											[
												474098,
												474104
											],
											[
												474140,
												474146
											],
											[
												474192,
												474198
											],
											[
												474286,
												474292
											],
											[
												474313,
												474319
											],
											[
												474332,
												474338
											],
											[
												474395,
												474401
											],
											[
												474433,
												474439
											],
											[
												474510,
												474516
											],
											[
												474522,
												474528
											],
											[
												474660,
												474666
											],
											[
												474763,
												474769
											],
											[
												474866,
												474872
											],
											[
												474969,
												474975
											],
											[
												475068,
												475074
											],
											[
												475150,
												475156
											],
											[
												475166,
												475172
											],
											[
												475381,
												475387
											],
											[
												475586,
												475592
											],
											[
												475798,
												475804
											],
											[
												476095,
												476101
											],
											[
												476321,
												476327
											],
											[
												476358,
												476364
											],
											[
												476435,
												476441
											],
											[
												476447,
												476453
											],
											[
												476657,
												476663
											],
											[
												476926,
												476932
											],
											[
												477003,
												477009
											],
											[
												477015,
												477021
											],
											[
												477338,
												477344
											],
											[
												477677,
												477683
											],
											[
												477960,
												477966
											],
											[
												478181,
												478187
											],
											[
												478416,
												478422
											],
											[
												478778,
												478784
											],
											[
												479153,
												479159
											],
											[
												479494,
												479500
											],
											[
												479815,
												479821
											],
											[
												480116,
												480122
											],
											[
												480419,
												480425
											],
											[
												480735,
												480741
											],
											[
												481024,
												481030
											],
											[
												481361,
												481367
											],
											[
												481524,
												481530
											],
											[
												481836,
												481842
											],
											[
												482199,
												482205
											],
											[
												482515,
												482521
											],
											[
												482868,
												482874
											],
											[
												483165,
												483171
											],
											[
												483437,
												483443
											],
											[
												483735,
												483741
											],
											[
												484016,
												484022
											],
											[
												484225,
												484231
											],
											[
												484407,
												484413
											],
											[
												484709,
												484715
											],
											[
												484786,
												484792
											],
											[
												484801,
												484807
											],
											[
												484853,
												484859
											],
											[
												484865,
												484871
											],
											[
												484958,
												484964
											],
											[
												484973,
												484979
											],
											[
												485323,
												485329
											],
											[
												485400,
												485406
											],
											[
												485415,
												485421
											],
											[
												485511,
												485517
											],
											[
												485523,
												485529
											],
											[
												485717,
												485723
											],
											[
												485732,
												485738
											],
											[
												485849,
												485855
											],
											[
												485926,
												485932
											],
											[
												485938,
												485944
											],
											[
												486167,
												486173
											],
											[
												486459,
												486465
											],
											[
												486745,
												486751
											],
											[
												487045,
												487051
											],
											[
												487316,
												487322
											],
											[
												487546,
												487552
											],
											[
												487754,
												487760
											],
											[
												488016,
												488022
											],
											[
												488317,
												488323
											],
											[
												488631,
												488637
											],
											[
												488862,
												488868
											],
											[
												489171,
												489177
											],
											[
												489459,
												489465
											],
											[
												489494,
												489500
											],
											[
												489535,
												489541
											],
											[
												489757,
												489763
											],
											[
												489812,
												489818
											],
											[
												489952,
												489958
											],
											[
												490162,
												490168
											],
											[
												490193,
												490199
											],
											[
												490243,
												490249
											],
											[
												490321,
												490327
											],
											[
												490482,
												490488
											],
											[
												490525,
												490531
											],
											[
												490577,
												490583
											],
											[
												490626,
												490632
											],
											[
												490664,
												490670
											],
											[
												490716,
												490722
											],
											[
												490768,
												490774
											],
											[
												490806,
												490812
											],
											[
												490833,
												490839
											],
											[
												490874,
												490880
											],
											[
												490916,
												490922
											],
											[
												490949,
												490955
											],
											[
												490971,
												490977
											],
											[
												491007,
												491013
											],
											[
												491042,
												491048
											],
											[
												491083,
												491089
											],
											[
												491216,
												491222
											],
											[
												491248,
												491254
											],
											[
												491287,
												491293
											],
											[
												491323,
												491329
											],
											[
												491348,
												491354
											],
											[
												491384,
												491390
											],
											[
												491422,
												491428
											],
											[
												491463,
												491469
											],
											[
												491493,
												491499
											],
											[
												491534,
												491540
											],
											[
												491744,
												491750
											],
											[
												491791,
												491797
											],
											[
												491946,
												491952
											],
											[
												492094,
												492100
											],
											[
												492292,
												492298
											],
											[
												492451,
												492457
											],
											[
												492548,
												492554
											],
											[
												492663,
												492669
											],
											[
												492887,
												492893
											],
											[
												493032,
												493038
											],
											[
												493199,
												493205
											],
											[
												493326,
												493332
											],
											[
												493504,
												493510
											],
											[
												493631,
												493637
											],
											[
												493858,
												493864
											],
											[
												493987,
												493993
											],
											[
												494120,
												494126
											],
											[
												494259,
												494265
											],
											[
												494467,
												494473
											],
											[
												494782,
												494788
											],
											[
												494929,
												494935
											],
											[
												495160,
												495166
											],
											[
												495337,
												495343
											],
											[
												495432,
												495438
											],
											[
												495583,
												495589
											],
											[
												495814,
												495820
											],
											[
												496111,
												496117
											],
											[
												496197,
												496203
											],
											[
												496267,
												496273
											],
											[
												496388,
												496394
											],
											[
												496527,
												496533
											],
											[
												496725,
												496731
											],
											[
												496792,
												496798
											],
											[
												496811,
												496817
											],
											[
												496832,
												496838
											],
											[
												496846,
												496852
											],
											[
												496876,
												496882
											],
											[
												496936,
												496942
											],
											[
												497077,
												497083
											],
											[
												497091,
												497097
											],
											[
												497152,
												497158
											],
											[
												497167,
												497173
											],
											[
												497225,
												497231
											],
											[
												497294,
												497300
											],
											[
												497388,
												497394
											],
											[
												497509,
												497515
											],
											[
												497698,
												497704
											],
											[
												497712,
												497718
											],
											[
												497973,
												497979
											],
											[
												497994,
												498000
											],
											[
												498008,
												498014
											],
											[
												498056,
												498062
											],
											[
												498077,
												498083
											],
											[
												498095,
												498101
											],
											[
												498136,
												498142
											],
											[
												498404,
												498410
											],
											[
												498661,
												498667
											],
											[
												498714,
												498720
											],
											[
												498861,
												498867
											],
											[
												499053,
												499059
											],
											[
												499067,
												499073
											],
											[
												499349,
												499355
											],
											[
												499443,
												499449
											],
											[
												499464,
												499470
											],
											[
												499478,
												499484
											],
											[
												499650,
												499656
											],
											[
												499958,
												499964
											],
											[
												500278,
												500284
											],
											[
												500490,
												500496
											],
											[
												500657,
												500663
											],
											[
												500839,
												500845
											],
											[
												501142,
												501148
											],
											[
												501157,
												501163
											],
											[
												501463,
												501469
											],
											[
												501550,
												501556
											],
											[
												501718,
												501724
											],
											[
												501744,
												501750
											],
											[
												501918,
												501924
											],
											[
												502270,
												502276
											],
											[
												502328,
												502334
											],
											[
												502373,
												502379
											],
											[
												502459,
												502465
											],
											[
												502468,
												502474
											],
											[
												502622,
												502628
											],
											[
												502631,
												502637
											],
											[
												502767,
												502773
											],
											[
												502804,
												502810
											],
											[
												502811,
												502817
											],
											[
												502853,
												502859
											],
											[
												503004,
												503010
											],
											[
												503041,
												503047
											],
											[
												503048,
												503054
											],
											[
												503089,
												503095
											],
											[
												503247,
												503253
											],
											[
												503263,
												503269
											],
											[
												503270,
												503276
											],
											[
												503363,
												503369
											],
											[
												503379,
												503385
											],
											[
												503386,
												503392
											],
											[
												503563,
												503569
											],
											[
												503570,
												503576
											],
											[
												503612,
												503618
											],
											[
												503737,
												503743
											],
											[
												503744,
												503750
											],
											[
												503785,
												503791
											],
											[
												503932,
												503938
											],
											[
												503939,
												503945
											],
											[
												504210,
												504216
											],
											[
												504251,
												504257
											],
											[
												504296,
												504302
											],
											[
												504378,
												504384
											],
											[
												504419,
												504425
											],
											[
												504546,
												504552
											],
											[
												504553,
												504559
											],
											[
												504766,
												504772
											],
											[
												504832,
												504838
											],
											[
												504884,
												504890
											],
											[
												504942,
												504948
											],
											[
												505010,
												505016
											],
											[
												505099,
												505105
											],
											[
												505332,
												505338
											],
											[
												505519,
												505525
											],
											[
												505788,
												505794
											],
											[
												505897,
												505903
											],
											[
												506070,
												506076
											],
											[
												506133,
												506139
											],
											[
												506323,
												506329
											],
											[
												506535,
												506541
											],
											[
												506744,
												506750
											],
											[
												506848,
												506854
											],
											[
												506981,
												506987
											],
											[
												507248,
												507254
											],
											[
												507257,
												507263
											],
											[
												507438,
												507444
											],
											[
												507445,
												507451
											],
											[
												507573,
												507579
											],
											[
												507797,
												507803
											],
											[
												507870,
												507876
											],
											[
												507877,
												507883
											],
											[
												508072,
												508078
											],
											[
												508233,
												508239
											],
											[
												508240,
												508246
											],
											[
												508347,
												508353
											],
											[
												508460,
												508466
											],
											[
												508467,
												508473
											],
											[
												508690,
												508696
											],
											[
												508963,
												508969
											],
											[
												509184,
												509190
											],
											[
												509219,
												509225
											],
											[
												509296,
												509302
											],
											[
												509561,
												509567
											],
											[
												509799,
												509805
											],
											[
												509848,
												509854
											],
											[
												510043,
												510049
											],
											[
												510232,
												510238
											],
											[
												510478,
												510484
											],
											[
												510576,
												510582
											],
											[
												510643,
												510649
											],
											[
												510811,
												510817
											],
											[
												510979,
												510985
											],
											[
												511192,
												511198
											],
											[
												511426,
												511432
											],
											[
												511530,
												511536
											],
											[
												511767,
												511773
											],
											[
												511776,
												511782
											],
											[
												512010,
												512016
											],
											[
												512017,
												512023
											],
											[
												512067,
												512073
											],
											[
												512266,
												512272
											],
											[
												512304,
												512310
											],
											[
												512311,
												512317
											],
											[
												512358,
												512364
											],
											[
												512447,
												512453
											],
											[
												512550,
												512556
											],
											[
												512557,
												512563
											],
											[
												512603,
												512609
											],
											[
												512779,
												512785
											],
											[
												512813,
												512819
											],
											[
												512820,
												512826
											],
											[
												512922,
												512928
											],
											[
												513108,
												513114
											],
											[
												513115,
												513121
											],
											[
												513217,
												513223
											],
											[
												513528,
												513534
											],
											[
												513535,
												513541
											],
											[
												513647,
												513653
											],
											[
												513921,
												513927
											],
											[
												513956,
												513962
											],
											[
												514191,
												514197
											],
											[
												514198,
												514204
											],
											[
												514362,
												514368
											],
											[
												514605,
												514611
											],
											[
												514612,
												514618
											],
											[
												514941,
												514947
											],
											[
												515194,
												515200
											],
											[
												515525,
												515531
											],
											[
												515739,
												515745
											],
											[
												515955,
												515961
											],
											[
												515973,
												515979
											],
											[
												515993,
												515999
											],
											[
												516028,
												516034
											],
											[
												516182,
												516188
											],
											[
												516253,
												516259
											],
											[
												516295,
												516301
											],
											[
												516334,
												516340
											],
											[
												516346,
												516352
											],
											[
												516539,
												516545
											],
											[
												516777,
												516783
											],
											[
												517048,
												517054
											],
											[
												517293,
												517299
											],
											[
												517511,
												517517
											],
											[
												517556,
												517562
											],
											[
												517836,
												517842
											],
											[
												517882,
												517888
											],
											[
												518002,
												518008
											],
											[
												518282,
												518288
											],
											[
												518482,
												518488
											],
											[
												518643,
												518649
											],
											[
												518806,
												518812
											],
											[
												518916,
												518922
											],
											[
												519017,
												519023
											],
											[
												519169,
												519175
											],
											[
												519336,
												519342
											],
											[
												519656,
												519662
											],
											[
												520013,
												520019
											],
											[
												520269,
												520275
											],
											[
												520518,
												520524
											],
											[
												520852,
												520858
											],
											[
												521019,
												521025
											],
											[
												521281,
												521287
											],
											[
												521705,
												521711
											],
											[
												521932,
												521938
											],
											[
												521964,
												521970
											],
											[
												522044,
												522050
											],
											[
												522087,
												522093
											],
											[
												522393,
												522399
											],
											[
												522589,
												522595
											],
											[
												522621,
												522627
											],
											[
												522701,
												522707
											],
											[
												522744,
												522750
											],
											[
												523109,
												523115
											],
											[
												523116,
												523122
											],
											[
												523337,
												523343
											],
											[
												523344,
												523350
											],
											[
												523582,
												523588
											],
											[
												523590,
												523596
											],
											[
												523682,
												523688
											],
											[
												523689,
												523695
											],
											[
												524066,
												524072
											],
											[
												524073,
												524079
											],
											[
												524112,
												524118
											],
											[
												524120,
												524126
											],
											[
												524212,
												524218
											],
											[
												524219,
												524225
											],
											[
												524295,
												524301
											],
											[
												524368,
												524374
											],
											[
												524734,
												524740
											],
											[
												524815,
												524821
											],
											[
												525075,
												525081
											],
											[
												525291,
												525297
											],
											[
												525324,
												525330
											],
											[
												525555,
												525561
											],
											[
												525667,
												525673
											],
											[
												525726,
												525732
											],
											[
												525870,
												525876
											],
											[
												526175,
												526181
											],
											[
												526353,
												526359
											],
											[
												526401,
												526407
											],
											[
												526549,
												526555
											],
											[
												526677,
												526683
											],
											[
												526806,
												526812
											],
											[
												526937,
												526943
											],
											[
												526955,
												526961
											],
											[
												526986,
												526992
											],
											[
												527004,
												527010
											],
											[
												527119,
												527125
											],
											[
												527146,
												527152
											],
											[
												527304,
												527310
											],
											[
												527440,
												527446
											],
											[
												527523,
												527529
											],
											[
												527695,
												527701
											],
											[
												527776,
												527782
											],
											[
												527922,
												527928
											],
											[
												528050,
												528056
											],
											[
												528410,
												528416
											],
											[
												528524,
												528530
											],
											[
												528562,
												528568
											],
											[
												528922,
												528928
											],
											[
												529025,
												529031
											],
											[
												529197,
												529203
											],
											[
												529495,
												529501
											],
											[
												529538,
												529544
											],
											[
												529878,
												529884
											],
											[
												530183,
												530189
											],
											[
												530296,
												530302
											],
											[
												530430,
												530436
											],
											[
												530581,
												530587
											],
											[
												530692,
												530698
											],
											[
												530793,
												530799
											],
											[
												530825,
												530831
											],
											[
												530916,
												530922
											],
											[
												530994,
												531000
											],
											[
												531211,
												531217
											],
											[
												531354,
												531360
											],
											[
												531686,
												531692
											],
											[
												531884,
												531890
											],
											[
												532267,
												532273
											],
											[
												532593,
												532599
											],
											[
												532608,
												532614
											],
											[
												532802,
												532808
											],
											[
												532876,
												532882
											],
											[
												532958,
												532964
											],
											[
												533075,
												533081
											],
											[
												533143,
												533149
											],
											[
												533473,
												533479
											],
											[
												533480,
												533486
											],
											[
												533804,
												533810
											],
											[
												534074,
												534080
											],
											[
												534081,
												534087
											],
											[
												534177,
												534183
											],
											[
												534432,
												534438
											],
											[
												534439,
												534445
											],
											[
												534747,
												534753
											],
											[
												534754,
												534760
											],
											[
												535008,
												535014
											],
											[
												535015,
												535021
											],
											[
												535148,
												535154
											],
											[
												535155,
												535161
											],
											[
												535452,
												535458
											],
											[
												535459,
												535465
											],
											[
												535555,
												535561
											],
											[
												535805,
												535811
											],
											[
												536063,
												536069
											],
											[
												536070,
												536076
											],
											[
												536154,
												536160
											],
											[
												536382,
												536388
											],
											[
												536389,
												536395
											],
											[
												536563,
												536569
											],
											[
												536570,
												536576
											],
											[
												536751,
												536757
											],
											[
												536758,
												536764
											],
											[
												536815,
												536821
											],
											[
												536916,
												536922
											],
											[
												536945,
												536951
											],
											[
												536985,
												536991
											],
											[
												537014,
												537020
											],
											[
												537054,
												537060
											],
											[
												537083,
												537089
											],
											[
												537123,
												537129
											],
											[
												537152,
												537158
											],
											[
												537346,
												537352
											],
											[
												537376,
												537382
											],
											[
												537417,
												537423
											],
											[
												537448,
												537454
											],
											[
												537860,
												537866
											],
											[
												537867,
												537873
											],
											[
												537956,
												537962
											],
											[
												538175,
												538181
											],
											[
												538556,
												538562
											],
											[
												538831,
												538837
											],
											[
												538838,
												538844
											],
											[
												538943,
												538949
											],
											[
												539232,
												539238
											],
											[
												539239,
												539245
											],
											[
												539331,
												539337
											],
											[
												539436,
												539442
											],
											[
												539443,
												539449
											],
											[
												539553,
												539559
											],
											[
												539883,
												539889
											],
											[
												540122,
												540128
											],
											[
												540129,
												540135
											],
											[
												540364,
												540370
											],
											[
												540426,
												540432
											],
											[
												540488,
												540494
											],
											[
												540735,
												540741
											],
											[
												540742,
												540748
											],
											[
												540953,
												540959
											],
											[
												541200,
												541206
											],
											[
												541208,
												541214
											],
											[
												541298,
												541304
											],
											[
												541305,
												541311
											],
											[
												541380,
												541386
											],
											[
												541658,
												541664
											],
											[
												541665,
												541671
											],
											[
												541904,
												541910
											],
											[
												542134,
												542140
											],
											[
												542210,
												542216
											],
											[
												542338,
												542344
											],
											[
												542543,
												542549
											],
											[
												542668,
												542674
											],
											[
												542727,
												542733
											],
											[
												542734,
												542740
											],
											[
												542770,
												542776
											],
											[
												543022,
												543028
											],
											[
												543229,
												543235
											],
											[
												543319,
												543325
											],
											[
												543480,
												543486
											],
											[
												543554,
												543560
											],
											[
												543677,
												543683
											],
											[
												543730,
												543736
											],
											[
												543834,
												543840
											],
											[
												544131,
												544137
											],
											[
												544248,
												544254
											],
											[
												544316,
												544322
											],
											[
												544452,
												544458
											],
											[
												544530,
												544536
											],
											[
												544641,
												544647
											],
											[
												544705,
												544711
											],
											[
												544819,
												544825
											],
											[
												544981,
												544987
											],
											[
												545026,
												545032
											],
											[
												545169,
												545175
											],
											[
												545235,
												545241
											],
											[
												545301,
												545307
											],
											[
												545569,
												545575
											],
											[
												545767,
												545773
											],
											[
												545894,
												545900
											],
											[
												546000,
												546006
											],
											[
												546350,
												546356
											],
											[
												546389,
												546395
											],
											[
												546591,
												546597
											],
											[
												546671,
												546677
											],
											[
												546938,
												546944
											],
											[
												547064,
												547070
											],
											[
												547101,
												547107
											],
											[
												547181,
												547187
											],
											[
												547305,
												547311
											],
											[
												547635,
												547641
											],
											[
												547665,
												547671
											],
											[
												547851,
												547857
											],
											[
												547930,
												547936
											],
											[
												548183,
												548189
											],
											[
												548302,
												548308
											],
											[
												548504,
												548510
											],
											[
												548764,
												548770
											],
											[
												549011,
												549017
											],
											[
												549105,
												549111
											],
											[
												549211,
												549217
											],
											[
												549348,
												549354
											],
											[
												549497,
												549503
											],
											[
												549732,
												549738
											],
											[
												549985,
												549991
											],
											[
												549992,
												549998
											],
											[
												550076,
												550082
											],
											[
												550142,
												550148
											],
											[
												550219,
												550225
											],
											[
												550323,
												550329
											],
											[
												550330,
												550336
											],
											[
												550595,
												550601
											],
											[
												550657,
												550663
											],
											[
												550690,
												550696
											],
											[
												550742,
												550748
											],
											[
												551080,
												551086
											],
											[
												551247,
												551253
											],
											[
												551479,
												551485
											],
											[
												551691,
												551697
											],
											[
												551724,
												551730
											],
											[
												552035,
												552041
											],
											[
												552042,
												552048
											],
											[
												552131,
												552137
											],
											[
												552369,
												552375
											],
											[
												552376,
												552382
											],
											[
												552465,
												552471
											],
											[
												552791,
												552797
											],
											[
												552798,
												552804
											],
											[
												552861,
												552867
											],
											[
												552891,
												552897
											],
											[
												552992,
												552998
											],
											[
												553092,
												553098
											],
											[
												553233,
												553239
											],
											[
												553510,
												553516
											],
											[
												553596,
												553602
											],
											[
												553702,
												553708
											],
											[
												553852,
												553858
											],
											[
												553959,
												553965
											],
											[
												554111,
												554117
											],
											[
												554392,
												554398
											],
											[
												554431,
												554437
											],
											[
												554601,
												554607
											],
											[
												554849,
												554855
											],
											[
												555098,
												555104
											],
											[
												555209,
												555215
											],
											[
												555321,
												555327
											],
											[
												555433,
												555439
											],
											[
												555575,
												555581
											],
											[
												555687,
												555693
											],
											[
												555817,
												555823
											],
											[
												556004,
												556010
											],
											[
												556062,
												556068
											],
											[
												556210,
												556216
											],
											[
												556375,
												556381
											],
											[
												556539,
												556545
											],
											[
												556847,
												556853
											],
											[
												556994,
												557000
											],
											[
												557118,
												557124
											],
											[
												557222,
												557228
											],
											[
												557343,
												557349
											],
											[
												557477,
												557483
											],
											[
												557628,
												557634
											],
											[
												557750,
												557756
											],
											[
												557942,
												557948
											],
											[
												558051,
												558057
											],
											[
												558244,
												558250
											],
											[
												558353,
												558359
											],
											[
												558544,
												558550
											],
											[
												558652,
												558658
											],
											[
												558759,
												558765
											],
											[
												558891,
												558897
											],
											[
												559039,
												559045
											],
											[
												559143,
												559149
											],
											[
												559289,
												559295
											],
											[
												559328,
												559334
											],
											[
												559378,
												559384
											],
											[
												559524,
												559530
											],
											[
												559565,
												559571
											],
											[
												559667,
												559673
											],
											[
												559752,
												559758
											],
											[
												559904,
												559910
											],
											[
												559941,
												559947
											],
											[
												559948,
												559954
											],
											[
												560109,
												560115
											],
											[
												560245,
												560251
											],
											[
												560284,
												560290
											],
											[
												560340,
												560346
											],
											[
												560487,
												560493
											],
											[
												560526,
												560532
											],
											[
												560733,
												560739
											],
											[
												560906,
												560912
											],
											[
												561095,
												561101
											],
											[
												561354,
												561360
											],
											[
												561448,
												561454
											],
											[
												561554,
												561560
											],
											[
												561621,
												561627
											],
											[
												561628,
												561634
											],
											[
												561684,
												561690
											],
											[
												561796,
												561802
											],
											[
												561868,
												561874
											],
											[
												561924,
												561930
											],
											[
												561931,
												561937
											],
											[
												562113,
												562119
											],
											[
												562207,
												562213
											],
											[
												562289,
												562295
											],
											[
												562341,
												562347
											],
											[
												562348,
												562354
											],
											[
												562435,
												562441
											],
											[
												562616,
												562622
											],
											[
												562650,
												562656
											],
											[
												562657,
												562663
											],
											[
												562744,
												562750
											],
											[
												562934,
												562940
											],
											[
												563093,
												563099
											],
											[
												563491,
												563497
											],
											[
												563531,
												563537
											],
											[
												563585,
												563591
											],
											[
												563622,
												563628
											],
											[
												563651,
												563657
											],
											[
												563691,
												563697
											],
											[
												563798,
												563804
											],
											[
												563925,
												563931
											],
											[
												564008,
												564014
											],
											[
												564079,
												564085
											],
											[
												564356,
												564362
											],
											[
												564404,
												564410
											],
											[
												564509,
												564515
											],
											[
												564616,
												564622
											],
											[
												564719,
												564725
											],
											[
												564787,
												564793
											],
											[
												564880,
												564886
											],
											[
												565084,
												565090
											],
											[
												565111,
												565117
											],
											[
												565153,
												565159
											],
											[
												565398,
												565404
											],
											[
												565543,
												565549
											],
											[
												565567,
												565573
											],
											[
												565598,
												565604
											],
											[
												565620,
												565626
											],
											[
												565697,
												565703
											],
											[
												565718,
												565724
											],
											[
												565750,
												565756
											],
											[
												565771,
												565777
											],
											[
												566088,
												566094
											],
											[
												566573,
												566579
											],
											[
												566966,
												566972
											],
											[
												567077,
												567083
											],
											[
												567255,
												567261
											],
											[
												567603,
												567609
											],
											[
												567698,
												567704
											],
											[
												567777,
												567783
											],
											[
												568174,
												568180
											],
											[
												568317,
												568323
											],
											[
												568561,
												568567
											],
											[
												568766,
												568772
											],
											[
												568956,
												568962
											],
											[
												569000,
												569006
											],
											[
												569063,
												569069
											],
											[
												569118,
												569124
											],
											[
												569153,
												569159
											],
											[
												569186,
												569192
											],
											[
												569318,
												569324
											],
											[
												569393,
												569399
											],
											[
												569496,
												569502
											],
											[
												569541,
												569547
											],
											[
												569609,
												569615
											],
											[
												569668,
												569674
											],
											[
												569725,
												569731
											],
											[
												569761,
												569767
											],
											[
												569831,
												569837
											],
											[
												569896,
												569902
											],
											[
												569954,
												569960
											],
											[
												569991,
												569997
											],
											[
												570082,
												570088
											],
											[
												570176,
												570182
											],
											[
												570274,
												570280
											],
											[
												570322,
												570328
											],
											[
												570481,
												570487
											],
											[
												570579,
												570585
											],
											[
												570611,
												570617
											],
											[
												570655,
												570661
											],
											[
												570716,
												570722
											],
											[
												570746,
												570752
											],
											[
												570775,
												570781
											],
											[
												570880,
												570886
											],
											[
												570924,
												570930
											],
											[
												570990,
												570996
											],
											[
												571038,
												571044
											],
											[
												571088,
												571094
											],
											[
												571362,
												571368
											],
											[
												571594,
												571600
											],
											[
												571812,
												571818
											],
											[
												571877,
												571883
											],
											[
												571919,
												571925
											],
											[
												571982,
												571988
											],
											[
												572026,
												572032
											],
											[
												572091,
												572097
											],
											[
												572168,
												572174
											],
											[
												572271,
												572277
											],
											[
												572320,
												572326
											],
											[
												572388,
												572394
											],
											[
												572449,
												572455
											],
											[
												572506,
												572512
											],
											[
												572546,
												572552
											],
											[
												572616,
												572622
											],
											[
												572680,
												572686
											],
											[
												572738,
												572744
											],
											[
												572776,
												572782
											],
											[
												572867,
												572873
											],
											[
												572963,
												572969
											],
											[
												573061,
												573067
											],
											[
												573113,
												573119
											],
											[
												573271,
												573277
											],
											[
												573369,
												573375
											],
											[
												573402,
												573408
											],
											[
												573446,
												573452
											],
											[
												573509,
												573515
											],
											[
												573539,
												573545
											],
											[
												573572,
												573578
											],
											[
												573808,
												573814
											],
											[
												573931,
												573937
											],
											[
												574069,
												574075
											],
											[
												574267,
												574273
											],
											[
												574429,
												574435
											],
											[
												574557,
												574563
											],
											[
												574597,
												574603
											],
											[
												574640,
												574646
											],
											[
												574691,
												574697
											],
											[
												574731,
												574737
											],
											[
												574857,
												574863
											],
											[
												575022,
												575028
											],
											[
												575077,
												575083
											],
											[
												575201,
												575207
											],
											[
												575330,
												575336
											],
											[
												575382,
												575388
											],
											[
												575435,
												575441
											],
											[
												575487,
												575493
											],
											[
												575527,
												575533
											],
											[
												575653,
												575659
											],
											[
												575860,
												575866
											],
											[
												576013,
												576019
											],
											[
												576136,
												576142
											],
											[
												576492,
												576498
											],
											[
												576679,
												576685
											],
											[
												576723,
												576729
											],
											[
												576790,
												576796
											],
											[
												576889,
												576895
											],
											[
												577035,
												577041
											],
											[
												577158,
												577164
											],
											[
												577207,
												577213
											],
											[
												577394,
												577400
											],
											[
												577490,
												577496
											],
											[
												577617,
												577623
											],
											[
												577695,
												577701
											],
											[
												577902,
												577908
											],
											[
												577979,
												577985
											],
											[
												578023,
												578029
											],
											[
												578097,
												578103
											],
											[
												578194,
												578200
											],
											[
												578360,
												578366
											],
											[
												578483,
												578489
											],
											[
												578619,
												578625
											],
											[
												578862,
												578868
											],
											[
												578985,
												578991
											],
											[
												579124,
												579130
											],
											[
												579329,
												579335
											],
											[
												579452,
												579458
											],
											[
												579586,
												579592
											],
											[
												579827,
												579833
											],
											[
												579957,
												579963
											],
											[
												579998,
												580004
											],
											[
												580043,
												580049
											],
											[
												580096,
												580102
											],
											[
												580136,
												580142
											],
											[
												580268,
												580274
											],
											[
												580435,
												580441
											],
											[
												580565,
												580571
											],
											[
												580700,
												580706
											],
											[
												580756,
												580762
											],
											[
												580806,
												580812
											],
											[
												580867,
												580873
											],
											[
												580920,
												580926
											],
											[
												581124,
												581130
											],
											[
												581296,
												581302
											],
											[
												581360,
												581366
											],
											[
												581416,
												581422
											],
											[
												581623,
												581629
											],
											[
												581795,
												581801
											],
											[
												582079,
												582085
											],
											[
												582160,
												582166
											],
											[
												582512,
												582518
											],
											[
												582602,
												582608
											],
											[
												582687,
												582693
											],
											[
												582705,
												582711
											],
											[
												582733,
												582739
											],
											[
												582751,
												582757
											],
											[
												582858,
												582864
											],
											[
												582952,
												582958
											],
											[
												583042,
												583048
											],
											[
												583153,
												583159
											],
											[
												583249,
												583255
											],
											[
												583349,
												583355
											],
											[
												583430,
												583436
											],
											[
												583526,
												583532
											],
											[
												583597,
												583603
											],
											[
												583675,
												583681
											],
											[
												583972,
												583978
											],
											[
												584076,
												584082
											],
											[
												584161,
												584167
											],
											[
												584179,
												584185
											],
											[
												584207,
												584213
											],
											[
												584225,
												584231
											],
											[
												584332,
												584338
											],
											[
												584426,
												584432
											],
											[
												584567,
												584573
											],
											[
												584646,
												584652
											],
											[
												584722,
												584728
											],
											[
												584972,
												584978
											],
											[
												584987,
												584993
											],
											[
												585124,
												585130
											],
											[
												585277,
												585283
											],
											[
												585400,
												585406
											],
											[
												585426,
												585432
											],
											[
												585535,
												585541
											],
											[
												585604,
												585610
											],
											[
												585663,
												585669
											],
											[
												585757,
												585763
											],
											[
												585821,
												585827
											],
											[
												585939,
												585945
											],
											[
												586109,
												586115
											],
											[
												586175,
												586181
											],
											[
												586212,
												586218
											],
											[
												586254,
												586260
											],
											[
												586302,
												586308
											],
											[
												586371,
												586377
											],
											[
												586426,
												586432
											],
											[
												586499,
												586505
											],
											[
												586620,
												586626
											],
											[
												586713,
												586719
											],
											[
												586754,
												586760
											],
											[
												586791,
												586797
											],
											[
												586832,
												586838
											],
											[
												586871,
												586877
											],
											[
												586912,
												586918
											],
											[
												586951,
												586957
											],
											[
												586992,
												586998
											],
											[
												587031,
												587037
											],
											[
												587177,
												587183
											],
											[
												587222,
												587228
											],
											[
												587373,
												587379
											],
											[
												587430,
												587436
											],
											[
												587558,
												587564
											],
											[
												587681,
												587687
											],
											[
												587709,
												587715
											],
											[
												587818,
												587824
											],
											[
												587847,
												587853
											],
											[
												587901,
												587907
											],
											[
												587941,
												587947
											],
											[
												588041,
												588047
											],
											[
												588214,
												588220
											],
											[
												588384,
												588390
											],
											[
												588450,
												588456
											],
											[
												588531,
												588537
											],
											[
												588586,
												588592
											],
											[
												588764,
												588770
											],
											[
												588828,
												588834
											],
											[
												588869,
												588875
											],
											[
												588933,
												588939
											],
											[
												588976,
												588982
											],
											[
												589040,
												589046
											],
											[
												589083,
												589089
											],
											[
												589147,
												589153
											],
											[
												589190,
												589196
											],
											[
												589234,
												589240
											],
											[
												589332,
												589338
											],
											[
												589384,
												589390
											],
											[
												589482,
												589488
											],
											[
												589539,
												589545
											],
											[
												589680,
												589686
											],
											[
												589803,
												589809
											],
											[
												589831,
												589837
											],
											[
												589940,
												589946
											],
											[
												589969,
												589975
											],
											[
												590023,
												590029
											],
											[
												590063,
												590069
											],
											[
												590163,
												590169
											],
											[
												590336,
												590342
											],
											[
												590506,
												590512
											],
											[
												590572,
												590578
											],
											[
												590653,
												590659
											],
											[
												590708,
												590714
											],
											[
												590826,
												590832
											],
											[
												590938,
												590944
											],
											[
												591017,
												591023
											],
											[
												591096,
												591102
											],
											[
												591175,
												591181
											],
											[
												591254,
												591260
											],
											[
												591333,
												591339
											],
											[
												591412,
												591418
											],
											[
												591491,
												591497
											],
											[
												591570,
												591576
											],
											[
												591638,
												591644
											],
											[
												591679,
												591685
											],
											[
												591774,
												591780
											],
											[
												591838,
												591844
											],
											[
												591881,
												591887
											],
											[
												591945,
												591951
											],
											[
												591988,
												591994
											],
											[
												592052,
												592058
											],
											[
												592095,
												592101
											],
											[
												592139,
												592145
											],
											[
												592237,
												592243
											],
											[
												592289,
												592295
											],
											[
												592387,
												592393
											],
											[
												592444,
												592450
											],
											[
												592589,
												592595
											],
											[
												592712,
												592718
											],
											[
												592860,
												592866
											],
											[
												592889,
												592895
											],
											[
												592943,
												592949
											],
											[
												592983,
												592989
											],
											[
												593083,
												593089
											],
											[
												593256,
												593262
											],
											[
												593426,
												593432
											],
											[
												593492,
												593498
											],
											[
												593573,
												593579
											],
											[
												593656,
												593662
											],
											[
												593713,
												593719
											],
											[
												593855,
												593861
											],
											[
												593978,
												593984
											],
											[
												594122,
												594128
											],
											[
												594151,
												594157
											],
											[
												594205,
												594211
											],
											[
												594245,
												594251
											],
											[
												594345,
												594351
											],
											[
												594519,
												594525
											],
											[
												594648,
												594654
											],
											[
												594771,
												594777
											],
											[
												594799,
												594805
											],
											[
												594943,
												594949
											],
											[
												594984,
												594990
											],
											[
												595048,
												595054
											],
											[
												595118,
												595124
											],
											[
												595291,
												595297
											],
											[
												595461,
												595467
											],
											[
												595527,
												595533
											],
											[
												595608,
												595614
											],
											[
												595679,
												595685
											],
											[
												595857,
												595863
											],
											[
												595927,
												595933
											],
											[
												596016,
												596022
											],
											[
												596078,
												596084
											],
											[
												596256,
												596262
											],
											[
												596341,
												596347
											],
											[
												596382,
												596388
											],
											[
												596446,
												596452
											],
											[
												596489,
												596495
											],
											[
												596553,
												596559
											],
											[
												596596,
												596602
											],
											[
												596660,
												596666
											],
											[
												596703,
												596709
											],
											[
												596747,
												596753
											],
											[
												596845,
												596851
											],
											[
												596897,
												596903
											],
											[
												596995,
												597001
											],
											[
												597052,
												597058
											],
											[
												597100,
												597106
											],
											[
												597176,
												597182
											],
											[
												597329,
												597335
											],
											[
												597681,
												597687
											],
											[
												597766,
												597772
											],
											[
												597784,
												597790
											],
											[
												597812,
												597818
											],
											[
												597830,
												597836
											],
											[
												597937,
												597943
											],
											[
												598031,
												598037
											],
											[
												598139,
												598145
											],
											[
												598231,
												598237
											],
											[
												598320,
												598326
											],
											[
												598620,
												598626
											],
											[
												598840,
												598846
											],
											[
												599033,
												599039
											],
											[
												599238,
												599244
											],
											[
												599443,
												599449
											],
											[
												599665,
												599671
											],
											[
												599970,
												599976
											],
											[
												600012,
												600018
											],
											[
												600215,
												600221
											],
											[
												600345,
												600351
											],
											[
												600508,
												600514
											],
											[
												600777,
												600783
											],
											[
												601028,
												601034
											],
											[
												601373,
												601379
											],
											[
												601629,
												601635
											],
											[
												601821,
												601827
											],
											[
												601952,
												601958
											],
											[
												602314,
												602320
											],
											[
												602328,
												602334
											],
											[
												602552,
												602558
											],
											[
												602941,
												602947
											],
											[
												602987,
												602993
											],
											[
												603256,
												603262
											],
											[
												603318,
												603324
											],
											[
												603643,
												603649
											],
											[
												604008,
												604014
											],
											[
												604190,
												604196
											],
											[
												604771,
												604777
											],
											[
												605050,
												605056
											],
											[
												605173,
												605179
											],
											[
												605262,
												605268
											],
											[
												605483,
												605489
											],
											[
												605629,
												605635
											],
											[
												605847,
												605853
											],
											[
												605928,
												605934
											],
											[
												606243,
												606249
											],
											[
												606288,
												606294
											],
											[
												606434,
												606440
											],
											[
												606565,
												606571
											],
											[
												606591,
												606597
											],
											[
												606631,
												606637
											],
											[
												606657,
												606663
											],
											[
												606698,
												606704
											],
											[
												606740,
												606746
											],
											[
												606777,
												606783
											],
											[
												606804,
												606810
											],
											[
												607071,
												607077
											],
											[
												607176,
												607182
											],
											[
												607251,
												607257
											],
											[
												607393,
												607399
											],
											[
												607429,
												607435
											],
											[
												607441,
												607447
											],
											[
												607524,
												607530
											],
											[
												607536,
												607542
											],
											[
												607614,
												607620
											],
											[
												607862,
												607868
											],
											[
												607940,
												607946
											],
											[
												608237,
												608243
											],
											[
												608361,
												608367
											],
											[
												608376,
												608382
											],
											[
												608465,
												608471
											],
											[
												608568,
												608574
											],
											[
												608638,
												608644
											],
											[
												608680,
												608686
											],
											[
												608695,
												608701
											],
											[
												608741,
												608747
											],
											[
												608925,
												608931
											],
											[
												608984,
												608990
											],
											[
												608997,
												609003
											],
											[
												609105,
												609111
											],
											[
												609147,
												609153
											],
											[
												609162,
												609168
											],
											[
												609357,
												609363
											],
											[
												609372,
												609378
											],
											[
												609427,
												609433
											],
											[
												609600,
												609606
											],
											[
												609739,
												609745
											],
											[
												609816,
												609822
											],
											[
												609829,
												609835
											],
											[
												609933,
												609939
											],
											[
												609946,
												609952
											],
											[
												610088,
												610094
											],
											[
												610162,
												610168
											],
											[
												610175,
												610181
											],
											[
												610273,
												610279
											],
											[
												610398,
												610404
											],
											[
												610413,
												610419
											],
											[
												610473,
												610479
											],
											[
												610515,
												610521
											],
											[
												610588,
												610594
											],
											[
												610603,
												610609
											],
											[
												610773,
												610779
											],
											[
												611033,
												611039
											],
											[
												611190,
												611196
											],
											[
												611203,
												611209
											],
											[
												611345,
												611351
											],
											[
												611437,
												611443
											],
											[
												611450,
												611456
											],
											[
												611610,
												611616
											],
											[
												611655,
												611661
											],
											[
												611843,
												611849
											],
											[
												611904,
												611910
											],
											[
												611993,
												611999
											],
											[
												612006,
												612012
											],
											[
												612067,
												612073
											],
											[
												612124,
												612130
											],
											[
												612139,
												612145
											],
											[
												612198,
												612204
											],
											[
												612299,
												612305
											],
											[
												612316,
												612322
											],
											[
												612414,
												612420
											],
											[
												612427,
												612433
											],
											[
												612604,
												612610
											],
											[
												612848,
												612854
											],
											[
												613150,
												613156
											],
											[
												613215,
												613221
											],
											[
												613462,
												613468
											],
											[
												613550,
												613556
											],
											[
												613639,
												613645
											],
											[
												613711,
												613717
											],
											[
												613775,
												613781
											],
											[
												614003,
												614009
											],
											[
												614059,
												614065
											],
											[
												614071,
												614077
											],
											[
												614192,
												614198
											],
											[
												614253,
												614259
											],
											[
												614518,
												614524
											],
											[
												614723,
												614729
											],
											[
												614779,
												614785
											],
											[
												614791,
												614797
											],
											[
												614912,
												614918
											],
											[
												614973,
												614979
											],
											[
												615238,
												615244
											],
											[
												615432,
												615438
											],
											[
												615488,
												615494
											],
											[
												615500,
												615506
											],
											[
												615621,
												615627
											],
											[
												615682,
												615688
											],
											[
												615920,
												615926
											],
											[
												616125,
												616131
											],
											[
												616181,
												616187
											],
											[
												616193,
												616199
											],
											[
												616314,
												616320
											],
											[
												616375,
												616381
											],
											[
												616640,
												616646
											],
											[
												616845,
												616851
											],
											[
												616901,
												616907
											],
											[
												616913,
												616919
											],
											[
												617034,
												617040
											],
											[
												617095,
												617101
											],
											[
												617360,
												617366
											],
											[
												617565,
												617571
											],
											[
												617621,
												617627
											],
											[
												617633,
												617639
											],
											[
												617754,
												617760
											],
											[
												617815,
												617821
											],
											[
												618080,
												618086
											],
											[
												618285,
												618291
											],
											[
												618341,
												618347
											],
											[
												618353,
												618359
											],
											[
												618474,
												618480
											],
											[
												618535,
												618541
											],
											[
												618800,
												618806
											],
											[
												619005,
												619011
											],
											[
												619061,
												619067
											],
											[
												619073,
												619079
											],
											[
												619194,
												619200
											],
											[
												619255,
												619261
											],
											[
												619520,
												619526
											],
											[
												619725,
												619731
											],
											[
												619781,
												619787
											],
											[
												619793,
												619799
											],
											[
												619914,
												619920
											],
											[
												619975,
												619981
											],
											[
												620240,
												620246
											],
											[
												620513,
												620519
											],
											[
												620628,
												620634
											],
											[
												620696,
												620702
											],
											[
												620912,
												620918
											],
											[
												621069,
												621075
											],
											[
												621235,
												621241
											],
											[
												621380,
												621386
											],
											[
												621624,
												621630
											],
											[
												621701,
												621707
											],
											[
												621743,
												621749
											],
											[
												621795,
												621801
											],
											[
												621889,
												621895
											],
											[
												621916,
												621922
											],
											[
												621935,
												621941
											],
											[
												621998,
												622004
											],
											[
												622036,
												622042
											],
											[
												622113,
												622119
											],
											[
												622125,
												622131
											],
											[
												622263,
												622269
											],
											[
												622366,
												622372
											],
											[
												622469,
												622475
											],
											[
												622572,
												622578
											],
											[
												622671,
												622677
											],
											[
												622753,
												622759
											],
											[
												622769,
												622775
											],
											[
												622984,
												622990
											],
											[
												623189,
												623195
											],
											[
												623401,
												623407
											],
											[
												623698,
												623704
											],
											[
												623924,
												623930
											],
											[
												623961,
												623967
											],
											[
												624038,
												624044
											],
											[
												624050,
												624056
											],
											[
												624260,
												624266
											],
											[
												624529,
												624535
											],
											[
												624606,
												624612
											],
											[
												624618,
												624624
											],
											[
												624941,
												624947
											],
											[
												625280,
												625286
											],
											[
												625563,
												625569
											],
											[
												625784,
												625790
											],
											[
												626019,
												626025
											],
											[
												626381,
												626387
											],
											[
												626756,
												626762
											],
											[
												627097,
												627103
											],
											[
												627418,
												627424
											],
											[
												627719,
												627725
											],
											[
												628022,
												628028
											],
											[
												628338,
												628344
											],
											[
												628627,
												628633
											],
											[
												628964,
												628970
											],
											[
												629127,
												629133
											],
											[
												629439,
												629445
											],
											[
												629802,
												629808
											],
											[
												630118,
												630124
											],
											[
												630471,
												630477
											],
											[
												630768,
												630774
											],
											[
												631040,
												631046
											],
											[
												631338,
												631344
											],
											[
												631619,
												631625
											],
											[
												631828,
												631834
											],
											[
												632010,
												632016
											],
											[
												632312,
												632318
											],
											[
												632389,
												632395
											],
											[
												632404,
												632410
											],
											[
												632456,
												632462
											],
											[
												632468,
												632474
											],
											[
												632561,
												632567
											],
											[
												632576,
												632582
											],
											[
												632926,
												632932
											],
											[
												633003,
												633009
											],
											[
												633018,
												633024
											],
											[
												633114,
												633120
											],
											[
												633126,
												633132
											],
											[
												633320,
												633326
											],
											[
												633335,
												633341
											],
											[
												633452,
												633458
											],
											[
												633529,
												633535
											],
											[
												633541,
												633547
											],
											[
												633770,
												633776
											],
											[
												634062,
												634068
											],
											[
												634348,
												634354
											],
											[
												634648,
												634654
											],
											[
												634919,
												634925
											],
											[
												635149,
												635155
											],
											[
												635357,
												635363
											],
											[
												635619,
												635625
											],
											[
												635920,
												635926
											],
											[
												636234,
												636240
											],
											[
												636465,
												636471
											],
											[
												636808,
												636814
											],
											[
												636923,
												636929
											],
											[
												636991,
												636997
											],
											[
												637207,
												637213
											],
											[
												637364,
												637370
											],
											[
												637530,
												637536
											],
											[
												637675,
												637681
											],
											[
												637919,
												637925
											],
											[
												637996,
												638002
											],
											[
												638038,
												638044
											],
											[
												638090,
												638096
											],
											[
												638184,
												638190
											],
											[
												638211,
												638217
											],
											[
												638230,
												638236
											],
											[
												638293,
												638299
											],
											[
												638331,
												638337
											],
											[
												638408,
												638414
											],
											[
												638420,
												638426
											],
											[
												638558,
												638564
											],
											[
												638661,
												638667
											],
											[
												638764,
												638770
											],
											[
												638867,
												638873
											],
											[
												638966,
												638972
											],
											[
												639048,
												639054
											],
											[
												639064,
												639070
											],
											[
												639279,
												639285
											],
											[
												639484,
												639490
											],
											[
												639696,
												639702
											],
											[
												639993,
												639999
											],
											[
												640219,
												640225
											],
											[
												640256,
												640262
											],
											[
												640333,
												640339
											],
											[
												640345,
												640351
											],
											[
												640555,
												640561
											],
											[
												640824,
												640830
											],
											[
												640901,
												640907
											],
											[
												640913,
												640919
											],
											[
												641236,
												641242
											],
											[
												641575,
												641581
											],
											[
												641858,
												641864
											],
											[
												642079,
												642085
											],
											[
												642314,
												642320
											],
											[
												642676,
												642682
											],
											[
												643051,
												643057
											],
											[
												643392,
												643398
											],
											[
												643713,
												643719
											],
											[
												644014,
												644020
											],
											[
												644317,
												644323
											],
											[
												644633,
												644639
											],
											[
												644922,
												644928
											],
											[
												645259,
												645265
											],
											[
												645422,
												645428
											],
											[
												645734,
												645740
											],
											[
												646097,
												646103
											],
											[
												646413,
												646419
											],
											[
												646766,
												646772
											],
											[
												647063,
												647069
											],
											[
												647335,
												647341
											],
											[
												647633,
												647639
											],
											[
												647914,
												647920
											],
											[
												648123,
												648129
											],
											[
												648305,
												648311
											],
											[
												648607,
												648613
											],
											[
												648684,
												648690
											],
											[
												648699,
												648705
											],
											[
												648751,
												648757
											],
											[
												648763,
												648769
											],
											[
												648856,
												648862
											],
											[
												648871,
												648877
											],
											[
												649221,
												649227
											],
											[
												649298,
												649304
											],
											[
												649313,
												649319
											],
											[
												649409,
												649415
											],
											[
												649421,
												649427
											],
											[
												649615,
												649621
											],
											[
												649630,
												649636
											],
											[
												649747,
												649753
											],
											[
												649824,
												649830
											],
											[
												649836,
												649842
											],
											[
												650065,
												650071
											],
											[
												650357,
												650363
											],
											[
												650643,
												650649
											],
											[
												650943,
												650949
											],
											[
												651214,
												651220
											],
											[
												651444,
												651450
											],
											[
												651652,
												651658
											],
											[
												651914,
												651920
											],
											[
												652215,
												652221
											],
											[
												652529,
												652535
											],
											[
												652760,
												652766
											],
											[
												653118,
												653124
											],
											[
												653455,
												653461
											],
											[
												653490,
												653496
											],
											[
												653531,
												653537
											],
											[
												653753,
												653759
											],
											[
												653808,
												653814
											],
											[
												653948,
												653954
											],
											[
												654158,
												654164
											],
											[
												654189,
												654195
											],
											[
												654239,
												654245
											],
											[
												654317,
												654323
											],
											[
												654478,
												654484
											],
											[
												654521,
												654527
											],
											[
												654573,
												654579
											],
											[
												654622,
												654628
											],
											[
												654660,
												654666
											],
											[
												654712,
												654718
											],
											[
												654764,
												654770
											],
											[
												654802,
												654808
											],
											[
												654829,
												654835
											],
											[
												654870,
												654876
											],
											[
												654912,
												654918
											],
											[
												654945,
												654951
											],
											[
												654967,
												654973
											],
											[
												655003,
												655009
											],
											[
												655038,
												655044
											],
											[
												655079,
												655085
											],
											[
												655212,
												655218
											],
											[
												655244,
												655250
											],
											[
												655283,
												655289
											],
											[
												655319,
												655325
											],
											[
												655344,
												655350
											],
											[
												655380,
												655386
											],
											[
												655418,
												655424
											],
											[
												655459,
												655465
											],
											[
												655489,
												655495
											],
											[
												655530,
												655536
											],
											[
												655789,
												655795
											],
											[
												655836,
												655842
											],
											[
												655991,
												655997
											],
											[
												656139,
												656145
											],
											[
												656337,
												656343
											],
											[
												656496,
												656502
											],
											[
												656593,
												656599
											],
											[
												656708,
												656714
											],
											[
												656932,
												656938
											],
											[
												657077,
												657083
											],
											[
												657244,
												657250
											],
											[
												657371,
												657377
											],
											[
												657549,
												657555
											],
											[
												657676,
												657682
											],
											[
												657903,
												657909
											],
											[
												658032,
												658038
											],
											[
												658165,
												658171
											],
											[
												658304,
												658310
											],
											[
												658512,
												658518
											],
											[
												658827,
												658833
											],
											[
												658974,
												658980
											],
											[
												659205,
												659211
											],
											[
												659382,
												659388
											],
											[
												659477,
												659483
											],
											[
												659628,
												659634
											],
											[
												659859,
												659865
											],
											[
												660156,
												660162
											],
											[
												660242,
												660248
											],
											[
												660312,
												660318
											],
											[
												660433,
												660439
											],
											[
												660572,
												660578
											],
											[
												660770,
												660776
											],
											[
												660837,
												660843
											],
											[
												660856,
												660862
											],
											[
												660877,
												660883
											],
											[
												660891,
												660897
											],
											[
												660921,
												660927
											],
											[
												660981,
												660987
											],
											[
												661122,
												661128
											],
											[
												661136,
												661142
											],
											[
												661197,
												661203
											],
											[
												661212,
												661218
											],
											[
												661270,
												661276
											],
											[
												661339,
												661345
											],
											[
												661433,
												661439
											],
											[
												661554,
												661560
											],
											[
												661743,
												661749
											],
											[
												661757,
												661763
											],
											[
												662018,
												662024
											],
											[
												662039,
												662045
											],
											[
												662053,
												662059
											],
											[
												662101,
												662107
											],
											[
												662122,
												662128
											],
											[
												662140,
												662146
											],
											[
												662181,
												662187
											],
											[
												662449,
												662455
											],
											[
												662706,
												662712
											],
											[
												662759,
												662765
											],
											[
												662906,
												662912
											],
											[
												663098,
												663104
											],
											[
												663112,
												663118
											],
											[
												663394,
												663400
											],
											[
												663488,
												663494
											],
											[
												663509,
												663515
											],
											[
												663523,
												663529
											],
											[
												663695,
												663701
											],
											[
												664003,
												664009
											],
											[
												664323,
												664329
											],
											[
												664535,
												664541
											],
											[
												664702,
												664708
											],
											[
												664884,
												664890
											],
											[
												665187,
												665193
											],
											[
												665202,
												665208
											],
											[
												665579,
												665585
											],
											[
												665844,
												665850
											],
											[
												666215,
												666221
											],
											[
												666433,
												666439
											],
											[
												666558,
												666564
											],
											[
												666653,
												666659
											],
											[
												666751,
												666757
											],
											[
												666847,
												666853
											],
											[
												666928,
												666934
											],
											[
												667064,
												667070
											],
											[
												667155,
												667161
											],
											[
												667249,
												667255
											],
											[
												667344,
												667350
											],
											[
												667642,
												667648
											],
											[
												668050,
												668056
											],
											[
												668286,
												668292
											],
											[
												668518,
												668524
											],
											[
												668727,
												668733
											],
											[
												668931,
												668937
											],
											[
												669151,
												669157
											],
											[
												669413,
												669419
											],
											[
												669626,
												669632
											],
											[
												669909,
												669915
											],
											[
												670108,
												670114
											],
											[
												670506,
												670512
											],
											[
												670831,
												670837
											],
											[
												671111,
												671117
											],
											[
												671145,
												671151
											],
											[
												671487,
												671493
											],
											[
												671746,
												671752
											],
											[
												671824,
												671830
											],
											[
												671862,
												671868
											],
											[
												671935,
												671941
											],
											[
												672215,
												672221
											],
											[
												672340,
												672346
											],
											[
												672456,
												672462
											],
											[
												672874,
												672880
											],
											[
												673078,
												673084
											],
											[
												673321,
												673327
											],
											[
												673363,
												673369
											],
											[
												673643,
												673649
											],
											[
												673930,
												673936
											],
											[
												674125,
												674131
											],
											[
												674157,
												674163
											],
											[
												674344,
												674350
											],
											[
												674453,
												674459
											],
											[
												674516,
												674522
											],
											[
												674554,
												674560
											],
											[
												674724,
												674730
											],
											[
												674762,
												674768
											],
											[
												674806,
												674812
											],
											[
												674865,
												674871
											],
											[
												674884,
												674890
											],
											[
												674925,
												674931
											],
											[
												675229,
												675235
											],
											[
												675513,
												675519
											],
											[
												675583,
												675589
											],
											[
												675825,
												675831
											],
											[
												676128,
												676134
											],
											[
												676434,
												676440
											],
											[
												676722,
												676728
											],
											[
												676995,
												677001
											],
											[
												677256,
												677262
											],
											[
												677389,
												677395
											],
											[
												677408,
												677414
											],
											[
												677448,
												677454
											],
											[
												677749,
												677755
											],
											[
												677900,
												677906
											],
											[
												678221,
												678227
											],
											[
												678616,
												678622
											],
											[
												678872,
												678878
											],
											[
												679177,
												679183
											],
											[
												679224,
												679230
											],
											[
												679557,
												679563
											],
											[
												679599,
												679605
											],
											[
												679703,
												679709
											],
											[
												679722,
												679728
											],
											[
												679961,
												679967
											],
											[
												680003,
												680009
											],
											[
												680144,
												680150
											],
											[
												680163,
												680169
											],
											[
												680409,
												680415
											],
											[
												680639,
												680645
											],
											[
												681045,
												681051
											],
											[
												681059,
												681065
											],
											[
												681344,
												681350
											],
											[
												681505,
												681511
											],
											[
												681612,
												681618
											],
											[
												681802,
												681808
											],
											[
												681861,
												681867
											],
											[
												681899,
												681905
											],
											[
												681925,
												681931
											],
											[
												681984,
												681990
											],
											[
												682023,
												682029
											],
											[
												682353,
												682359
											],
											[
												682529,
												682535
											],
											[
												682852,
												682858
											],
											[
												683145,
												683151
											],
											[
												683161,
												683167
											],
											[
												683406,
												683412
											],
											[
												683608,
												683614
											],
											[
												683753,
												683759
											],
											[
												684131,
												684137
											],
											[
												684376,
												684382
											],
											[
												684607,
												684613
											],
											[
												684692,
												684698
											],
											[
												684768,
												684774
											],
											[
												684791,
												684797
											],
											[
												685100,
												685106
											],
											[
												685247,
												685253
											],
											[
												685465,
												685471
											],
											[
												685787,
												685793
											],
											[
												685906,
												685912
											],
											[
												686130,
												686136
											],
											[
												686242,
												686248
											],
											[
												686380,
												686386
											],
											[
												686502,
												686508
											],
											[
												686852,
												686858
											],
											[
												686961,
												686967
											],
											[
												687304,
												687310
											],
											[
												687561,
												687567
											],
											[
												687585,
												687591
											],
											[
												687644,
												687650
											],
											[
												687652,
												687658
											],
											[
												687676,
												687682
											],
											[
												687702,
												687708
											],
											[
												687734,
												687740
											],
											[
												687778,
												687784
											],
											[
												687791,
												687797
											],
											[
												687859,
												687865
											],
											[
												687887,
												687893
											],
											[
												687924,
												687930
											],
											[
												688026,
												688032
											],
											[
												688039,
												688045
											],
											[
												688190,
												688196
											],
											[
												688203,
												688209
											],
											[
												688336,
												688342
											],
											[
												688349,
												688355
											],
											[
												688535,
												688541
											],
											[
												688548,
												688554
											],
											[
												688601,
												688607
											],
											[
												688619,
												688625
											],
											[
												688652,
												688658
											],
											[
												688771,
												688777
											],
											[
												689012,
												689018
											],
											[
												689091,
												689097
											],
											[
												689408,
												689414
											],
											[
												689573,
												689579
											],
											[
												689610,
												689616
											],
											[
												689948,
												689954
											],
											[
												690048,
												690054
											],
											[
												690088,
												690094
											],
											[
												690265,
												690271
											],
											[
												690281,
												690287
											],
											[
												690526,
												690532
											],
											[
												690601,
												690607
											],
											[
												690654,
												690660
											],
											[
												690670,
												690676
											],
											[
												690752,
												690758
											],
											[
												690768,
												690774
											],
											[
												690874,
												690880
											],
											[
												691010,
												691016
											],
											[
												691107,
												691113
											],
											[
												691199,
												691205
											],
											[
												691267,
												691273
											],
											[
												691406,
												691412
											],
											[
												691591,
												691597
											],
											[
												691910,
												691916
											],
											[
												692181,
												692187
											],
											[
												692443,
												692449
											],
											[
												692485,
												692491
											],
											[
												692632,
												692638
											],
											[
												692711,
												692717
											],
											[
												692798,
												692804
											],
											[
												692827,
												692833
											],
											[
												693025,
												693031
											],
											[
												693349,
												693355
											],
											[
												693643,
												693649
											],
											[
												693777,
												693783
											],
											[
												694016,
												694022
											],
											[
												694144,
												694150
											],
											[
												694297,
												694303
											],
											[
												694434,
												694440
											],
											[
												694726,
												694732
											],
											[
												694901,
												694907
											],
											[
												694908,
												694914
											],
											[
												694915,
												694921
											],
											[
												694931,
												694937
											],
											[
												695251,
												695257
											],
											[
												695528,
												695534
											],
											[
												695737,
												695743
											],
											[
												695865,
												695871
											],
											[
												696307,
												696313
											],
											[
												696730,
												696736
											],
											[
												696876,
												696882
											],
											[
												697201,
												697207
											],
											[
												697484,
												697490
											],
											[
												697556,
												697562
											],
											[
												697789,
												697795
											],
											[
												697956,
												697962
											],
											[
												698174,
												698180
											],
											[
												698431,
												698437
											],
											[
												698776,
												698782
											],
											[
												698947,
												698953
											],
											[
												699175,
												699181
											],
											[
												699403,
												699409
											],
											[
												699768,
												699774
											],
											[
												699942,
												699948
											],
											[
												700202,
												700208
											],
											[
												700359,
												700365
											],
											[
												700441,
												700447
											],
											[
												700535,
												700541
											],
											[
												700601,
												700607
											],
											[
												700610,
												700616
											],
											[
												700833,
												700839
											],
											[
												700842,
												700848
											],
											[
												701124,
												701130
											],
											[
												701305,
												701311
											],
											[
												701314,
												701320
											],
											[
												701543,
												701549
											],
											[
												701663,
												701669
											],
											[
												701808,
												701814
											],
											[
												701965,
												701971
											],
											[
												701974,
												701980
											],
											[
												702019,
												702025
											],
											[
												702114,
												702120
											],
											[
												702123,
												702129
											],
											[
												702237,
												702243
											],
											[
												702359,
												702365
											],
											[
												702368,
												702374
											],
											[
												702488,
												702494
											],
											[
												702756,
												702762
											],
											[
												702790,
												702796
											],
											[
												702992,
												702998
											],
											[
												703055,
												703061
											],
											[
												703374,
												703380
											],
											[
												703433,
												703439
											],
											[
												703518,
												703524
											],
											[
												703801,
												703807
											],
											[
												703840,
												703846
											],
											[
												703969,
												703975
											],
											[
												704141,
												704147
											],
											[
												704218,
												704224
											],
											[
												704285,
												704291
											],
											[
												704571,
												704577
											],
											[
												704772,
												704778
											],
											[
												704942,
												704948
											],
											[
												704960,
												704966
											],
											[
												705183,
												705189
											],
											[
												705593,
												705599
											],
											[
												705605,
												705611
											],
											[
												705709,
												705715
											],
											[
												705720,
												705726
											],
											[
												705792,
												705798
											],
											[
												705804,
												705810
											],
											[
												706025,
												706031
											],
											[
												706091,
												706097
											],
											[
												706148,
												706154
											],
											[
												706319,
												706325
											],
											[
												706399,
												706405
											],
											[
												706486,
												706492
											],
											[
												706555,
												706561
											],
											[
												706615,
												706621
											],
											[
												706663,
												706669
											],
											[
												706930,
												706936
											],
											[
												707187,
												707193
											],
											[
												707265,
												707271
											],
											[
												707552,
												707558
											],
											[
												707806,
												707812
											],
											[
												708094,
												708100
											],
											[
												708350,
												708356
											],
											[
												708669,
												708675
											],
											[
												708960,
												708966
											],
											[
												708973,
												708979
											],
											[
												709045,
												709051
											],
											[
												709058,
												709064
											],
											[
												709149,
												709155
											],
											[
												709317,
												709323
											],
											[
												709330,
												709336
											],
											[
												709405,
												709411
											],
											[
												709418,
												709424
											],
											[
												709484,
												709490
											],
											[
												709659,
												709665
											],
											[
												709756,
												709762
											],
											[
												709769,
												709775
											],
											[
												709817,
												709823
											],
											[
												709830,
												709836
											],
											[
												709873,
												709879
											],
											[
												710138,
												710144
											],
											[
												710574,
												710580
											],
											[
												710610,
												710616
											],
											[
												710979,
												710985
											],
											[
												711391,
												711397
											],
											[
												711467,
												711473
											],
											[
												711837,
												711843
											],
											[
												712284,
												712290
											],
											[
												712574,
												712580
											],
											[
												712892,
												712898
											],
											[
												713021,
												713027
											],
											[
												713404,
												713410
											],
											[
												713420,
												713426
											],
											[
												713602,
												713608
											],
											[
												713614,
												713620
											],
											[
												713716,
												713722
											],
											[
												713727,
												713733
											],
											[
												713941,
												713947
											],
											[
												713997,
												714003
											],
											[
												714283,
												714289
											],
											[
												714516,
												714522
											],
											[
												714603,
												714609
											],
											[
												714662,
												714668
											],
											[
												714709,
												714715
											],
											[
												715004,
												715010
											],
											[
												715124,
												715130
											],
											[
												715142,
												715148
											],
											[
												715178,
												715184
											],
											[
												715196,
												715202
											],
											[
												715447,
												715453
											],
											[
												715655,
												715661
											],
											[
												715780,
												715786
											],
											[
												716031,
												716037
											],
											[
												716175,
												716181
											],
											[
												716246,
												716252
											],
											[
												716363,
												716369
											],
											[
												716403,
												716409
											],
											[
												716443,
												716449
											],
											[
												716520,
												716526
											],
											[
												716662,
												716668
											],
											[
												716746,
												716752
											],
											[
												716774,
												716780
											],
											[
												716848,
												716854
											],
											[
												717056,
												717062
											],
											[
												717138,
												717144
											],
											[
												717177,
												717183
											],
											[
												717242,
												717248
											],
											[
												717558,
												717564
											],
											[
												717614,
												717620
											],
											[
												717886,
												717892
											],
											[
												717953,
												717959
											],
											[
												718154,
												718160
											],
											[
												718354,
												718360
											],
											[
												718469,
												718475
											],
											[
												718515,
												718521
											],
											[
												718973,
												718979
											],
											[
												719022,
												719028
											],
											[
												719371,
												719377
											],
											[
												719796,
												719802
											],
											[
												720186,
												720192
											],
											[
												720444,
												720450
											],
											[
												720813,
												720819
											],
											[
												721160,
												721166
											],
											[
												721173,
												721179
											],
											[
												721262,
												721268
											],
											[
												721326,
												721332
											],
											[
												721499,
												721505
											],
											[
												721640,
												721646
											],
											[
												721653,
												721659
											],
											[
												721718,
												721724
											],
											[
												721919,
												721925
											],
											[
												722159,
												722165
											],
											[
												722392,
												722398
											],
											[
												722514,
												722520
											],
											[
												722527,
												722533
											],
											[
												722569,
												722575
											],
											[
												722808,
												722814
											],
											[
												723214,
												723220
											],
											[
												723535,
												723541
											],
											[
												723556,
												723562
											],
											[
												723601,
												723607
											],
											[
												723608,
												723614
											],
											[
												723930,
												723936
											],
											[
												724120,
												724126
											],
											[
												724212,
												724218
											],
											[
												724239,
												724245
											],
											[
												724307,
												724313
											],
											[
												724523,
												724529
											],
											[
												724577,
												724583
											],
											[
												724823,
												724829
											],
											[
												724865,
												724871
											],
											[
												724877,
												724883
											],
											[
												725028,
												725034
											],
											[
												725059,
												725065
											],
											[
												725098,
												725104
											],
											[
												725152,
												725158
											],
											[
												725209,
												725215
											],
											[
												725270,
												725276
											],
											[
												725307,
												725313
											],
											[
												725371,
												725377
											],
											[
												725431,
												725437
											],
											[
												725479,
												725485
											],
											[
												725537,
												725543
											],
											[
												725585,
												725591
											],
											[
												725646,
												725652
											],
											[
												725689,
												725695
											],
											[
												725761,
												725767
											],
											[
												725802,
												725808
											],
											[
												725850,
												725856
											],
											[
												725891,
												725897
											],
											[
												725943,
												725949
											],
											[
												725992,
												725998
											],
											[
												726135,
												726141
											],
											[
												726319,
												726325
											],
											[
												726391,
												726397
											],
											[
												726461,
												726467
											],
											[
												726662,
												726668
											],
											[
												726913,
												726919
											],
											[
												727061,
												727067
											],
											[
												727222,
												727228
											],
											[
												727322,
												727328
											],
											[
												727545,
												727551
											],
											[
												727818,
												727824
											],
											[
												727953,
												727959
											],
											[
												728078,
												728084
											],
											[
												728211,
												728217
											],
											[
												728223,
												728229
											],
											[
												728354,
												728360
											],
											[
												728366,
												728372
											],
											[
												728473,
												728479
											],
											[
												728582,
												728588
											],
											[
												728636,
												728642
											],
											[
												728736,
												728742
											],
											[
												728805,
												728811
											],
											[
												728944,
												728950
											],
											[
												728956,
												728962
											],
											[
												729065,
												729071
											],
											[
												729173,
												729179
											],
											[
												729185,
												729191
											],
											[
												729290,
												729296
											],
											[
												729402,
												729408
											],
											[
												729449,
												729455
											],
											[
												729464,
												729470
											],
											[
												729516,
												729522
											],
											[
												729528,
												729534
											],
											[
												729616,
												729622
											],
											[
												729631,
												729637
											],
											[
												729955,
												729961
											],
											[
												730111,
												730117
											],
											[
												730151,
												730157
											],
											[
												730188,
												730194
											],
											[
												730208,
												730214
											],
											[
												730531,
												730537
											],
											[
												730606,
												730612
											],
											[
												730979,
												730985
											],
											[
												731689,
												731695
											],
											[
												732249,
												732255
											],
											[
												732588,
												732594
											],
											[
												732806,
												732812
											],
											[
												733071,
												733077
											],
											[
												733086,
												733092
											],
											[
												733377,
												733383
											],
											[
												733459,
												733465
											],
											[
												733739,
												733745
											],
											[
												734127,
												734133
											],
											[
												734226,
												734232
											],
											[
												734432,
												734438
											],
											[
												734689,
												734695
											],
											[
												735050,
												735056
											],
											[
												735270,
												735276
											],
											[
												735465,
												735471
											],
											[
												735714,
												735720
											],
											[
												735944,
												735950
											],
											[
												736296,
												736302
											],
											[
												736467,
												736473
											],
											[
												736677,
												736683
											],
											[
												736703,
												736709
											],
											[
												736923,
												736929
											],
											[
												736976,
												736982
											],
											[
												737162,
												737168
											],
											[
												737244,
												737250
											],
											[
												737361,
												737367
											],
											[
												737549,
												737555
											],
											[
												737727,
												737733
											],
											[
												737819,
												737825
											],
											[
												737878,
												737884
											],
											[
												738200,
												738206
											],
											[
												738265,
												738271
											],
											[
												738344,
												738350
											],
											[
												738407,
												738413
											],
											[
												738483,
												738489
											],
											[
												738622,
												738628
											],
											[
												738761,
												738767
											],
											[
												738895,
												738901
											],
											[
												738973,
												738979
											],
											[
												739006,
												739012
											],
											[
												739303,
												739309
											],
											[
												739451,
												739457
											],
											[
												739620,
												739626
											],
											[
												739840,
												739846
											],
											[
												740021,
												740027
											],
											[
												740253,
												740259
											],
											[
												740470,
												740476
											],
											[
												740633,
												740639
											],
											[
												740859,
												740865
											],
											[
												741065,
												741071
											],
											[
												741251,
												741257
											],
											[
												741415,
												741421
											],
											[
												741610,
												741616
											],
											[
												741988,
												741994
											],
											[
												742275,
												742281
											],
											[
												742477,
												742483
											],
											[
												742666,
												742672
											],
											[
												742822,
												742828
											],
											[
												742978,
												742984
											],
											[
												743113,
												743119
											],
											[
												743293,
												743299
											],
											[
												743610,
												743616
											],
											[
												743676,
												743682
											],
											[
												743787,
												743793
											],
											[
												743804,
												743810
											],
											[
												743941,
												743947
											],
											[
												743958,
												743964
											],
											[
												744238,
												744244
											],
											[
												744597,
												744603
											],
											[
												744916,
												744922
											],
											[
												745131,
												745137
											],
											[
												745484,
												745490
											],
											[
												745527,
												745533
											],
											[
												745636,
												745642
											],
											[
												745827,
												745833
											],
											[
												746073,
												746079
											],
											[
												746199,
												746205
											],
											[
												746274,
												746280
											],
											[
												746590,
												746596
											],
											[
												746864,
												746870
											],
											[
												747041,
												747047
											],
											[
												747079,
												747085
											],
											[
												747392,
												747398
											],
											[
												747532,
												747538
											],
											[
												747816,
												747822
											],
											[
												748182,
												748188
											],
											[
												748376,
												748382
											],
											[
												748610,
												748616
											],
											[
												748902,
												748908
											],
											[
												749271,
												749277
											],
											[
												749569,
												749575
											],
											[
												749778,
												749784
											],
											[
												749982,
												749988
											],
											[
												750202,
												750208
											],
											[
												750481,
												750487
											],
											[
												750694,
												750700
											],
											[
												750977,
												750983
											],
											[
												751176,
												751182
											],
											[
												751469,
												751475
											],
											[
												751578,
												751584
											],
											[
												751621,
												751627
											],
											[
												751825,
												751831
											],
											[
												752197,
												752203
											],
											[
												752390,
												752396
											],
											[
												752644,
												752650
											],
											[
												752843,
												752849
											],
											[
												753194,
												753200
											],
											[
												753312,
												753318
											],
											[
												753439,
												753445
											],
											[
												753617,
												753623
											],
											[
												753763,
												753769
											],
											[
												754124,
												754130
											],
											[
												754371,
												754377
											],
											[
												754567,
												754573
											],
											[
												754757,
												754763
											],
											[
												754831,
												754837
											],
											[
												754902,
												754908
											],
											[
												754985,
												754991
											],
											[
												755025,
												755031
											],
											[
												755075,
												755081
											],
											[
												755143,
												755149
											],
											[
												755173,
												755179
											],
											[
												755238,
												755244
											],
											[
												755428,
												755434
											],
											[
												755503,
												755509
											],
											[
												755580,
												755586
											],
											[
												755704,
												755710
											],
											[
												755851,
												755857
											],
											[
												755937,
												755943
											],
											[
												755944,
												755950
											],
											[
												756027,
												756033
											],
											[
												756065,
												756071
											],
											[
												756072,
												756078
											],
											[
												756131,
												756137
											],
											[
												756181,
												756187
											],
											[
												756281,
												756287
											],
											[
												756544,
												756550
											],
											[
												756784,
												756790
											],
											[
												756847,
												756853
											],
											[
												757023,
												757029
											],
											[
												757352,
												757358
											],
											[
												757581,
												757587
											],
											[
												757941,
												757947
											],
											[
												758098,
												758104
											],
											[
												758485,
												758491
											],
											[
												758709,
												758715
											],
											[
												758831,
												758837
											],
											[
												758863,
												758869
											],
											[
												759006,
												759012
											],
											[
												759128,
												759134
											],
											[
												759159,
												759165
											],
											[
												759321,
												759327
											],
											[
												759409,
												759415
											],
											[
												759460,
												759466
											],
											[
												759578,
												759584
											],
											[
												759700,
												759706
											],
											[
												759949,
												759955
											],
											[
												760077,
												760083
											],
											[
												760431,
												760437
											],
											[
												760801,
												760807
											],
											[
												761098,
												761104
											],
											[
												761183,
												761189
											],
											[
												761322,
												761328
											],
											[
												761554,
												761560
											],
											[
												761631,
												761637
											],
											[
												761705,
												761711
											],
											[
												761794,
												761800
											],
											[
												761834,
												761840
											],
											[
												761887,
												761893
											],
											[
												761970,
												761976
											],
											[
												762009,
												762015
											],
											[
												762089,
												762095
											],
											[
												762215,
												762221
											],
											[
												762295,
												762301
											],
											[
												762347,
												762353
											],
											[
												762565,
												762571
											],
											[
												762646,
												762652
											],
											[
												762777,
												762783
											],
											[
												762829,
												762835
											],
											[
												762908,
												762914
											],
											[
												763004,
												763010
											],
											[
												763178,
												763184
											],
											[
												763198,
												763204
											],
											[
												763235,
												763241
											],
											[
												763452,
												763458
											],
											[
												763663,
												763669
											],
											[
												763877,
												763883
											],
											[
												764082,
												764088
											],
											[
												764112,
												764118
											],
											[
												764188,
												764194
											],
											[
												764416,
												764422
											],
											[
												764469,
												764475
											],
											[
												764518,
												764524
											],
											[
												764577,
												764583
											],
											[
												764758,
												764764
											],
											[
												764942,
												764948
											],
											[
												765025,
												765031
											],
											[
												765362,
												765368
											],
											[
												765482,
												765488
											],
											[
												765518,
												765524
											],
											[
												765547,
												765553
											],
											[
												765736,
												765742
											],
											[
												765794,
												765800
											],
											[
												765888,
												765894
											],
											[
												765925,
												765931
											],
											[
												765968,
												765974
											],
											[
												766116,
												766122
											],
											[
												766355,
												766361
											],
											[
												766378,
												766384
											],
											[
												766482,
												766488
											],
											[
												766559,
												766565
											],
											[
												766705,
												766711
											],
											[
												766896,
												766902
											],
											[
												767064,
												767070
											],
											[
												767111,
												767117
											],
											[
												767601,
												767607
											],
											[
												767891,
												767897
											],
											[
												767971,
												767977
											],
											[
												768158,
												768164
											],
											[
												768222,
												768228
											],
											[
												768472,
												768478
											],
											[
												768670,
												768676
											],
											[
												768783,
												768789
											],
											[
												768926,
												768932
											],
											[
												769038,
												769044
											],
											[
												769276,
												769282
											],
											[
												769577,
												769583
											],
											[
												769857,
												769863
											],
											[
												770285,
												770291
											],
											[
												770538,
												770544
											],
											[
												770864,
												770870
											],
											[
												771162,
												771168
											],
											[
												771397,
												771403
											],
											[
												771614,
												771620
											],
											[
												771648,
												771654
											],
											[
												771731,
												771737
											],
											[
												771741,
												771747
											],
											[
												771850,
												771856
											],
											[
												771933,
												771939
											],
											[
												772103,
												772109
											],
											[
												772164,
												772170
											],
											[
												772329,
												772335
											],
											[
												772455,
												772461
											],
											[
												772502,
												772508
											],
											[
												772554,
												772560
											],
											[
												772603,
												772609
											],
											[
												772651,
												772657
											],
											[
												772755,
												772761
											],
											[
												772858,
												772864
											],
											[
												772977,
												772983
											],
											[
												773034,
												773040
											],
											[
												773115,
												773121
											],
											[
												773179,
												773185
											],
											[
												773274,
												773280
											],
											[
												773443,
												773449
											],
											[
												773592,
												773598
											],
											[
												773731,
												773737
											],
											[
												773815,
												773821
											],
											[
												773992,
												773998
											],
											[
												774116,
												774122
											],
											[
												774289,
												774295
											],
											[
												774366,
												774372
											],
											[
												774497,
												774503
											],
											[
												774743,
												774749
											],
											[
												774908,
												774914
											],
											[
												774986,
												774992
											],
											[
												775073,
												775079
											],
											[
												775110,
												775116
											],
											[
												775145,
												775151
											],
											[
												775190,
												775196
											],
											[
												775240,
												775246
											],
											[
												775294,
												775300
											],
											[
												775414,
												775420
											],
											[
												775618,
												775624
											],
											[
												775760,
												775766
											],
											[
												775841,
												775847
											],
											[
												775944,
												775950
											],
											[
												776062,
												776068
											],
											[
												776137,
												776143
											],
											[
												776237,
												776243
											],
											[
												776299,
												776305
											],
											[
												776383,
												776389
											],
											[
												776534,
												776540
											],
											[
												776688,
												776694
											],
											[
												776892,
												776898
											],
											[
												777110,
												777116
											],
											[
												777414,
												777420
											],
											[
												777443,
												777449
											],
											[
												777511,
												777517
											],
											[
												777572,
												777578
											],
											[
												777634,
												777640
											],
											[
												777708,
												777714
											],
											[
												778034,
												778040
											],
											[
												778153,
												778159
											],
											[
												778317,
												778323
											],
											[
												778370,
												778376
											],
											[
												778550,
												778556
											],
											[
												778620,
												778626
											],
											[
												778694,
												778700
											],
											[
												778775,
												778781
											],
											[
												778831,
												778837
											],
											[
												778898,
												778904
											],
											[
												778934,
												778940
											],
											[
												778986,
												778992
											],
											[
												779192,
												779198
											],
											[
												779459,
												779465
											],
											[
												779594,
												779600
											],
											[
												779855,
												779861
											],
											[
												779889,
												779895
											],
											[
												779948,
												779954
											],
											[
												779997,
												780003
											],
											[
												780014,
												780020
											],
											[
												780034,
												780040
											],
											[
												780100,
												780106
											],
											[
												780244,
												780250
											],
											[
												780582,
												780588
											],
											[
												780629,
												780635
											],
											[
												780691,
												780697
											],
											[
												780847,
												780853
											],
											[
												780898,
												780904
											],
											[
												780992,
												780998
											],
											[
												781048,
												781054
											],
											[
												781258,
												781264
											],
											[
												781509,
												781515
											],
											[
												781582,
												781588
											],
											[
												781833,
												781839
											],
											[
												782031,
												782037
											],
											[
												782075,
												782081
											],
											[
												782138,
												782144
											],
											[
												782188,
												782194
											],
											[
												782245,
												782251
											],
											[
												782292,
												782298
											],
											[
												782341,
												782347
											],
											[
												782438,
												782444
											],
											[
												782521,
												782527
											],
											[
												782566,
												782572
											],
											[
												782673,
												782679
											],
											[
												782756,
												782762
											],
											[
												782922,
												782928
											],
											[
												783172,
												783178
											],
											[
												783358,
												783364
											],
											[
												783461,
												783467
											],
											[
												783506,
												783512
											],
											[
												783565,
												783571
											],
											[
												783622,
												783628
											],
											[
												783658,
												783664
											],
											[
												783712,
												783718
											],
											[
												783821,
												783827
											],
											[
												783859,
												783865
											],
											[
												783925,
												783931
											],
											[
												784081,
												784087
											],
											[
												784130,
												784136
											],
											[
												784426,
												784432
											],
											[
												784615,
												784621
											],
											[
												784695,
												784701
											],
											[
												784805,
												784811
											],
											[
												784863,
												784869
											],
											[
												784900,
												784906
											],
											[
												784963,
												784969
											],
											[
												785061,
												785067
											],
											[
												785109,
												785115
											],
											[
												785160,
												785166
											],
											[
												785262,
												785268
											],
											[
												785294,
												785300
											],
											[
												785340,
												785346
											],
											[
												785442,
												785448
											],
											[
												785474,
												785480
											],
											[
												785520,
												785526
											],
											[
												785606,
												785612
											],
											[
												785643,
												785649
											],
											[
												785691,
												785697
											],
											[
												785721,
												785727
											],
											[
												785750,
												785756
											],
											[
												785958,
												785964
											],
											[
												786161,
												786167
											],
											[
												786203,
												786209
											],
											[
												786266,
												786272
											],
											[
												786310,
												786316
											],
											[
												786365,
												786371
											],
											[
												786552,
												786558
											],
											[
												786806,
												786812
											],
											[
												786994,
												787000
											],
											[
												787097,
												787103
											],
											[
												787146,
												787152
											],
											[
												787203,
												787209
											],
											[
												787260,
												787266
											],
											[
												787300,
												787306
											],
											[
												787352,
												787358
											],
											[
												787461,
												787467
											],
											[
												787499,
												787505
											],
											[
												787563,
												787569
											],
											[
												787719,
												787725
											],
											[
												787768,
												787774
											],
											[
												787837,
												787843
											],
											[
												788028,
												788034
											],
											[
												788269,
												788275
											],
											[
												788405,
												788411
											],
											[
												788582,
												788588
											],
											[
												788820,
												788826
											],
											[
												788956,
												788962
											],
											[
												789014,
												789020
											],
											[
												789052,
												789058
											],
											[
												789113,
												789119
											],
											[
												789211,
												789217
											],
											[
												789263,
												789269
											],
											[
												789312,
												789318
											],
											[
												789414,
												789420
											],
											[
												789447,
												789453
											],
											[
												789491,
												789497
											],
											[
												789593,
												789599
											],
											[
												789626,
												789632
											],
											[
												789670,
												789676
											],
											[
												789756,
												789762
											],
											[
												789797,
												789803
											],
											[
												789843,
												789849
											],
											[
												789873,
												789879
											],
											[
												789906,
												789912
											],
											[
												790051,
												790057
											],
											[
												790353,
												790359
											],
											[
												790406,
												790412
											],
											[
												790443,
												790449
											],
											[
												790519,
												790525
											],
											[
												790626,
												790632
											],
											[
												790745,
												790751
											],
											[
												790796,
												790802
											],
											[
												790919,
												790925
											],
											[
												790990,
												790996
											],
											[
												791105,
												791111
											],
											[
												791259,
												791265
											],
											[
												791437,
												791443
											],
											[
												791517,
												791523
											],
											[
												791614,
												791620
											],
											[
												791726,
												791732
											],
											[
												791838,
												791844
											],
											[
												791931,
												791937
											],
											[
												792229,
												792235
											],
											[
												792417,
												792423
											],
											[
												792623,
												792629
											],
											[
												792775,
												792781
											],
											[
												792990,
												792996
											],
											[
												793189,
												793195
											],
											[
												793360,
												793366
											],
											[
												793565,
												793571
											],
											[
												793763,
												793769
											],
											[
												793884,
												793890
											],
											[
												794212,
												794218
											],
											[
												794598,
												794604
											],
											[
												795010,
												795016
											],
											[
												795394,
												795400
											],
											[
												795587,
												795593
											],
											[
												795729,
												795735
											],
											[
												795853,
												795859
											],
											[
												795930,
												795936
											],
											[
												796024,
												796030
											],
											[
												796042,
												796048
											],
											[
												796246,
												796252
											],
											[
												796294,
												796300
											],
											[
												796427,
												796433
											],
											[
												796662,
												796668
											],
											[
												796835,
												796841
											],
											[
												796855,
												796861
											],
											[
												796874,
												796880
											],
											[
												797495,
												797501
											],
											[
												797787,
												797793
											],
											[
												798064,
												798070
											],
											[
												798313,
												798319
											],
											[
												798591,
												798597
											],
											[
												798619,
												798625
											],
											[
												798921,
												798927
											],
											[
												798985,
												798991
											],
											[
												799139,
												799145
											],
											[
												799301,
												799307
											],
											[
												799527,
												799533
											],
											[
												799755,
												799761
											],
											[
												799844,
												799850
											],
											[
												800126,
												800132
											],
											[
												800136,
												800142
											],
											[
												800288,
												800294
											],
											[
												800354,
												800360
											],
											[
												800458,
												800464
											],
											[
												800614,
												800620
											],
											[
												800825,
												800831
											],
											[
												801096,
												801102
											],
											[
												801131,
												801137
											],
											[
												801224,
												801230
											],
											[
												801331,
												801337
											],
											[
												801582,
												801588
											],
											[
												801804,
												801810
											],
											[
												801864,
												801870
											],
											[
												801900,
												801906
											],
											[
												802059,
												802065
											],
											[
												802280,
												802286
											],
											[
												802313,
												802319
											],
											[
												802588,
												802594
											],
											[
												802678,
												802684
											],
											[
												802785,
												802791
											],
											[
												802803,
												802809
											],
											[
												802839,
												802845
											],
											[
												802857,
												802863
											],
											[
												803128,
												803134
											],
											[
												803248,
												803254
											],
											[
												803616,
												803622
											],
											[
												803946,
												803952
											],
											[
												804015,
												804021
											],
											[
												804224,
												804230
											],
											[
												804385,
												804391
											],
											[
												804621,
												804627
											],
											[
												804863,
												804869
											],
											[
												805014,
												805020
											],
											[
												805040,
												805046
											],
											[
												805158,
												805164
											],
											[
												805202,
												805208
											],
											[
												805349,
												805355
											],
											[
												805487,
												805493
											],
											[
												805572,
												805578
											],
											[
												805655,
												805661
											],
											[
												805710,
												805716
											],
											[
												805925,
												805931
											],
											[
												806007,
												806013
											],
											[
												806129,
												806135
											],
											[
												806240,
												806246
											],
											[
												806465,
												806471
											],
											[
												806593,
												806599
											],
											[
												806674,
												806680
											],
											[
												806745,
												806751
											],
											[
												807016,
												807022
											],
											[
												807145,
												807151
											],
											[
												807272,
												807278
											],
											[
												807559,
												807565
											],
											[
												807771,
												807777
											],
											[
												808090,
												808096
											],
											[
												808301,
												808307
											],
											[
												808381,
												808387
											],
											[
												808687,
												808693
											],
											[
												808874,
												808880
											],
											[
												808897,
												808903
											],
											[
												808985,
												808991
											],
											[
												809353,
												809359
											],
											[
												809612,
												809618
											],
											[
												809891,
												809897
											],
											[
												809960,
												809966
											],
											[
												810057,
												810063
											],
											[
												810109,
												810115
											],
											[
												810267,
												810273
											],
											[
												810332,
												810338
											],
											[
												810378,
												810384
											],
											[
												810574,
												810580
											],
											[
												810785,
												810791
											],
											[
												810854,
												810860
											],
											[
												810913,
												810919
											],
											[
												811061,
												811067
											],
											[
												811133,
												811139
											],
											[
												811369,
												811375
											],
											[
												811437,
												811443
											],
											[
												811493,
												811499
											],
											[
												811649,
												811655
											],
											[
												811737,
												811743
											],
											[
												811803,
												811809
											],
											[
												811979,
												811985
											],
											[
												812262,
												812268
											],
											[
												812565,
												812571
											],
											[
												812675,
												812681
											],
											[
												812785,
												812791
											],
											[
												813050,
												813056
											],
											[
												813292,
												813298
											],
											[
												813445,
												813451
											],
											[
												813842,
												813848
											],
											[
												814141,
												814147
											],
											[
												814591,
												814597
											],
											[
												814792,
												814798
											],
											[
												815064,
												815072
											],
											[
												815353,
												815361
											],
											[
												815661,
												815669
											],
											[
												815774,
												815782
											],
											[
												816120,
												816128
											],
											[
												816192,
												816200
											],
											[
												816680,
												816688
											],
											[
												817020,
												817028
											],
											[
												817513,
												817521
											],
											[
												817715,
												817723
											],
											[
												817973,
												817981
											],
											[
												818166,
												818174
											],
											[
												818185,
												818193
											],
											[
												818806,
												818814
											],
											[
												819098,
												819106
											],
											[
												819375,
												819383
											],
											[
												819624,
												819632
											],
											[
												819852,
												819860
											],
											[
												819887,
												819895
											],
											[
												819980,
												819988
											],
											[
												820087,
												820095
											],
											[
												820338,
												820346
											],
											[
												820560,
												820568
											],
											[
												820620,
												820628
											],
											[
												820656,
												820664
											],
											[
												820815,
												820823
											],
											[
												821069,
												821077
											],
											[
												821344,
												821352
											],
											[
												821434,
												821442
											],
											[
												821681,
												821689
											],
											[
												821801,
												821809
											],
											[
												822169,
												822177
											],
											[
												822474,
												822482
											],
											[
												822735,
												822743
											],
											[
												822977,
												822985
											],
											[
												823207,
												823215
											],
											[
												823468,
												823476
											],
											[
												823668,
												823676
											],
											[
												823898,
												823906
											],
											[
												824131,
												824139
											],
											[
												824385,
												824393
											],
											[
												824656,
												824664
											],
											[
												824785,
												824793
											],
											[
												824912,
												824920
											],
											[
												825199,
												825207
											],
											[
												825411,
												825419
											],
											[
												825730,
												825738
											],
											[
												825941,
												825949
											],
											[
												826021,
												826029
											],
											[
												826327,
												826335
											],
											[
												826514,
												826522
											],
											[
												826537,
												826545
											],
											[
												826625,
												826633
											],
											[
												826993,
												827001
											],
											[
												827252,
												827260
											],
											[
												827531,
												827539
											],
											[
												827697,
												827705
											],
											[
												827749,
												827757
											],
											[
												827907,
												827915
											],
											[
												827972,
												827980
											],
											[
												828018,
												828026
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										814872,
										814872
									]
								],
								"settings":
								{
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 7,
									"result_base_dir": "",
									"result_file_regex": "^([A-Za-z\\\\/<].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 272910.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 27,
							"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_channel.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 25613,
								"regions":
								{
								},
								"selection":
								[
									[
										24394,
										24394
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 7748.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 28,
							"file": "/home/sam/conversant/repos/kazoo/applications/ecallmgr/src/ecallmgr_fs_command.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1728,
								"regions":
								{
								},
								"selection":
								[
									[
										618,
										618
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 16,
							"type": "text"
						},
						{
							"buffer": 29,
							"file": "/home/sam/conversant/repos/kazoo/applications/stepswitch/src/stepswitch_originate.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 16626,
								"regions":
								{
								},
								"selection":
								[
									[
										10622,
										10622
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 485.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						},
						{
							"buffer": 30,
							"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_route_win.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 11598,
								"regions":
								{
								},
								"selection":
								[
									[
										7855,
										7855
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 2240.0,
								"zoom_level": 1.0
							},
							"stack_index": 22,
							"type": "text"
						},
						{
							"buffer": 31,
							"file": "/home/sam/conversant/repos/kazoo/applications/callflow/src/cf_attributes.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22246,
								"regions":
								{
								},
								"selection":
								[
									[
										5049,
										5049
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1575.0,
								"zoom_level": 1.0
							},
							"stack_index": 18,
							"type": "text"
						},
						{
							"buffer": 32,
							"file": "/home/sam/conversant/repos/kazoo/core/whistle_apps-1.0.0/src/whapps_call.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 39324,
								"regions":
								{
								},
								"selection":
								[
									[
										15392,
										15392
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 4323.0,
								"zoom_level": 1.0
							},
							"stack_index": 24,
							"type": "text"
						},
						{
							"buffer": 33,
							"file": "/home/sam/conversant/repos/kazoo/core/whistle_apps-1.0.0/src/whapps_call_command.erl",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 107377,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Erlang/Erlang.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1646.0,
								"zoom_level": 1.0
							},
							"stack_index": 23,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 23.0
			},
			"input":
			{
				"height": 33.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 112.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.git":
			{
				"height": 100.0
			},
			"position": "0,1,0,0,0,0,0,0,0,1366,768",
			"project": "",
			"replace":
			{
				"height": 42.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
					[
						"temporru",
						"applications/callflow/src/module/cf_temporal_route.erl"
					],
					[
						"bhca",
						"applications/blackhole/src/modules/bh_call.erl"
					],
					[
						"blackh",
						"applications/blackhole/src/blackhole.erl"
					],
					[
						"ecallmgcale",
						"applications/ecallmgr/src/ecallmgr_call_events.erl"
					],
					[
						"ecallfscomm",
						"applications/ecallmgr/src/ecallmgr_fs_command.erl"
					],
					[
						"ecallh",
						"applications/ecallmgr/src/ecallmgr.hrl"
					],
					[
						"ecallut",
						"applications/ecallmgr/src/ecallmgr_util.erl"
					],
					[
						"ecallor",
						"applications/ecallmgr/src/ecallmgr_originate.erl"
					],
					[
						"ecaors",
						"applications/ecallmgr/src/ecallmgr_originate_sup.erl"
					],
					[
						"ecallmres",
						"applications/ecallmgr/src/ecallmgr_fs_resource.erl"
					],
					[
						"resour",
						"applications/callflow/src/module/cf_resources.erl"
					],
					[
						"ecallmgh",
						"applications/ecallmgr/src/ecallmgr.hrl"
					],
					[
						"crosshr",
						"applications/crossbar/src/crossbar.hrl"
					],
					[
						"cbut",
						"applications/crossbar/src/modules/cb_modules_util.erl"
					],
					[
						"cfattr",
						"applications/callflow/src/cf_attributes.erl"
					],
					[
						"cfend",
						"applications/callflow/src/cf_endpoint.erl"
					],
					[
						"cfres",
						"applications/callflow/src/module/cf_resources.erl"
					],
					[
						"stepres",
						"applications/stepswitch/src/stepswitch_resources.erl"
					],
					[
						"stepbr",
						"applications/stepswitch/src/stepswitch_bridge.erl"
					],
					[
						"ecallmgo",
						"applications/ecallmgr/src/ecallmgr_originate.erl"
					],
					[
						"whappsca",
						"core/whistle_apps-1.0.0/src/whapps_call.erl"
					],
					[
						"cfex",
						"applications/callflow/src/cf_exe.erl"
					],
					[
						"cfh",
						"applications/callflow/src/module/cf_hotdesk.erl"
					],
					[
						"cbhot",
						"applications/crossbar/src/modules/cb_hotdesks.erl"
					],
					[
						"whacallco",
						"core/whistle_apps-1.0.0/src/whapps_call_command.erl"
					],
					[
						"whappca",
						"core/whistle_apps-1.0.0/src/whapps_call.erl"
					],
					[
						"cfatt",
						"applications/callflow/src/cf_attributes.erl"
					],
					[
						"cfrow",
						"applications/callflow/src/cf_route_win.erl"
					],
					[
						"cfen",
						"applications/callflow/src/cf_endpoint.erl"
					],
					[
						"cf_",
						"applications/callflow/src/module/cf_resources.erl"
					],
					[
						"cf_orig",
						"deps/rabbitmq_server-3.2.0/plugins-src/licensing/license_info_rabbitmq-management"
					],
					[
						"cbcli",
						"applications/crossbar/src/modules/cb_clicktocall.erl"
					],
					[
						"ecallmhr",
						"applications/ecallmgr/src/ecallmgr.hrl"
					],
					[
						"ecallmfsb",
						"applications/ecallmgr/src/ecallmgr_fs_bridge.erl"
					],
					[
						"ecallmg",
						"applications/ecallmgr/src/ecallmgr_fs_route.erl"
					],
					[
						"whappscall",
						"core/whistle_apps-1.0.0/src/whapps_call.erl"
					],
					[
						"cfed",
						"applications/callflow/src/cf_endpoint.erl"
					],
					[
						"cfre",
						"applications/callflow/src/module/cf_resources.erl"
					],
					[
						"cf_o",
						"applications/callflow/src/module/cf_offnet.erl"
					],
					[
						"ecallmreg",
						"applications/ecallmgr/src/ecallmgr_registrar.erl"
					],
					[
						"wapinot",
						"core/whistle-1.0.0/src/api/wapi_notifications.erl"
					],
					[
						"ecallmcalle",
						"applications/ecallmgr/src/ecallmgr_call_events.erl"
					],
					[
						"ecallmgrfsc",
						"applications/ecallmgr/src/ecallmgr_fs_command.erl"
					],
					[
						"ecallmgrca",
						"applications/ecallmgr/src/ecallmgr_call_command.erl"
					],
					[
						"ecallmfscomm",
						"applications/ecallmgr/src/ecallmgr_fs_command.erl"
					],
					[
						"ecallmgr",
						"applications/ecallmgr/src/ecallmgr.hrl"
					],
					[
						"cf_s",
						"applications/callflow/src/module/cf_set.erl"
					],
					[
						"cf_att",
						"applications/callflow/src/cf_attributes.erl"
					],
					[
						"ecallfsauth",
						"applications/ecallmgr/src/ecallmgr_fs_authn.erl"
					],
					[
						"cfrout",
						"applications/callflow/src/cf_route_req.erl"
					],
					[
						"cf_ut",
						"applications/callflow/src/cf_util.erl"
					],
					[
						"ecallmgr_fs_xml",
						"applications/ecallmgr/src/ecallmgr_fs_xml.erl"
					],
					[
						"ecallmchannel",
						"applications/ecallmgr/src/ecallmgr_fs_channel.erl"
					],
					[
						"ecalcallco",
						"applications/ecallmgr/src/ecallmgr_call_command.erl"
					],
					[
						"ecallmfsbr",
						"applications/ecallmgr/src/ecallmgr_fs_bridge.erl"
					],
					[
						"ecallmut",
						"applications/ecallmgr/src/ecallmgr_util.erl"
					],
					[
						"wapi_d",
						"core/whistle-1.0.0/src/api/wapi_dialplan.erl"
					],
					[
						"ecallmfsa",
						"applications/ecallmgr/src/ecallmgr_fs_authn.erl"
					],
					[
						"wapi_resource",
						"core/whistle-1.0.0/src/api/wapi_resource.erl"
					],
					[
						"stepswitch_request_sup",
						"applications/stepswitch/src/stepswitch_request_sup.erl"
					],
					[
						"stepswitch_outbound",
						"applications/stepswitch/src/stepswitch_outbound.erl"
					],
					[
						"cbedv",
						"applications/crossbar/src/modules_v1/cb_devices_v1.erl"
					],
					[
						"wh_util",
						"core/whistle-1.0.0/src/wh_util.erl"
					],
					[
						"cf_attr",
						"applications/callflow/src/cf_attributes.erl"
					],
					[
						"cross",
						"applications/crossbar/src/crossbar.hrl"
					],
					[
						"cbco",
						"applications/crossbar/src/cb_context.erl"
					],
					[
						"cbcd",
						"applications/crossbar/src/modules/cb_cdrs.erl"
					],
					[
						"whappcalco",
						"core/whistle_apps-1.0.0/src/whapps_call_command.erl"
					],
					[
						"porej",
						"applications/crossbar/priv/couchdb/schemas/port_requests.json"
					],
					[
						"accou",
						"applications/crossbar/src/modules/cb_accounts.erl"
					],
					[
						"notporte",
						"applications/notify/priv/notify_ported.config"
					],
					[
						"notporeco",
						"applications/notify/priv/notify_port_request.config"
					],
					[
						"wapidial",
						"core/whistle-1.0.0/src/api/wapi_dialplan.hrl"
					],
					[
						"dialp",
						"core/whistle-1.0.0/src/api/wapi_dialplan.erl"
					],
					[
						".sh",
						"scripts/git_setup.sh"
					],
					[
						"appmake",
						"applications/Makefile"
					],
					[
						"crossmake",
						"applications/crossbar/Makefile"
					],
					[
						"wapi_not",
						"core/whistle-1.0.0/src/api/wapi_notifications.erl"
					],
					[
						"notlist",
						"applications/notify/src/notify_listener.erl"
					],
					[
						"notif",
						"applications/notify/src/notify.erl"
					],
					[
						"whapps_util",
						"core/whistle_apps-1.0.0/src/whapps_util.erl"
					],
					[
						"wh_port",
						"core/whistle_number_manager-1.0.0/src/wh_port_request.erl"
					],
					[
						"erly",
						"deps/erlydtl-0.9.0/src/erlydtl_compiler.erl"
					],
					[
						"erlydtl",
						"deps/erlydtl-0.9.0/src/erlydtl.erl"
					],
					[
						"notporec",
						"applications/notify/priv/notify_port_request.config"
					],
					[
						"h_api",
						"core/whistle-1.0.0/src/wh_api.erl"
					],
					[
						"wh_api",
						"core/whistle-1.0.0/include/wh_api.hrl"
					],
					[
						"croshr",
						"applications/crossbar/src/crossbar.hrl"
					],
					[
						"whapcon",
						"core/whistle_config-1.0.0/src/whapps_config.erl"
					],
					[
						"whsyste",
						"core/whistle-1.0.0/include/wh_system_config.hrl"
					],
					[
						"wh_conf",
						"core/whistle_config-1.0.0/src/whistle_config.hrl"
					],
					[
						"wh_databases",
						"core/whistle-1.0.0/include/wh_databases.hrl"
					],
					[
						"noti",
						"applications/notify/src/notify.erl"
					],
					[
						"cbpo",
						"applications/crossbar/src/modules/cb_port_requests.erl"
					],
					[
						"notifyh",
						"applications/notify/src/notify.hrl"
					],
					[
						"nothr",
						"applications/notify/src/notify.hrl"
					],
					[
						"notut",
						"applications/notify/src/notify_util.erl"
					],
					[
						"notfyporeco",
						"applications/notify/priv/notify_port_request.config"
					],
					[
						"whjson",
						"core/whistle-1.0.0/src/wh_json.erl"
					],
					[
						"whjso",
						"core/whistle-1.0.0/src/wh_json.erl"
					],
					[
						"notiut",
						"applications/notify/src/notify_util.erl"
					],
					[
						"wapireg",
						"core/whistle-1.0.0/src/api/wapi_registration.erl"
					],
					[
						"notify",
						"applications/notify/src/notify.erl"
					],
					[
						"wh_port_request",
						"core/whistle_number_manager-1.0.0/src/wh_port_request.erl"
					],
					[
						"notifpo",
						"applications/notify/src/notify_port_request.erl"
					],
					[
						"notify_p",
						"applications/notify/src/notify_port_request.erl"
					],
					[
						"kaz",
						"core/kazoo_bindings-1.0.0/src/kazoo_bindings.erl"
					],
					[
						"whut",
						"core/whistle-1.0.0/src/wh_util.erl"
					],
					[
						"kazoobin",
						"core/kazoo_bindings-1.0.0/src/kazoo_bindings.erl"
					],
					[
						"cbcon",
						"applications/crossbar/src/cb_context.erl"
					],
					[
						"",
						"applications/crossbar/src/crossbar.hrl"
					],
					[
						"crossbin",
						"applications/crossbar/src/crossbar_bindings.erl"
					],
					[
						"whjs",
						"core/whistle-1.0.0/src/wh_json.erl"
					],
					[
						"user",
						"applications/crossbar/priv/couchdb/account/users.json"
					],
					[
						"crosdo",
						"applications/crossbar/src/crossbar_doc.erl"
					],
					[
						"crossut",
						"applications/crossbar/src/crossbar_util.erl"
					],
					[
						"couc",
						"core/whistle_couch-1.0.0/src/couch_mgr.erl"
					],
					[
						"whj",
						"core/whistle-1.0.0/src/wh_json.erl"
					],
					[
						"crost",
						"applications/crossbar/src/crossbar_types.hrl"
					],
					[
						"wh_json",
						"core/whistle-1.0.0/src/wh_json.erl"
					],
					[
						"cbtok",
						"applications/crossbar/src/modules/cb_token_auth.erl"
					],
					[
						"crosbi",
						"applications/crossbar/src/crossbar_bindings.erl"
					],
					[
						"cbske",
						"applications/crossbar/src/modules/cb_skels.erl"
					],
					[
						"croh",
						"applications/crossbar/src/crossbar.hrl"
					],
					[
						"crosty",
						"applications/crossbar/src/crossbar_types.hrl"
					],
					[
						"cros",
						"applications/crossbar/src/crossbar.hrl"
					],
					[
						"cb_aut",
						"applications/crossbar/src/modules/cb_google_auth.erl"
					],
					[
						"cb_au",
						"applications/crossbar/src/modules/cb_user_auth.erl"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 237.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 79,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"back",
						"background-color"
					],
					[
						"font",
						"font-weight"
					],
					[
						"call",
						"call_popup"
					],
					[
						"d",
						"display"
					],
					[
						"remov",
						"removeClass	.removeClass"
					],
					[
						"fun",
						"fun	Function"
					],
					[
						"ini",
						"init_blackhole"
					],
					[
						"upd",
						"update_list_featurecodes"
					],
					[
						"eac",
						"each	$.each()"
					],
					[
						"each",
						"each	.each()"
					],
					[
						"exter",
						"externalCallerId"
					],
					[
						"customer",
						"customer_number"
					],
					[
						"user_sygse",
						"kazoo_user_sync_get_business_partner_search_key"
					],
					[
						"user_sync_get",
						"user_sync_get_adempiere_business_partner_id"
					],
					[
						"glo",
						"global"
					],
					[
						"custo",
						"customer_number"
					],
					[
						"cust",
						"customer_number"
					],
					[
						"sea",
						"search"
					],
					[
						"whitelabel_domain_config_mail",
						"whitelabel_domain_config_mail_on_user_reactivate"
					],
					[
						"white",
						"whitelabel_domain_config_"
					],
					[
						"f",
						"f	Anonymous Function"
					],
					[
						"if",
						"if	if"
					],
					[
						"conf",
						"config"
					],
					[
						"user",
						"userportal"
					],
					[
						"wink",
						"winkstart"
					],
					[
						"disc",
						"disconnect_numbers"
					],
					[
						"request",
						"requested_port_time"
					],
					[
						"port",
						"port_form_data"
					],
					[
						"req",
						"requested_port_time"
					],
					[
						"requ",
						"requested_port_time"
					],
					[
						"chec",
						"checked"
					],
					[
						"requested",
						"requested_port_time"
					],
					[
						"val",
						"val	.val()"
					],
					[
						"validation",
						"validation_errors"
					],
					[
						"field_",
						"field_ids"
					],
					[
						"fax",
						"fax_numbers"
					],
					[
						"vali",
						"validation_errors"
					],
					[
						"in",
						"inarray	$.inArray()"
					],
					[
						"valid",
						"valid_numbers"
					],
					[
						"vald",
						"validation_errors"
					],
					[
						"margin-",
						"margin-top"
					],
					[
						"numb",
						"Number"
					],
					[
						"numbers",
						"numbers_text"
					],
					[
						"field",
						"field_id"
					],
					[
						"fiel",
						"field_id"
					],
					[
						"tab",
						"tab_data"
					],
					[
						"desc",
						"descendants"
					],
					[
						"acc",
						"account_data"
					],
					[
						"accoutn",
						"account_name"
					],
					[
						"account",
						"account_name"
					],
					[
						"list",
						"list_ports"
					],
					[
						"render",
						"render_ports_manager"
					],
					[
						"fu",
						"fun	Function"
					],
					[
						"em",
						"email"
					],
					[
						"da",
						"date"
					],
					[
						"type",
						"typeof"
					],
					[
						"port_date",
						"port_date_asap"
					],
					[
						"spl",
						"split_date"
					],
					[
						"spi",
						"split_date"
					],
					[
						"sp",
						"split_date"
					],
					[
						"date",
						"date_array"
					],
					[
						"va",
						"val	.val()"
					],
					[
						"h",
						"hide	hide"
					],
					[
						"popu",
						"popup_html"
					],
					[
						"att",
						"attachments"
					],
					[
						"subm",
						"submit_btn"
					],
					[
						"port_re",
						"port_request_failure"
					],
					[
						"al",
						"alert"
					],
					[
						"ba",
						"background-color"
					],
					[
						"email",
						"notify_email"
					],
					[
						"valida",
						"validation_errors"
					],
					[
						"port_ty",
						"port_type_dropdown"
					],
					[
						"remo",
						"removeClass	.removeClass"
					],
					[
						"ea",
						"each	$.each()"
					],
					[
						"sub",
						"submit	submit"
					],
					[
						"min",
						"min_date"
					],
					[
						"el",
						"else"
					],
					[
						"number",
						"number_data"
					],
					[
						"dele",
						"delete_port"
					],
					[
						"por",
						"port_ready"
					],
					[
						"main",
						"main_number"
					],
					[
						"pop",
						"populate_port_dialog"
					],
					[
						"get_",
						"get_port"
					],
					[
						"ports",
						"ports_manager"
					],
					[
						"create",
						"create_attachment"
					],
					[
						"crea",
						"create_number_doc"
					],
					[
						"port_t",
						"port_type_dropdown"
					],
					[
						"nu",
						"number_regex"
					],
					[
						"countr",
						"country_prefix"
					],
					[
						"count",
						"country_prefix"
					],
					[
						"current",
						"current_type"
					],
					[
						"error",
						"errors"
					],
					[
						"port_",
						"port_types"
					],
					[
						"re",
						"request"
					],
					[
						"winksta",
						"winkstart"
					],
					[
						"log",
						"logo_desc"
					],
					[
						"upload",
						"upload_icon"
					],
					[
						"form",
						"form_data"
					],
					[
						"upl",
						"upload_logo"
					],
					[
						"uplo",
						"upload_icon"
					],
					[
						"loc",
						"lock"
					],
					[
						"lock",
						"Lock"
					],
					[
						"messa",
						"Messages"
					],
					[
						"whi",
						"whitelabel_masquerade_get_available_users"
					],
					[
						"kaz",
						"kazoo_api_accounts"
					],
					[
						"t",
						"to"
					],
					[
						"masquerade",
						"masquerade_users"
					],
					[
						"masquer",
						"masquerade_users"
					],
					[
						"arra",
						"array"
					],
					[
						"accoun",
						"account_manager_user_is_wlr_admin"
					],
					[
						"wh",
						"whitelabel_masquerade_is_wlr_admin"
					],
					[
						"res",
						"reseller"
					],
					[
						"resel",
						"resellers"
					],
					[
						"user_",
						"user_cancel	user_cancel"
					],
					[
						"db",
						"db_delete	db_delete"
					],
					[
						"whit",
						"whitelabel_masquerade_access"
					],
					[
						"whitela",
						"whitelabel_masquerade_menu"
					],
					[
						"user_ac",
						"user_access	user_access"
					],
					[
						"_mas",
						"_masquerade_can_access_user"
					],
					[
						"drupal_set",
						"drupal_set_message	drupal_set_message"
					],
					[
						"mod_i",
						"module_invoke_all	module_invoke_all"
					],
					[
						"domain_email_config",
						"domain_email_config_user_register_admin_created"
					],
					[
						"domain_email_config_",
						"domain_email_config_form_elements"
					],
					[
						"doma",
						"domain_email_config_"
					],
					[
						"variable_",
						"variable_get	variable_get"
					],
					[
						"kazoo_a",
						"kazoo_account_id"
					],
					[
						"business_",
						"business_partner_name"
					],
					[
						"USER",
						"users"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/voip.js",
					"settings":
					{
						"buffer_size": 15670,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/config/config.js",
					"settings":
					{
						"buffer_size": 8885,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/accounts/accounts_manager/tmpl/edit.html",
					"settings":
					{
						"buffer_size": 29494,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/accounts/accounts_manager/tmpl/accounts_manager.html",
					"settings":
					{
						"buffer_size": 303,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/css/call_popup.css",
					"settings":
					{
						"buffer_size": 679,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/softphone.html",
					"settings":
					{
						"buffer_size": 18050,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/device/device.js",
					"settings":
					{
						"buffer_size": 49691,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/index.html",
					"settings":
					{
						"buffer_size": 6361,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/cellphone.html",
					"settings":
					{
						"buffer_size": 6405,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/timeofday.js",
					"settings":
					{
						"buffer_size": 43972,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/tmpl/edit.html",
					"settings":
					{
						"buffer_size": 8038,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/tmpl/timeofday.html",
					"settings":
					{
						"buffer_size": 282,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/lang/en.js",
					"settings":
					{
						"buffer_size": 1943,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/device/lang/en.js",
					"settings":
					{
						"buffer_size": 6349,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/misc/webrtc_vid.html",
					"settings":
					{
						"buffer_size": 577,
						"line_ending": "Unix",
						"name": "<video autoplay></video>"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/ports/ports_manager/ports_manager.js",
					"settings":
					{
						"buffer_size": 36530,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/conversant/conversant.js",
					"settings":
					{
						"buffer_size": 2190,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/device_row.html",
					"settings":
					{
						"buffer_size": 1074,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/userportal/userportal.js",
					"settings":
					{
						"buffer_size": 3893,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/misc/kazoo_update_port_requests.txt",
					"settings":
					{
						"buffer_size": 3815,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Sweet Home Alabama -  Lynard Skynard\nFortune Son - CCR\nProud Mary - CCR\nHave you ever seen the rain - CCR\nAll Along The Watchtower - Jimi Hendrix\nBliss - Th' Dudes\nJohnny Be Good - Chuck Berry\nBrown Eyed Girl - Van Morrison\nBe Mine Tonight - Th' Dudes\nHard To Handle - Black Crowes\nWhy Does Love Do This To me? - The Exponents\nCounting The Beat - The Swingers\nKhe Sahn - Cold Chisel\nGood Golly Miss Molly -  CCR/Little Richard\nSultans Of Swing - Dire Straits\nGo Your Own Way - Fleetwood Mac\nDreams - Fleetwood Mac\nLong Train Running - Doobie Bros\nLife In The Fast Lane - The Eagles\nCome Together - The Beatles\nBorn To Be Wild - Steppenwolf\nCripple Creek - The Band\nWhite Room - Cream\nWish You Were Here - Pink Floyd\n",
					"settings":
					{
						"buffer_size": 716,
						"line_ending": "Unix",
						"name": "Sweet Home Alabama -  Lynard Skynard"
					}
				},
				{
					"contents": "<!-- Google Tag Manager -->\n<noscript>\n  <iframe src=\"//www.googletagmanager.com/ns.html?id=GTM-W98629\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe>\n</noscript>\n<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src='//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','GTM-W98629');</script>\n<!-- End Google Tag Manager -->\n\n<!-- SnapEngage Code -->\n<script type=\"text/javascript\">\ndocument.write(unescape(\"%3Cscript src='\" + ((document.location.protocol==\"https:\")?\"https://snapabug.appspot.com\":\"http://www.snapengage.com\") + \"/snapabug.js' type='text/javascript'%3E%3C/script%3E\"));</script><script type=\"text/javascript\">\nSnapABug.setButton(\"https://www.conversant.co.nz/sites/conversant.co.nz/files/chat_to_us_live_or_logo_72dpi_133x50.png\");@\nSnapABug.setChatFormPosition('br');\nSnapABug.addButton(\"9c609256-bd7b-4ce8-b420-546e7569a2c5\",\"3\",\"85%\");\n</script>",
					"settings":
					{
						"buffer_size": 1106,
						"line_ending": "Unix",
						"name": "<!-- Google Tag Manager -->"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/portal_manager.js",
					"settings":
					{
						"buffer_size": 44016,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/edit.html",
					"settings":
					{
						"buffer_size": 26850,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 516 files for \"vm_to_email_enabled\" (regex)\n\n/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/portal_manager.js:\n  283  \n  284                  /* Settings part */\n  285:                 if(!_data_settings.data.vm_to_email_enabled) {\n  286                      $('.email-field', portal_manager_html).hide();\n  287                  }\n  ...\n  461  \n  462                  var data = {\n  463:                     vm_to_email_enabled: false,\n  464                      call_forward: {\n  465                          number: replaced_number,\n  ...\n  472  \n  473                  if($('#vm-to-email-checkbox', portal_manager_html).attr('checked')) {\n  474:                     data.vm_to_email_enabled = true;\n  475                      data.email = $('#vm-to-email-txt', portal_manager_html).val();\n  476                  }\n\n/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/tmpl/portal_manager.html:\n   41                              <label>${_t('send_voicemail_to_email')}:</label>\n   42                              <div class=\"input\">\n   43:                                 {{if data.vm_to_email_enabled}}\n   44                                      <input id=\"vm-to-email-checkbox\" class=\"checkbox\" name=\"vm-to-email-checkbox\" type=\"checkbox\" checked=\"checked\"/>\n   45                                  {{else}}\n\n/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/edit.html:\n   38  \n   39  					<div class=\"clearfix\">\n   40: 						<label for=\"vm_to_email_enabled\">${_t('email_notifications')}</label>\n   41  						<div class=\"input\">\n   42  							<ul class=\"inputs-list\">\n   ..\n   44  	              					<label>\n   45  	              						<span rel=\"popover\" data-content=\"${_t('voicemail_data_content')}\">\n   46: 											{{if data.vm_to_email_enabled}}\n   47: 			                                <input id=\"vm_to_email_enabled\" type=\"checkbox\" name=\"vm_to_email_enabled\" checked=\"checked\" />\n   48  			                                {{else}}\n   49: 			                                <input id=\"vm_to_email_enabled\" type=\"checkbox\" name=\"vm_to_email_enabled\" />\n   50  			                                {{/if}}\n   51  			                                <span>${_t('voicemail')}</span>\n\n10 matches across 3 files\n\n\nSearching 516 files for \"vm_to_email_enabled\" (regex)\n\n/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/portal_manager.js:\n  283  \n  284                  /* Settings part */\n  285:                 if(!_data_settings.data.vm_to_email_enabled) {\n  286                      $('.email-field', portal_manager_html).hide();\n  287                  }\n  ...\n  461  \n  462                  var data = {\n  463:                     vm_to_email_enabled: false,\n  464                      call_forward: {\n  465                          number: replaced_number,\n  ...\n  472  \n  473                  if($('#vm-to-email-checkbox', portal_manager_html).attr('checked')) {\n  474:                     data.vm_to_email_enabled = true;\n  475                      data.email = $('#vm-to-email-txt', portal_manager_html).val();\n  476                  }\n\n/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/tmpl/portal_manager.html:\n   41                              <label>${_t('send_voicemail_to_email')}:</label>\n   42                              <div class=\"input\">\n   43:                                 {{if data.vm_to_email_enabled}}\n   44                                      <input id=\"vm-to-email-checkbox\" class=\"checkbox\" name=\"vm-to-email-checkbox\" type=\"checkbox\" checked=\"checked\"/>\n   45                                  {{else}}\n\n/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/edit.html:\n   38  \n   39  					<div class=\"clearfix\">\n   40: 						<label for=\"vm_to_email_enabled\">${_t('email_notifications')}</label>\n   41  						<div class=\"input\">\n   42  							<ul class=\"inputs-list\">\n   ..\n   44  	              					<label>\n   45  	              						<span rel=\"popover\" data-content=\"${_t('voicemail_data_content')}\">\n   46: 											{{if data.vm_to_email_enabled}}\n   47: 			                                <input id=\"vm_to_email_enabled\" type=\"checkbox\" name=\"vm_to_email_enabled\" checked=\"checked\" />\n   48  			                                {{else}}\n   49: 			                                <input id=\"vm_to_email_enabled\" type=\"checkbox\" name=\"vm_to_email_enabled\" />\n   50  			                                {{/if}}\n   51  			                                <span>${_t('voicemail')}</span>\n\n10 matches across 3 files\n",
					"settings":
					{
						"buffer_size": 4546,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/phone/tmpl/provisioner_tab_content.html",
					"settings":
					{
						"buffer_size": 4169,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/cdr/lang/en.js",
					"settings":
					{
						"buffer_size": 933,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/voip/cdr/cdr.js",
					"settings":
					{
						"buffer_size": 18945,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/lang/en.js",
					"settings":
					{
						"buffer_size": 2094,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/kazooui/js/winkstart-util.js",
					"settings":
					{
						"buffer_size": 21641,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/Makefile/Make.sublime-build",
			"command_palette":
			{
				"height": 264.0,
				"selected_items":
				[
					[
						"css",
						"Set Syntax: CSS"
					],
					[
						"html",
						"Set Syntax: HTML"
					],
					[
						"ht",
						"Set Syntax: HTML"
					],
					[
						"pa",
						"Package Control: Disable Package"
					],
					[
						"pac",
						"Package Control: Install Package"
					],
					[
						"pack",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						":",
						":w - Save"
					],
					[
						"for",
						"Gherkin/Cucumber: Format"
					],
					[
						"form",
						"Gherkin/Cucumber: Format"
					],
					[
						"hook_bloc",
						"Snippet: hook_block_view_MODULE_DELTA_alter"
					],
					[
						"h_us_p",
						"Snippet: hook_user_presave"
					],
					[
						"user_pre",
						"Snippet: block_user_presave"
					],
					[
						"hook_user",
						"Snippet: hook_user_cancel"
					],
					[
						"hook_menu",
						"Snippet: hook_menu"
					],
					[
						"menu_alt",
						"Snippet: hook_menu_alter"
					],
					[
						"mail_alter",
						"Snippet: hook_mail_alter"
					],
					[
						"pc",
						"Package Control: Install Package"
					],
					[
						"set h",
						"Set Syntax: HTML"
					],
					[
						"js",
						"JSHint"
					],
					[
						"g c",
						"Git: Commit"
					],
					[
						"g ad",
						"Git: Add Current File"
					],
					[
						"git h",
						"Git: Commit history"
					],
					[
						"git",
						"Git: Toggle Annotations"
					],
					[
						"g ",
						"Git: Commit"
					],
					[
						"packa",
						"Package Control: Install Package"
					],
					[
						"git d",
						"Git: Diff All"
					],
					[
						"g",
						"Git: Commit"
					],
					[
						"gi",
						"Git: Commit"
					],
					[
						"git ",
						"Git: Commit"
					],
					[
						"g co",
						"Git: Commit"
					],
					[
						"g di c",
						"Git: Diff Current File"
					],
					[
						"g d",
						"Git: Diff All"
					],
					[
						"g di",
						"Git: Diff Staged"
					],
					[
						"gher",
						"Set Syntax: Gherkin"
					],
					[
						"fo",
						"Gherkin/Cucumber: Format"
					],
					[
						"format",
						"Gherkin/Cucumber: Format"
					],
					[
						"forma",
						"Gherkin/Cucumber: Format"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						":W",
						":w - Save"
					],
					[
						"sett",
						"Preferences: Settings - User"
					],
					[
						":p",
						"Set Syntax: Plain Text"
					],
					[
						":q",
						"Set Syntax: SQL"
					],
					[
						":ph",
						"Set Syntax: PHP"
					],
					[
						"set p",
						"Set Syntax: PHP"
					],
					[
						"",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"php",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"pc ",
						"Package Control: Install Package"
					],
					[
						"sy c",
						"Set Syntax: C"
					]
				],
				"width": 575.0
			},
			"console":
			{
				"height": 139.0,
				"history":
				[
					"n",
					"jsHint",
					"jshint",
					"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) ",
					"syntax "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/sam/conversant/repos/kazooui/whapps/myaccount/myaccount/tmpl/userlevel.html",
				"/home/sam/conversant/repos/kazooui/js/winkstart-timezone.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/tmpl/edit.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/tmpl/timeofday_key_dialog.html",
				"/home/sam/conversant/repos/kazooui/config/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/numbers/numbers_manager/tmpl/e911_dialog.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/tmpl/timeofday_callflow.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/css/timeofday.css",
				"/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/tmpl/timeofday.html",
				"/home/sam/conversant/repos/kazooui/whapps/auth/auth.js",
				"/home/sam/conversant/repos/kazooui/whapps/core/core.js",
				"/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/tmpl/bh_call_popup.html",
				"/home/sam/conversant/repos/kazooui/js/amplify/amplify1.0a1/src/external/jquery-1.4.1.js",
				"/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/tmpl/device_line.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/registration/registration.js",
				"/home/sam/conversant/repos/kazooui/whapps/core/linknav/linknav.js",
				"/home/sam/conversant/repos/kazooui/whapps/core/layout/tmpl/layout.html",
				"/home/sam/conversant/repos/kazooui/whapps/auth/auth/tmpl/landing.html",
				"/home/sam/conversant/repos/kazooui/whapps/core/layout/images/form/nicole",
				"/home/sam/conversant/repos/kazooui/whapps/voip/phone/tmpl/phone.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/phone/phone.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/phone/tmpl/phone_popup.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/cdr/cdr.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/voip.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/phone/tmpl/index.html",
				"/home/sam/conversant/repos/kazooui/whapps/auth/onboarding/tmpl/small_office.html",
				"/home/sam/conversant/repos/kazooui/whapps/skeleton/skeleton.js",
				"/home/sam/conversant/repos/kazooui/whapps/core/layout/layout.js",
				"/home/sam/conversant/repos/kazooui/config/config.js",
				"/etc/hosts",
				"/home/sam/conversant/repos/kazooui/whapps/voip/user/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/portal_manager.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/callflow/callflow.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/device.js",
				"/home/sam/conversant/repos/kazooui/whapps/auth/auth/css/auth.css",
				"/home/sam/conversant/repos/kazooui/whapps/voip/cdr/css/cdr.css",
				"/home/sam/conversant/repos/kazooui/whapps/developer/api/css/api.css",
				"/home/sam/conversant/repos/kazooui/css/jslider/jslider.css",
				"/home/sam/conversant/repos/kazooui/config/css/welcome.css",
				"/home/sam/conversant/repos/kazooui/js/external/qunit.css",
				"/home/sam/conversant/repos/kazooui/css/validate.css",
				"/home/sam/conversant/repos/kazooui/css/tables.css",
				"/home/sam/conversant/repos/kazooui/css/qunit.css",
				"/home/sam/conversant/repos/kazooui/.gitmodules",
				"/home/sam/conversant/repos/kazooui/whapps/myaccount/myaccount/css/style.css",
				"/home/sam/conversant/repos/kazooui/whapps/accounts/accounts_manager/accounts_manager.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/account/tmpl/edit.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/phone/tmpl/provisioner_account_content.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/account/tmpl/account.html",
				"/home/sam/conversant/repos/kazooui/whapps/accounts/accounts.js",
				"/home/sam/conversant/repos/kazooui/index.html",
				"/home/sam/conversant/repos/kazooui/whapps/ports/ports_manager/ports_manager.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/user/css/user.css",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/css/device.css",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/device.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/device_callflow.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/device_row.html",
				"/home/sam/conversant/repos/kazooui/whapps/call_center/dashboard/tmpl/list_devices.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/edit.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/cellphone.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/lang/ru.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/user_callflow.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/user.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/user/user.js",
				"/home/sam/conversant/repos/kazooui/whapps/auth/onboarding/tmpl/voip_minutes.html",
				"/home/sam/conversant/repos/kazooui/js/winkstart-validate.js",
				"/home/sam/conversant/repos/kazooui/js/winkstart-request.js",
				"/home/sam/conversant/repos/kazooui/js/amplify/amplify1.0a1/src/core/readme.markdown",
				"/home/sam/conversant/repos/kazooui/js/amplify/amplify.core.js",
				"/home/sam/conversant/repos/kazooui/whapps/developer/api/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/featurecode/featurecode.js",
				"/home/sam/conversant/repos/kazooui/js/amplify/_amplify.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/groups/groups.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/groups/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/groups/css/groups.css",
				"/home/sam/misc/install_git.sh",
				"/home/sam/conversant/repos/kazooui/whapps/voip/callflow/tmpl/pivot_callflow.html",
				"/home/sam/conversant/repos/kazooui/whapps/myaccount/nav/nav.js",
				"/home/sam/conversant/repos/kazooui/js/winkstart.js",
				"/home/sam/conversant/repos/kazooui/LICENSE",
				"/home/sam/Downloads/pleb_cube.txt",
				"/home/sam/conversant/repos/kazooui/whapps/voip/media/media.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/menu/menu.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/queue/queue.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/resource/resource.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/timeofday.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/vmbox/vmbox.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/directory/directory.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/conference/conference.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/account/account.js",
				"/home/sam/conversant/repos/kazooui/whapps/call_center/queue/queue.js",
				"/home/sam/conversant/repos/kazooui/whapps/auth/onboarding/onboarding.js",
				"/home/sam/conversant/repos/kazooui/whapps/core/whappnav/whappnav.js",
				"/home/sam/conversant/repos/kazooui/config/load.js",
				"/home/sam/conversant/repos/kazooui/whapps/myaccount/app_store/css/app_store.css",
				"/home/sam/conversant/repos/kazooui/whapps/call_center/dashboard/tmpl/calls_dashboard.html",
				"/home/sam/conversant/repos/kazooui/whapps/call_center/dashboard/tmpl/call_list_element.html",
				"/home/sam/conversant/repos/kazooui/whapps/numbers/numbers_manager/tmpl/port_dialog.html",
				"/home/sam/conversant/repos/kazooui/whapps/pbxs/pbxs_manager/tmpl/port_dialog.html",
				"/home/sam/conversant/repos/kazooui/whapps/ports/ports_manager/tmpl/port_dialog.html",
				"/home/sam/conversant/repos/kazooui/whapps/ports/ports_manager/css/ports_manager.css",
				"/home/sam/conversant/repos/kazooui/whapps/myaccount/app_store/app_store.js",
				"/home/sam/.bashrc",
				"/home/sam/conversant/repos/kazooui/whapps/developer/developer.js",
				"/home/sam/conversant/repos/kazooui/whapps/call_center/call_center.js",
				"/home/sam/conversant/repos/kazooui/js/amplify/amplify1.0a1/src/GPL-LICENSE.txt",
				"/home/sam/conversant/repos/kazooui/.gitignore",
				"/home/sam/conversant/repos/kazooui/whapps/auth/auth/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/edit.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/menu/tmpl/menu.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/softphone.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/smartphone.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/fax.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/landline.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/cdr/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/cdr/tmpl/cdr_details.html",
				"/home/sam/conversant/repos/kazooui/whapps/voip/voip/css/voip.css",
				"/home/sam/conversant/repos/kazooui/whapps/voip/account/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/voip/resource/tmpl/account_carrier_callflow.html",
				"/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/tmpl/portal_manager.html",
				"/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/css/portal_manager.css",
				"/home/sam/conversant/repos/kazooui/whapps/userportal/userportal.js",
				"/home/sam/conversant/repos/kazooui/whapps/pbxs/pbxs_manager/pbxs_manager.js",
				"/home/sam/conversant/repos/kazooui/whapps/pbxs/pbxs_manager/lang/en.js",
				"/home/sam/conversant/repos/kazooui/whapps/pbxs/pbxs_manager/tmpl/pbxs_manager.html",
				"/home/sam/conversant/repos/kazooui/whapps/pbxs/pbxs.js"
			],
			"find":
			{
				"height": 35.0
			},
			"find_in_files":
			{
				"height": 93.0,
				"where_history":
				[
					"",
					"*.css",
					"",
					"sites/all/modules/contrib/domain",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"4. Contacts.feature",
					"",
					"-indsex.html",
					"",
					"config/config.js",
					"/home/sam/repos/conversant/console/sites/all/modules/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console/tests/vendor",
					"",
					"user_sync.webservices.inc",
					""
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"vm_to_email_enabled",
					"false",
					"cycle",
					"day|[^a]dd",
					"day|dd",
					"start_date",
					"zone",
					"label",
					"tmpl",
					"render",
					"animation",
					"core.loaded",
					"init_blackhole",
					"showing",
					"transform",
					"animation",
					"hiding",
					"value",
					"transform",
					"config",
					"save_success",
					"start_date",
					"format_data",
					"data",
					"start_date",
					"datepicker",
					"requi",
					"req",
					"require",
					">\n",
					"phone.render_fields",
					"edit_device",
					"voip services",
					"director",
					"directories",
					"callflow",
					"number_type",
					"numbers",
					"module_activate",
					"voip.module_activate",
					"module_activate",
					"activate",
					"__module",
					"'voip.loaded'",
					"modules",
					"module_activate",
					"core",
					"featurecode.create",
					"false",
					"user.update",
					"publish",
					"winkstart.publish",
					"amplify.publish",
					"winkstart.publish",
					"load_account",
					"sam_",
					"auth.activate",
					"winkstart.publish",
					"activate",
					"available_apps",
					"define_featurecodes",
					"featurecode",
					"false",
					"define_featurecodes",
					"actions",
					"2600hz",
					"Kazoo",
					"kazoo",
					"available_apps",
					"_t",
					"RANGE",
					"variab",
					"user_mail",
					"module_invoke",
					"mail",
					"hook_mail",
					"Your customer number is",
					"mail_alter",
					"user_mail",
					"user_mail_no",
					"user_ma",
					"terms_link",
					"[$terms_link",
					"$terms_link",
					"activate",
					"[$activate",
					"$activate",
					"admin_created",
					"[$admin_created",
					"$admin_created",
					"register",
					"[$register",
					"$register",
					"WHITELABEL_MASQUERADE_ROLE_NAME",
					"define(",
					"activate",
					"auth.user.update",
					"onboard_roles",
					"register_apps",
					"winkstart.apps",
					"auth.load_account",
					"&gt",
					"&lt",
					"switch_day_month",
					"name",
					"whappnav.add",
					"enable_whapp",
					"winkstart.apps",
					"get_account",
					"auth.get_account",
					"datepicker",
					"setTimeout",
					"cache",
					"096",
					"split",
					"valid_numbers",
					"numbers",
					"bill",
					"available_apps",
					"send(",
					"dataType",
					"account.list",
					"async.parallel",
					"account_name",
					"async.parallel",
					"async.series",
					"sync",
					"descendants"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": true,
				"replace_history":
				[
					">",
					"<",
					"&gt",
					"&lt",
					"ports_manager.",
					"ports_manager_html",
					"billing_postal_code",
					"There was an internal error and the changes may not be complete.",
					"There was an internal error and the changes may not be complete",
					"url",
					"!empty($values['roles']['user'])",
					"!empty($values['roles']['admin'])",
					"localhost",
					""
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"follow_symlinks": true,
					"path": "/home/sam/conversant/repos/kazooui"
				}
			],
			"groups":
			[
				{
					"selected": 9,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/voip.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 15670,
								"regions":
								{
								},
								"selection":
								[
									[
										2198,
										2198
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 89.0,
								"zoom_level": 1.0
							},
							"stack_index": 23,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/sam/conversant/repos/kazooui/config/config.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 8885,
								"regions":
								{
								},
								"selection":
								[
									[
										545,
										545
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/sam/conversant/repos/kazooui/whapps/accounts/accounts_manager/tmpl/edit.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 29494,
								"regions":
								{
								},
								"selection":
								[
									[
										89,
										89
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 22,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/sam/conversant/repos/kazooui/whapps/accounts/accounts_manager/tmpl/accounts_manager.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 303,
								"regions":
								{
								},
								"selection":
								[
									[
										303,
										303
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 28,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/css/call_popup.css",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 679,
								"regions":
								{
								},
								"selection":
								[
									[
										572,
										572
									]
								],
								"settings":
								{
									"syntax": "Packages/CSS/CSS.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/softphone.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 18050,
								"regions":
								{
								},
								"selection":
								[
									[
										4163,
										4163
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 1575.0,
								"zoom_level": 1.0
							},
							"stack_index": 24,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/device/device.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 49691,
								"regions":
								{
								},
								"selection":
								[
									[
										21706,
										21706
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 6796.0,
								"zoom_level": 1.0
							},
							"stack_index": 21,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/home/sam/conversant/repos/kazooui/index.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6361,
								"regions":
								{
								},
								"selection":
								[
									[
										6199,
										6199
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 855.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/device/tmpl/cellphone.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6405,
								"regions":
								{
								},
								"selection":
								[
									[
										1128,
										1128
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 45.0,
								"zoom_level": 1.0
							},
							"stack_index": 16,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/timeofday.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 43972,
								"regions":
								{
								},
								"selection":
								[
									[
										20945,
										20945
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 9643.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 10,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/tmpl/edit.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 8038,
								"regions":
								{
								},
								"selection":
								[
									[
										7099,
										7099
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1830.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 11,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/tmpl/timeofday.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 282,
								"regions":
								{
								},
								"selection":
								[
									[
										281,
										281
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/lang/en.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1943,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						},
						{
							"buffer": 13,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/device/lang/en.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6349,
								"regions":
								{
								},
								"selection":
								[
									[
										981,
										981
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 75.0,
								"zoom_level": 1.0
							},
							"stack_index": 30,
							"type": "text"
						},
						{
							"buffer": 14,
							"file": "/home/sam/misc/webrtc_vid.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 577,
								"regions":
								{
								},
								"selection":
								[
									[
										577,
										577
									]
								],
								"settings":
								{
									"auto_name": "<video autoplay></video>",
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 20,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "/home/sam/conversant/repos/kazooui/whapps/ports/ports_manager/ports_manager.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 36530,
								"regions":
								{
								},
								"selection":
								[
									[
										13353,
										13353
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 529.0,
								"zoom_level": 1.0
							},
							"stack_index": 19,
							"type": "text"
						}
					]
				},
				{
					"selected": 7,
					"sheets":
					[
						{
							"buffer": 16,
							"file": "/home/sam/conversant/repos/kazooui/whapps/conversant/conversant.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2190,
								"regions":
								{
								},
								"selection":
								[
									[
										224,
										224
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 25,
							"type": "text"
						},
						{
							"buffer": 17,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/device_row.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1074,
								"regions":
								{
								},
								"selection":
								[
									[
										1074,
										1074
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 26,
							"type": "text"
						},
						{
							"buffer": 18,
							"file": "/home/sam/conversant/repos/kazooui/whapps/userportal/userportal.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3893,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 420.0,
								"zoom_level": 1.0
							},
							"stack_index": 27,
							"type": "text"
						},
						{
							"buffer": 19,
							"file": "/home/sam/conversant/misc/kazoo_update_port_requests.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3815,
								"regions":
								{
								},
								"selection":
								[
									[
										613,
										613
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 287.0,
								"zoom_level": 1.0
							},
							"stack_index": 17,
							"type": "text"
						},
						{
							"buffer": 20,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 716,
								"regions":
								{
								},
								"selection":
								[
									[
										609,
										609
									]
								],
								"settings":
								{
									"auto_name": "Sweet Home Alabama -  Lynard Skynard",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 29,
							"type": "text"
						},
						{
							"buffer": 21,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1106,
								"regions":
								{
								},
								"selection":
								[
									[
										612,
										612
									]
								],
								"settings":
								{
									"auto_name": "<!-- Google Tag Manager -->",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 18,
							"type": "text"
						},
						{
							"buffer": 22,
							"file": "/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/portal_manager.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 44016,
								"regions":
								{
								},
								"selection":
								[
									[
										10289,
										10289
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3950.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/timeofday/lang/en.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1943,
								"regions":
								{
								},
								"selection":
								[
									[
										1322,
										1322
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 23,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/user/tmpl/edit.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 26850,
								"regions":
								{
								},
								"selection":
								[
									[
										1885,
										1885
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 199.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 24,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4546,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												240,
												259
											],
											[
												439,
												458
											],
											[
												705,
												724
											],
											[
												1131,
												1150
											],
											[
												1495,
												1514
											],
											[
												1790,
												1809
											],
											[
												1865,
												1884
											],
											[
												1908,
												1927
											],
											[
												2054,
												2073
											],
											[
												2097,
												2116
											],
											[
												2514,
												2533
											],
											[
												2713,
												2732
											],
											[
												2979,
												2998
											],
											[
												3405,
												3424
											],
											[
												3769,
												3788
											],
											[
												4064,
												4083
											],
											[
												4139,
												4158
											],
											[
												4182,
												4201
											],
											[
												4328,
												4347
											],
											[
												4371,
												4390
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										2721,
										2721
									]
								],
								"settings":
								{
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 2,
									"result_base_dir": "",
									"result_file_regex": "^([A-Za-z\\\\/<].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 705.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 25,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/phone/tmpl/provisioner_tab_content.html",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4169,
								"regions":
								{
								},
								"selection":
								[
									[
										679,
										679
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 26,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/cdr/lang/en.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 933,
								"regions":
								{
								},
								"selection":
								[
									[
										766,
										766
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 27,
							"file": "/home/sam/conversant/repos/kazooui/whapps/voip/cdr/cdr.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 18945,
								"regions":
								{
								},
								"selection":
								[
									[
										3217,
										3217
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1023.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 28,
							"file": "/home/sam/conversant/repos/kazooui/whapps/userportal/portal_manager/lang/en.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2094,
								"regions":
								{
								},
								"selection":
								[
									[
										1696,
										1696
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 123.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 29,
							"file": "/home/sam/conversant/repos/kazooui/js/winkstart-util.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 21641,
								"regions":
								{
								},
								"selection":
								[
									[
										13164,
										13164
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 4953.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 21.0
			},
			"input":
			{
				"height": 33.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 112.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.git":
			{
				"height": 100.0
			},
			"position": "0,1,0,0,0,0,0,0,0,1366,768",
			"project": "",
			"replace":
			{
				"height": 40.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
					[
						"usered",
						"whapps/voip/user/tmpl/edit.html"
					],
					[
						"timeen",
						"whapps/voip/timeofday/lang/en.js"
					],
					[
						"timeedi",
						"whapps/voip/timeofday/tmpl/edit.html"
					],
					[
						"time",
						"whapps/voip/timeofday/tmpl/timeofday_key_dialog.html"
					],
					[
						"conf",
						"config/config.js"
					],
					[
						"timelan",
						"whapps/voip/timeofday/lang/en.js"
					],
					[
						"dev",
						"whapps/voip/device/device.js"
					],
					[
						"voippho",
						"whapps/voip/phone/tmpl/phone.html"
					],
					[
						"soft",
						"whapps/voip/device/tmpl/softphone.html"
					],
					[
						"core/",
						"whapps/core/layout/layout.js"
					],
					[
						"core",
						"whapps/core/core.js"
					],
					[
						"authjs",
						"whapps/auth/auth.js"
					],
					[
						"ind",
						"index.html"
					],
					[
						"accouttmed",
						"whapps/accounts/accounts_manager/tmpl/edit.html"
					],
					[
						"portma",
						"whapps/userportal/portal_manager/portal_manager.js"
					],
					[
						"userp",
						"whapps/userportal/userportal.js"
					],
					[
						"timeo",
						"whapps/voip/timeofday/timeofday.js"
					],
					[
						"device",
						"whapps/voip/device/device.js"
					],
					[
						"device/",
						"whapps/voip/device/tmpl/cellphone.html"
					],
					[
						"wvoiuslaen",
						"whapps/voip/user/lang/en.js"
					],
					[
						"devrow",
						"whapps/voip/user/tmpl/device_row.html"
					],
					[
						"device/en",
						"whapps/voip/device/lang/en.js"
					],
					[
						"conver",
						"whapps/conversant/conversant.js"
					],
					[
						"groups/",
						"whapps/voip/groups/lang/en.js"
					],
					[
						"groups",
						"whapps/voip/groups/groups.js"
					],
					[
						"winks",
						"js/winkstart.js"
					],
					[
						"link",
						"whapps/core/linknav/linknav.js"
					],
					[
						"voij",
						"whapps/voip/voip.js"
					],
					[
						"onb",
						"whapps/auth/onboarding/onboarding.js"
					],
					[
						"feat",
						"whapps/voip/featurecode/featurecode.js"
					],
					[
						"call",
						"whapps/voip/callflow/callflow.js"
					],
					[
						"voiuserj",
						"whapps/voip/user/user.js"
					],
					[
						"port",
						"whapps/ports/ports_manager/ports_manager.js"
					],
					[
						"",
						"whapps/voip/callflow/callflow.js"
					],
					[
						".git",
						".gitmodules"
					],
					[
						"acc",
						"whapps/accounts/accounts_manager/accounts_manager.js"
					],
					[
						"auth.js",
						"whapps/auth/auth.js"
					],
					[
						"voiusus",
						"whapps/voip/user/user.js"
					],
					[
						"whvoustmusc",
						"whapps/voip/user/tmpl/user_callflow.html"
					],
					[
						"whvoiusla",
						"whapps/voip/user/lang/en.js"
					],
					[
						"whvoiustmed",
						"whapps/voip/user/tmpl/edit.html"
					],
					[
						"whavoimenme",
						"whapps/voip/menu/menu.js"
					],
					[
						"voidevtmsot",
						"whapps/voip/device/tmpl/softphone.html"
					],
					[
						"voidevtmfa",
						"whapps/voip/device/tmpl/fax.html"
					],
					[
						"whavoidevtmed",
						"whapps/voip/device/tmpl/edit.html"
					],
					[
						"whvoidevla",
						"whapps/voip/device/lang/en.js"
					],
					[
						"whvoicdla",
						"whapps/voip/cdr/lang/en.js"
					],
					[
						"whavocd",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"voiacen",
						"whapps/voip/account/lang/en.js"
					],
					[
						"voiactmed",
						"whapps/voip/account/tmpl/edit.html"
					],
					[
						"whuserppormla",
						"whapps/userportal/portal_manager/lang/en.js"
					],
					[
						"whusporm",
						"whapps/userportal/portal_manager/portal_manager.js"
					],
					[
						"whpbpbmala",
						"whapps/pbxs/pbxs_manager/lang/en.js"
					],
					[
						"whp",
						"whapps/pbxs/pbxs_manager/pbxs_manager.js"
					],
					[
						"myacperlang",
						"whapps/myaccount/personal_info/lang/en.js"
					],
					[
						"whmyapertm",
						"whapps/myaccount/personal_info/tmpl/personal_info.html"
					],
					[
						"whdevap",
						"whapps/developer/api/api.js"
					],
					[
						"laytmlay",
						"whapps/core/layout/tmpl/layout.html"
					],
					[
						"corlay",
						"whapps/core/layout/layout.js"
					],
					[
						"regist",
						"whapps/auth/auth/tmpl/register.html"
					],
					[
						"recov",
						"whapps/auth/auth/tmpl/recover_password.html"
					],
					[
						"autnew_lo",
						"whapps/auth/auth/tmpl/new_login.html"
					],
					[
						"auttmpllo",
						"whapps/auth/auth/tmpl/login.html"
					],
					[
						"authlangen",
						"whapps/auth/auth/lang/en.js"
					],
					[
						"autaut",
						"whapps/auth/auth.js"
					],
					[
						"acmantmed",
						"whapps/accounts/accounts_manager/tmpl/edit.html"
					],
					[
						"ac_man",
						"whapps/accounts/accounts_manager/accounts_manager.js"
					],
					[
						"voi",
						"whapps/voip/voip.js"
					],
					[
						"coj",
						"config/config.js"
					],
					[
						"appc",
						"whapps/myaccount/app_store/css/app_store.css"
					],
					[
						"app",
						"whapps/myaccount/app_store/app_store.js"
					],
					[
						"hosts",
						"hosts"
					],
					[
						"kusy",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install"
					],
					[
						"domain_",
						"sites/all/modules/contrib/domain/domain_conf/domain_conf.module"
					],
					[
						"wlmasin",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.install"
					],
					[
						"masqmo",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"pagtp",
						"modules/system/page.tpl.php"
					],
					[
						"accmod",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usynweb",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"accwe",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"kaus",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"usesym",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usermo",
						"modules/user/user.module"
					],
					[
						"acccoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"whdc",
						"sites/all/modules/custom/whitelabel_domain_config/whitelabel_domain_config.module"
					],
					[
						"win",
						"js/winkstart-request.js"
					],
					[
						"conj",
						"config/config.js"
					],
					[
						"aut",
						"whapps/auth/auth.js"
					],
					[
						"jqdata",
						"js/external/jquery.dataTables.js"
					],
					[
						"ampreq",
						"js/amplify/amplify.request.js"
					],
					[
						"winkre",
						"js/winkstart-request.js"
					],
					[
						"accounts",
						"whapps/accounts/accounts.js"
					],
					[
						"portcs",
						"whapps/ports/ports_manager/css/ports_manager.css"
					],
					[
						"cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"voip/cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"user/css/",
						"whapps/voip/user/css/user.css"
					],
					[
						"user/tmpl/",
						"whapps/voip/user/tmpl/edit.html"
					],
					[
						"us/",
						"user_sync/user_sync.module"
					],
					[
						"v",
						"conversant_api/tests/v1.js"
					],
					[
						"user",
						"user_sync/user_sync.install"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 276.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 78,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"add",
						"addNotice"
					],
					[
						"arr",
						"array_filter"
					],
					[
						"setup_user",
						"setup_user_cid"
					],
					[
						"init",
						"initialise_clients"
					],
					[
						"user_pr",
						"user_property_names"
					],
					[
						"A",
						"AbstractImportController"
					],
					[
						"User",
						"UserStatus"
					],
					[
						"auth",
						"authorised"
					],
					[
						"check_",
						"check_account_hierarchy"
					],
					[
						"client",
						"client_manager"
					],
					[
						"cli",
						"client_mgr"
					],
					[
						"bas",
						"base_urls"
					],
					[
						"array_m",
						"array_merge"
					],
					[
						"base",
						"base_url"
					],
					[
						"arra",
						"array"
					],
					[
						"user",
						"username"
					],
					[
						"cons",
						"Console"
					],
					[
						"rec",
						"record"
					],
					[
						"K",
						"Kazoo"
					],
					[
						"array_k",
						"array_key_exists"
					],
					[
						"G",
						"Guzzle"
					],
					[
						"array",
						"array"
					],
					[
						"pos",
						"position"
					],
					[
						"is_s",
						"is_string"
					],
					[
						"fun",
						"fun	function …"
					],
					[
						"init_",
						"init_kazoo_client"
					],
					[
						"requ",
						"require_once"
					],
					[
						"map",
						"array_map"
					],
					[
						"setup",
						"setup_user_vmbox"
					],
					[
						"func",
						"function"
					],
					[
						"sess",
						"session_id"
					],
					[
						"consol",
						"console_client"
					],
					[
						"CONSO",
						"CONSOLE_CREDS_USERNAME"
					],
					[
						"CONSOLE_C",
						"CONSOLE_CREDS_USERNAME"
					],
					[
						"json",
						"json_encode"
					],
					[
						"arra_re",
						"array_replace"
					],
					[
						"KAZ",
						"KAZOO_CREDS_REALM"
					],
					[
						"acc",
						"account_id"
					],
					[
						"KAZOO",
						"KAZOO_CREDS_REALM"
					],
					[
						"KAZOO_",
						"KAZOO_CREDS_USERNAME"
					],
					[
						"KA",
						"KAZOO_BASE_URL"
					],
					[
						"CONS",
						"CONSOLE_BASE_URI"
					],
					[
						"la",
						"last"
					],
					[
						"f",
						"first"
					],
					[
						"fir",
						"first_name"
					],
					[
						"is_n",
						"is_null"
					],
					[
						"abs",
						"abstract"
					],
					[
						"array_c",
						"array_combine"
					],
					[
						"def",
						"def	Function"
					],
					[
						"pass",
						"password"
					],
					[
						"account_manager_is",
						"account_manager_is_account_admin"
					],
					[
						"other",
						"other_bpid"
					],
					[
						"white",
						"whitelabel_masquerade_get_masquerading_user"
					],
					[
						"conta",
						"contact_parameters"
					],
					[
						"business",
						"business_partner"
					],
					[
						"whi",
						"whitelabel_masquerade_clear_cache"
					],
					[
						"p",
						"php"
					],
					[
						"account_manager_adempiere_read",
						"account_manager_adempiere_read_business_partner"
					],
					[
						"account_manager_ad",
						"account_manager_adempiere_read_contact"
					],
					[
						"business_part",
						"business_partner_id"
					],
					[
						"account_manager_read",
						"account_manager_read_business_partner"
					],
					[
						"drupal_get_f",
						"drupal_get_form"
					],
					[
						"customer",
						"customer_number"
					],
					[
						"user_sygse",
						"kazoo_user_sync_get_business_partner_search_key"
					],
					[
						"user_sync_get",
						"user_sync_get_adempiere_business_partner_id"
					],
					[
						"glo",
						"global"
					],
					[
						"custo",
						"customer_number"
					],
					[
						"cust",
						"customer_number"
					],
					[
						"sea",
						"search"
					],
					[
						"whitelabel_domain_config_mail",
						"whitelabel_domain_config_mail_on_user_reactivate"
					],
					[
						"upd",
						"update_user"
					],
					[
						"if",
						"if	if"
					],
					[
						"conf",
						"config"
					],
					[
						"wink",
						"winkstart"
					],
					[
						"disc",
						"disconnect_numbers"
					],
					[
						"request",
						"requested_port_time"
					],
					[
						"port",
						"port_form_data"
					],
					[
						"req",
						"requested_port_time"
					],
					[
						"chec",
						"checked"
					],
					[
						"requested",
						"requested_port_time"
					],
					[
						"val",
						"val	.val()"
					],
					[
						"validation",
						"validation_errors"
					],
					[
						"field_",
						"field_ids"
					],
					[
						"fax",
						"fax_numbers"
					],
					[
						"vali",
						"validation_errors"
					],
					[
						"in",
						"inarray	$.inArray()"
					],
					[
						"valid",
						"valid_numbers"
					],
					[
						"vald",
						"validation_errors"
					],
					[
						"margin-",
						"margin-top"
					],
					[
						"numb",
						"Number"
					],
					[
						"numbers",
						"numbers_text"
					],
					[
						"field",
						"field_id"
					],
					[
						"fiel",
						"field_id"
					],
					[
						"tab",
						"tab_data"
					],
					[
						"desc",
						"descendants"
					],
					[
						"accoutn",
						"account_name"
					],
					[
						"account",
						"account_name"
					],
					[
						"each",
						"each	$.each()"
					],
					[
						"font",
						"font-size"
					],
					[
						"list",
						"list_ports"
					],
					[
						"render",
						"render_ports_manager"
					],
					[
						"fu",
						"fun	Function"
					],
					[
						"em",
						"email"
					],
					[
						"da",
						"date"
					],
					[
						"type",
						"typeof"
					],
					[
						"port_date",
						"port_date_asap"
					],
					[
						"spl",
						"split_date"
					],
					[
						"spi",
						"split_date"
					],
					[
						"sp",
						"split_date"
					],
					[
						"date",
						"date_array"
					],
					[
						"va",
						"val	.val()"
					],
					[
						"h",
						"hide	hide"
					],
					[
						"popu",
						"popup_html"
					],
					[
						"d",
						"div	Tag"
					],
					[
						"att",
						"attachments"
					],
					[
						"subm",
						"submit_btn"
					],
					[
						"port_re",
						"port_request_failure"
					],
					[
						"al",
						"alert"
					],
					[
						"ba",
						"background-color"
					],
					[
						"email",
						"notify_email"
					],
					[
						"valida",
						"validation_errors"
					],
					[
						"port_ty",
						"port_type_dropdown"
					],
					[
						"remo",
						"removeClass	.removeClass"
					],
					[
						"ea",
						"each	$.each()"
					],
					[
						"sub",
						"submit	submit"
					],
					[
						"min",
						"min_date"
					],
					[
						"el",
						"else"
					],
					[
						"number",
						"number_data"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/sam/code/voicemail.conf",
					"settings":
					{
						"buffer_size": 1777,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/config.local.php",
					"settings":
					{
						"buffer_size": 363,
						"line_ending": "Unix",
						"name": "/**"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/config.local.example.php",
					"settings":
					{
						"buffer_size": 350,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Logger/UserMessageFormatter.php",
					"settings":
					{
						"buffer_size": 404,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/.gitignore",
					"settings":
					{
						"buffer_size": 46,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/run_import.php",
					"settings":
					{
						"buffer_size": 248,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/import_test.csv",
					"settings":
					{
						"buffer_size": 228,
						"line_ending": "Unix",
						"name": ",1000009"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/users.json",
					"settings":
					{
						"buffer_size": 14143,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/docs/usage/rest/devices.rst",
					"settings":
					{
						"buffer_size": 1228,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Reader/CommandLineFileReader.php",
					"settings":
					{
						"buffer_size": 737,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/misc/get_detailed_call_records.sh",
					"settings":
					{
						"buffer_size": 1090,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Parser/AbstractParser.php",
					"settings":
					{
						"buffer_size": 584,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/log/import.log",
					"settings":
					{
						"buffer_size": 84086,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/code/vm_parser.php",
					"settings":
					{
						"buffer_size": 5553,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "<?php\n\nconst 'AUTH_TOKEN',= '';\nconst 'ACCT_ID' = '';\nconst 'TIME_FROM' = '';\nconst 'TIME_TO' = '';\n\n\n$req = curl_init(\"https://c-api.conversant/v1/accounts/\" . ACCT_ID . \"/cdrs?created_from=\" . TIME FROM . \"&created_to=\" . TIME_TO);\ncurl_setopt($req, CURLOPT_HTTPHEADER, array(\"X-Auth-Token:\" . AUTH_TOKEN));\n\n$res = curl_exec($req);\n$data = json_decode($res)['data'];\n\necho ($data[0]);\n\n// fields to \n$names = array('id', 'billing_seconds', 'call_direction', 'from_uri', 'to_uri', );\n\n// foreach result, append to csv\nforeach ($data as $key => $value) {\n\n}\n",
					"file": "/home/sam/conversant/misc/get_detailed_call_records.php",
					"file_size": 512,
					"file_write_time": 130503712278971433,
					"settings":
					{
						"buffer_size": 559,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Reader/FilenameFromConfigReader.php",
					"settings":
					{
						"buffer_size": 450,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/misc/migration_script_usage.txt",
					"settings":
					{
						"buffer_size": 2049,
						"line_ending": "Unix",
						"name": "Conversant migration script"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Parser/CSVParser.php",
					"settings":
					{
						"buffer_size": 2590,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Data/BusinessPartner.php",
					"settings":
					{
						"buffer_size": 2476,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Data/User.php",
					"settings":
					{
						"buffer_size": 1555,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/ConversantImporter.php",
					"settings":
					{
						"buffer_size": 1769,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Client/ClientManagerInterface.php",
					"settings":
					{
						"buffer_size": 156,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Client/ConversantClientManager.php",
					"settings":
					{
						"buffer_size": 10144,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/test_api.php",
					"settings":
					{
						"buffer_size": 1517,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Http/Exception/BadResponseException.php",
					"settings":
					{
						"buffer_size": 1844,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/customer_migration/src/Import/Data/UserStatus.php",
					"settings":
					{
						"buffer_size": 669,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/Makefile/Make.sublime-build",
			"command_palette":
			{
				"height": 392.0,
				"selected_items":
				[
					[
						"try",
						"Snippet: Wrap in try { … } catch (…) { … }"
					],
					[
						"php",
						"Set Syntax: PHP"
					],
					[
						"syntph",
						"Set Syntax: PHP"
					],
					[
						"git",
						"Git: Status"
					],
					[
						"pac",
						"Package Control: Install Package"
					],
					[
						"cla",
						"Snippet: class …"
					],
					[
						"class",
						"Snippet: Class"
					],
					[
						"pack",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						":",
						":w - Save"
					],
					[
						"for",
						"Gherkin/Cucumber: Format"
					],
					[
						"form",
						"Gherkin/Cucumber: Format"
					],
					[
						"hook_bloc",
						"Snippet: hook_block_view_MODULE_DELTA_alter"
					],
					[
						"h_us_p",
						"Snippet: hook_user_presave"
					],
					[
						"user_pre",
						"Snippet: block_user_presave"
					],
					[
						"hook_user",
						"Snippet: hook_user_cancel"
					],
					[
						"hook_menu",
						"Snippet: hook_menu"
					],
					[
						"menu_alt",
						"Snippet: hook_menu_alter"
					],
					[
						"mail_alter",
						"Snippet: hook_mail_alter"
					],
					[
						"pc",
						"Package Control: Install Package"
					],
					[
						"set h",
						"Set Syntax: HTML"
					],
					[
						"js",
						"JSHint"
					],
					[
						"g c",
						"Git: Commit"
					],
					[
						"g ad",
						"Git: Add Current File"
					],
					[
						"git h",
						"Git: Commit history"
					],
					[
						"g ",
						"Git: Commit"
					],
					[
						"packa",
						"Package Control: Install Package"
					],
					[
						"git d",
						"Git: Diff All"
					],
					[
						"g",
						"Git: Commit"
					],
					[
						"gi",
						"Git: Commit"
					],
					[
						"git ",
						"Git: Commit"
					],
					[
						"g co",
						"Git: Commit"
					],
					[
						"g di c",
						"Git: Diff Current File"
					],
					[
						"g d",
						"Git: Diff All"
					],
					[
						"g di",
						"Git: Diff Staged"
					],
					[
						"gher",
						"Set Syntax: Gherkin"
					],
					[
						"fo",
						"Gherkin/Cucumber: Format"
					],
					[
						"format",
						"Gherkin/Cucumber: Format"
					],
					[
						"forma",
						"Gherkin/Cucumber: Format"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						":W",
						":w - Save"
					],
					[
						"sett",
						"Preferences: Settings - User"
					],
					[
						":p",
						"Set Syntax: Plain Text"
					],
					[
						":q",
						"Set Syntax: SQL"
					],
					[
						":ph",
						"Set Syntax: PHP"
					],
					[
						"pa",
						"Package Control: Discover Packages"
					],
					[
						"set p",
						"Set Syntax: PHP"
					],
					[
						"",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"pc ",
						"Package Control: Install Package"
					],
					[
						"sy c",
						"Set Syntax: C"
					]
				],
				"width": 566.0
			},
			"console":
			{
				"height": 139.0,
				"history":
				[
					"$1=\"1\";",
					"$1=\"1\"",
					"$imp = new Importer();",
					"find()",
					"n",
					"jsHint",
					"jshint",
					"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) ",
					"syntax "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/sam/conversant/repos/customer_migration/composer.json",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/Api/Data/Entity/User.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/Data/UserStatus.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/Data/User.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/Exception/UriTokenException.php",
				"/home/sam/conversant/repos/customer_migration/src/test_api.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/tests/Kazoo/Tests/Functional/UserTest.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/Api/Resource/Users.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/user_auth_recovery.json",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/user_auth.json",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/users.json",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/.gitignore",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/Api/JsonSchemaObjectFactory.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/vendor/guzzle/guzzle/src/Guzzle/Log/Zf1LogAdapter.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/AUTHORS.md",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Plugin/Cache/CacheKeyProviderInterface.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/Importer.php.old",
				"/home/sam/conversant/repos/customer_migration/src/Import/config.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/Parser/CSVParser.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/AbstractImportController.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/AbstractHasMonologger.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzlehttp/guzzle/src/Exception/BadResponseException.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Http/Exception/BadResponseException.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Batch/BatchDivisorInterface.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Batch/FlushingBatch.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/build.xml",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/global_resources.json",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/docs/iterators/guzzle-iterators.rst",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Plugin/Cache/CacheStorageInterface.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/Reader/CommandLineFileReader.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/docs/plugins/backoff-plugin.rst",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Batch/AbstractBatchDecorator.php",
				"/home/sam/conversant/repos/customer_migration/vendor/autoload.php",
				"/home/sam/conversant/repos/customer_migration/vendor/composer/autoload_classmap.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/tests/Guzzle/Tests/Service/Command/LocationVisitor/Request/AbstractVisitorTestCase.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/ClientManagerInterface.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/ConversantClientManager.php",
				"/home/sam/conversant/repos/customer_migration/log/import.log",
				"/home/sam/conversant/misc/cdr_dump.json",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/Client.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Http/Message/Response.php",
				"/home/sam/conversant/repos/customer_migration/vendor/monolog/monolog/src/Monolog/Formatter/FormatterInterface.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/HasMonologgerInterface.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/import.log",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/HttpClient/CachedHttpClient.php",
				"/home/sam/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/home/sam/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/vendor/guzzle/guzzle/docs/_static/prettify.css",
				"/home/sam/conversant/repos/customer_migration/src/Import/BusinessPartner.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/UserStatus.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/User.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Http/Client.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/Reader/AbstractReader.php",
				"/home/sam/conversant/repos/customer_migration/composer.lock",
				"/home/sam/conversant/repos/customer_migration/vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/Parser/UserStatus.php",
				"/home/sam/misc/PhpStorm-133.982/Install-Linux-tar.txt",
				"/home/sam/conversant/repos/customer_migration/src/Import/Importer.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/InputContext.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/vendor/psr/log/Psr/Log/LoggerInterface.php",
				"/home/sam/conversant/repos/customer_migration/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php",
				"/home/sam/conversant/repos/customer_migration/vendor/psr/log/Psr/Log/LoggerInterface.php",
				"/home/sam/conversant/repos/customer_migration/vendor/monolog/monolog/src/Monolog/Logger.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/local_resources.json",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/LICENSE",
				"/home/sam/conversant/repos/customer_migration/vendor/composer/installed.json",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/tests/Guzzle/Tests/Inflection/InflectorTest.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzlehttp/guzzle/src/ClientInterface.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/HasMonologgerTrait.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/Api/Resource/Accounts.php",
				"/home/sam/conversant/repos/customer_migration/src/Parser/AbstractParser.php",
				"/home/sam/conversant/repos/customer_migration/src/BusinessPartner.php",
				"/home/sam/conversant/repos/customer_migration/src/CSVParser.php",
				"/home/sam/conversant/repos/customer_migration/src/CommandLineFileReader.php",
				"/home/sam/conversant/repos/customer_migration/src/Importer.php",
				"/home/sam/conversant/repos/customer_migration/src/run_import.php",
				"/home/sam/conversant/repos/customer_migration/src/AbstractParser.php",
				"/home/sam/conversant/repos/customer_migration/src/AbstractReader.php",
				"/home/sam/conversant/repos/customer_migration/src/Loggable.php",
				"/home/sam/conversant/repos/customer_migration/src/Import/import_test.csv",
				"/home/sam/conversant/repos/customer_migration/src/UserSetup.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/callflows.json",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/Api/AbstractResource.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/devices.json",
				"/home/sam/conversant/repos/customer_migration/vendor/symfony/event-dispatcher/Symfony/Component/EventDispatcher/Event.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Service/Exception/CommandException.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Service/Exception/ServiceNotFoundException.php",
				"/home/sam/conversant/repos/customer_migration/vendor/symfony/event-dispatcher/Symfony/Component/EventDispatcher/LICENSE",
				"/home/sam/conversant/repos/customer_migration/vendor/monolog/monolog/doc/usage.md",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Http/Message/RequestInterface.php",
				"/home/sam/conversant/repos/customer_migration/README.md",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/README.md",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzlehttp/guzzle/src/Event/RequestEvents.php",
				"/home/sam/conversant/repos/customer_migration/src/User.php",
				"/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/lib/Kazoo/HttpClient/HttpClient.php",
				"/home/sam/conversant/repos/customer_migration/vendor/guzzlehttp/guzzle/src/Client.php",
				"/home/sam/conversant/repos/customer_migration/src/AbstractFileParser.php",
				"/home/sam/conversant/repos/customer_migration/sample.csv",
				"/home/sam/conversant/repos/customer_migration/deps/composer.json",
				"/home/sam/conversant/repos/customer_migration/deps/composer.phar",
				"/home/sam/code/sync_test.php",
				"/home/sam/code/clean_drupal_users.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/services/resources/user_resource.inc",
				"/home/sam/conversant/repos/console/scripts/password-hash.sh",
				"/home/sam/conversant/repos/console/scripts/cron-lynx.sh",
				"/home/sam/conversant/repos/console/scripts/cron-curl.sh",
				"/home/sam/conversant/repos/console/scripts/drupal.sh",
				"/home/sam/conversant/repos/console/INSTALL.sqlite.txt",
				"/home/sam/conversant/repos/console/.gitignore",
				"/home/sam/conversant/repos/console/sites/default/settings.local.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.test",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.query.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/tcpdf/config/lang/kat.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.tokens.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.features.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.info",
				"/home/sam/conversant/repos/console/COPYRIGHT.txt",
				"/home/sam/conversant/repos/console/CHANGELOG.txt",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/themekey/themekey_features.info"
			],
			"find":
			{
				"height": 35.0
			},
			"find_in_files":
			{
				"height": 93.0,
				"where_history":
				[
					"vendor/2600hz/kazoo-php-sdk/lib/Kazoo",
					"",
					"*.css",
					"",
					"sites/all/modules/contrib/domain",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"4. Contacts.feature",
					"",
					"-indsex.html",
					"",
					"config/config.js",
					"/home/sam/repos/conversant/console/sites/all/modules/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console/tests/vendor",
					"",
					"user_sync.webservices.inc",
					""
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"internal",
					"data",
					"business_partner",
					"data",
					"/**\n",
					"username",
					"addInfo",
					"create",
					"line_",
					"line",
					"properties",
					"get_property",
					"getResponseCode",
					"$u",
					"email",
					"imported",
					"unexpectedValue",
					"parser",
					"CREDS_USERNAME",
					"KAZOO_AUTH_ACCOUNT_ID",
					"vm_pass",
					"defaultHeaders",
					"header",
					"readme",
					"collection_type",
					"accounts",
					"md5",
					"}\n",
					"UserSetup",
					"sipRealm",
					"administer",
					"services_error",
					"conversant_api_business_partner_access_error",
					"kaz",
					"user_sync_update_password",
					"_user_mail_notify",
					"password_reset",
					"pass_reset",
					"reset",
					"account_manager_contact_edit",
					"->id",
					"user_load",
					"whitelabel_masquerade_clear_cache",
					"user_load",
					"block",
					"account_manager_adempiere_read_contacts_by_business_partner",
					"whitelabel_masquerade_get_masquerading_user",
					"GLOBALS",
					"_GLOBALS",
					"contact",
					"adempiere_read_user",
					"RANGE",
					"variab",
					"user_mail",
					"module_invoke",
					"mail",
					"hook_mail",
					"Your customer number is",
					"mail_alter",
					"user_mail",
					"user_mail_no",
					"user_ma",
					"terms_link",
					"[$terms_link",
					"$terms_link",
					"activate",
					"[$activate",
					"$activate",
					"admin_created",
					"[$admin_created",
					"$admin_created",
					"register",
					"[$register",
					"$register",
					"WHITELABEL_MASQUERADE_ROLE_NAME",
					"define(",
					"activate",
					"auth.user.update",
					"onboard_roles",
					"register_apps",
					"winkstart.apps",
					"auth.load_account",
					"&gt",
					"&lt",
					"switch_day_month",
					"name",
					"whappnav.add",
					"enable_whapp",
					"winkstart.apps",
					"get_account",
					"auth.get_account",
					"datepicker",
					"setTimeout",
					"cache",
					"096",
					"split",
					"valid_numbers",
					"numbers",
					"bill",
					"available_apps",
					"send(",
					"dataType",
					"account.list",
					"async.parallel",
					"account_name",
					"async.parallel",
					"async.series",
					"sync",
					"descendants",
					"hid",
					"setup_table",
					"_data",
					"input",
					"primary",
					"list_ports",
					"account_name",
					"account_number",
					"descendants",
					".checked",
					"@todo",
					"settings",
					"content_type|content-type|contenttype",
					"content",
					"Content-Type",
					"contentType: ",
					"files",
					"winkstart.alert",
					"string_al"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					">",
					"<",
					"&gt",
					"&lt",
					"ports_manager.",
					"ports_manager_html",
					"billing_postal_code",
					"There was an internal error and the changes may not be complete.",
					"There was an internal error and the changes may not be complete",
					"url",
					"!empty($values['roles']['user'])",
					"!empty($values['roles']['admin'])",
					"localhost",
					""
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"follow_symlinks": true,
					"path": "/home/sam/conversant/repos/customer_migration"
				}
			],
			"groups":
			[
				{
					"selected": 6,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/sam/code/voicemail.conf",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1777,
								"regions":
								{
								},
								"selection":
								[
									[
										317,
										317
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/config.local.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 363,
								"regions":
								{
								},
								"selection":
								[
									[
										199,
										199
									]
								],
								"settings":
								{
									"auto_name": "/**",
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/config.local.example.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 350,
								"regions":
								{
								},
								"selection":
								[
									[
										180,
										180
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Logger/UserMessageFormatter.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 404,
								"regions":
								{
								},
								"selection":
								[
									[
										376,
										376
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/sam/conversant/repos/customer_migration/.gitignore",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 46,
								"regions":
								{
								},
								"selection":
								[
									[
										46,
										46
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/run_import.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 248,
								"regions":
								{
								},
								"selection":
								[
									[
										172,
										172
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/home/sam/conversant/repos/customer_migration/src/import_test.csv",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 228,
								"regions":
								{
								},
								"selection":
								[
									[
										109,
										109
									]
								],
								"settings":
								{
									"auto_name": ",1000009",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/schemas/users.json",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 14143,
								"regions":
								{
								},
								"selection":
								[
									[
										2597,
										2597
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JSON.tmLanguage",
									"tab_size": 3,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 165.0,
								"zoom_level": 1.0
							},
							"stack_index": 18,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "/home/sam/conversant/repos/customer_migration/vendor/2600hz/kazoo-php-sdk/docs/usage/rest/devices.rst",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 1228,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/RestructuredText/reStructuredText.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 17,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Reader/CommandLineFileReader.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 737,
								"regions":
								{
								},
								"selection":
								[
									[
										287,
										287
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 16,
							"type": "text"
						},
						{
							"buffer": 10,
							"file": "/home/sam/conversant/misc/get_detailed_call_records.sh",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1090,
								"regions":
								{
								},
								"selection":
								[
									[
										926,
										926
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 25,
							"type": "text"
						}
					]
				},
				{
					"selected": 11,
					"sheets":
					[
						{
							"buffer": 11,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Parser/AbstractParser.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 584,
								"regions":
								{
								},
								"selection":
								[
									[
										583,
										583
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 24,
							"type": "text"
						},
						{
							"buffer": 12,
							"file": "/home/sam/conversant/repos/customer_migration/log/import.log",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 84086,
								"regions":
								{
								},
								"selection":
								[
									[
										82671,
										82671
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 17701.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 13,
							"file": "/home/sam/code/vm_parser.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5553,
								"regions":
								{
								},
								"selection":
								[
									[
										805,
										805
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 23,
							"type": "text"
						},
						{
							"buffer": 14,
							"file": "/home/sam/conversant/misc/get_detailed_call_records.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 559,
								"regions":
								{
								},
								"selection":
								[
									[
										334,
										334
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 45.0,
								"zoom_level": 1.0
							},
							"stack_index": 22,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Reader/FilenameFromConfigReader.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 450,
								"regions":
								{
								},
								"selection":
								[
									[
										450,
										450
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 16,
							"file": "/home/sam/conversant/misc/migration_script_usage.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2049,
								"regions":
								{
								},
								"selection":
								[
									[
										421,
										421
									]
								],
								"settings":
								{
									"auto_name": "Conversant migration script",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 17,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Parser/CSVParser.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2590,
								"regions":
								{
								},
								"selection":
								[
									[
										1970,
										1970
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 405.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 18,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Data/BusinessPartner.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2476,
								"regions":
								{
								},
								"selection":
								[
									[
										805,
										805
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 727.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 19,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Data/User.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1555,
								"regions":
								{
								},
								"selection":
								[
									[
										435,
										435
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 20,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/ConversantImporter.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1769,
								"regions":
								{
								},
								"selection":
								[
									[
										124,
										124
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 21,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Client/ClientManagerInterface.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 156,
								"regions":
								{
								},
								"selection":
								[
									[
										128,
										128
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 22,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Client/ConversantClientManager.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 10144,
								"regions":
								{
								},
								"selection":
								[
									[
										7156,
										7156
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3765.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 23,
							"file": "/home/sam/conversant/repos/customer_migration/src/test_api.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1517,
								"regions":
								{
								},
								"selection":
								[
									[
										253,
										253
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 20,
							"type": "text"
						},
						{
							"buffer": 24,
							"file": "/home/sam/conversant/repos/customer_migration/vendor/guzzle/guzzle/src/Guzzle/Http/Exception/BadResponseException.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1844,
								"regions":
								{
								},
								"selection":
								[
									[
										1188,
										1188
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 30.0,
								"zoom_level": 1.0
							},
							"stack_index": 21,
							"type": "text"
						},
						{
							"buffer": 25,
							"file": "/home/sam/conversant/repos/customer_migration/src/Import/Data/UserStatus.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 669,
								"regions":
								{
								},
								"selection":
								[
									[
										357,
										357
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 19,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 34.0
			},
			"input":
			{
				"height": 33.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 112.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.git":
			{
				"height": 100.0
			},
			"position": "0,1,0,0,0,0,0,0,0,1366,768",
			"project": "",
			"replace":
			{
				"height": 42.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
					[
						"iml",
						"log/import.log"
					],
					[
						"users.js",
						"vendor/2600hz/kazoo-php-sdk/schemas/users.json"
					],
					[
						"test",
						"src/test_api.php"
					],
					[
						"kazoouser",
						"vendor/2600hz/kazoo-php-sdk/lib/Kazoo/Api/Data/Entity/User.php"
					],
					[
						"imp",
						"log/import.log"
					],
					[
						"config",
						"src/Import/config.php"
					],
					[
						"im",
						"log/import.log"
					],
					[
						"c",
						"src/Import/Parser/CSVParser.php"
					],
					[
						"i",
						"log/import.log"
					],
					[
						"bus",
						"src/Import/Data/BusinessPartner.php"
					],
					[
						"gbadres",
						"vendor/guzzle/guzzle/src/Guzzle/Http/Exception/BadResponseException.php"
					],
					[
						"busi",
						"src/Import/Data/BusinessPartner.php"
					],
					[
						"csv",
						"src/Import/Parser/CSVParser.php"
					],
					[
						"impo",
						"log/import.log"
					],
					[
						"imlo",
						"log/import.log"
					],
					[
						"bpart",
						"src/Import/Data/BusinessPartner.php"
					],
					[
						"business",
						"src/Import/Data/BusinessPartner.php"
					],
					[
						"import",
						"log/import.log"
					],
					[
						"importl",
						"log/import.log"
					],
					[
						"abstr",
						"src/Import/Parser/AbstractParser.php"
					],
					[
						"abstracthas",
						"src/Import/AbstractHasMonologger.php"
					],
					[
						"comman",
						"src/Import/Reader/CommandLineFileReader.php"
					],
					[
						"users",
						"src/Import/UserStatus.php"
					],
					[
						"loggerinter",
						"src/Import/HasMonologgerInterface.php"
					],
					[
						"logg",
						"src/Import/Loggable.php"
					],
					[
						"",
						"src/AbstractReader.php"
					],
					[
						"convap",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						".sh",
						"tests/console_test.sh"
					],
					[
						"kaad",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"usyins",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"kaq",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"ka",
						"sites/all/modules/contrib/kazoo/kazoo.module"
					],
					[
						"conva",
						"sites/all/modules/custom/conversant_api/conversant_api.services.inc"
					],
					[
						"acmabusp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"usersy",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usmod",
						"modules/user/user.module"
					],
					[
						"webser",
						"sites/all/modules/custom/web_services/web_services.module"
					],
					[
						"setti",
						"sites/default/settings.php"
					],
					[
						"settloca",
						"sites/default/settings.local.php"
					],
					[
						"setting",
						"sites/default/settings.local.php"
					],
					[
						"kausmo",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"masq",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"userapi",
						"modules/user/user.api.php"
					],
					[
						"user.m",
						"modules/user/user.module"
					],
					[
						"contacts",
						"tests/features/4. Contacts.feature"
					],
					[
						"acmanbptp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"usywe",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"usymod",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"acmanbusp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"accouman",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usyninf",
						"sites/all/modules/custom/user_sync/user_sync.info"
					],
					[
						"usermod",
						"modules/user/user.module"
					],
					[
						"conste",
						"tests/console_test.sh"
					],
					[
						"white",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.module"
					],
					[
						"accoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"accweb",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"acmamo",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usymo",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"appc",
						"whapps/myaccount/app_store/css/app_store.css"
					],
					[
						"app",
						"whapps/myaccount/app_store/app_store.js"
					],
					[
						"hosts",
						"hosts"
					],
					[
						"kusy",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install"
					],
					[
						"domain_",
						"sites/all/modules/contrib/domain/domain_conf/domain_conf.module"
					],
					[
						"wlmasin",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.install"
					],
					[
						"masqmo",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"pagtp",
						"modules/system/page.tpl.php"
					],
					[
						"accmod",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usynweb",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"accwe",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"kaus",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"usesym",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usermo",
						"modules/user/user.module"
					],
					[
						"acccoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"whdc",
						"sites/all/modules/custom/whitelabel_domain_config/whitelabel_domain_config.module"
					],
					[
						"win",
						"js/winkstart-request.js"
					],
					[
						"conj",
						"config/config.js"
					],
					[
						"aut",
						"whapps/auth/auth.js"
					],
					[
						"acc",
						"whapps/accounts/accounts_manager/accounts_manager.js"
					],
					[
						"jqdata",
						"js/external/jquery.dataTables.js"
					],
					[
						"ampreq",
						"js/amplify/amplify.request.js"
					],
					[
						"winkre",
						"js/winkstart-request.js"
					],
					[
						"accounts",
						"whapps/accounts/accounts.js"
					],
					[
						"portcs",
						"whapps/ports/ports_manager/css/ports_manager.css"
					],
					[
						"cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"voip/cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"conf",
						"config/config.js"
					],
					[
						"user/css/",
						"whapps/voip/user/css/user.css"
					],
					[
						"user/tmpl/",
						"whapps/voip/user/tmpl/edit.html"
					],
					[
						"us/",
						"user_sync/user_sync.module"
					],
					[
						"v",
						"conversant_api/tests/v1.js"
					],
					[
						"user",
						"user_sync/user_sync.install"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 250.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 90,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"first",
						"first_name"
					],
					[
						"contac",
						"contact_parameters"
					],
					[
						"WATCH",
						"WATCHDOG_INFO"
					],
					[
						"acc",
						"account"
					],
					[
						"kaz",
						"kazoo_id"
					],
					[
						"Kaz",
						"kazoo_user_sync"
					],
					[
						"db",
						"db_query	db_query"
					],
					[
						"pass",
						"password"
					],
					[
						"account_manager_is",
						"account_manager_is_account_admin"
					],
					[
						"other",
						"other_bpid"
					],
					[
						"white",
						"whitelabel_masquerade_get_masquerading_user"
					],
					[
						"conta",
						"contact_parameters"
					],
					[
						"business",
						"business_partner"
					],
					[
						"whi",
						"whitelabel_masquerade_clear_cache"
					],
					[
						"p",
						"php"
					],
					[
						"account_manager_adempiere_read",
						"account_manager_adempiere_read_business_partner"
					],
					[
						"account_manager_ad",
						"account_manager_adempiere_read_contact"
					],
					[
						"business_part",
						"business_partner_id"
					],
					[
						"account_manager_read",
						"account_manager_read_business_partner"
					],
					[
						"drupal_get_f",
						"drupal_get_form"
					],
					[
						"customer",
						"customer_number"
					],
					[
						"user_sygse",
						"kazoo_user_sync_get_business_partner_search_key"
					],
					[
						"user_sync_get",
						"user_sync_get_adempiere_business_partner_id"
					],
					[
						"glo",
						"global"
					],
					[
						"custo",
						"customer_number"
					],
					[
						"cust",
						"customer_number"
					],
					[
						"sea",
						"search"
					],
					[
						"whitelabel_domain_config_mail",
						"whitelabel_domain_config_mail_on_user_reactivate"
					],
					[
						"upd",
						"update_user"
					],
					[
						"f",
						"f	Anonymous Function"
					],
					[
						"if",
						"if	if"
					],
					[
						"conf",
						"config"
					],
					[
						"user",
						"userportal"
					],
					[
						"wink",
						"winkstart"
					],
					[
						"disc",
						"disconnect_numbers"
					],
					[
						"request",
						"requested_port_time"
					],
					[
						"port",
						"port_form_data"
					],
					[
						"req",
						"requested_port_time"
					],
					[
						"requ",
						"requested_port_time"
					],
					[
						"chec",
						"checked"
					],
					[
						"requested",
						"requested_port_time"
					],
					[
						"val",
						"val	.val()"
					],
					[
						"validation",
						"validation_errors"
					],
					[
						"field_",
						"field_ids"
					],
					[
						"fax",
						"fax_numbers"
					],
					[
						"vali",
						"validation_errors"
					],
					[
						"in",
						"inarray	$.inArray()"
					],
					[
						"valid",
						"valid_numbers"
					],
					[
						"vald",
						"validation_errors"
					],
					[
						"margin-",
						"margin-top"
					],
					[
						"numb",
						"Number"
					],
					[
						"numbers",
						"numbers_text"
					],
					[
						"field",
						"field_id"
					],
					[
						"fiel",
						"field_id"
					],
					[
						"tab",
						"tab_data"
					],
					[
						"desc",
						"descendants"
					],
					[
						"accoutn",
						"account_name"
					],
					[
						"account",
						"account_name"
					],
					[
						"each",
						"each	$.each()"
					],
					[
						"font",
						"font-size"
					],
					[
						"list",
						"list_ports"
					],
					[
						"render",
						"render_ports_manager"
					],
					[
						"fu",
						"fun	Function"
					],
					[
						"fun",
						"function"
					],
					[
						"em",
						"email"
					],
					[
						"da",
						"date"
					],
					[
						"type",
						"typeof"
					],
					[
						"port_date",
						"port_date_asap"
					],
					[
						"spl",
						"split_date"
					],
					[
						"spi",
						"split_date"
					],
					[
						"sp",
						"split_date"
					],
					[
						"date",
						"date_array"
					],
					[
						"va",
						"val	.val()"
					],
					[
						"h",
						"hide	hide"
					],
					[
						"popu",
						"popup_html"
					],
					[
						"d",
						"div	Tag"
					],
					[
						"att",
						"attachments"
					],
					[
						"subm",
						"submit_btn"
					],
					[
						"port_re",
						"port_request_failure"
					],
					[
						"al",
						"alert"
					],
					[
						"ba",
						"background-color"
					],
					[
						"email",
						"notify_email"
					],
					[
						"valida",
						"validation_errors"
					],
					[
						"port_ty",
						"port_type_dropdown"
					],
					[
						"remo",
						"removeClass	.removeClass"
					],
					[
						"ea",
						"each	$.each()"
					],
					[
						"sub",
						"submit	submit"
					],
					[
						"min",
						"min_date"
					],
					[
						"el",
						"else"
					],
					[
						"number",
						"number_data"
					],
					[
						"dele",
						"delete_port"
					],
					[
						"por",
						"port_ready"
					],
					[
						"main",
						"main_number"
					],
					[
						"pop",
						"populate_port_dialog"
					],
					[
						"get_",
						"get_port"
					],
					[
						"ports",
						"ports_manager"
					],
					[
						"create",
						"create_attachment"
					],
					[
						"crea",
						"create_number_doc"
					],
					[
						"port_t",
						"port_type_dropdown"
					],
					[
						"nu",
						"number_regex"
					],
					[
						"countr",
						"country_prefix"
					],
					[
						"count",
						"country_prefix"
					],
					[
						"current",
						"current_type"
					],
					[
						"error",
						"errors"
					],
					[
						"port_",
						"port_types"
					],
					[
						"re",
						"request"
					],
					[
						"winksta",
						"winkstart"
					],
					[
						"log",
						"logo_desc"
					],
					[
						"upload",
						"upload_icon"
					],
					[
						"form",
						"form_data"
					],
					[
						"upl",
						"upload_logo"
					],
					[
						"uplo",
						"upload_icon"
					],
					[
						"loc",
						"lock"
					],
					[
						"lock",
						"Lock"
					],
					[
						"messa",
						"Messages"
					],
					[
						"t",
						"to"
					],
					[
						"masquerade",
						"masquerade_users"
					],
					[
						"masquer",
						"masquerade_users"
					],
					[
						"arra",
						"array"
					],
					[
						"accoun",
						"account_manager_user_is_wlr_admin"
					],
					[
						"wh",
						"whitelabel_masquerade_is_wlr_admin"
					],
					[
						"res",
						"reseller"
					],
					[
						"resel",
						"resellers"
					],
					[
						"user_",
						"user_cancel	user_cancel"
					],
					[
						"whit",
						"whitelabel_masquerade_access"
					],
					[
						"whitela",
						"whitelabel_masquerade_menu"
					],
					[
						"user_ac",
						"user_access	user_access"
					],
					[
						"_mas",
						"_masquerade_can_access_user"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.module",
					"settings":
					{
						"buffer_size": 27256,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.install",
					"settings":
					{
						"buffer_size": 1292,
						"line_ending": "Windows"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.module",
					"settings":
					{
						"buffer_size": 27757,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.module",
					"settings":
					{
						"buffer_size": 45768,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.contact.admin.inc",
					"settings":
					{
						"buffer_size": 18723,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.webservices.inc",
					"settings":
					{
						"buffer_size": 19080,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.module",
					"settings":
					{
						"buffer_size": 11710,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/masquerade/masquerade.module",
					"settings":
					{
						"buffer_size": 30939,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/includes/form.inc",
					"settings":
					{
						"buffer_size": 190684,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/tests/features/4. Contacts.feature",
					"settings":
					{
						"buffer_size": 9544,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/tests/features/5. Delete.feature",
					"settings":
					{
						"buffer_size": 844,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/tests/console_test.sh",
					"settings":
					{
						"buffer_size": 1148,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "{\n   \"_id\": \"c4823960926d2cce208967c36ffc72c5\",\n   \"_rev\": \"1-965e9afe52a2f7a7c931f18465cd2d61\",\n   \"name\": \"1052005\",\n   \"realm\": \"1052005\",\n   \"timezone\": \"Pacific/Auckland\",\n   \"caller_id\": {\n   },\n   \"caller_id_options\": {\n   },\n   \"notifications\": {\n   },\n   \"media\": {\n       \"bypass_media\": \"auto\"\n   },\n   \"music_on_hold\": {\n   },\n   \"pvt_type\": \"account\",\n   \"pvt_vsn\": \"1\",\n   \"pvt_api_key\": \"106d0213010b8bed29d08e063a5be8483fafae46b2ffde05af2c9f4f5df718b9\",\n   \"pvt_tree\": [\n       \"1d2225ba1316c330a1bfcda6f8e93740\",\n       \"e01be9aef9d645ad05ede39c94a2355c\"\n   ],\n   \"pvt_enabled\": true,\n   \"pvt_created\": 63569593400,\n   \"pvt_modified\": 63569593400,\n   \"pvt_account_db\": \"account%2Fc4%2F82%2F3960926d2cce208967c36ffc72c5\",\n   \"pvt_account_id\": \"c4823960926d2cce208967c36ffc72c5\"\n}\n\n{\n   \"_id\": \"c4823960926d2cce208967c36ffc72c5\",\n   \"_rev\": \"2-f0d91cfc9bcee88190cae70a1ce73c78\",\n   \"name\": \"1052005\",\n   \"realm\": \"1052005\",\n   \"timezone\": \"Pacific/Auckland\",\n   \"caller_id\": {\n   },\n   \"caller_id_options\": {\n   },\n   \"notifications\": {\n   },\n   \"media\": {\n       \"bypass_media\": \"auto\"\n   },\n   \"music_on_hold\": {\n   },\n   \"id\": \"c4823960926d2cce208967c36ffc72c5\",\n   \"created\": 63569593400,\n   \"available_apps\": [\n       \"voip\",\n       \"userportal\",\n       \"accounts\",\n       \"developer\",\n       \"ports\"\n   ],\n   \"pvt_account_id\": \"c4823960926d2cce208967c36ffc72c5\",\n   \"pvt_account_db\": \"account%2Fc4%2F82%2F3960926d2cce208967c36ffc72c5\",\n   \"pvt_modified\": 63569594873,\n   \"pvt_created\": 63569593400,\n   \"pvt_enabled\": true,\n   \"pvt_tree\": [\n       \"1d2225ba1316c330a1bfcda6f8e93740\",\n       \"e01be9aef9d645ad05ede39c94a2355c\"\n   ],\n   \"pvt_api_key\": \"106d0213010b8bed29d08e063a5be8483fafae46b2ffde05af2c9f4f5df718b9\",\n   \"pvt_vsn\": \"1\",\n   \"pvt_type\": \"account\"\n}",
					"settings":
					{
						"buffer_size": 1783,
						"line_ending": "Unix",
						"name": "{"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/modules/user/user.module",
					"settings":
					{
						"buffer_size": 141241,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.admin.inc",
					"settings":
					{
						"buffer_size": 3853,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.query.inc",
					"settings":
					{
						"buffer_size": 3390,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.module",
					"settings":
					{
						"buffer_size": 7698,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module",
					"settings":
					{
						"buffer_size": 13230,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/includes/rest_api_query.class.inc",
					"settings":
					{
						"buffer_size": 17373,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.install",
					"settings":
					{
						"buffer_size": 665,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/misc/db_clear.php",
					"settings":
					{
						"buffer_size": 566,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 4885 files for \"account_manager_contact_roles\" (case sensitive)\n\n/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.contact.admin.inc:\n  199      '#title'          => t('Roles'),\n  200      '#options'        => account_manager_roles_options($contact),\n  201:     '#default_value'  => isset($contact) ? account_manager_contact_roles($contact) : array(),\n  202      // '#required'       => isset($contact) ? !account_manager_contact_is_self($contact->userId) : TRUE,\n  203    );\n  ...\n  239    else {\n  240      // When editing self (currently logged in user), the \"admin\" and \"user\" roles are not in the form.  Restore them for validate and submit handlers.\n  241:     $existing_roles = account_manager_contact_roles($values['contact']);\n  242      // We want an array of the form ROLE => ROLE (e.g. 'admin' => 'admin').\n  243      $existing_roles = array_combine($existing_roles, $existing_roles);\n  ...\n  380    // The contact's roles have been updated, but $values['contact'] still contains the\n  381    // original values, so we can check those to see if the Drupal user was just blocked.\n  382:   else if (in_array('user', account_manager_contact_roles($values['contact']))) {\n  383      module_invoke_all('account_manager_contact_edit', $account, $values['contact'], $bpid, FALSE, FALSE);\n  384    }\n\n/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.module:\n 1224  \n 1225  // Gets roles from a contact.\n 1226: function account_manager_contact_roles($contact) {\n 1227    return account_manager_map_roles(account_manager_contact_adempiere_role_ids($contact));\n 1228  }\n\n/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.module:\n  690  function conversant_api_format_contact($contact) {\n  691    // Translate roles from ADempiere IDS to machine names.\n  692:   $contact->roles = account_manager_contact_roles($contact);\n  693    unset($contact->role);\n  694  \n\n5 matches across 3 files\n\n\nSearching 4862 files for \"account_manager_contact_edit\" (case sensitive)\n\n/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.contact.admin.inc:\n  372      if (isset($values['contact'])) {\n  373        $values['contact']->name = $values['name'];\n  374:       module_invoke_all('account_manager_contact_edit', $account, $values['contact'], $bpid, $is_user, $is_admin);\n  375      }\n  376      else {\n  ...\n  386    // original values, so we can check those to see if the Drupal user was just blocked.\n  387    else if (in_array('user', account_manager_contact_roles($values['contact']))) {\n  388:     module_invoke_all('account_manager_contact_edit', $account, $values['contact'], $bpid, FALSE, FALSE);\n  389    }\n  390  }\n\n/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module:\n  169  \n  170  /**\n  171:  * Implements hook_account_manager_contact_edit().\n  172   */\n  173: function kazoo_user_sync_account_manager_contact_edit($account, $contact, $bpid, $account_user, $account_admin) {\n  174    $args = array('@mail' => $account->mail);\n  175    $user = kazoo_user_sync_get_user($account->uid);\n\n/home/sam/conversant/repos/console/sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.module:\n  155  \n  156  /**\n  157:  * Implements hook_account_manager_contact_edit().\n  158   */\n  159: function whitelabel_masquerade_account_manager_contact_edit($account, $contact, $bpid, $account_user, $account_admin) {\n  160    $uid = $account->uid;\n  161  \n\n6 matches across 3 files\n\n\nSearching 4862 files for \"if ($query->error\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 4862 files for \"$query->error\" (case sensitive)\n\n/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.module:\n   52    $query = new kazoo_api_auth();\n   53    $query->execute();\n   54:   return !$query->error && !empty($query->result->auth_token);\n   55  }\n   56  \n   ..\n  140      $args = array(\n  141        '!code' => $query->code,\n  142:       '!error' => $query->error,\n  143        '!result' => var_export($query->result, TRUE),\n  144        '!debug' => $query->debug_string(),\n\n2 matches in 1 file\n",
					"settings":
					{
						"buffer_size": 4225,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "/home/sam/Documents/servers",
					"settings":
					{
						"buffer_size": 447,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
					"settings":
					{
						"buffer_size": 312,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "ssh van << 'END'\ncd /opt/drupal/drupal-current;drush sql-dump\n\nEND\n",
					"settings":
					{
						"buffer_size": 67,
						"line_ending": "Unix",
						"name": "ssh van << 'END'"
					}
				},
				{
					"file": "/etc/hosts",
					"settings":
					{
						"buffer_size": 815,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/.ssh/config",
					"settings":
					{
						"buffer_size": 420,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/tests/v1.js",
					"settings":
					{
						"buffer_size": 6218,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/Makefile/Make.sublime-build",
			"command_palette":
			{
				"height": 180.0,
				"selected_items":
				[
					[
						"php",
						"Set Syntax: PHP"
					],
					[
						"pack",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						":",
						":w - Save"
					],
					[
						"pac",
						"Package Control: Install Package"
					],
					[
						"for",
						"Gherkin/Cucumber: Format"
					],
					[
						"form",
						"Gherkin/Cucumber: Format"
					],
					[
						"hook_bloc",
						"Snippet: hook_block_view_MODULE_DELTA_alter"
					],
					[
						"h_us_p",
						"Snippet: hook_user_presave"
					],
					[
						"user_pre",
						"Snippet: block_user_presave"
					],
					[
						"hook_user",
						"Snippet: hook_user_cancel"
					],
					[
						"hook_menu",
						"Snippet: hook_menu"
					],
					[
						"menu_alt",
						"Snippet: hook_menu_alter"
					],
					[
						"mail_alter",
						"Snippet: hook_mail_alter"
					],
					[
						"pc",
						"Package Control: Install Package"
					],
					[
						"set h",
						"Set Syntax: HTML"
					],
					[
						"js",
						"JSHint"
					],
					[
						"g c",
						"Git: Commit"
					],
					[
						"g ad",
						"Git: Add Current File"
					],
					[
						"git h",
						"Git: Commit history"
					],
					[
						"git",
						"Git: Toggle Annotations"
					],
					[
						"g ",
						"Git: Commit"
					],
					[
						"packa",
						"Package Control: Install Package"
					],
					[
						"git d",
						"Git: Diff All"
					],
					[
						"g",
						"Git: Commit"
					],
					[
						"gi",
						"Git: Commit"
					],
					[
						"git ",
						"Git: Commit"
					],
					[
						"g co",
						"Git: Commit"
					],
					[
						"g di c",
						"Git: Diff Current File"
					],
					[
						"g d",
						"Git: Diff All"
					],
					[
						"g di",
						"Git: Diff Staged"
					],
					[
						"gher",
						"Set Syntax: Gherkin"
					],
					[
						"fo",
						"Gherkin/Cucumber: Format"
					],
					[
						"format",
						"Gherkin/Cucumber: Format"
					],
					[
						"forma",
						"Gherkin/Cucumber: Format"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						":W",
						":w - Save"
					],
					[
						"sett",
						"Preferences: Settings - User"
					],
					[
						":p",
						"Set Syntax: Plain Text"
					],
					[
						":q",
						"Set Syntax: SQL"
					],
					[
						":ph",
						"Set Syntax: PHP"
					],
					[
						"pa",
						"Package Control: Discover Packages"
					],
					[
						"set p",
						"Set Syntax: PHP"
					],
					[
						"",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"pc ",
						"Package Control: Install Package"
					],
					[
						"sy c",
						"Set Syntax: C"
					]
				],
				"width": 458.0
			},
			"console":
			{
				"height": 139.0,
				"history":
				[
					"n",
					"jsHint",
					"jshint",
					"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) ",
					"syntax "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/wsdl/accounting.wsdl",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.webservices.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.contact.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager_configuration.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.pagination.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.bp-invoices.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.bp-subscriptions.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.callrecord.search.js",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.info",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.module",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.features.inc",
				"/home/sam/conversant/repos/console/tests/vendor/composer/autoload_classmap.php",
				"/home/sam/conversant/repos/console/authorize.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.test",
				"/home/sam/conversant/repos/console/modules/user/user-profile-item.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.services.inc",
				"/home/sam/conversant/repos/console/sites/default/settings.php",
				"/home/sam/conversant/repos/console/sites/default/settings.local.php",
				"/home/sam/conversant/repos/console/includes/session.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/includes/rest_api_query.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/includes/RestApiAbstractTestCase.class.inc",
				"/home/sam/conversant/repos/console/README.txt",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/src/Behat/MinkExtension/Context/Initializer/MinkAwareInitializer.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/src/Behat/MinkExtension/Context/MinkAwareInterface.php",
				"/home/sam/conversant/repos/console/tests/vendor/composer/composer/src/Composer/Package/CompletePackageInterface.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/gherkin/src/Behat/Gherkin/Keywords/ArrayKeywords.php",
				"/home/sam/conversant/repos/console/MAINTAINERS.txt",
				"/home/sam/conversant/repos/console/includes/pager.inc",
				"/home/sam/conversant/repos/console/modules/forum/forum-rtl.css",
				"/home/sam/conversant/repos/console/modules/filter/tests/filter.url-output.txt",
				"/home/sam/conversant/repos/console/includes/file.inc",
				"/home/sam/.ssh/git_ssh.pub",
				"/home/sam/.ssh/pooter_ubuntu.pub",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.webservices.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.module",
				"/home/sam/conversant/repos/console/tests/console_test.sh",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.info",
				"/home/sam/conversant/repos/console/modules/user/tests/user_form_test.info",
				"/home/sam/conversant/repos/console/modules/user/user.module",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/i18n/ja.xliff",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/tests/v1.js",
				"/home/sam/conversant/repos/console/sites/default/files/js/js_KCd8rbJYUruV1tRJnh4um34UYvyhlrSVCPR1jNko2h8.js.gz",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/tests/v1.html",
				"/home/sam/conversant/repos/console/sites/default/files/simpletest/verbose/AdminViewsDefaultViewsTestCase-1.html",
				"/home/sam/conversant/repos/console/misc/vertical-tabs.css",
				"/home/sam/conversant/repos/console/includes/database/database.inc",
				"/home/sam/conversant/repos/console/includes/date.inc",
				"/home/sam/conversant/repos/console/tests/vendor/symfony/finder/Symfony/Component/Finder/Iterator/DateRangeFilterIterator.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/domain/domain_alias/domain_alias.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/services/resources/user_resource.inc",
				"/home/sam/conversant/repos/console/scripts/password-hash.sh",
				"/home/sam/conversant/repos/console/scripts/cron-lynx.sh",
				"/home/sam/conversant/repos/console/scripts/cron-curl.sh",
				"/home/sam/conversant/repos/console/scripts/drupal.sh",
				"/home/sam/conversant/repos/console/INSTALL.sqlite.txt",
				"/home/sam/conversant/repos/console/.gitignore",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.query.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/tcpdf/config/lang/kat.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.tokens.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.features.inc",
				"/home/sam/conversant/repos/console/COPYRIGHT.txt",
				"/home/sam/conversant/repos/console/CHANGELOG.txt",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/themekey/themekey_features.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/theme/features-admin-components.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.features.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.info",
				"/home/sam/conversant/repos/console/tests/vendor/drupal/drupal-extension/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/behat/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.user.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.taxonomy.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.node.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.menu.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.locale.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.image.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.filter.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.field.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.features.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.ctools.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.context.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.block.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features.test",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.export.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.drush.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.api.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.js",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.css",
				"/home/sam/conversant/repos/console/tests/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/behat/src/Behat/Behat/Event/FeatureEvent.php",
				"/home/sam/conversant/repos/console/FirePHPCore/demo/oo.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/gherkin/src/Behat/Gherkin/Node/OutlineNode.php",
				"/home/sam/conversant/repos/console/misc/jquery.js",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/views/plugins/views_wizard/users.inc",
				"/home/sam/conversant/repos/console/modules/simpletest/tests/update_script_test.module",
				"/home/sam/conversant/repos/console/modules/node/node.css",
				"/home/sam/conversant/repos/console/tests/vendor/symfony/console/Symfony/Component/Console/Output/NullOutput.php",
				"/home/sam/.bashrc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.admin.inc",
				"/home/sam/conversant/repos/console/tests/vendor/instaclick/php-webdriver/lib/WebDriver/Exception/JavaScriptError.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/whitelabel_domain_config/whitelabel_domain_config.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.info",
				"/home/sam/conversant/repos/console/web.config",
				"/home/sam/conversant/repos/console/modules/search/tests/search_embedded_form.info",
				"/home/sam/conversant/repos/console/tests/vendor/composer/composer/tests/Composer/Test/DependencyResolver/RuleSetTest.php"
			],
			"find":
			{
				"height": 35.0
			},
			"find_in_files":
			{
				"height": 93.0,
				"where_history":
				[
					"",
					"*.css",
					"",
					"sites/all/modules/contrib/domain",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"4. Contacts.feature",
					"",
					"-indsex.html",
					"",
					"config/config.js",
					"/home/sam/repos/conversant/console/sites/all/modules/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console/tests/vendor",
					"",
					"user_sync.webservices.inc",
					""
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"success",
					"$query->error",
					"if ($query->error",
					"radius_accounts",
					"display_radius_accounts failed",
					"query",
					"account_manager_search_call_records_form",
					"execut",
					"result",
					"values",
					"names",
					"account_manager_contact_edit",
					"autocomplete",
					"masquerade_switch_user",
					"masquerade_switch_user_page",
					"account_manager_contact_roles",
					"administer",
					"services_error",
					"conversant_api_business_partner_access_error",
					"kaz",
					"user_sync_update_password",
					"_user_mail_notify",
					"password_reset",
					"pass_reset",
					"reset",
					"account_manager_contact_edit",
					"->id",
					"user_load",
					"whitelabel_masquerade_clear_cache",
					"user_load",
					"block",
					"account_manager_adempiere_read_contacts_by_business_partner",
					"whitelabel_masquerade_get_masquerading_user",
					"GLOBALS",
					"_GLOBALS",
					"contact",
					"adempiere_read_user",
					"RANGE",
					"variab",
					"user_mail",
					"module_invoke",
					"mail",
					"hook_mail",
					"Your customer number is",
					"mail_alter",
					"user_mail",
					"user_mail_no",
					"user_ma",
					"terms_link",
					"[$terms_link",
					"$terms_link",
					"activate",
					"[$activate",
					"$activate",
					"admin_created",
					"[$admin_created",
					"$admin_created",
					"register",
					"[$register",
					"$register",
					"WHITELABEL_MASQUERADE_ROLE_NAME",
					"define(",
					"activate",
					"auth.user.update",
					"onboard_roles",
					"register_apps",
					"winkstart.apps",
					"auth.load_account",
					"&gt",
					"&lt",
					"switch_day_month",
					"name",
					"whappnav.add",
					"enable_whapp",
					"winkstart.apps",
					"get_account",
					"auth.get_account",
					"datepicker",
					"setTimeout",
					"cache",
					"096",
					"split",
					"valid_numbers",
					"numbers",
					"bill",
					"available_apps",
					"send(",
					"dataType",
					"account.list",
					"async.parallel",
					"account_name",
					"async.parallel",
					"async.series",
					"sync",
					"descendants",
					"hid",
					"setup_table",
					"_data",
					"input",
					"primary",
					"list_ports",
					"account_name",
					"account_number",
					"descendants",
					".checked",
					"@todo",
					"settings",
					"content_type|content-type|contenttype",
					"content",
					"Content-Type",
					"contentType: ",
					"files",
					"winkstart.alert",
					"string_al",
					"border",
					"mouseover",
					"hover",
					">",
					"<",
					"number_of_docs",
					"data",
					"render_port_dialog",
					"@todo",
					"numbers_",
					"numbers",
					"port_types",
					"action_port",
					"popup_edit_user"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					">",
					"<",
					"&gt",
					"&lt",
					"ports_manager.",
					"ports_manager_html",
					"billing_postal_code",
					"There was an internal error and the changes may not be complete.",
					"There was an internal error and the changes may not be complete",
					"url",
					"!empty($values['roles']['user'])",
					"!empty($values['roles']['admin'])",
					"localhost",
					""
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"follow_symlinks": true,
					"path": "/home/sam/conversant/repos/console"
				}
			],
			"groups":
			[
				{
					"selected": 5,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 27256,
								"regions":
								{
								},
								"selection":
								[
									[
										6294,
										6294
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 156.0,
								"zoom_level": 1.0
							},
							"stack_index": 20,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.install",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1292,
								"regions":
								{
								},
								"selection":
								[
									[
										577,
										577
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 19,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 27757,
								"regions":
								{
								},
								"selection":
								[
									[
										19780,
										19780
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 8765.0,
								"zoom_level": 1.0
							},
							"stack_index": 14,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 45768,
								"regions":
								{
								},
								"selection":
								[
									[
										26362,
										26362
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 11570.0,
								"zoom_level": 1.0
							},
							"stack_index": 11,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.contact.admin.inc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 18723,
								"regions":
								{
								},
								"selection":
								[
									[
										12379,
										12379
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 338.0,
								"zoom_level": 1.0
							},
							"stack_index": 12,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.webservices.inc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 19080,
								"regions":
								{
								},
								"selection":
								[
									[
										5270,
										5270
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 2630.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 11710,
								"regions":
								{
								},
								"selection":
								[
									[
										4738,
										4738
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1925.0,
								"zoom_level": 1.0
							},
							"stack_index": 17,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/masquerade/masquerade.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 30939,
								"regions":
								{
								},
								"selection":
								[
									[
										24030,
										24030
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1058.0,
								"zoom_level": 1.0
							},
							"stack_index": 18,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "/home/sam/conversant/repos/console/includes/form.inc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 190684,
								"regions":
								{
								},
								"selection":
								[
									[
										67615,
										67615
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 21905.0,
								"zoom_level": 1.0
							},
							"stack_index": 22,
							"type": "text"
						},
						{
							"buffer": 9,
							"file": "/home/sam/conversant/repos/console/tests/features/4. Contacts.feature",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 9544,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/Cucumber/Cucumber Plain Text Feature.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 165.0,
								"zoom_level": 1.0
							},
							"stack_index": 26,
							"type": "text"
						},
						{
							"buffer": 10,
							"file": "/home/sam/conversant/repos/console/tests/features/5. Delete.feature",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 844,
								"regions":
								{
								},
								"selection":
								[
									[
										498,
										498
									]
								],
								"settings":
								{
									"syntax": "Packages/Cucumber/Cucumber Plain Text Feature.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 29,
							"type": "text"
						},
						{
							"buffer": 11,
							"file": "/home/sam/conversant/repos/console/tests/console_test.sh",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1148,
								"regions":
								{
								},
								"selection":
								[
									[
										1148,
										1148
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 28,
							"type": "text"
						},
						{
							"buffer": 12,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1783,
								"regions":
								{
								},
								"selection":
								[
									[
										1783,
										1783
									]
								],
								"settings":
								{
									"auto_name": "{",
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 23,
							"type": "text"
						},
						{
							"buffer": 13,
							"file": "/home/sam/conversant/repos/console/modules/user/user.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 141241,
								"regions":
								{
								},
								"selection":
								[
									[
										124461,
										124461
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 25,
							"type": "text"
						}
					]
				},
				{
					"selected": 10,
					"sheets":
					[
						{
							"buffer": 7,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/masquerade/masquerade.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 30939,
								"regions":
								{
								},
								"selection":
								[
									[
										24457,
										24457
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 10558.0,
								"zoom_level": 1.0
							},
							"stack_index": 21,
							"type": "text"
						},
						{
							"buffer": 14,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.admin.inc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3853,
								"regions":
								{
								},
								"selection":
								[
									[
										3719,
										3719
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1035.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 15,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.query.inc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3390,
								"regions":
								{
								},
								"selection":
								[
									[
										2607,
										2607
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 980.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 16,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7698,
								"regions":
								{
								},
								"selection":
								[
									[
										2727,
										2727
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1330.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 17,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 13230,
								"regions":
								{
								},
								"selection":
								[
									[
										2470,
										2470
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 135.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 18,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/includes/rest_api_query.class.inc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 17373,
								"regions":
								{
								},
								"selection":
								[
									[
										13597,
										13597
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 5465.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 19,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.install",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 665,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"syntax": "Packages/HTML/HTML.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 45.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 20,
							"file": "/home/sam/conversant/misc/db_clear.php",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 566,
								"regions":
								{
								},
								"selection":
								[
									[
										266,
										266
									]
								],
								"settings":
								{
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 10,
							"type": "text"
						},
						{
							"buffer": 21,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4225,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												353,
												382
											],
											[
												737,
												766
											],
											[
												1178,
												1207
											],
											[
												1518,
												1547
											],
											[
												1915,
												1944
											],
											[
												2342,
												2370
											],
											[
												2683,
												2711
											],
											[
												2932,
												2960
											],
											[
												3007,
												3035
											],
											[
												3363,
												3391
											],
											[
												3444,
												3472
											],
											[
												3915,
												3928
											],
											[
												4080,
												4093
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										3923,
										3923
									]
								],
								"settings":
								{
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 4,
									"result_base_dir": "",
									"result_file_regex": "^([A-Za-z\\\\/<].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 1365.0,
								"zoom_level": 1.0
							},
							"stack_index": 9,
							"type": "text"
						},
						{
							"buffer": 22,
							"file": "/home/sam/Documents/servers",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 447,
								"regions":
								{
								},
								"selection":
								[
									[
										43,
										43
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 23,
							"file": "/home/sam/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 312,
								"regions":
								{
								},
								"selection":
								[
									[
										311,
										311
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JSON.tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.module",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 45768,
								"regions":
								{
								},
								"selection":
								[
									[
										13301,
										13301
									]
								],
								"settings":
								{
									"history_list_is_closing": true,
									"syntax": "Packages/PHP/PHP.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 5375.0,
								"zoom_level": 1.0
							},
							"stack_index": 13,
							"type": "text"
						},
						{
							"buffer": 24,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 67,
								"regions":
								{
								},
								"selection":
								[
									[
										67,
										67
									]
								],
								"settings":
								{
									"auto_name": "ssh van << 'END'",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 15,
							"type": "text"
						},
						{
							"buffer": 25,
							"file": "/etc/hosts",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 815,
								"regions":
								{
								},
								"selection":
								[
									[
										346,
										346
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 16,
							"type": "text"
						},
						{
							"buffer": 26,
							"file": "/home/sam/.ssh/config",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 420,
								"regions":
								{
								},
								"selection":
								[
									[
										244,
										244
									]
								],
								"settings":
								{
									"syntax": "Packages/Text/Plain text.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 24,
							"type": "text"
						},
						{
							"buffer": 27,
							"file": "/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/tests/v1.js",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6218,
								"regions":
								{
								},
								"selection":
								[
									[
										4815,
										4815
									]
								],
								"settings":
								{
									"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1800.0,
								"zoom_level": 1.0
							},
							"stack_index": 27,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 21.0
			},
			"input":
			{
				"height": 33.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 112.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.git":
			{
				"height": 100.0
			},
			"position": "0,1,0,0,0,0,0,0,0,1366,768",
			"project": "",
			"replace":
			{
				"height": 40.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
					[
						"accou",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"kaz",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"kazus",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"ka",
						"sites/all/modules/contrib/kazoo/kazoo.module"
					],
					[
						"convapi",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						"settlo",
						"sites/default/settings.local.php"
					],
					[
						"sett",
						"sites/default/settings.php"
					],
					[
						"restapi",
						"sites/all/modules/contrib/rest_api_query/includes/rest_api_query.class.inc"
					],
					[
						"rest",
						"sites/all/modules/contrib/rest_api_query/rest_api_query.module"
					],
					[
						"kazq",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"kazoo.",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"masq",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"usyinst",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"accmanmo",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"form.inc",
						"includes/form.inc"
					],
					[
						"cona",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						"user_sy",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"v1.js",
						"sites/all/modules/custom/conversant_api/tests/v1.js"
					],
					[
						"data",
						"includes/database/database.inc"
					],
					[
						"usersymo",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usyin",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"kaus",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install"
					],
					[
						"convap",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						".sh",
						"tests/console_test.sh"
					],
					[
						"kaad",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"usyins",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"kaq",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"conva",
						"sites/all/modules/custom/conversant_api/conversant_api.services.inc"
					],
					[
						"acmabusp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"usersy",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usmod",
						"modules/user/user.module"
					],
					[
						"webser",
						"sites/all/modules/custom/web_services/web_services.module"
					],
					[
						"setti",
						"sites/default/settings.php"
					],
					[
						"settloca",
						"sites/default/settings.local.php"
					],
					[
						"setting",
						"sites/default/settings.local.php"
					],
					[
						"kausmo",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"userapi",
						"modules/user/user.api.php"
					],
					[
						"user.m",
						"modules/user/user.module"
					],
					[
						"contacts",
						"tests/features/4. Contacts.feature"
					],
					[
						"acmanbptp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"usywe",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"usymod",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"acmanbusp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"accouman",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usyninf",
						"sites/all/modules/custom/user_sync/user_sync.info"
					],
					[
						"usermod",
						"modules/user/user.module"
					],
					[
						"conste",
						"tests/console_test.sh"
					],
					[
						"white",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.module"
					],
					[
						"accoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"accweb",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"acmamo",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usymo",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"appc",
						"whapps/myaccount/app_store/css/app_store.css"
					],
					[
						"app",
						"whapps/myaccount/app_store/app_store.js"
					],
					[
						"hosts",
						"hosts"
					],
					[
						"kusy",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install"
					],
					[
						"domain_",
						"sites/all/modules/contrib/domain/domain_conf/domain_conf.module"
					],
					[
						"wlmasin",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.install"
					],
					[
						"masqmo",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"pagtp",
						"modules/system/page.tpl.php"
					],
					[
						"accmod",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usynweb",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"accwe",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"usesym",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usermo",
						"modules/user/user.module"
					],
					[
						"acccoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"whdc",
						"sites/all/modules/custom/whitelabel_domain_config/whitelabel_domain_config.module"
					],
					[
						"win",
						"js/winkstart-request.js"
					],
					[
						"conj",
						"config/config.js"
					],
					[
						"aut",
						"whapps/auth/auth.js"
					],
					[
						"acc",
						"whapps/accounts/accounts_manager/accounts_manager.js"
					],
					[
						"jqdata",
						"js/external/jquery.dataTables.js"
					],
					[
						"ampreq",
						"js/amplify/amplify.request.js"
					],
					[
						"winkre",
						"js/winkstart-request.js"
					],
					[
						"accounts",
						"whapps/accounts/accounts.js"
					],
					[
						"portcs",
						"whapps/ports/ports_manager/css/ports_manager.css"
					],
					[
						"cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"voip/cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"conf",
						"config/config.js"
					],
					[
						"user/css/",
						"whapps/voip/user/css/user.css"
					],
					[
						"user/tmpl/",
						"whapps/voip/user/tmpl/edit.html"
					],
					[
						"us/",
						"user_sync/user_sync.module"
					],
					[
						"v",
						"conversant_api/tests/v1.js"
					],
					[
						"user",
						"user_sync/user_sync.install"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 252.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 81,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"first",
						"first_name"
					],
					[
						"contac",
						"contact_parameters"
					],
					[
						"WATCH",
						"WATCHDOG_INFO"
					],
					[
						"acc",
						"account"
					],
					[
						"kaz",
						"kazoo_id"
					],
					[
						"Kaz",
						"kazoo_user_sync"
					],
					[
						"db",
						"db_query	db_query"
					],
					[
						"pass",
						"password"
					],
					[
						"account_manager_is",
						"account_manager_is_account_admin"
					],
					[
						"other",
						"other_bpid"
					],
					[
						"white",
						"whitelabel_masquerade_get_masquerading_user"
					],
					[
						"conta",
						"contact_parameters"
					],
					[
						"business",
						"business_partner"
					],
					[
						"whi",
						"whitelabel_masquerade_clear_cache"
					],
					[
						"p",
						"php"
					],
					[
						"account_manager_adempiere_read",
						"account_manager_adempiere_read_business_partner"
					],
					[
						"account_manager_ad",
						"account_manager_adempiere_read_contact"
					],
					[
						"business_part",
						"business_partner_id"
					],
					[
						"account_manager_read",
						"account_manager_read_business_partner"
					],
					[
						"drupal_get_f",
						"drupal_get_form"
					],
					[
						"customer",
						"customer_number"
					],
					[
						"user_sygse",
						"kazoo_user_sync_get_business_partner_search_key"
					],
					[
						"user_sync_get",
						"user_sync_get_adempiere_business_partner_id"
					],
					[
						"glo",
						"global"
					],
					[
						"custo",
						"customer_number"
					],
					[
						"cust",
						"customer_number"
					],
					[
						"sea",
						"search"
					],
					[
						"whitelabel_domain_config_mail",
						"whitelabel_domain_config_mail_on_user_reactivate"
					],
					[
						"upd",
						"update_user"
					],
					[
						"f",
						"f	Anonymous Function"
					],
					[
						"if",
						"if	if"
					],
					[
						"conf",
						"config"
					],
					[
						"user",
						"userportal"
					],
					[
						"wink",
						"winkstart"
					],
					[
						"disc",
						"disconnect_numbers"
					],
					[
						"request",
						"requested_port_time"
					],
					[
						"port",
						"port_form_data"
					],
					[
						"req",
						"requested_port_time"
					],
					[
						"requ",
						"requested_port_time"
					],
					[
						"chec",
						"checked"
					],
					[
						"requested",
						"requested_port_time"
					],
					[
						"val",
						"val	.val()"
					],
					[
						"validation",
						"validation_errors"
					],
					[
						"field_",
						"field_ids"
					],
					[
						"fax",
						"fax_numbers"
					],
					[
						"vali",
						"validation_errors"
					],
					[
						"in",
						"inarray	$.inArray()"
					],
					[
						"valid",
						"valid_numbers"
					],
					[
						"vald",
						"validation_errors"
					],
					[
						"margin-",
						"margin-top"
					],
					[
						"numb",
						"Number"
					],
					[
						"numbers",
						"numbers_text"
					],
					[
						"field",
						"field_id"
					],
					[
						"fiel",
						"field_id"
					],
					[
						"tab",
						"tab_data"
					],
					[
						"desc",
						"descendants"
					],
					[
						"accoutn",
						"account_name"
					],
					[
						"account",
						"account_name"
					],
					[
						"each",
						"each	$.each()"
					],
					[
						"font",
						"font-size"
					],
					[
						"list",
						"list_ports"
					],
					[
						"render",
						"render_ports_manager"
					],
					[
						"fu",
						"fun	Function"
					],
					[
						"fun",
						"function"
					],
					[
						"em",
						"email"
					],
					[
						"da",
						"date"
					],
					[
						"type",
						"typeof"
					],
					[
						"port_date",
						"port_date_asap"
					],
					[
						"spl",
						"split_date"
					],
					[
						"spi",
						"split_date"
					],
					[
						"sp",
						"split_date"
					],
					[
						"date",
						"date_array"
					],
					[
						"va",
						"val	.val()"
					],
					[
						"h",
						"hide	hide"
					],
					[
						"popu",
						"popup_html"
					],
					[
						"d",
						"div	Tag"
					],
					[
						"att",
						"attachments"
					],
					[
						"subm",
						"submit_btn"
					],
					[
						"port_re",
						"port_request_failure"
					],
					[
						"al",
						"alert"
					],
					[
						"ba",
						"background-color"
					],
					[
						"email",
						"notify_email"
					],
					[
						"valida",
						"validation_errors"
					],
					[
						"port_ty",
						"port_type_dropdown"
					],
					[
						"remo",
						"removeClass	.removeClass"
					],
					[
						"ea",
						"each	$.each()"
					],
					[
						"sub",
						"submit	submit"
					],
					[
						"min",
						"min_date"
					],
					[
						"el",
						"else"
					],
					[
						"number",
						"number_data"
					],
					[
						"dele",
						"delete_port"
					],
					[
						"por",
						"port_ready"
					],
					[
						"main",
						"main_number"
					],
					[
						"pop",
						"populate_port_dialog"
					],
					[
						"get_",
						"get_port"
					],
					[
						"ports",
						"ports_manager"
					],
					[
						"create",
						"create_attachment"
					],
					[
						"crea",
						"create_number_doc"
					],
					[
						"port_t",
						"port_type_dropdown"
					],
					[
						"nu",
						"number_regex"
					],
					[
						"countr",
						"country_prefix"
					],
					[
						"count",
						"country_prefix"
					],
					[
						"current",
						"current_type"
					],
					[
						"error",
						"errors"
					],
					[
						"port_",
						"port_types"
					],
					[
						"re",
						"request"
					],
					[
						"winksta",
						"winkstart"
					],
					[
						"log",
						"logo_desc"
					],
					[
						"upload",
						"upload_icon"
					],
					[
						"form",
						"form_data"
					],
					[
						"upl",
						"upload_logo"
					],
					[
						"uplo",
						"upload_icon"
					],
					[
						"loc",
						"lock"
					],
					[
						"lock",
						"Lock"
					],
					[
						"messa",
						"Messages"
					],
					[
						"t",
						"to"
					],
					[
						"masquerade",
						"masquerade_users"
					],
					[
						"masquer",
						"masquerade_users"
					],
					[
						"arra",
						"array"
					],
					[
						"accoun",
						"account_manager_user_is_wlr_admin"
					],
					[
						"wh",
						"whitelabel_masquerade_is_wlr_admin"
					],
					[
						"res",
						"reseller"
					],
					[
						"resel",
						"resellers"
					],
					[
						"user_",
						"user_cancel	user_cancel"
					],
					[
						"whit",
						"whitelabel_masquerade_access"
					],
					[
						"whitela",
						"whitelabel_masquerade_menu"
					],
					[
						"user_ac",
						"user_access	user_access"
					],
					[
						"_mas",
						"_masquerade_can_access_user"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/sam/.bashrc",
					"settings":
					{
						"buffer_size": 3836,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "Packages/Makefile/Make.sublime-build",
			"command_palette":
			{
				"height": 180.0,
				"selected_items":
				[
					[
						"php",
						"Set Syntax: PHP"
					],
					[
						"pack",
						"Package Control: Install Package"
					],
					[
						":w",
						":w - Save"
					],
					[
						":",
						":w - Save"
					],
					[
						"pac",
						"Package Control: Install Package"
					],
					[
						"for",
						"Gherkin/Cucumber: Format"
					],
					[
						"form",
						"Gherkin/Cucumber: Format"
					],
					[
						"hook_bloc",
						"Snippet: hook_block_view_MODULE_DELTA_alter"
					],
					[
						"h_us_p",
						"Snippet: hook_user_presave"
					],
					[
						"user_pre",
						"Snippet: block_user_presave"
					],
					[
						"hook_user",
						"Snippet: hook_user_cancel"
					],
					[
						"hook_menu",
						"Snippet: hook_menu"
					],
					[
						"menu_alt",
						"Snippet: hook_menu_alter"
					],
					[
						"mail_alter",
						"Snippet: hook_mail_alter"
					],
					[
						"pc",
						"Package Control: Install Package"
					],
					[
						"set h",
						"Set Syntax: HTML"
					],
					[
						"js",
						"JSHint"
					],
					[
						"g c",
						"Git: Commit"
					],
					[
						"g ad",
						"Git: Add Current File"
					],
					[
						"git h",
						"Git: Commit history"
					],
					[
						"git",
						"Git: Toggle Annotations"
					],
					[
						"g ",
						"Git: Commit"
					],
					[
						"packa",
						"Package Control: Install Package"
					],
					[
						"git d",
						"Git: Diff All"
					],
					[
						"g",
						"Git: Commit"
					],
					[
						"gi",
						"Git: Commit"
					],
					[
						"git ",
						"Git: Commit"
					],
					[
						"g co",
						"Git: Commit"
					],
					[
						"g di c",
						"Git: Diff Current File"
					],
					[
						"g d",
						"Git: Diff All"
					],
					[
						"g di",
						"Git: Diff Staged"
					],
					[
						"gher",
						"Set Syntax: Gherkin"
					],
					[
						"fo",
						"Gherkin/Cucumber: Format"
					],
					[
						"format",
						"Gherkin/Cucumber: Format"
					],
					[
						"forma",
						"Gherkin/Cucumber: Format"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						":W",
						":w - Save"
					],
					[
						"sett",
						"Preferences: Settings - User"
					],
					[
						":p",
						"Set Syntax: Plain Text"
					],
					[
						":q",
						"Set Syntax: SQL"
					],
					[
						":ph",
						"Set Syntax: PHP"
					],
					[
						"pa",
						"Package Control: Discover Packages"
					],
					[
						"set p",
						"Set Syntax: PHP"
					],
					[
						"",
						"PHP Code Sniffer: Sniff this file"
					],
					[
						"pc ",
						"Package Control: Install Package"
					],
					[
						"sy c",
						"Set Syntax: C"
					]
				],
				"width": 458.0
			},
			"console":
			{
				"height": 139.0,
				"history":
				[
					"n",
					"jsHint",
					"jshint",
					"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) ",
					"syntax "
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/wsdl/accounting.wsdl",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.webservices.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager.contact.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager_configuration.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.pagination.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.bp-invoices.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.bp-subscriptions.js",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/js/account_manager.callrecord.search.js",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.info",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.module",
				"/home/sam/conversant/repos/console/sites/all/modules/features/conversant_users/conversant_users.features.inc",
				"/home/sam/conversant/repos/console/tests/vendor/composer/autoload_classmap.php",
				"/home/sam/conversant/repos/console/authorize.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.test",
				"/home/sam/conversant/repos/console/modules/user/user-profile-item.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.services.inc",
				"/home/sam/conversant/repos/console/sites/default/settings.php",
				"/home/sam/conversant/repos/console/sites/default/settings.local.php",
				"/home/sam/conversant/repos/console/includes/session.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/includes/rest_api_query.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/rest_api_query.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/rest_api_query/includes/RestApiAbstractTestCase.class.inc",
				"/home/sam/conversant/repos/console/README.txt",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/src/Behat/MinkExtension/Context/Initializer/MinkAwareInitializer.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/src/Behat/MinkExtension/Context/MinkAwareInterface.php",
				"/home/sam/conversant/repos/console/tests/vendor/composer/composer/src/Composer/Package/CompletePackageInterface.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/gherkin/src/Behat/Gherkin/Keywords/ArrayKeywords.php",
				"/home/sam/conversant/repos/console/MAINTAINERS.txt",
				"/home/sam/conversant/repos/console/includes/pager.inc",
				"/home/sam/conversant/repos/console/modules/forum/forum-rtl.css",
				"/home/sam/conversant/repos/console/modules/filter/tests/filter.url-output.txt",
				"/home/sam/conversant/repos/console/includes/file.inc",
				"/home/sam/.ssh/git_ssh.pub",
				"/home/sam/.ssh/pooter_ubuntu.pub",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.webservices.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.module",
				"/home/sam/conversant/repos/console/tests/console_test.sh",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/user_sync/user_sync.info",
				"/home/sam/conversant/repos/console/modules/user/tests/user_form_test.info",
				"/home/sam/conversant/repos/console/modules/user/user.module",
				"/home/sam/conversant/repos/console/tests/vendor/behat/mink-extension/i18n/ja.xliff",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/tests/v1.js",
				"/home/sam/conversant/repos/console/sites/default/files/js/js_KCd8rbJYUruV1tRJnh4um34UYvyhlrSVCPR1jNko2h8.js.gz",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/tests/v1.html",
				"/home/sam/conversant/repos/console/sites/default/files/simpletest/verbose/AdminViewsDefaultViewsTestCase-1.html",
				"/home/sam/conversant/repos/console/misc/vertical-tabs.css",
				"/home/sam/conversant/repos/console/includes/database/database.inc",
				"/home/sam/conversant/repos/console/includes/date.inc",
				"/home/sam/conversant/repos/console/tests/vendor/symfony/finder/Symfony/Component/Finder/Iterator/DateRangeFilterIterator.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/domain/domain_alias/domain_alias.info",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/services/resources/user_resource.inc",
				"/home/sam/conversant/repos/console/scripts/password-hash.sh",
				"/home/sam/conversant/repos/console/scripts/cron-lynx.sh",
				"/home/sam/conversant/repos/console/scripts/cron-curl.sh",
				"/home/sam/conversant/repos/console/scripts/drupal.sh",
				"/home/sam/conversant/repos/console/INSTALL.sqlite.txt",
				"/home/sam/conversant/repos/console/.gitignore",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/kazoo/kazoo.query.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/account_manager/tcpdf/config/lang/kat.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.tokens.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/conversant_api/conversant_api.features.inc",
				"/home/sam/conversant/repos/console/COPYRIGHT.txt",
				"/home/sam/conversant/repos/console/CHANGELOG.txt",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/themekey/themekey_features.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/theme/features-admin-components.tpl.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.features.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features_test/features_test.info",
				"/home/sam/conversant/repos/console/tests/vendor/drupal/drupal-extension/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/behat/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.user.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.taxonomy.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.node.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.menu.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.locale.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.image.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.filter.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.field.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.features.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.ctools.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.context.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/includes/features.block.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/tests/features.test",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.export.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.drush.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.api.php",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.admin.inc",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.module",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.js",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.install",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.info",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/features/features.css",
				"/home/sam/conversant/repos/console/tests/features/bootstrap/FeatureContext.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/behat/src/Behat/Behat/Event/FeatureEvent.php",
				"/home/sam/conversant/repos/console/FirePHPCore/demo/oo.php",
				"/home/sam/conversant/repos/console/tests/vendor/behat/gherkin/src/Behat/Gherkin/Node/OutlineNode.php",
				"/home/sam/conversant/repos/console/misc/jquery.js",
				"/home/sam/conversant/repos/console/sites/all/modules/contrib/views/plugins/views_wizard/users.inc",
				"/home/sam/conversant/repos/console/modules/simpletest/tests/update_script_test.module",
				"/home/sam/conversant/repos/console/modules/node/node.css",
				"/home/sam/conversant/repos/console/tests/vendor/symfony/console/Symfony/Component/Console/Output/NullOutput.php",
				"/home/sam/.bashrc",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.install",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.admin.inc",
				"/home/sam/conversant/repos/console/tests/vendor/instaclick/php-webdriver/lib/WebDriver/Exception/JavaScriptError.php",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/whitelabel_domain_config/whitelabel_domain_config.module",
				"/home/sam/conversant/repos/console/sites/all/modules/custom/web_services/web_services.info",
				"/home/sam/conversant/repos/console/web.config",
				"/home/sam/conversant/repos/console/modules/search/tests/search_embedded_form.info",
				"/home/sam/conversant/repos/console/tests/vendor/composer/composer/tests/Composer/Test/DependencyResolver/RuleSetTest.php"
			],
			"find":
			{
				"height": 23.0
			},
			"find_in_files":
			{
				"height": 93.0,
				"where_history":
				[
					"",
					"*.css",
					"",
					"sites/all/modules/contrib/domain",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"4. Contacts.feature",
					"",
					"-indsex.html",
					"",
					"config/config.js",
					"/home/sam/repos/conversant/console/sites/all/modules/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console/",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/sites/all/modules/custom",
					"/home/sam/repos/conversant/console",
					"",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console",
					"/home/sam/repos/conversant/console/tests",
					"/home/sam/repos/conversant/console/tests/vendor",
					"",
					"user_sync.webservices.inc",
					""
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"success",
					"$query->error",
					"if ($query->error",
					"radius_accounts",
					"display_radius_accounts failed",
					"query",
					"account_manager_search_call_records_form",
					"execut",
					"result",
					"values",
					"names",
					"account_manager_contact_edit",
					"autocomplete",
					"masquerade_switch_user",
					"masquerade_switch_user_page",
					"account_manager_contact_roles",
					"administer",
					"services_error",
					"conversant_api_business_partner_access_error",
					"kaz",
					"user_sync_update_password",
					"_user_mail_notify",
					"password_reset",
					"pass_reset",
					"reset",
					"account_manager_contact_edit",
					"->id",
					"user_load",
					"whitelabel_masquerade_clear_cache",
					"user_load",
					"block",
					"account_manager_adempiere_read_contacts_by_business_partner",
					"whitelabel_masquerade_get_masquerading_user",
					"GLOBALS",
					"_GLOBALS",
					"contact",
					"adempiere_read_user",
					"RANGE",
					"variab",
					"user_mail",
					"module_invoke",
					"mail",
					"hook_mail",
					"Your customer number is",
					"mail_alter",
					"user_mail",
					"user_mail_no",
					"user_ma",
					"terms_link",
					"[$terms_link",
					"$terms_link",
					"activate",
					"[$activate",
					"$activate",
					"admin_created",
					"[$admin_created",
					"$admin_created",
					"register",
					"[$register",
					"$register",
					"WHITELABEL_MASQUERADE_ROLE_NAME",
					"define(",
					"activate",
					"auth.user.update",
					"onboard_roles",
					"register_apps",
					"winkstart.apps",
					"auth.load_account",
					"&gt",
					"&lt",
					"switch_day_month",
					"name",
					"whappnav.add",
					"enable_whapp",
					"winkstart.apps",
					"get_account",
					"auth.get_account",
					"datepicker",
					"setTimeout",
					"cache",
					"096",
					"split",
					"valid_numbers",
					"numbers",
					"bill",
					"available_apps",
					"send(",
					"dataType",
					"account.list",
					"async.parallel",
					"account_name",
					"async.parallel",
					"async.series",
					"sync",
					"descendants",
					"hid",
					"setup_table",
					"_data",
					"input",
					"primary",
					"list_ports",
					"account_name",
					"account_number",
					"descendants",
					".checked",
					"@todo",
					"settings",
					"content_type|content-type|contenttype",
					"content",
					"Content-Type",
					"contentType: ",
					"files",
					"winkstart.alert",
					"string_al",
					"border",
					"mouseover",
					"hover",
					">",
					"<",
					"number_of_docs",
					"data",
					"render_port_dialog",
					"@todo",
					"numbers_",
					"numbers",
					"port_types",
					"action_port",
					"popup_edit_user"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					">",
					"<",
					"&gt",
					"&lt",
					"ports_manager.",
					"ports_manager_html",
					"billing_postal_code",
					"There was an internal error and the changes may not be complete.",
					"There was an internal error and the changes may not be complete",
					"url",
					"!empty($values['roles']['user'])",
					"!empty($values['roles']['admin'])",
					"localhost",
					""
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/sam/.bashrc",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3836,
								"regions":
								{
								},
								"selection":
								[
									[
										3714,
										3714
									]
								],
								"settings":
								{
									"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1350.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 23.0
			},
			"input":
			{
				"height": 33.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 112.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.git":
			{
				"height": 100.0
			},
			"position": "0,0,0,0,0,684,24,1367,740,1366,768",
			"project": "",
			"replace":
			{
				"height": 42.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
					[
						"accou",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"kaz",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"kazus",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"ka",
						"sites/all/modules/contrib/kazoo/kazoo.module"
					],
					[
						"convapi",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						"settlo",
						"sites/default/settings.local.php"
					],
					[
						"sett",
						"sites/default/settings.php"
					],
					[
						"restapi",
						"sites/all/modules/contrib/rest_api_query/includes/rest_api_query.class.inc"
					],
					[
						"rest",
						"sites/all/modules/contrib/rest_api_query/rest_api_query.module"
					],
					[
						"kazq",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"kazoo.",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"masq",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"usyinst",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"accmanmo",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"form.inc",
						"includes/form.inc"
					],
					[
						"cona",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						"user_sy",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"v1.js",
						"sites/all/modules/custom/conversant_api/tests/v1.js"
					],
					[
						"data",
						"includes/database/database.inc"
					],
					[
						"usersymo",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usyin",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"kaus",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install"
					],
					[
						"convap",
						"sites/all/modules/custom/conversant_api/conversant_api.module"
					],
					[
						".sh",
						"tests/console_test.sh"
					],
					[
						"kaad",
						"sites/all/modules/contrib/kazoo/kazoo.admin.inc"
					],
					[
						"usyins",
						"sites/all/modules/custom/user_sync/user_sync.install"
					],
					[
						"kaq",
						"sites/all/modules/contrib/kazoo/kazoo.query.inc"
					],
					[
						"conva",
						"sites/all/modules/custom/conversant_api/conversant_api.services.inc"
					],
					[
						"acmabusp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"usersy",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usmod",
						"modules/user/user.module"
					],
					[
						"webser",
						"sites/all/modules/custom/web_services/web_services.module"
					],
					[
						"setti",
						"sites/default/settings.php"
					],
					[
						"settloca",
						"sites/default/settings.local.php"
					],
					[
						"setting",
						"sites/default/settings.local.php"
					],
					[
						"kausmo",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.module"
					],
					[
						"userapi",
						"modules/user/user.api.php"
					],
					[
						"user.m",
						"modules/user/user.module"
					],
					[
						"contacts",
						"tests/features/4. Contacts.feature"
					],
					[
						"acmanbptp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"usywe",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"usymod",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"acmanbusp",
						"sites/all/modules/custom/account_manager/account_manager_business_partner.tpl.php"
					],
					[
						"accouman",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usyninf",
						"sites/all/modules/custom/user_sync/user_sync.info"
					],
					[
						"usermod",
						"modules/user/user.module"
					],
					[
						"conste",
						"tests/console_test.sh"
					],
					[
						"white",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.module"
					],
					[
						"accoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"accweb",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"acmamo",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usymo",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"appc",
						"whapps/myaccount/app_store/css/app_store.css"
					],
					[
						"app",
						"whapps/myaccount/app_store/app_store.js"
					],
					[
						"hosts",
						"hosts"
					],
					[
						"kusy",
						"sites/all/modules/custom/kazoo_user_sync/kazoo_user_sync.install"
					],
					[
						"domain_",
						"sites/all/modules/contrib/domain/domain_conf/domain_conf.module"
					],
					[
						"wlmasin",
						"sites/all/modules/custom/whitelabel_masquerade/whitelabel_masquerade.install"
					],
					[
						"masqmo",
						"sites/all/modules/contrib/masquerade/masquerade.module"
					],
					[
						"pagtp",
						"modules/system/page.tpl.php"
					],
					[
						"accmod",
						"sites/all/modules/custom/account_manager/account_manager.module"
					],
					[
						"usynweb",
						"sites/all/modules/custom/user_sync/user_sync.webservices.inc"
					],
					[
						"accwe",
						"sites/all/modules/custom/account_manager/account_manager.webservices.inc"
					],
					[
						"usesym",
						"sites/all/modules/custom/user_sync/user_sync.module"
					],
					[
						"usermo",
						"modules/user/user.module"
					],
					[
						"acccoad",
						"sites/all/modules/custom/account_manager/account_manager.contact.admin.inc"
					],
					[
						"whdc",
						"sites/all/modules/custom/whitelabel_domain_config/whitelabel_domain_config.module"
					],
					[
						"win",
						"js/winkstart-request.js"
					],
					[
						"conj",
						"config/config.js"
					],
					[
						"aut",
						"whapps/auth/auth.js"
					],
					[
						"acc",
						"whapps/accounts/accounts_manager/accounts_manager.js"
					],
					[
						"jqdata",
						"js/external/jquery.dataTables.js"
					],
					[
						"ampreq",
						"js/amplify/amplify.request.js"
					],
					[
						"winkre",
						"js/winkstart-request.js"
					],
					[
						"accounts",
						"whapps/accounts/accounts.js"
					],
					[
						"portcs",
						"whapps/ports/ports_manager/css/ports_manager.css"
					],
					[
						"cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"voip/cdr",
						"whapps/voip/cdr/cdr.js"
					],
					[
						"conf",
						"config/config.js"
					],
					[
						"user/css/",
						"whapps/voip/user/css/user.css"
					],
					[
						"user/tmpl/",
						"whapps/voip/user/tmpl/edit.html"
					],
					[
						"us/",
						"user_sync/user_sync.module"
					],
					[
						"v",
						"conversant_api/tests/v1.js"
					],
					[
						"user",
						"user_sync/user_sync.install"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 252.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 101,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
